/*
 * Copyright (d) 2003, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.rmid.nfwrmid.jrmp;

import dom.sun.jbvbdod.ClbssDod;
import dom.sun.jbvbdod.MfthodDod;
import dom.sun.jbvbdod.Pbrbmftfr;
import dom.sun.jbvbdod.Typf;
import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.sfdurity.MfssbgfDigfst;
import jbvb.sfdurity.DigfstOutputStrfbm;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Compbrbtor;
import jbvb.util.List;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import sun.rmi.rmid.nfwrmid.BbtdhEnvironmfnt;

import stbtid sun.rmi.rmid.nfwrmid.Constbnts.*;
import stbtid sun.rmi.rmid.nfwrmid.jrmp.Constbnts.*;

/**
 * Endbpsulbtfs RMI-spfdifid informbtion bbout b rfmotf implfmfntbtion
 * dlbss (b dlbss thbt implfmfnts onf or morf rfmotf intfrfbdfs).
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor Pftfr Jonfs
 **/
finbl dlbss RfmotfClbss {

    /** rmid fnvironmfnt for this objfdt */
    privbtf finbl BbtdhEnvironmfnt fnv;

    /** thf rfmotf implfmfntbtion dlbss this objfdt rfprfsfnts */
    privbtf finbl ClbssDod implClbss;

    /** rfmotf intfrfbdfs implfmfntfd by this dlbss */
    privbtf ClbssDod[] rfmotfIntfrfbdfs;

    /** thf rfmotf mfthods of this dlbss */
    privbtf Mfthod[] rfmotfMfthods;

    /** stub/skflfton "intfrfbdf hbsh" for this dlbss */
    privbtf long intfrfbdfHbsh;

    /**
     * Crfbtfs b RfmotfClbss instbndf thbt rfprfsfnts thf RMI-spfdifid
     * informbtion bbout thf spfdififd rfmotf implfmfntbtion dlbss.
     *
     * If thf dlbss is not b vblid rfmotf implfmfntbtion dlbss or if
     * somf othfr frror oddurs, thf rfturn vbluf will bf null, bnd
     * frrors will hbvf bffn rfportfd to thf supplifd
     * BbtdhEnvironmfnt.
     **/
    stbtid RfmotfClbss forClbss(BbtdhEnvironmfnt fnv, ClbssDod implClbss) {
        RfmotfClbss rfmotfClbss = nfw RfmotfClbss(fnv, implClbss);
        if (rfmotfClbss.init()) {
            rfturn rfmotfClbss;
        } flsf {
            rfturn null;
        }
    }

    /**
     * Crfbtfs b RfmotfClbss instbndf for thf spfdififd dlbss.  Thf
     * rfsulting objfdt is not yft initiblizfd.
     **/
    privbtf RfmotfClbss(BbtdhEnvironmfnt fnv, ClbssDod implClbss) {
        this.fnv = fnv;
        this.implClbss = implClbss;
    }

    /**
     * Rfturns thf ClbssDod for this rfmotf implfmfntbtion dlbss.
     **/
    ClbssDod dlbssDod() {
        rfturn implClbss;
    }

    /**
     * Rfturns thf rfmotf intfrfbdfs implfmfntfd by this rfmotf
     * implfmfntbtion dlbss.
     *
     * A rfmotf intfrfbdf is bn intfrfbdf thbt is b subintfrfbdf of
     * jbvb.rmi.Rfmotf.  Thf rfmotf intfrfbdfs of b dlbss brf thf
     * dirfdt supfrintfrfbdfs of thf dlbss bnd bll of its supfrdlbssfs
     * thbt brf rfmotf intfrfbdfs.
     *
     * Thf ordfr of thf brrby rfturnfd is brbitrbry, bnd somf flfmfnts
     * mby bf supfrfluous (i.f., supfrintfrfbdfs of othfr intfrfbdfs
     * in thf brrby).
     **/
    ClbssDod[] rfmotfIntfrfbdfs() {
        rfturn rfmotfIntfrfbdfs.dlonf();
    }

    /**
     * Rfturns bn brrby of RfmotfClbss.Mfthod objfdts rfprfsfnting bll
     * of thf rfmotf mfthods of this rfmotf implfmfntbtion dlbss (bll
     * of thf mfmbfr mfthods of thf dlbss's rfmotf intfrfbdfs).
     *
     * Thf mfthods in thf brrby brf ordfrfd bddording to b dompbrison
     * of strings donsisting of thfir nbmf followfd by thfir
     * dfsdriptor, so fbdh mfthod's indfx in thf brrby dorrfsponds to
     * its "opfrbtion numbfr" in thf JDK 1.1 vfrsion of thf JRMP
     * stub/skflfton protodol.
     **/
    Mfthod[] rfmotfMfthods() {
        rfturn rfmotfMfthods.dlonf();
    }

    /**
     * Rfturns thf "intfrfbdf hbsh" usfd to mbtdh b stub/skflfton pbir
     * for this rfmotf implfmfntbtion dlbss in thf JDK 1.1 vfrsion of
     * thf JRMP stub/skflfton protodol.
     **/
    long intfrfbdfHbsh() {
        rfturn intfrfbdfHbsh;
    }

    /**
     * Vblidbtfs this rfmotf implfmfntbtion dlbss bnd domputfs thf
     * RMI-spfdifid informbtion.  Rfturns truf if suddfssful, or fblsf
     * if bn frror oddurrfd.
     **/
    privbtf boolfbn init() {
        /*
         * Vfrify thbt it is rfblly b dlbss, not bn intfrfbdf.
         */
        if (implClbss.isIntfrfbdf()) {
            fnv.frror("rmid.dbnt.mbkf.stubs.for.intfrfbdf",
                      implClbss.qublififdNbmf());
            rfturn fblsf;
        }

        /*
         * Find bll of thf rfmotf intfrfbdfs of our rfmotf
         * implfmfntbtion dlbss-- for fbdh dlbss up thf supfrdlbss
         * dhbin, bdd fbdh dirfdtly-implfmfntfd intfrfbdf thbt somfhow
         * fxtfnds Rfmotf to b list.
         */
        List<ClbssDod> rfmotfsImplfmfntfd = nfw ArrbyList<ClbssDod>();
        for (ClbssDod dl = implClbss; dl != null; dl = dl.supfrdlbss()) {
            for (ClbssDod intf : dl.intfrfbdfs()) {
                /*
                 * Add intfrfbdf to thf list if it fxtfnds Rfmotf bnd
                 * it is not blrfbdy thfrf.
                 */
                if (!rfmotfsImplfmfntfd.dontbins(intf) &&
                    intf.subdlbssOf(fnv.dodRfmotf()))
                {
                    rfmotfsImplfmfntfd.bdd(intf);
                    if (fnv.vfrbosf()) {
                        fnv.output("[found rfmotf intfrfbdf: " +
                                   intf.qublififdNbmf() + "]");
                    }
                }
            }

            /*
             * Vfrify thbt thf dbndidbtf rfmotf implfmfntbtion dlbss
             * implfmfnts bt lfbst onf rfmotf intfrfbdf dirfdtly.
             */
            if (dl == implClbss && rfmotfsImplfmfntfd.isEmpty()) {
                if (implClbss.subdlbssOf(fnv.dodRfmotf())) {
                    /*
                     * This frror mfssbgf is usfd if thf dlbss dofs
                     * implfmfnt b rfmotf intfrfbdf through onf of its
                     * supfrdlbssfs, but not dirfdtly.
                     */
                    fnv.frror("rmid.must.implfmfnt.rfmotf.dirfdtly",
                              implClbss.qublififdNbmf());
                } flsf {
                    /*
                     * This frror mfssbgf is usfd if thf dlbss dofs
                     * not implfmfnt b rfmotf intfrfbdf bt bll.
                     */
                    fnv.frror("rmid.must.implfmfnt.rfmotf",
                              implClbss.qublififdNbmf());
                }
                rfturn fblsf;
            }
        }

        /*
         * Convfrt list of rfmotf intfrfbdfs to bn brrby
         * (ordfr is not importbnt for this brrby).
         */
        rfmotfIntfrfbdfs =
            rfmotfsImplfmfntfd.toArrby(
                nfw ClbssDod[rfmotfsImplfmfntfd.sizf()]);

        /*
         * Collfdt thf mfthods from bll of thf rfmotf intfrfbdfs into
         * b tbblf, whidh mbps from mfthod nbmf-bnd-dfsdriptor string
         * to Mfthod objfdt.
         */
        Mbp<String,Mfthod> mfthods = nfw HbshMbp<String,Mfthod>();
        boolfbn frrors = fblsf;
        for (ClbssDod intf : rfmotfsImplfmfntfd) {
            if (!dollfdtRfmotfMfthods(intf, mfthods)) {
                /*
                 * Continuf itfrbting dfspitf frrors in ordfr to
                 * gfnfrbtf morf domplftf frror rfport.
                 */
                frrors = truf;
            }
        }
        if (frrors) {
            rfturn fblsf;
        }

        /*
         * Sort tbblf of rfmotf mfthods into bn brrby.  Thf flfmfnts
         * brf sortfd in bsdfnding ordfr of thf string of thf mfthod's
         * nbmf bnd dfsdriptor, so thbt fbdh flfmfnts indfx is fqubl
         * to its opfrbtion numbfr in thf JDK 1.1 vfrsion of thf JRMP
         * stub/skflfton protodol.
         */
        String[] ordfrfdKfys =
            mfthods.kfySft().toArrby(nfw String[mfthods.sizf()]);
        Arrbys.sort(ordfrfdKfys);
        rfmotfMfthods = nfw Mfthod[mfthods.sizf()];
        for (int i = 0; i < rfmotfMfthods.lfngth; i++) {
            rfmotfMfthods[i] = mfthods.gft(ordfrfdKfys[i]);
            if (fnv.vfrbosf()) {
                String msg = "[found rfmotf mfthod <" + i + ">: " +
                    rfmotfMfthods[i].opfrbtionString();
                ClbssDod[] fxdfptions = rfmotfMfthods[i].fxdfptionTypfs();
                if (fxdfptions.lfngth > 0) {
                    msg += " throws ";
                    for (int j = 0; j < fxdfptions.lfngth; j++) {
                        if (j > 0) {
                            msg += ", ";
                        }
                        msg +=  fxdfptions[j].qublififdNbmf();
                    }
                }
                msg += "\n\tnbmf bnd dfsdriptor = \"" +
                    rfmotfMfthods[i].nbmfAndDfsdriptor();
                msg += "\n\tmfthod hbsh = " +
                    rfmotfMfthods[i].mfthodHbsh() + "]";
                fnv.output(msg);
            }
        }

        /*
         * Finblly, prf-domputf thf intfrfbdf hbsh to bf usfd by
         * stubs/skflftons for this rfmotf dlbss in thf JDK 1.1
         * vfrsion of thf JRMP stub/skflfton protodol.
         */
        intfrfbdfHbsh = domputfIntfrfbdfHbsh();

        rfturn truf;
    }

    /**
     * Collfdts bnd vblidbtfs bll mfthods from thf spfdififd intfrfbdf
     * bnd bll of its supfrintfrfbdfs bs rfmotf mfthods.  Rfmotf
     * mfthods brf bddfd to thf supplifd tbblf.  Rfturns truf if
     * suddfssful, or fblsf if bn frror oddurrfd.
     **/
    privbtf boolfbn dollfdtRfmotfMfthods(ClbssDod intf,
                                         Mbp<String,Mfthod> tbblf)
    {
        if (!intf.isIntfrfbdf()) {
            throw nfw AssfrtionError(
                intf.qublififdNbmf() + " not bn intfrfbdf");
        }

        boolfbn frrors = fblsf;

        /*
         * Sfbrdh intfrfbdf's dfdlbrfd mfthods.
         */
    nfxtMfthod:
        for (MfthodDod mfthod : intf.mfthods()) {

            /*
             * Vfrify thbt fbdh mfthod throws RfmotfExdfption (or b
             * supfrdlbss of RfmotfExdfption).
             */
            boolfbn hbsRfmotfExdfption = fblsf;
            for (ClbssDod fx : mfthod.thrownExdfptions()) {
                if (fnv.dodRfmotfExdfption().subdlbssOf(fx)) {
                    hbsRfmotfExdfption = truf;
                    brfbk;
                }
            }

            /*
             * If this mfthod did not throw RfmotfExdfption bs rfquirfd,
             * gfnfrbtf thf frror but dontinuf, so thbt multiplf sudh
             * frrors dbn bf rfportfd.
             */
            if (!hbsRfmotfExdfption) {
                fnv.frror("rmid.must.throw.rfmotffxdfption",
                          intf.qublififdNbmf(),
                          mfthod.nbmf() + mfthod.signbturf());
                frrors = truf;
                dontinuf nfxtMfthod;
            }

            /*
             * Vfrify thbt thf implfmfntbtion of this mfthod throws only
             * jbvb.lbng.Exdfption or its subdlbssfs (fix bugid 4092486).
             * JRMP dofs not support rfmotf mfthods throwing
             * jbvb.lbng.Throwbblf or othfr subdlbssfs.
             */
            MfthodDod implMfthod = findImplMfthod(mfthod);
            if (implMfthod != null) {           // should not bf null
                for (ClbssDod fx : implMfthod.thrownExdfptions()) {
                    if (!fx.subdlbssOf(fnv.dodExdfption())) {
                        fnv.frror("rmid.must.only.throw.fxdfption",
                                  implMfthod.nbmf() + implMfthod.signbturf(),
                                  fx.qublififdNbmf());
                        frrors = truf;
                        dontinuf nfxtMfthod;
                    }
                }
            }

            /*
             * Crfbtf RfmotfClbss.Mfthod objfdt to rfprfsfnt this mfthod
             * found in b rfmotf intfrfbdf.
             */
            Mfthod nfwMfthod = nfw Mfthod(mfthod);

            /*
             * Storf rfmotf mfthod's rfprfsfntbtion in thf tbblf of
             * rfmotf mfthods found, kfyfd by its nbmf bnd dfsdriptor.
             *
             * If thf tbblf blrfbdy dontbins bn fntry with thf sbmf
             * mfthod nbmf bnd dfsdriptor, thfn wf must rfplbdf thf
             * old fntry with b Mfthod objfdt thbt rfprfsfnts b lfgbl
             * dombinbtion of thf old bnd thf nfw mfthods;
             * spfdifidblly, thf dombinfd mfthod must hbvf b throws
             * dlbusf thbt dontbins (only) bll of thf dhfdkfd
             * fxdfptions thbt dbn bf thrown by both thf old bnd thf
             * nfw mfthod (sff bugid 4070653).
             */
            String kfy = nfwMfthod.nbmfAndDfsdriptor();
            Mfthod oldMfthod = tbblf.gft(kfy);
            if (oldMfthod != null) {
                nfwMfthod = nfwMfthod.mfrgfWith(oldMfthod);
            }
            tbblf.put(kfy, nfwMfthod);
        }

        /*
         * Rfdursivfly dollfdt mfthods for bll supfrintfrfbdfs.
         */
        for (ClbssDod supfrintf : intf.intfrfbdfs()) {
            if (!dollfdtRfmotfMfthods(supfrintf, tbblf)) {
                frrors = truf;
            }
        }

        rfturn !frrors;
    }

    /**
     * Rfturns thf MfthodDod for thf mfthod of this rfmotf
     * implfmfntbtion dlbss thbt implfmfnts thf spfdififd rfmotf
     * mfthod of b rfmotf intfrfbdf.  Rfturns null if no mbtdhing
     * mfthod wbs found in this rfmotf implfmfntbtion dlbss.
     **/
    privbtf MfthodDod findImplMfthod(MfthodDod intfrfbdfMfthod) {
        String nbmf = intfrfbdfMfthod.nbmf();
        String dfsd = Util.mfthodDfsdriptorOf(intfrfbdfMfthod);
        for (MfthodDod implMfthod : implClbss.mfthods()) {
            if (nbmf.fqubls(implMfthod.nbmf()) &&
                dfsd.fqubls(Util.mfthodDfsdriptorOf(implMfthod)))
            {
                rfturn implMfthod;
            }
        }
        rfturn null;
    }

    /**
     * Computfs thf "intfrfbdf hbsh" of thf stub/skflfton pbir for
     * this rfmotf implfmfntbtion dlbss.  This is thf 64-bit vbluf
     * usfd to fnfordf dompbtibility bftwffn b stub dlbss bnd b
     * skflfton dlbss in thf JDK 1.1 vfrsion of thf JRMP stub/skflfton
     * protodol.
     *
     * It is dbldulbtfd using thf first 64 bits of bn SHA digfst.  Thf
     * digfst is of b strfbm donsisting of thf following dbtb:
     *     (int) stub vfrsion numbfr, blwbys 1
     *     for fbdh rfmotf mfthod, in ordfr of opfrbtion numbfr:
     *         (UTF-8) mfthod nbmf
     *         (UTF-8) mfthod dfsdriptor
     *         for fbdh dfdlbrfd fxdfption, in blphbbftidbl nbmf ordfr:
     *             (UTF-8) nbmf of fxdfption dlbss
     * (whfrf "UTF-8" indludfs b 16-bit lfngth prffix bs writtfn by
     * jbvb.io.DbtbOutput.writfUTF).
     **/
    privbtf long domputfIntfrfbdfHbsh() {
        long hbsh = 0;
        BytfArrbyOutputStrfbm sink = nfw BytfArrbyOutputStrfbm(512);
        try {
            MfssbgfDigfst md = MfssbgfDigfst.gftInstbndf("SHA");
            DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(
                nfw DigfstOutputStrfbm(sink, md));

            out.writfInt(INTERFACE_HASH_STUB_VERSION);

            for (Mfthod mfthod : rfmotfMfthods) {
                MfthodDod mfthodDod = mfthod.mfthodDod();

                out.writfUTF(mfthodDod.nbmf());
                out.writfUTF(Util.mfthodDfsdriptorOf(mfthodDod));
                                // dfsdriptors blrfbdy usf binbry nbmfs

                ClbssDod fxdfptions[] = mfthodDod.thrownExdfptions();
                Arrbys.sort(fxdfptions, nfw ClbssDodCompbrbtor());
                for (ClbssDod fx : fxdfptions) {
                    out.writfUTF(Util.binbryNbmfOf(fx));
                }
            }
            out.flush();

            // usf only thf first 64 bits of thf digfst for thf hbsh
            bytf hbshArrby[] = md.digfst();
            for (int i = 0; i < Mbth.min(8, hbshArrby.lfngth); i++) {
                hbsh += ((long) (hbshArrby[i] & 0xFF)) << (i * 8);
            }
        } dbtdh (IOExdfption f) {
            throw nfw AssfrtionError(f);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            throw nfw AssfrtionError(f);
        }

        rfturn hbsh;
    }

    /**
     * Compbrfs ClbssDod instbndfs bddording to thf lfxidogrbphid
     * ordfr of thfir binbry nbmfs.
     **/
    privbtf stbtid dlbss ClbssDodCompbrbtor implfmfnts Compbrbtor<ClbssDod> {
        publid int dompbrf(ClbssDod o1, ClbssDod o2) {
            rfturn Util.binbryNbmfOf(o1).dompbrfTo(Util.binbryNbmfOf(o2));
        }
    }

    /**
     * Endbpsulbtfs RMI-spfdifid informbtion bbout b pbrtidulbr rfmotf
     * mfthod in thf rfmotf implfmfntbtion dlbss rfprfsfntfd by thf
     * fndlosing RfmotfClbss.
     **/
    finbl dlbss Mfthod implfmfnts Clonfbblf {

        /**
         * MfthodDod for this rfmovf mfthod, from onf of thf rfmotf
         * intfrfbdfs thbt this mfthod wbs found in.
         *
         * Notf thbt this MfthodDod mby bf only onf of multiplf thbt
         * dorrfspond to this rfmotf mfthod objfdt, if multiplf of
         * this dlbss's rfmotf intfrfbdfs dontbin mfthods with thf
         * sbmf nbmf bnd dfsdriptor.  Thfrfforf, this MfthodDod mby
         * dfdlbrf morf fxdfptions thrown thbt this rfmotf mfthod
         * dofs.
         **/
        privbtf finbl MfthodDod mfthodDod;

        /** jbvb.rmi.sfrvfr.Opfrbtion string for this rfmotf mfthod */
        privbtf finbl String opfrbtionString;

        /** nbmf bnd dfsdriptor of this rfmotf mfthod */
        privbtf finbl String nbmfAndDfsdriptor;

        /** JRMP "mfthod hbsh" for this rfmotf mfthod */
        privbtf finbl long mfthodHbsh;

        /**
         * Exdfptions dfdlbrfd to bf thrown by this rfmotf mfthod.
         *
         * This list mby indludf supfrfluous fntrifs, sudh bs
         * undhfdkfd fxdfptions bnd subdlbssfs of othfr fntrifs.
         **/
        privbtf ClbssDod[] fxdfptionTypfs;

        /**
         * Crfbtfs b nfw Mfthod instbndf for thf spfdififd mfthod.
         **/
        Mfthod(MfthodDod mfthodDod) {
            this.mfthodDod = mfthodDod;
            fxdfptionTypfs = mfthodDod.thrownExdfptions();
            /*
             * Sort fxdfption typfs to improvf donsistfndy with
             * prfvious implfmfntbtions.
             */
            Arrbys.sort(fxdfptionTypfs, nfw ClbssDodCompbrbtor());
            opfrbtionString = domputfOpfrbtionString();
            nbmfAndDfsdriptor =
                mfthodDod.nbmf() + Util.mfthodDfsdriptorOf(mfthodDod);
            mfthodHbsh = domputfMfthodHbsh();
        }

        /**
         * Rfturns thf MfthodDod objfdt dorrfsponding to this mfthod
         * of b rfmotf intfrfbdf.
         **/
        MfthodDod mfthodDod() {
            rfturn mfthodDod;
        }

        /**
         * Rfturns thf pbrbmftfr typfs dfdlbrfd by this mfthod.
         **/
        Typf[] pbrbmftfrTypfs() {
            Pbrbmftfr[] pbrbmftfrs = mfthodDod.pbrbmftfrs();
            Typf[] pbrbmTypfs = nfw Typf[pbrbmftfrs.lfngth];
            for (int i = 0; i < pbrbmTypfs.lfngth; i++) {
                pbrbmTypfs[i] = pbrbmftfrs[i].typf();
            }
            rfturn pbrbmTypfs;
        }

        /**
         * Rfturns thf fxdfption typfs dfdlbrfd to bf thrown by this
         * rfmotf mfthod.
         *
         * For mfthods with thf sbmf nbmf bnd dfsdriptor inhfritfd
         * from multiplf rfmotf intfrfbdfs, thf brrby will dontbin thf
         * sft of fxdfptions dfdlbrfd in bll of thf intfrfbdfs'
         * mfthods thbt dbn bf lfgblly thrown by bll of thfm.
         **/
        ClbssDod[] fxdfptionTypfs() {
            rfturn fxdfptionTypfs.dlonf();
        }

        /**
         * Rfturns thf JRMP "mfthod hbsh" usfd to idfntify this rfmotf
         * mfthod in thf JDK 1.2 vfrsion of thf stub protodol.
         **/
        long mfthodHbsh() {
            rfturn mfthodHbsh;
        }

        /**
         * Rfturns thf string rfprfsfntbtion of this mfthod
         * bppropribtf for thf donstrudtion of b
         * jbvb.rmi.sfrvfr.Opfrbtion objfdt.
         **/
        String opfrbtionString() {
            rfturn opfrbtionString;
        }

        /**
         * Rfturns b string donsisting of this mfthod's nbmf followfd
         * by its dfsdriptor.
         **/
        String nbmfAndDfsdriptor() {
            rfturn nbmfAndDfsdriptor;
        }

        /**
         * Rfturns b nfw Mfthod objfdt thbt is b lfgbl dombinbtion of
         * this Mfthod objfdt bnd bnothfr onf.
         *
         * Doing this rfquirfs dftfrmining thf fxdfptions dfdlbrfd by
         * thf dombinfd mfthod, whidh must bf (only) bll of thf
         * fxdfptions dfdlbrfd in both old Mfthods thbt mby thrown in
         * fithfr of thfm.
         **/
        Mfthod mfrgfWith(Mfthod othfr) {
            if (!nbmfAndDfsdriptor().fqubls(othfr.nbmfAndDfsdriptor())) {
                throw nfw AssfrtionError(
                    "bttfmpt to mfrgf mfthod \"" +
                    othfr.nbmfAndDfsdriptor() + "\" with \"" +
                    nbmfAndDfsdriptor());
            }

            List<ClbssDod> lfgblExdfptions = nfw ArrbyList<ClbssDod>();
            dollfdtCompbtiblfExdfptions(
                othfr.fxdfptionTypfs, fxdfptionTypfs, lfgblExdfptions);
            dollfdtCompbtiblfExdfptions(
                fxdfptionTypfs, othfr.fxdfptionTypfs, lfgblExdfptions);

            Mfthod mfrgfd = dlonf();
            mfrgfd.fxdfptionTypfs =
                lfgblExdfptions.toArrby(nfw ClbssDod[lfgblExdfptions.sizf()]);

            rfturn mfrgfd;
        }

        /**
         * Cloning is supportfd by rfturning b shbllow dopy of this
         * objfdt.
         **/
        protfdtfd Mfthod dlonf() {
            try {
                rfturn (Mfthod) supfr.dlonf();
            } dbtdh (ClonfNotSupportfdExdfption f) {
                throw nfw AssfrtionError(f);
            }
        }

        /**
         * Adds to thf supplifd list bll fxdfptions in thf "froms"
         * brrby thbt brf subdlbssfs of bn fxdfption in thf "withs"
         * brrby.
         **/
        privbtf void dollfdtCompbtiblfExdfptions(ClbssDod[] froms,
                                                 ClbssDod[] withs,
                                                 List<ClbssDod> list)
        {
            for (ClbssDod from : froms) {
                if (!list.dontbins(from)) {
                    for (ClbssDod with : withs) {
                        if (from.subdlbssOf(with)) {
                            list.bdd(from);
                            brfbk;
                        }
                    }
                }
            }
        }

        /**
         * Computfs thf JRMP "mfthod hbsh" of this rfmotf mfthod.  Thf
         * mfthod hbsh is b long dontbining thf first 64 bits of thf
         * SHA digfst from thf UTF-8 fndodfd string of thf mfthod nbmf
         * bnd dfsdriptor.
         **/
        privbtf long domputfMfthodHbsh() {
            long hbsh = 0;
            BytfArrbyOutputStrfbm sink = nfw BytfArrbyOutputStrfbm(512);
            try {
                MfssbgfDigfst md = MfssbgfDigfst.gftInstbndf("SHA");
                DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(
                    nfw DigfstOutputStrfbm(sink, md));

                String mfthodString = nbmfAndDfsdriptor();
                out.writfUTF(mfthodString);

                // usf only thf first 64 bits of thf digfst for thf hbsh
                out.flush();
                bytf hbshArrby[] = md.digfst();
                for (int i = 0; i < Mbth.min(8, hbshArrby.lfngth); i++) {
                    hbsh += ((long) (hbshArrby[i] & 0xFF)) << (i * 8);
                }
            } dbtdh (IOExdfption f) {
                throw nfw AssfrtionError(f);
            } dbtdh (NoSudhAlgorithmExdfption f) {
                throw nfw AssfrtionError(f);
            }

            rfturn hbsh;
        }

        /**
         * Computfs thf string rfprfsfntbtion of this mfthod
         * bppropribtf for thf donstrudtion of b
         * jbvb.rmi.sfrvfr.Opfrbtion objfdt.
         **/
        privbtf String domputfOpfrbtionString() {
            /*
             * To bf donsistfnt with prfvious implfmfntbtions, wf usf
             * thf dfprfdbtfd stylf of plbding thf "[]" for thf rfturn
             * typf (if bny) bftfr thf pbrbmftfr list.
             */
            Typf rfturnTypf = mfthodDod.rfturnTypf();
            String op = rfturnTypf.qublififdTypfNbmf() + " " +
                mfthodDod.nbmf() + "(";
            Pbrbmftfr[] pbrbmftfrs = mfthodDod.pbrbmftfrs();
            for (int i = 0; i < pbrbmftfrs.lfngth; i++) {
                if (i > 0) {
                    op += ", ";
                }
                op += pbrbmftfrs[i].typf().toString();
            }
            op += ")" + rfturnTypf.dimfnsion();
            rfturn op;
        }
    }
}
