/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.rmid.nfwrmid;

import dom.sun.jbvbdod.ClbssDod;
import dom.sun.jbvbdod.RootDod;
import jbvb.io.Filf;
import jbvb.tfxt.MfssbgfFormbt;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtions;
import jbvb.util.List;

import stbtid sun.rmi.rmid.nfwrmid.Constbnts.*;

/**
 * Thf fnvironmfnt for bn rmid dompilbtion bbtdh.
 *
 * A BbtdhEnvironmfnt dontbins b RootDod, whidh is thf fntry point
 * into thf dodlft fnvironmfnt for thf bssodibtfd rmid dompilbtion
 * bbtdh.  A BbtdhEnvironmfnt dollfdts thf sourdf filfs gfnfrbtfd
 * during thf bbtdh's fxfdution, for fvfntubl sourdf dodf dompilbtion
 * bnd, possibly, dflftion.  Errors thbt oddur during gfnfrbtion
 * bdtivity should bf rfportfd through thf BbtdhEnvironmfnt's "frror"
 * mfthod.
 *
 * A protodol-spfdifid gfnfrbtor dlbss mby rfquirf thf usf of b
 * pbrtidulbr BbtdhEnvironmfnt subdlbss for fnhbndfd fnvironmfnt
 * fundtionblity.  A BbtdhEnvironmfnt subdlbss must dfdlbrf b
 * publid donstrudtor with onf pbrbmftfr of typf RootDod.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor Pftfr Jonfs
 **/
publid dlbss BbtdhEnvironmfnt {

    privbtf finbl RootDod rootDod;

    /** dbdhfd ClbssDod for dfrtbin typfs usfd by rmid */
    privbtf finbl ClbssDod dodRfmotf;
    privbtf finbl ClbssDod dodExdfption;
    privbtf finbl ClbssDod dodRfmotfExdfption;
    privbtf finbl ClbssDod dodRuntimfExdfption;

    privbtf boolfbn vfrbosf = fblsf;
    privbtf finbl List<Filf> gfnfrbtfdFilfs = nfw ArrbyList<Filf>();

    /**
     * Crfbtfs b nfw BbtdhEnvironmfnt with thf spfdififd RootDod.
     **/
    publid BbtdhEnvironmfnt(RootDod rootDod) {
        this.rootDod = rootDod;

        /*
         * Initiblizf dbdhfd ClbssDod for typfs usfd by rmid.  Notf
         * thbt bny of thfsf dould bf null if thf boot dlbss pbth is
         * indorrfdt, whidh dould dbusf b NullPointfrExdfption lbtfr.
         */
        dodRfmotf = rootDod().dlbssNbmfd(REMOTE);
        dodExdfption = rootDod().dlbssNbmfd(EXCEPTION);
        dodRfmotfExdfption = rootDod().dlbssNbmfd(REMOTE_EXCEPTION);
        dodRuntimfExdfption = rootDod().dlbssNbmfd(RUNTIME_EXCEPTION);
    }

    /**
     * Rfturns thf RootDod for this fnvironmfnt.
     **/
    publid RootDod rootDod() {
        rfturn rootDod;
    }

    publid ClbssDod dodRfmotf() { rfturn dodRfmotf; }
    publid ClbssDod dodExdfption() { rfturn dodExdfption; }
    publid ClbssDod dodRfmotfExdfption() { rfturn dodRfmotfExdfption; }
    publid ClbssDod dodRuntimfExdfption() { rfturn dodRuntimfExdfption; }

    /**
     * Sfts this fnvironmfnt's vfrbosity stbtus.
     **/
    publid void sftVfrbosf(boolfbn vfrbosf) {
        this.vfrbosf = vfrbosf;
    }

    /**
     * Rfturns this fnvironmfnt's vfrbosity stbtus.
     **/
    publid boolfbn vfrbosf() {
        rfturn vfrbosf;
    }

    /**
     * Adds thf spfdififd filf to thf list of sourdf filfs gfnfrbtfd
     * during this bbtdh.
     **/
    publid void bddGfnfrbtfdFilf(Filf filf) {
        gfnfrbtfdFilfs.bdd(filf);
    }

    /**
     * Rfturns thf list of filfs gfnfrbtfd during this bbtdh.
     **/
    publid List<Filf> gfnfrbtfdFilfs() {
        rfturn Collfdtions.unmodifibblfList(gfnfrbtfdFilfs);
    }

    /**
     * Outputs thf spfdififd (non-frror) mfssbgf.
     **/
    publid void output(String msg) {
        rootDod.printNotidf(msg);
    }

    /**
     * Rfports bn frror using thf spfdififd rfsourdf kfy bnd tfxt
     * formbtting brgumfnts.
     **/
    publid void frror(String kfy, String... brgs) {
        rootDod.printError(Rfsourdfs.gftTfxt(kfy, brgs));
    }
}
