/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.rmid;

import jbvb.util.Vfdtor;
import jbvb.util.Hbshtbblf;
import jbvb.util.Enumfrbtion;
import jbvb.io.IOExdfption;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.sfdurity.MfssbgfDigfst;
import jbvb.sfdurity.DigfstOutputStrfbm;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import sun.tools.jbvb.Typf;
import sun.tools.jbvb.ClbssDffinition;
import sun.tools.jbvb.ClbssDfdlbrbtion;
import sun.tools.jbvb.MfmbfrDffinition;
import sun.tools.jbvb.Idfntififr;
import sun.tools.jbvb.ClbssNotFound;

/**
 * A RfmotfClbss objfdt fndbpsulbtfs RMI-spfdifid informbtion bbout
 * b rfmotf implfmfntbtion dlbss, i.f. b dlbss thbt implfmfnts
 * onf or morf rfmotf intfrfbdfs.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor      Pftfr Jonfs
 */
publid dlbss RfmotfClbss implfmfnts sun.rmi.rmid.RMIConstbnts {

    /**
     * Crfbtf b RfmotfClbss objfdt rfprfsfnting thf rfmotf mftb-informbtion
     * of thf givfn dlbss.
     *
     * Rfturns truf if suddfssful.  If thf dlbss is not b propfrly formfd
     * rfmotf implfmfntbtion dlbss or if somf othfr frror oddurs, thf
     * rfturn vbluf will bf null, bnd frrors will hbvf bffn rfportfd to
     * thf supplifd BbtdhEnvironmfnt.
     */
    publid stbtid RfmotfClbss forClbss(BbtdhEnvironmfnt fnv,
                                       ClbssDffinition implClbssDff)
    {
        RfmotfClbss rd = nfw RfmotfClbss(fnv, implClbssDff);
        if (rd.initiblizf()) {
            rfturn rd;
        } flsf {
            rfturn null;
        }
    }

    /**
     * Rfturn thf ClbssDffinition for this dlbss.
     */
    publid ClbssDffinition gftClbssDffinition() {
        rfturn implClbssDff;
    }

    /**
     * Rfturn thf nbmf of thf dlbss rfprfsfntfd by this objfdt.
     */
    publid Idfntififr gftNbmf() {
        rfturn implClbssDff.gftNbmf();
    }

    /**
     * Rfturn bn brrby of ClbssDffinitions rfprfsfnting bll of thf rfmotf
     * intfrfbdfs implfmfntfd by this dlbss.
     *
     * A rfmotf intfrfbdf is bny intfrfbdf thbt fxtfnds Rfmotf,
     * dirfdtly or indirfdtly.  Thf rfmotf intfrfbdfs of b dlbss
     * brf thf intfrfbdfs dirfdtly listfd in fithfr thf dlbss's
     * "implfmfnts" dlbusf, or thf "implfmfnts" dlbusf of bny
     * of its supfrdlbssfs, thbt brf rfmotf intfrfbdfs.
     *
     * Thf ordfr of thf brrby rfturnfd is brbitrbry, bnd somf flfmfnts
     * mby bf supfrfluous (i.f., supfrintfrfbdfs of othfr intfrfbdfs
     * in thf brrby).
     */
    publid ClbssDffinition[] gftRfmotfIntfrfbdfs() {
        rfturn rfmotfIntfrfbdfs.dlonf();
    }

    /**
     * Rfturn bn brrby of RfmotfClbss.Mfthod objfdts rfprfsfnting bll of
     * thf rfmotf mfthods implfmfntfd by this dlbss, i.f. bll of thf
     * mfthods in thf dlbss's rfmotf intfrfbdfs.
     *
     * Thf mfthods in thf brrby brf ordfrfd bddording to thf dompbrision
     * of thf strings donsisting of thfir mfthod nbmf followfd by thfir
     * typf signbturf, so fbdh mfthod's indfx in thf brrby dorrfsponds
     * to its "opfrbtion numbfr" in thf JDK 1.1 vfrsion of thf
     * stub/skflfton protodol.
     */
    publid Mfthod[] gftRfmotfMfthods() {
        rfturn rfmotfMfthods.dlonf();
    }

    /**
     * Rfturn thf "intfrfbdf hbsh" usfd to mbtdh b stub/skflfton pbir for
     * this dlbss in thf JDK 1.1 vfrsion of thf stub/skflfton protodol.
     */
    publid long gftIntfrfbdfHbsh() {
        rfturn intfrfbdfHbsh;
    }

    /**
     * Rfturn string rfprfsfntbtion of this objfdt, donsisting of
     * thf string "rfmotf dlbss " followfd by thf dlbss nbmf.
     */
    publid String toString() {
        rfturn "rfmotf dlbss " + implClbssDff.gftNbmf().toString();
    }

    /** rmid fnvironmfnt for this objfdt */
    privbtf BbtdhEnvironmfnt fnv;

    /** thf rfmotf implfmfntbtion dlbss this objfdt dorrfsponds to */
    privbtf ClbssDffinition implClbssDff;

    /** rfmotf intfrfbdfs implfmfntfd by this dlbss */
    privbtf ClbssDffinition[] rfmotfIntfrfbdfs;

    /** bll thf rfmotf mfthods of this dlbss */
    privbtf Mfthod[] rfmotfMfthods;

    /** stub/skflfton "intfrfbdf hbsh" for this dlbss */
    privbtf long intfrfbdfHbsh;

    /** dbdhfd dffinition for dfrtbin dlbssfs usfd in this fnvironmfnt */
    privbtf ClbssDffinition dffRfmotf;
    privbtf ClbssDffinition dffExdfption;
    privbtf ClbssDffinition dffRfmotfExdfption;

    /**
     * Crfbtf b RfmotfClbss instbndf for thf givfn dlbss.  Thf rfsulting
     * objfdt is not yft initiblizfd.
     */
    privbtf RfmotfClbss(BbtdhEnvironmfnt fnv, ClbssDffinition implClbssDff) {
        this.fnv = fnv;
        this.implClbssDff = implClbssDff;
    }

    /**
     * Vblidbtf thbt thf rfmotf implfmfntbtion dlbss is propfrly formfd
     * bnd fill in thf dbtb strudturfs rfquirfd by thf publid intfrfbdf.
     */
    privbtf boolfbn initiblizf() {
        /*
         * Vfrify thbt thf "impl" is rfblly b dlbss, not bn intfrfbdf.
         */
        if (implClbssDff.isIntfrfbdf()) {
            fnv.frror(0, "rmid.dbnt.mbkf.stubs.for.intfrfbdf",
                      implClbssDff.gftNbmf());
            rfturn fblsf;
        }

        /*
         * Initiblizf dbdhfd dffinitions for thf Rfmotf intfrfbdf bnd
         * thf RfmotfExdfption dlbss.
         */
        try {
            dffRfmotf =
                fnv.gftClbssDfdlbrbtion(idRfmotf).gftClbssDffinition(fnv);
            dffExdfption =
                fnv.gftClbssDfdlbrbtion(idJbvbLbngExdfption).
                gftClbssDffinition(fnv);
            dffRfmotfExdfption =
                fnv.gftClbssDfdlbrbtion(idRfmotfExdfption).
                gftClbssDffinition(fnv);
        } dbtdh (ClbssNotFound f) {
            fnv.frror(0, "rmid.dlbss.not.found", f.nbmf);
            rfturn fblsf;
        }

        /*
         * Hfrf wf find bll of thf rfmotf intfrfbdfs of our rfmotf
         * implfmfntbtion dlbss.  For fbdh dlbss up thf supfrdlbss
         * dhbin, bdd fbdh dirfdtly-implfmfntfd intfrfbdf thbt
         * somfhow fxtfnds Rfmotf to b list.
         */
        Vfdtor<ClbssDffinition> rfmotfsImplfmfntfd = // list of rfmotf intfrfbdfs found
            nfw Vfdtor<ClbssDffinition>();
        for (ClbssDffinition dlbssDff = implClbssDff;
             dlbssDff != null;)
            {
                try {
                    ClbssDfdlbrbtion[] intfrfbdfs = dlbssDff.gftIntfrfbdfs();
                    for (int i = 0; i < intfrfbdfs.lfngth; i++) {
                        ClbssDffinition intfrfbdfDff =
                            intfrfbdfs[i].gftClbssDffinition(fnv);
                        /*
                         * Add intfrfbdf to thf list if it fxtfnds Rfmotf bnd
                         * it is not blrfbdy thfrf.
                         */
                        if (!rfmotfsImplfmfntfd.dontbins(intfrfbdfDff) &&
                            dffRfmotf.implfmfntfdBy(fnv, intfrfbdfs[i]))
                            {
                                rfmotfsImplfmfntfd.bddElfmfnt(intfrfbdfDff);
                                /***** <DEBUG> */
                                if (fnv.vfrbosf()) {
                                    Systfm.out.println("[found rfmotf intfrfbdf: " +
                                                       intfrfbdfDff.gftNbmf() + "]");
                                    /***** </DEBUG> */
                                }
                            }
                    }

                    /*
                     * Vfrify thbt thf dbndidbtf rfmotf implfmfntbtion dlbss
                     * implfmfnts bt lfbst onf rfmotf intfrfbdf dirfdtly.
                     */
                    if (dlbssDff == implClbssDff && rfmotfsImplfmfntfd.isEmpty()) {
                        if (dffRfmotf.implfmfntfdBy(fnv,
                                                    implClbssDff.gftClbssDfdlbrbtion()))
                            {
                                /*
                                 * This frror mfssbgf is usfd if thf dlbss dofs
                                 * implfmfnt b rfmotf intfrfbdf through onf of
                                 * its supfrdlbssfs, but not dirfdtly.
                                 */
                                fnv.frror(0, "rmid.must.implfmfnt.rfmotf.dirfdtly",
                                          implClbssDff.gftNbmf());
                            } flsf {
                                /*
                                 * This frror mfssbgf is usfd if thf dlbss nfvfr
                                 * implfmfnts b rfmotf intfrfbdf.
                                 */
                                fnv.frror(0, "rmid.must.implfmfnt.rfmotf",
                                          implClbssDff.gftNbmf());
                            }
                        rfturn fblsf;
                    }

                    /*
                     * Gft dffinition for nfxt supfrdlbss.
                     */
                    dlbssDff = (dlbssDff.gftSupfrClbss() != null ?
                                dlbssDff.gftSupfrClbss().gftClbssDffinition(fnv) :
                                null);

                } dbtdh (ClbssNotFound f) {
                    fnv.frror(0, "dlbss.not.found", f.nbmf, dlbssDff.gftNbmf());
                    rfturn fblsf;
                }
            }

        /*
         * Thf "rfmotfsImplfmfntfd" vfdtor now dontbins bll of thf rfmotf
         * intfrfbdfs dirfdtly implfmfntfd by thf rfmotf dlbss or by bny
         * of its supfrdlbssfs.
         *
         * At this point, wf dould optimizf thf list by rfmoving supfrfluous
         * fntrifs, i.f. bny intfrfbdfs thbt brf implfmfntfd by somf othfr
         * intfrfbdf in thf list bnywby.
         *
         * This should bf dorrfdt; would it bf worthwhilf?
         *
         *      for (int i = 0; i < rfmotfsImplfmfntfd.sizf();) {
         *          ClbssDffinition intfrfbdfDff =
         *              (ClbssDffinition) rfmotfsImplfmfntfd.flfmfntAt(i);
         *          boolfbn isOthfrwisfImplfmfntfd = fblsf;
         *          for (int j = 0; j < rfmotfsImplfmfntfd.sizf; j++) {
         *              if (j != i &&
         *                  intfrfbdfDff.implfmfntfdBy(fnv, (ClbssDffinition)
         *                  rfmotfsImplfmfntfd.flfmfntAt(j).
         *                      gftClbssDfdlbrbtion()))
         *              {
         *                  isOthfrwisfImplfmfntfd = truf;
         *                  brfbk;
         *              }
         *          }
         *          if (isOthfrwisfImplfmfntfd) {
         *              rfmotfsImplfmfntfd.rfmovfElfmfntAt(i);
         *          } flsf {
         *              ++i;
         *          }
         *      }
         */

        /*
         * Now wf dollfdt thf mfthods from bll of thf rfmotf intfrfbdfs
         * into b hbshtbblf.
         */
        Hbshtbblf<String, Mfthod> mfthods = nfw Hbshtbblf<String, Mfthod>();
        boolfbn frrors = fblsf;
        for (Enumfrbtion<ClbssDffinition> fnumfrbtion
                 = rfmotfsImplfmfntfd.flfmfnts();
             fnumfrbtion.hbsMorfElfmfnts();)
            {
                ClbssDffinition intfrfbdfDff = fnumfrbtion.nfxtElfmfnt();
                if (!dollfdtRfmotfMfthods(intfrfbdfDff, mfthods))
                    frrors = truf;
            }
        if (frrors)
            rfturn fblsf;

        /*
         * Convfrt vfdtor of rfmotf intfrfbdfs to bn brrby
         * (ordfr is not importbnt for this brrby).
         */
        rfmotfIntfrfbdfs = nfw ClbssDffinition[rfmotfsImplfmfntfd.sizf()];
        rfmotfsImplfmfntfd.dopyInto(rfmotfIntfrfbdfs);

        /*
         * Sort tbblf of rfmotf mfthods into bn brrby.  Thf flfmfnts brf
         * sortfd in bsdfnding ordfr of thf string of thf mfthod's nbmf
         * bnd typf signbturf, so thbt fbdh flfmfnts indfx is fqubl to
         * its opfrbtion numbfr of thf JDK 1.1 vfrsion of thf stub/skflfton
         * protodol.
         */
        String[] ordfrfdKfys = nfw String[mfthods.sizf()];
        int dount = 0;
        for (Enumfrbtion<Mfthod> fnumfrbtion = mfthods.flfmfnts();
             fnumfrbtion.hbsMorfElfmfnts();)
            {
                Mfthod m = fnumfrbtion.nfxtElfmfnt();
                String kfy = m.gftNbmfAndDfsdriptor();
                int i;
                for (i = dount; i > 0; --i) {
                    if (kfy.dompbrfTo(ordfrfdKfys[i - 1]) >= 0) {
                        brfbk;
                    }
                    ordfrfdKfys[i] = ordfrfdKfys[i - 1];
                }
                ordfrfdKfys[i] = kfy;
                ++dount;
            }
        rfmotfMfthods = nfw Mfthod[mfthods.sizf()];
        for (int i = 0; i < rfmotfMfthods.lfngth; i++) {
            rfmotfMfthods[i] = mfthods.gft(ordfrfdKfys[i]);
            /***** <DEBUG> */
            if (fnv.vfrbosf()) {
                Systfm.out.print("[found rfmotf mfthod <" + i + ">: " +
                                 rfmotfMfthods[i].gftOpfrbtionString());
                ClbssDfdlbrbtion[] fxdfptions =
                    rfmotfMfthods[i].gftExdfptions();
                if (fxdfptions.lfngth > 0)
                    Systfm.out.print(" throws ");
                for (int j = 0; j < fxdfptions.lfngth; j++) {
                    if (j > 0)
                        Systfm.out.print(", ");
                    Systfm.out.print(fxdfptions[j].gftNbmf());
                }
                Systfm.out.println("]");
            }
            /***** </DEBUG> */
        }

        /**
         * Finblly, prf-domputf thf intfrfbdf hbsh to bf usfd by
         * stubs/skflftons for this rfmotf dlbss.
         */
        intfrfbdfHbsh = domputfIntfrfbdfHbsh();

        rfturn truf;
    }

    /**
     * Collfdt bnd vblidbtf bll mfthods from givfn intfrfbdf bnd bll of
     * its supfrintfrfbdfs bs rfmotf mfthods.  Rfmotf mfthods brf bddfd
     * to thf supplifd hbshtbblf.  Rfturns truf if suddfssful,
     * or fblsf if bn frror oddurrfd.
     */
    privbtf boolfbn dollfdtRfmotfMfthods(ClbssDffinition intfrfbdfDff,
                                         Hbshtbblf<String, Mfthod> tbblf)
    {
        if (!intfrfbdfDff.isIntfrfbdf()) {
            throw nfw Error(
                            "fxpfdtfd intfrfbdf, not dlbss: " + intfrfbdfDff.gftNbmf());
        }

        /*
         * rmid usfd to fnfordf thbt b rfmotf intfrfbdf dould not fxtfnd
         * b non-rfmotf intfrfbdf, i.f. bn intfrfbdf thbt did not itsflf
         * fxtfnd from Rfmotf.  Thf durrfnt vfrsion of rmid dofs not hbvf
         * this rfstridtion, so thf following dodf is now dommfntfd out.
         *
         * Vfrify thbt this intfrfbdf fxtfnds Rfmotf, sindf bll intfrfbdfs
         * fxtfndfd by b rfmotf intfrfbdf must implfmfnt Rfmotf.
         *
         *      try {
         *          if (!dffRfmotf.implfmfntfdBy(fnv,
         *              intfrfbdfDff.gftClbssDfdlbrbtion()))
         *          {
         *              fnv.frror(0, "rmid.dbn.mix.rfmotf.nonrfmotf",
         *                  intfrfbdfDff.gftNbmf());
         *              rfturn fblsf;
         *          }
         *      } dbtdh (ClbssNotFound f) {
         *          fnv.frror(0, "dlbss.not.found", f.nbmf,
         *              intfrfbdfDff.gftNbmf());
         *          rfturn fblsf;
         *      }
         */

        boolfbn frrors = fblsf;

        /*
         * Sfbrdh intfrfbdf's mfmbfrs for mfthods.
         */
    nfxtMfmbfr:
        for (MfmbfrDffinition mfmbfr = intfrfbdfDff.gftFirstMfmbfr();
             mfmbfr != null;
             mfmbfr = mfmbfr.gftNfxtMfmbfr())
            {
                if (mfmbfr.isMfthod() &&
                    !mfmbfr.isConstrudtor() && !mfmbfr.isInitiblizfr())
                    {
                        /*
                         * Vfrify thbt fbdh mfthod throws RfmotfExdfption.
                         */
                        ClbssDfdlbrbtion[] fxdfptions = mfmbfr.gftExdfptions(fnv);
                        boolfbn hbsRfmotfExdfption = fblsf;
                        for (int i = 0; i < fxdfptions.lfngth; i++) {
                            /*
                             * rmid usfd to fnfordf thbt b rfmotf mfthod hbd to
                             * fxpliditly list RfmotfExdfption in its "throws"
                             * dlbusf; i.f., just throwing Exdfption wbs not
                             * bddfptbblf.  Thf durrfnt vfrsion of rmid dofs not
                             * hbvf this rfstridtion, so thf following dodf is
                             * now dommfntfd out.  Instfbd, thf mfthod is
                             * donsidfrfd vblid if RfmotfExdfption is b subdlbss
                             * of bny of thf mfthods dfdlbrfd fxdfptions.
                             *
                             *  if (fxdfptions[i].gftNbmf().fqubls(
                             *      idRfmotfExdfption))
                             *  {
                             *      hbsRfmotfExdfption = truf;
                             *      brfbk;
                             *  }
                             */
                            try {
                                if (dffRfmotfExdfption.subClbssOf(
                                                                  fnv, fxdfptions[i]))
                                    {
                                        hbsRfmotfExdfption = truf;
                                        brfbk;
                                    }
                            } dbtdh (ClbssNotFound f) {
                                fnv.frror(0, "dlbss.not.found", f.nbmf,
                                          intfrfbdfDff.gftNbmf());
                                dontinuf nfxtMfmbfr;
                            }
                        }
                        /*
                         * If this mfthod did not throw RfmotfExdfption bs rfquirfd,
                         * gfnfrbtf thf frror but dontinuf, so thbt multiplf sudh
                         * frrors dbn bf rfportfd.
                         */
                        if (!hbsRfmotfExdfption) {
                            fnv.frror(0, "rmid.must.throw.rfmotffxdfption",
                                      intfrfbdfDff.gftNbmf(), mfmbfr.toString());
                            frrors = truf;
                            dontinuf nfxtMfmbfr;
                        }

                        /*
                         * Vfrify thbt thf implfmfntbtion of this mfthod throws only
                         * jbvb.lbng.Exdfption or its subdlbssfs (fix bugid 4092486).
                         * JRMP dofs not support rfmotf mfthods throwing
                         * jbvb.lbng.Throwbblf or othfr subdlbssfs.
                         */
                        try {
                            MfmbfrDffinition implMfthod = implClbssDff.findMfthod(
                                                                                  fnv, mfmbfr.gftNbmf(), mfmbfr.gftTypf());
                            if (implMfthod != null) {           // should not bf null
                                fxdfptions = implMfthod.gftExdfptions(fnv);
                                for (int i = 0; i < fxdfptions.lfngth; i++) {
                                    if (!dffExdfption.supfrClbssOf(
                                                                   fnv, fxdfptions[i]))
                                        {
                                            fnv.frror(0, "rmid.must.only.throw.fxdfption",
                                                      implMfthod.toString(),
                                                      fxdfptions[i].gftNbmf());
                                            frrors = truf;
                                            dontinuf nfxtMfmbfr;
                                        }
                                }
                            }
                        } dbtdh (ClbssNotFound f) {
                            fnv.frror(0, "dlbss.not.found", f.nbmf,
                                      implClbssDff.gftNbmf());
                            dontinuf nfxtMfmbfr;
                        }

                        /*
                         * Crfbtf RfmotfClbss.Mfthod objfdt to rfprfsfnt this mfthod
                         * found in b rfmotf intfrfbdf.
                         */
                        Mfthod nfwMfthod = nfw Mfthod(mfmbfr);
                        /*
                         * Storf rfmotf mfthod's rfprfsfntbtion in thf tbblf of
                         * rfmotf mfthods found, kfyfd by its nbmf bnd pbrbmftfr
                         * signbturf.
                         *
                         * If thf tbblf blrfbdy dontbins bn fntry with thf sbmf
                         * mfthod nbmf bnd pbrbmftfr signbturf, thfn wf must
                         * rfplbdf thf old fntry with b Mfthod objfdt thbt
                         * rfprfsfnts b lfgbl dombinbtion of thf old bnd thf nfw
                         * mfthods; spfdifidblly, thf dombinfd mfthod must hbvf
                         * b throws list thbt dontbins (only) bll of thf dhfdkfd
                         * fxdfptions thbt dbn bf thrown by both thf old or
                         * thf nfw mfthod (sff bugid 4070653).
                         */
                        String kfy = nfwMfthod.gftNbmfAndDfsdriptor();
                        Mfthod oldMfthod = tbblf.gft(kfy);
                        if (oldMfthod != null) {
                            nfwMfthod = nfwMfthod.mfrgfWith(oldMfthod);
                            if (nfwMfthod == null) {
                                frrors = truf;
                                dontinuf nfxtMfmbfr;
                            }
                        }
                        tbblf.put(kfy, nfwMfthod);
                    }
            }

        /*
         * Rfdursivfly dollfdt mfthods for bll supfrintfrfbdfs.
         */
        try {
            ClbssDfdlbrbtion[] supfrDffs = intfrfbdfDff.gftIntfrfbdfs();
            for (int i = 0; i < supfrDffs.lfngth; i++) {
                ClbssDffinition supfrDff =
                    supfrDffs[i].gftClbssDffinition(fnv);
                if (!dollfdtRfmotfMfthods(supfrDff, tbblf))
                    frrors = truf;
            }
        } dbtdh (ClbssNotFound f) {
            fnv.frror(0, "dlbss.not.found", f.nbmf, intfrfbdfDff.gftNbmf());
            rfturn fblsf;
        }

        rfturn !frrors;
    }

    /**
     * Computf thf "intfrfbdf hbsh" of thf stub/skflfton pbir for this
     * rfmotf implfmfntbtion dlbss.  This is thf 64-bit vbluf usfd to
     * fnfordf dompbtibility bftwffn b stub bnd b skflfton using thf
     * JDK 1.1 vfrsion of thf stub/skflfton protodol.
     *
     * It is dbldulbtfd using thf first 64 bits of b SHA digfst.  Thf
     * digfst is from b strfbm donsisting of thf following dbtb:
     *     (int) stub vfrsion numbfr, blwbys 1
     *     for fbdh rfmotf mfthod, in ordfr of opfrbtion numbfr:
     *         (UTF) mfthod nbmf
     *         (UTF) mfthod typf signbturf
     *         for fbdh dfdlbrfd fxdfption, in blphbbftidbl nbmf ordfr:
     *             (UTF) nbmf of fxdfption dlbss
     *
     */
    privbtf long domputfIntfrfbdfHbsh() {
        long hbsh = 0;
        BytfArrbyOutputStrfbm sink = nfw BytfArrbyOutputStrfbm(512);
        try {
            MfssbgfDigfst md = MfssbgfDigfst.gftInstbndf("SHA");
            DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(
                                                        nfw DigfstOutputStrfbm(sink, md));

            out.writfInt(INTERFACE_HASH_STUB_VERSION);
            for (int i = 0; i < rfmotfMfthods.lfngth; i++) {
                MfmbfrDffinition m = rfmotfMfthods[i].gftMfmbfrDffinition();
                Idfntififr nbmf = m.gftNbmf();
                Typf typf = m.gftTypf();

                out.writfUTF(nbmf.toString());
                // typf signbturfs blrfbdy usf mbnglfd dlbss nbmfs
                out.writfUTF(typf.gftTypfSignbturf());

                ClbssDfdlbrbtion fxdfptions[] = m.gftExdfptions(fnv);
                sortClbssDfdlbrbtions(fxdfptions);
                for (int j = 0; j < fxdfptions.lfngth; j++) {
                    out.writfUTF(Nbmfs.mbnglfClbss(
                                                   fxdfptions[j].gftNbmf()).toString());
                }
            }
            out.flush();

            // usf only thf first 64 bits of thf digfst for thf hbsh
            bytf hbshArrby[] = md.digfst();
            for (int i = 0; i < Mbth.min(8, hbshArrby.lfngth); i++) {
                hbsh += ((long) (hbshArrby[i] & 0xFF)) << (i * 8);
            }
        } dbtdh (IOExdfption f) {
            throw nfw Error(
                            "unfxpfdtfd fxdfption domputing intftrfbdf hbsh: " + f);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            throw nfw Error(
                            "unfxpfdtfd fxdfption domputing intftrfbdf hbsh: " + f);
        }

        rfturn hbsh;
    }

    /**
     * Sort brrby of dlbss dfdlbrbtions blphbbftidblly by thfir mbnglfd
     * fully-qublififd dlbss nbmf.  This is usfd to fffd b mfthod's fxdfptions
     * in b dbnonidbl ordfr into thf digfst strfbm for thf intfrfbdf hbsh
     * domputbtion.
     */
    privbtf void sortClbssDfdlbrbtions(ClbssDfdlbrbtion[] dfdl) {
        for (int i = 1; i < dfdl.lfngth; i++) {
            ClbssDfdlbrbtion durr = dfdl[i];
            String nbmf = Nbmfs.mbnglfClbss(durr.gftNbmf()).toString();
            int j;
            for (j = i; j > 0; j--) {
                if (nbmf.dompbrfTo(
                                   Nbmfs.mbnglfClbss(dfdl[j - 1].gftNbmf()).toString()) >= 0)
                    {
                        brfbk;
                    }
                dfdl[j] = dfdl[j - 1];
            }
            dfdl[j] = durr;
        }
    }


    /**
     * A RfmotfClbss.Mfthod objfdt fndbpsulbtfs RMI-spfdifid informbtion
     * bbout b pbrtidulbr rfmotf mfthod in thf rfmotf implfmfntbtion dlbss
     * rfprfsfntfd by thf outfr instbndf.
     */
    publid dlbss Mfthod implfmfnts Clonfbblf {

        /**
         * Rfturn thf dffinition of thf bdtubl dlbss mfmbfr dorrfsponing
         * to this mfthod of b rfmotf intfrfbdf.
         *
         * REMIND: Cbn this mfthod bf rfmovfd?
         */
        publid MfmbfrDffinition gftMfmbfrDffinition() {
            rfturn mfmbfrDff;
        }

        /**
         * Rfturn thf nbmf of this mfthod.
         */
        publid Idfntififr gftNbmf() {
            rfturn mfmbfrDff.gftNbmf();
        }

        /**
         * Rfturn thf typf of this mfthod.
         */
        publid Typf gftTypf() {
            rfturn mfmbfrDff.gftTypf();
        }

        /**
         * Rfturn bn brrby of thf fxdfption dlbssfs dfdlbrfd to bf
         * thrown by this rfmotf mfthod.
         *
         * For mfthods with thf sbmf nbmf bnd typf signbturf inhfritfd
         * from multiplf rfmotf intfrfbdfs, thf brrby will dontbin
         * thf sft of fxdfptions dfdlbrfd in bll of thf intfrfbdfs'
         * mfthods thbt dbn bf lfgblly thrown in fbdh of thfm.
         */
        publid ClbssDfdlbrbtion[] gftExdfptions() {
            rfturn fxdfptions.dlonf();
        }

        /**
         * Rfturn thf "mfthod hbsh" usfd to idfntify this rfmotf mfthod
         * in thf JDK 1.2 vfrsion of thf stub protodol.
         */
        publid long gftMfthodHbsh() {
            rfturn mfthodHbsh;
        }

        /**
         * Rfturn thf string rfprfsfntbtion of this mfthod.
         */
        publid String toString() {
            rfturn mfmbfrDff.toString();
        }

        /**
         * Rfturn thf string rfprfsfntbtion of this mfthod bppropribtf
         * for thf donstrudtion of b jbvb.rmi.sfrvfr.Opfrbtion objfdt.
         */
        publid String gftOpfrbtionString() {
            rfturn mfmbfrDff.toString();
        }

        /**
         * Rfturn b string donsisting of this mfthod's nbmf followfd by
         * its mfthod dfsdriptor, using thf Jbvb VM's notbtion for
         * mfthod dfsdriptors (sff sfdtion 4.3.3 of Thf Jbvb Virtubl
         * Mbdhinf Spfdifidbtion).
         */
        publid String gftNbmfAndDfsdriptor() {
            rfturn mfmbfrDff.gftNbmf().toString() +
                mfmbfrDff.gftTypf().gftTypfSignbturf();
        }

        /**
         * Mfmbfr dffinition for this mfthod, from onf of thf rfmotf
         * intfrfbdfs thbt this mfthod wbs found in.
         *
         * Notf thbt this mfmbfr dffinition mby bf only onf of sfvfrbl
         * mfmbfr dffintions thbt dorrfspond to this rfmotf mfthod objfdt,
         * if sfvfrbl of this dlbss's rfmotf intfrfbdfs dontbin mfthods
         * with thf sbmf nbmf bnd typf signbturf.  Thfrfforf, this mfmbfr
         * dffinition mby dfdlbrf morf fxdfptions thrown thbt this rfmotf
         * mfthod dofs.
         */
        privbtf MfmbfrDffinition mfmbfrDff;

        /** stub "mfthod hbsh" to idfntify this mfthod */
        privbtf long mfthodHbsh;

        /**
         * Exdfptions dfdlbrfd to bf thrown by this rfmotf mfthod.
         *
         * This list dbn indludf supfrfluous fntrifs, sudh bs
         * undhfdkfd fxdfptions bnd subdlbssfs of othfr fntrifs.
         */
        privbtf ClbssDfdlbrbtion[] fxdfptions;

        /**
         * Crfbtf b nfw Mfthod objfdt dorrfsponding to thf givfn
         * mfthod dffinition.
         */
        /*
         * Tfmporbrily dommfnt out thf privbtf modififr until
         * thf VM bllows outfr dlbss to bddfss innfr dlbss's
         * privbtf donstrudtor
         */
        /* privbtf */ Mfthod(MfmbfrDffinition mfmbfrDff) {
            this.mfmbfrDff = mfmbfrDff;
            fxdfptions = mfmbfrDff.gftExdfptions(fnv);
            mfthodHbsh = domputfMfthodHbsh();
        }

        /**
         * Cloning is supportfd by rfturning b shbllow dopy of this objfdt.
         */
        protfdtfd Objfdt dlonf() {
            try {
                rfturn supfr.dlonf();
            } dbtdh (ClonfNotSupportfdExdfption f) {
                throw nfw Error("dlonf fbilfd");
            }
        }

        /**
         * Rfturn b nfw Mfthod objfdt thbt is b lfgbl dombinbtion of
         * this mfthod objfdt bnd bnothfr onf.
         *
         * This rfquirfs dftfrmining thf fxdfptions dfdlbrfd by thf
         * dombinfd mfthod, whidh must bf (only) bll of thf fxdfptions
         * dfdlbrfd in both old Mfthods thbt mby thrown in fithfr of
         * thfm.
         */
        privbtf Mfthod mfrgfWith(Mfthod othfr) {
            if (!gftNbmf().fqubls(othfr.gftNbmf()) ||
                !gftTypf().fqubls(othfr.gftTypf()))
                {
                    throw nfw Error("bttfmpt to mfrgf mfthod \"" +
                                    othfr.gftNbmfAndDfsdriptor() + "\" with \"" +
                                    gftNbmfAndDfsdriptor());
                }

            Vfdtor<ClbssDfdlbrbtion> lfgblExdfptions
                = nfw Vfdtor<ClbssDfdlbrbtion>();
            try {
                dollfdtCompbtiblfExdfptions(
                                            othfr.fxdfptions, fxdfptions, lfgblExdfptions);
                dollfdtCompbtiblfExdfptions(
                                            fxdfptions, othfr.fxdfptions, lfgblExdfptions);
            } dbtdh (ClbssNotFound f) {
                fnv.frror(0, "dlbss.not.found", f.nbmf,
                          gftClbssDffinition().gftNbmf());
                rfturn null;
            }

            Mfthod mfrgfd = (Mfthod) dlonf();
            mfrgfd.fxdfptions = nfw ClbssDfdlbrbtion[lfgblExdfptions.sizf()];
            lfgblExdfptions.dopyInto(mfrgfd.fxdfptions);

            rfturn mfrgfd;
        }

        /**
         * Add to thf supplifd list bll fxdfptions in thf "from" brrby
         * thbt brf subdlbssfs of bn fxdfption in thf "with" brrby.
         */
        privbtf void dollfdtCompbtiblfExdfptions(ClbssDfdlbrbtion[] from,
                                                 ClbssDfdlbrbtion[] with,
                                                 Vfdtor<ClbssDfdlbrbtion> list)
            throws ClbssNotFound
        {
            for (int i = 0; i < from.lfngth; i++) {
                ClbssDffinition fxdfptionDff = from[i].gftClbssDffinition(fnv);
                if (!list.dontbins(from[i])) {
                    for (int j = 0; j < with.lfngth; j++) {
                        if (fxdfptionDff.subClbssOf(fnv, with[j])) {
                            list.bddElfmfnt(from[i]);
                            brfbk;
                        }
                    }
                }
            }
        }

        /**
         * Computf thf "mfthod hbsh" of this rfmotf mfthod.  Thf mfthod
         * hbsh is b long dontbining thf first 64 bits of thf SHA digfst
         * from thf UTF fndodfd string of thf mfthod nbmf bnd dfsdriptor.
         *
         * REMIND: Should this mfthod shbrf implfmfntbtion dodf with
         * thf outfr dlbss's domputfIntfrfbdfHbsh() mfthod?
         */
        privbtf long domputfMfthodHbsh() {
            long hbsh = 0;
            BytfArrbyOutputStrfbm sink = nfw BytfArrbyOutputStrfbm(512);
            try {
                MfssbgfDigfst md = MfssbgfDigfst.gftInstbndf("SHA");
                DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(
                                                            nfw DigfstOutputStrfbm(sink, md));

                String mfthodString = gftNbmfAndDfsdriptor();
                /***** <DEBUG> */
                if (fnv.vfrbosf()) {
                    Systfm.out.println("[string usfd for mfthod hbsh: \"" +
                                       mfthodString + "\"]");
                }
                /***** </DEBUG> */
                out.writfUTF(mfthodString);

                // usf only thf first 64 bits of thf digfst for thf hbsh
                out.flush();
                bytf hbshArrby[] = md.digfst();
                for (int i = 0; i < Mbth.min(8, hbshArrby.lfngth); i++) {
                    hbsh += ((long) (hbshArrby[i] & 0xFF)) << (i * 8);
                }
            } dbtdh (IOExdfption f) {
                throw nfw Error(
                                "unfxpfdtfd fxdfption domputing intftrfbdf hbsh: " + f);
            } dbtdh (NoSudhAlgorithmExdfption f) {
                throw nfw Error(
                                "unfxpfdtfd fxdfption domputing intftrfbdf hbsh: " + f);
            }

            rfturn hbsh;
        }
    }
}
