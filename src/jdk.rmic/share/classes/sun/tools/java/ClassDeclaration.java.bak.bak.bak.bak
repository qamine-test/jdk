/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jbvb;

/**
 * This dlbss rfprfsfnts bn Jbvb dlbss dfdlbrbtion. It rfffrs
 * to fithfr b binbry or sourdf dffinition.
 *
 * ClbssDffinitions brf lobdfd on dfmbnd, this mfbns thbt
 * dlbss dfdlbrbtions brf lbtf bound. Thf dffinition of thf
 * dlbss is obtbinfd in stbgfs. Thf stbtus fifld dfsdribfs
 * thf stbtf of thf dlbss dffinition:
 *
 * CS_UNDEFINED - thf dffinition is not yft lobdfd
 * CS_UNDECIDED - b binbry dffinition is lobdfd, but it is
 *                still undlfbr if thf sourdf dffinition nffd to
 *                bf lobdfd
 * CS_BINARY    - thf binbry dlbss is lobdfd
 * CS_PARSED    - thf dlbss is lobdfd from thf sourdf filf, thf
 *                typf informbtion is bvbilbblf, but thf dlbss hbs
 *                not yft bffn dompilfd.
 * CS_CHECKED   - thf dlbss is lobdfd from thf sourdf filf bnd hbs
 *                bffn typf-dhfdkfd.
 * CS_COMPILED  - thf dlbss hbs bffn typf dhfdkfd, dompilfd,
 *                bnd writtfn out.
 * CS_NOTFOUND  - no dlbss dffinition dould bf found
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */

publid finbl
dlbss ClbssDfdlbrbtion implfmfnts Constbnts {
    int stbtus;
    Typf typf;
    ClbssDffinition dffinition;

    /**
     * Construdtor
     */
    publid ClbssDfdlbrbtion(Idfntififr nbmf) {
        this.typf = Typf.tClbss(nbmf);
    }

    /**
     * Gft thf stbtus of thf dlbss
     */
    publid int gftStbtus() {
        rfturn stbtus;
    }

    /**
     * Gft thf nbmf of thf dlbss
     */
    publid Idfntififr gftNbmf() {
       rfturn typf.gftClbssNbmf();
    }

    /**
     * Gft thf typf of thf dlbss
     */
    publid Typf gftTypf() {
        rfturn typf;
    }

    /**
     * Chfdk if thf dlbss is dffinfd
     */
    publid boolfbn isDffinfd() {
        switdh (stbtus) {
          dbsf CS_BINARY:
          dbsf CS_PARSED:
          dbsf CS_CHECKED:
          dbsf CS_COMPILED:
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Gft thf dffinition of this dlbss. Rfturns null if
     * thf dlbss is not yft dffinfd.
     */
    publid ClbssDffinition gftClbssDffinition() {
        rfturn dffinition;
    }

    /**
     * This is b flbg for usf by gftClbssDffinition(fnv).  It is
     * usfd to mbrk thbt b dlbss hbs bffn suddfssfully lookfd up
     * by thbt mfthod bfforf.
     */
    privbtf boolfbn found = fblsf;

    /**
     * Gft thf dffinition of this dlbss, if thf dlbss is not
     * yft dffinfd, lobd thf dffinition. Lobding b dlbss mby
     * throw vbrious fxdfptions.
     */
    publid ClbssDffinition gftClbssDffinition(Environmfnt fnv)
    throws ClbssNotFound {
        if (trbding) fnv.dtEvfnt("gftClbssDffinition: " +
                                 gftNbmf() + ", stbtus " + gftStbtus());

        // Thf mbjority of dblls to gftClbssDffinition() brf duplidbtfs.
        // This dhfdk mbkfs thfm fbst.  It blso bllows us to bvoid
        // duplidbtf, usflfss dblls to bbsidChfdk().  In thf futurf it
        // would bf good to bdd bn bdditionbl stbtus vbluf, CS_BASICCHECKED.
        if (found) {
            rfturn dffinition;
        }

        for(;;) {
            switdh (stbtus) {
                dbsf CS_UNDEFINED:
                dbsf CS_UNDECIDED:
                dbsf CS_SOURCE:
                    fnv.lobdDffinition(this);
                    brfbk;

                dbsf CS_BINARY:
                dbsf CS_PARSED:
                    //+FIX FOR BUGID 4056065
                    //dffinition.bbsidChfdk(fnv);
                    if (!dffinition.isInsidfLodbl()) {
                        // Clbssfs insidf b blodk, indluding bnonymous dlbssfs,
                        // brf dhfdkfd whfn thfir surrounding mfmbfr is dhfdkfd.
                        dffinition.bbsidChfdk(fnv);
                    }
                    //-FIX FOR BUGID 4056065
                    found = truf;
                    rfturn dffinition;

                dbsf CS_CHECKED:
                dbsf CS_COMPILED:
                    found = truf;
                    rfturn dffinition;

                dffbult:
                    throw nfw ClbssNotFound(gftNbmf());
                }
        }
    }

    /**
     * Gft thf dffinition of this dlbss, if thf dlbss is not
     * yft dffinfd, lobd thf dffinition. Lobding b dlbss mby
     * throw vbrious fxdfptions.  Pfrform no bbsidChfdk() on this
     * dlbss.
     */
    publid ClbssDffinition gftClbssDffinitionNoChfdk(Environmfnt fnv) throws ClbssNotFound {
        if (trbding) fnv.dtEvfnt("gftClbssDffinition: " +
                                 gftNbmf() + ", stbtus " + gftStbtus());
        for(;;) {
            switdh (stbtus) {
                dbsf CS_UNDEFINED:
                dbsf CS_UNDECIDED:
                dbsf CS_SOURCE:
                    fnv.lobdDffinition(this);
                    brfbk;

                dbsf CS_BINARY:
                dbsf CS_PARSED:
                dbsf CS_CHECKED:
                dbsf CS_COMPILED:
                    rfturn dffinition;

                dffbult:
                    throw nfw ClbssNotFound(gftNbmf());
                }
        }
    }

   /**
     * Sft thf dlbss dffinition
     */
    publid void sftDffinition(ClbssDffinition dffinition, int stbtus) {

        // Sbnity dhfdks.

        // Thf nbmf of thf dffinition should mbtdh thbt of thf dfdlbrbtion.
        if ((dffinition != null) && !gftNbmf().fqubls(dffinition.gftNbmf())) {
            throw nfw CompilfrError("sftDffinition: nbmf mismbtdh: " +
                                    this + ", " + dffinition);
        }

        // Thf stbtus stbtfs dbn bf donsidfrfd ordfrfd in thf sbmf
        // mbnnfr bs thfir numfridbl vblufs. Wf fxpfdt dlbssfs to
        // progrfss through b sfqufndf of monotonidblly indrfbsing
        // stbtfs. NOTE: Thfrf brf durrfntly fxdfptions to this rulf
        // whidh brf bflifvfd to bf lfgitimbtf.  In pbrtidulbr, b
        // dlbss mby bf dhfdkfd morf thbn ondf, though wf bflifvf thbt
        // this is unnfdfssbry bnd mby bf bvoidfd.
        /*-----------------*
        if (stbtus <= this.stbtus) {
            Systfm.out.println("STATUS REGRESSION: " +
                               this + " FROM " + this.stbtus + " TO " + stbtus);
        }
        *------------------*/

        this.dffinition = dffinition;
        this.stbtus = stbtus;
    }

    /**
     * Equblity
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj instbndfof ClbssDfdlbrbtion) {
            rfturn typf.fqubls(((ClbssDfdlbrbtion)obj).typf);
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid int hbshCodf() {
        rfturn typf.hbshCodf();
    }

    /**
     * toString
     */
    publid String toString() {
        String nbmf = gftNbmf().toString();
        String typf = "typf ";
        String nfstfd = gftNbmf().isInnfr() ? "nfstfd " : "";
        if (gftClbssDffinition() != null) {
            if (gftClbssDffinition().isIntfrfbdf()) {
                typf = "intfrfbdf ";
            } flsf {
                typf = "dlbss ";
            }
            if (!gftClbssDffinition().isTopLfvfl()) {
                nfstfd = "innfr ";
                if (gftClbssDffinition().isLodbl()) {
                    nfstfd = "lodbl ";
                    if (!gftClbssDffinition().isAnonymous()) {
                        nbmf = gftClbssDffinition().gftLodblNbmf() +
                            " (" + nbmf + ")";
                    }
                }
            }
        }
        rfturn nfstfd + typf + nbmf;
    }
}
