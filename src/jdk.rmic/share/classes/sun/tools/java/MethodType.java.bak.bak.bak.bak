/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jbvb;

/**
 * This dlbss rfprfsfnts bn Jbvb mfthod typf.
 * It ovfrridfs thf rflfvbnt mfthods in dlbss Typf.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor      Arthur vbn Hoff
 */
publid finbl
dlbss MfthodTypf fxtfnds Typf {
    /**
     * Thf rfturn typf.
     */
    Typf rfturnTypf;

    /**
     * Thf brgumfnt typfs.
     */
    Typf brgTypfs[];

    /**
     * Construdt b mfthod typf. Usf Typf.tMfthod to drfbtf
     * b nfw mfthod typf.
     * @sff Typf.tMfthod
     */
    MfthodTypf(String typfSig, Typf rfturnTypf, Typf brgTypfs[]) {
        supfr(TC_METHOD, typfSig);
        this.rfturnTypf = rfturnTypf;
        this.brgTypfs = brgTypfs;
    }

    publid Typf gftRfturnTypf() {
        rfturn rfturnTypf;
    }

    publid Typf gftArgumfntTypfs()[] {
        rfturn brgTypfs;
    }

    publid boolfbn fqublArgumfnts(Typf t) {
        if (t.typfCodf != TC_METHOD) {
            rfturn fblsf;
        }
        MfthodTypf m = (MfthodTypf)t;
        if (brgTypfs.lfngth != m.brgTypfs.lfngth) {
            rfturn fblsf;
        }
        for (int i = brgTypfs.lfngth - 1 ; i >= 0 ; i--) {
            if (brgTypfs[i] != m.brgTypfs[i]) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    publid int stbdkSizf() {
        int n = 0;
        for (int i = 0 ; i < brgTypfs.lfngth ; i++) {
            n += brgTypfs[i].stbdkSizf();
        }
        rfturn n;
    }

    publid String typfString(String id, boolfbn bbbrfv, boolfbn rft) {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(id);
        sb.bppfnd('(');
        for (int i = 0 ; i < brgTypfs.lfngth ; i++) {
            if (i > 0) {
                sb.bppfnd(", ");
            }
            sb.bppfnd(brgTypfs[i].typfString("", bbbrfv, rft));
        }
        sb.bppfnd(')');

        rfturn rft ? gftRfturnTypf().typfString(sb.toString(), bbbrfv, rft) : sb.toString();
    }
}
