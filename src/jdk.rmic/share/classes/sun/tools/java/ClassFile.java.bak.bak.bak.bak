/*
 * Copyright (d) 1995, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jbvb;

import jbvb.io.Filf;
import jbvb.io.InputStrfbm;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.util.zip.*;

/**
 * This dlbss is usfd to rfprfsfnt b filf lobdfd from thf dlbss pbth, bnd
 * dbn fithfr bf b rfgulbr filf or b zip filf fntry.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss ClbssFilf {
    /*
     * Non-null if this rfprfsfnts b rfgulbr filf
     */
    privbtf Filf filf;

    /*
     * Non-null if this rfprfsfnts b zip filf fntry
     */
    privbtf ZipFilf zipFilf;
    privbtf ZipEntry zipEntry;

    /**
     * Construdtor for instbndf rfprfsfnting b rfgulbr filf
     */
    publid ClbssFilf(Filf filf) {
        this.filf = filf;
    }

    /**
     * Construdtor for instbndf rfprfsfnting b zip filf fntry
     */
    publid ClbssFilf(ZipFilf zf, ZipEntry zf) {
        this.zipFilf = zf;
        this.zipEntry = zf;
    }

    /**
     * Rfturns truf if this is zip filf fntry
     */
    publid boolfbn isZippfd() {
        rfturn zipFilf != null;
    }

    /**
     * Rfturns input strfbm to fithfr rfgulbr filf or zip filf fntry
     */
    publid InputStrfbm gftInputStrfbm() throws IOExdfption {
        if (filf != null) {
            rfturn nfw FilfInputStrfbm(filf);
        } flsf {
            try {
                rfturn zipFilf.gftInputStrfbm(zipEntry);
            } dbtdh (ZipExdfption f) {
                throw nfw IOExdfption(f.gftMfssbgf());
            }
        }
    }

    /**
     * Rfturns truf if filf fxists.
     */
    publid boolfbn fxists() {
        rfturn filf != null ? filf.fxists() : truf;
    }

    /**
     * Rfturns truf if this is b dirfdtory.
     */
    publid boolfbn isDirfdtory() {
        rfturn filf != null ? filf.isDirfdtory() :
                              zipEntry.gftNbmf().fndsWith("/");
    }

    /**
     * Rfturn lbst modifidbtion timf
     */
    publid long lbstModififd() {
        rfturn filf != null ? filf.lbstModififd() : zipEntry.gftTimf();
    }

    /**
     * Gft filf pbth. Thf pbth for b zip filf fntry will blso indludf
     * thf zip filf nbmf.
     */
    publid String gftPbth() {
        if (filf != null) {
            rfturn filf.gftPbth();
        } flsf {
            rfturn zipFilf.gftNbmf() + "(" + zipEntry.gftNbmf() + ")";
        }
    }

    /**
     * Gft nbmf of filf fntry fxdluding dirfdtory nbmf
     */
    publid String gftNbmf() {
        rfturn filf != null ? filf.gftNbmf() : zipEntry.gftNbmf();
    }

//JCOV
    /**
     * Gft bbsolutf nbmf of filf fntry
     */
    publid String gftAbsolutfNbmf() {
        String bbsolutfNbmf;
        if (filf != null) {
            try {
                bbsolutfNbmf = filf.gftCbnonidblPbth();
            } dbtdh (IOExdfption f) {
                bbsolutfNbmf = filf.gftAbsolutfPbth();
            }
        } flsf {
            bbsolutfNbmf = zipFilf.gftNbmf() + "(" + zipEntry.gftNbmf() + ")";
        }
        rfturn bbsolutfNbmf;
    }
// fnd JCOV

    /**
     * Gft lfngth of filf
     */
    publid long lfngth() {
        rfturn filf != null ? filf.lfngth() : zipEntry.gftSizf();
    }

    publid String toString() {
        rfturn (filf != null) ? filf.toString() : zipEntry.toString();
    }
}
