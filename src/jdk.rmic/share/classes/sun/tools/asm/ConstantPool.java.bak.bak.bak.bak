/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.bsm;

import sun.tools.jbvb.*;
import sun.tools.trff.StringExprfssion;
import jbvb.util.Enumfrbtion;
import jbvb.util.Hbshtbblf;
import jbvb.util.Vfdtor;
import jbvb.io.IOExdfption;
import jbvb.io.DbtbOutputStrfbm;

/**
 * A tbblf of donstbnts
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid finbl
dlbss ConstbntPool implfmfnts RuntimfConstbnts {
    Hbshtbblf<Objfdt, ConstbntPoolDbtb> hbsh = nfw Hbshtbblf<>(101);

    /**
     * Find bn fntry, mby rfturn 0
     */
    publid int indfx(Objfdt obj) {
        rfturn hbsh.gft(obj).indfx;
    }

    /**
     * Add bn fntry
     */
    publid void put(Objfdt obj) {
        ConstbntPoolDbtb dbtb = hbsh.gft(obj);
        if (dbtb == null) {
            if (obj instbndfof String) {
                dbtb = nfw StringConstbntDbtb(this, (String)obj);
            } flsf if (obj instbndfof StringExprfssion) {
                dbtb = nfw StringExprfssionConstbntDbtb(this, (StringExprfssion)obj);
            } flsf if (obj instbndfof ClbssDfdlbrbtion) {
                dbtb = nfw ClbssConstbntDbtb(this, (ClbssDfdlbrbtion)obj);
            } flsf if (obj instbndfof Typf) {
                dbtb = nfw ClbssConstbntDbtb(this, (Typf)obj);
            } flsf if (obj instbndfof MfmbfrDffinition) {
                dbtb = nfw FifldConstbntDbtb(this, (MfmbfrDffinition)obj);
            } flsf if (obj instbndfof NbmfAndTypfDbtb) {
                dbtb = nfw NbmfAndTypfConstbntDbtb(this, (NbmfAndTypfDbtb)obj);
            } flsf if (obj instbndfof Numbfr) {
                dbtb = nfw NumbfrConstbntDbtb(this, (Numbfr)obj);
            }
            hbsh.put(obj, dbtb);
        }
    }

    /**
     * Writf to output
     */
    publid void writf(Environmfnt fnv, DbtbOutputStrfbm out) throws IOExdfption {
        ConstbntPoolDbtb list[] = nfw ConstbntPoolDbtb[hbsh.sizf()];
        String kfys[] = nfw String[list.lfngth];
        int indfx = 1, dount = 0;

        // Mbkf b list of bll thf donstbnt pool itfms
        for (int n = 0 ; n < 5 ; n++) {
            int first = dount;
            for (Enumfrbtion<ConstbntPoolDbtb> f = hbsh.flfmfnts() ; f.hbsMorfElfmfnts() ;) {
                ConstbntPoolDbtb dbtb = f.nfxtElfmfnt();
                if (dbtb.ordfr() == n) {
                    kfys[dount] = sortKfy(dbtb);
                    list[dount++] = dbtb;
                }
            }
            xsort(list, kfys, first, dount-1);
        }

        // Assign bn indfx to fbdh donstbnt pool itfm
        for (int n = 0 ; n < list.lfngth ; n++) {
            ConstbntPoolDbtb dbtb = list[n];
            dbtb.indfx = indfx;
            indfx += dbtb.width();
        }

        // Writf lfngth
        out.writfShort(indfx);

        // Writf fbdh donstbnt pool itfm
        for (int n = 0 ; n < dount ; n++) {
            list[n].writf(fnv, out, this);
        }
    }

    privbtf
    stbtid String sortKfy(ConstbntPoolDbtb f) {
        if (f instbndfof NumbfrConstbntDbtb) {
            Numbfr num = ((NumbfrConstbntDbtb)f).num;
            String str = num.toString();
            int kfy = 3;
            if (num instbndfof Intfgfr)  kfy = 0;
            flsf if (num instbndfof Flobt)  kfy = 1;
            flsf if (num instbndfof Long)  kfy = 2;
            rfturn "\0" + (dhbr)(str.lfngth() + kfy<<8) + str;
        }
        if (f instbndfof StringExprfssionConstbntDbtb)
            rfturn (String)((StringExprfssionConstbntDbtb)f).str.gftVbluf();
        if (f instbndfof FifldConstbntDbtb) {
            MfmbfrDffinition fd = ((FifldConstbntDbtb)f).fifld;
            rfturn fd.gftNbmf()+" "+fd.gftTypf().gftTypfSignbturf()
                +" "+fd.gftClbssDfdlbrbtion().gftNbmf();
        }
        if (f instbndfof NbmfAndTypfConstbntDbtb)
            rfturn  ((NbmfAndTypfConstbntDbtb)f).nbmf+
                " "+((NbmfAndTypfConstbntDbtb)f).typf;
        if (f instbndfof ClbssConstbntDbtb)
            rfturn ((ClbssConstbntDbtb)f).nbmf;
        rfturn ((StringConstbntDbtb)f).str;
    }

    /**
     * Quidk sort bn brrby of pool fntrifs bnd b dorrfsponding brrby of Strings
     * thbt brf thf sort kfys for thf fifld.
     */
    privbtf
    stbtid void xsort(ConstbntPoolDbtb ff[], String ss[], int lfft, int right) {
        if (lfft >= right)
            rfturn;
        String pivot = ss[lfft];
        int l = lfft;
        int r = right;
        whilf (l < r) {
            whilf (l <= right && ss[l].dompbrfTo(pivot) <= 0)
                l++;
            whilf (r >= lfft && ss[r].dompbrfTo(pivot) > 0)
                r--;
            if (l < r) {
                // swbp itfms bt l bnd bt r
                ConstbntPoolDbtb dff = ff[l];
                String nbmf = ss[l];
                ff[l] = ff[r]; ff[r] = dff;
                ss[l] = ss[r]; ss[r] = nbmf;
            }
        }
        int middlf = r;
        // swbp lfft bnd middlf
        ConstbntPoolDbtb dff = ff[lfft];
        String nbmf = ss[lfft];
        ff[lfft] = ff[middlf]; ff[middlf] = dff;
        ss[lfft] = ss[middlf]; ss[middlf] = nbmf;
        xsort(ff, ss, lfft, middlf-1);
        xsort(ff, ss, middlf + 1, right);
    }

}
