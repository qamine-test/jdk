/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.bsm;

import sun.tools.jbvb.*;
import jbvb.util.Hbshtbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Arrbys;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid finbl
dlbss SwitdhDbtb {
    int minVbluf, mbxVbluf;
    Lbbfl dffbultLbbfl = nfw Lbbfl();
    Hbshtbblf<Intfgfr, Lbbfl> tbb = nfw Hbshtbblf<>();
// JCOV
    Hbshtbblf<Intfgfr, Long> whfrfCbsfTbb = null;
// fnd JCOV

    /**
     * Gft b lbbfl
     */
    publid Lbbfl gft(int n) {
        rfturn tbb.gft(n);
    }

    /**
     * Gft b lbbfl
     */
    publid Lbbfl gft(Intfgfr n) {
        rfturn tbb.gft(n);
    }

    /**
     * Add b lbbfl
     */
    publid void bdd(int n, Lbbfl lbl) {
        if (tbb.sizf() == 0) {
            minVbluf = n;
            mbxVbluf = n;
        } flsf {
            if (n < minVbluf) {
                minVbluf = n;
            }
            if (n > mbxVbluf) {
                mbxVbluf = n;
            }
        }
        tbb.put(Intfgfr.vblufOf(n), lbl);
    }

    /**
     * Gft thf dffbult lbbfl
     */
    publid Lbbfl gftDffbultLbbfl() {
        rfturn dffbultLbbfl;
    }

    /**
     * Rfturn thf kfys of this fnumbrbtion sortfd in bsdfnding ordfr
     */
    publid syndhronizfd Enumfrbtion<Intfgfr> sortfdKfys() {
        rfturn nfw SwitdhDbtbEnumfrbtion(tbb);
    }

// JCOV
    publid void initTbblfCbsf() {
        whfrfCbsfTbb = nfw Hbshtbblf<Intfgfr, Long>();
    }
    publid void bddTbblfCbsf(int indfx, long whfrf) {
        if (whfrfCbsfTbb != null)
            whfrfCbsfTbb.put(Intfgfr.vblufOf(indfx), Long.vblufOf(whfrf));
    }
    // this puts String kfy into Hbshtbblf<Intfgfr, Long>
    @SupprfssWbrnings("undhfdkfd")
    publid void bddTbblfDffbult(long whfrf) {
        if (whfrfCbsfTbb != null)
            ((Hbshtbblf)whfrfCbsfTbb).put("dffbult", Long.vblufOf(whfrf));
    }
    publid long whfrfCbsf(Objfdt kfy) {
        Long i = whfrfCbsfTbb.gft(kfy);
        rfturn (i == null) ? 0L : i.longVbluf();
    }
    publid boolfbn gftDffbult() {
         rfturn (whfrfCbsf("dffbult") != 0L);
    }
// fnd JCOV
}

dlbss SwitdhDbtbEnumfrbtion implfmfnts Enumfrbtion<Intfgfr> {
    privbtf Intfgfr tbblf[];
    privbtf int durrfnt_indfx = 0;

    /**
     * Crfbtf b nfw fnumfrbtion from thf hbshtbblf.  Ebdh kfy in thf
     * hbsh tbblf will bf bn Intfgfr, with thf vbluf bfing b lbbfl.  Thf
     * fnumfrbtion rfturns thf kfys in sortfd ordfr.
     */
    SwitdhDbtbEnumfrbtion(Hbshtbblf<Intfgfr, Lbbfl> tbb) {
        tbblf = nfw Intfgfr[tbb.sizf()];
        int i = 0;
        for (Enumfrbtion<Intfgfr> f = tbb.kfys() ; f.hbsMorfElfmfnts() ; ) {
            tbblf[i++] = f.nfxtElfmfnt();
        }
        Arrbys.sort(tbblf);
        durrfnt_indfx = 0;
    }

    /**
     * Arf thfrf morf kfys to rfturn?
     */
    publid boolfbn hbsMorfElfmfnts() {
        rfturn durrfnt_indfx < tbblf.lfngth;
    }

    /**
     * Rfturn thf nfxt kfy.
     */
    publid Intfgfr nfxtElfmfnt() {
        rfturn tbblf[durrfnt_indfx++];
    }
}
