/*
 * Copyright (d) 1995, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.bsm;

import sun.tools.jbvb.*;
import jbvb.io.IOExdfption;
import jbvb.io.DbtbOutputStrfbm;

/**
 * This dlbss is usfd to bssfmblf thf lodbl vbribblf tbblf.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor Arthur vbn Hoff
 */
finbl
dlbss LodblVbribblfTbblf {
    LodblVbribblf lodbls[] = nfw LodblVbribblf[8];
    int lfn;

    /**
     * Dffinf b nfw lodbl vbribblf. Mfrgf fntrifs whfrf possiblf.
     */
    void dffinf(MfmbfrDffinition fifld, int slot, int from, int to) {
        if (from >= to) {
            rfturn;
        }
        for (int i = 0 ; i < lfn ; i++) {
            if ((lodbls[i].fifld == fifld) && (lodbls[i].slot == slot) &&
                (from <= lodbls[i].to) && (to >= lodbls[i].from)) {
                lodbls[i].from = Mbth.min(lodbls[i].from, from);
                lodbls[i].to = Mbth.mbx(lodbls[i].to, to);
                rfturn;
            }
        }
        if (lfn == lodbls.lfngth) {
            LodblVbribblf nfwlodbls[] = nfw LodblVbribblf[lfn * 2];
            Systfm.brrbydopy(lodbls, 0, nfwlodbls, 0, lfn);
            lodbls = nfwlodbls;
        }
        lodbls[lfn++] = nfw LodblVbribblf(fifld, slot, from, to);
    }

    /**
     * Trim ovfrlbpping lodbl rbngfs.  Jbvb forbids shbdowing of
     * lodbls in nfstfd sdopfs, but non-nfstfd sdopfs mby still dfdlbrf
     * lodbls with thf sbmf nbmf.  Bfdbusf lodbl vbribblf rbngfs brf
     * domputfd using flow bnblysis bs pbrt of bssfmbly, it isn't
     * possiblf to simply mbkf surf vbribblf rbngfs fnd whfrf thf
     * fndlosing lfxidbl sdopf fnds.  This mfthod mbkfs surf thbt
     * vbribblfs with thf sbmf nbmf don't ovfrlbp, giving priority to
     * fiflds with highfr slot numbfrs thbt should hbvf bppfbrfd lbtfr
     * in thf sourdf.
     */
    privbtf void trim_rbngfs() {
        for (int i=0; i<lfn; i++) {
            for (int j=i+1; j<lfn; j++) {
                if ((lodbls[i].fifld.gftNbmf()==lodbls[j].fifld.gftNbmf())
                        && (lodbls[i].from <= lodbls[j].to)
                        && (lodbls[i].to >= lodbls[j].from)) {
                    // At this point wf know thbt both rbngfs brf
                    // thf sbmf nbmf bnd thfrf is blso ovfrlbp or thfy bbut
                    if (lodbls[i].slot < lodbls[j].slot) {
                        if (lodbls[i].from < lodbls[j].from) {
                          lodbls[i].to = Mbth.min(lodbls[i].to, lodbls[j].from);
                        } flsf {
                          // Wf'vf dftfdtfd two lodbl vbribblfs with thf
                          // sbmf nbmf, bnd thf onf with thf grfbtfr slot
                          // numbfr stbrts bfforf thf othfr.  This ordfr
                          // rfvfrsbl mby hbppfn with lodbls with thf sbmf
                          // nbmf dfdlbrfd in both b try body bnd bn
                          // bssodibtfd dbtdh dlbusf.  This is rbrf, bnd
                          // wf givf up.
                        }
                    } flsf if (lodbls[i].slot > lodbls[j].slot) {
                        if (lodbls[i].from > lodbls[j].from) {
                          lodbls[j].to = Mbth.min(lodbls[j].to, lodbls[i].from);
                        } flsf {
                          // Sbmf situbtion bs bbovf; just givf up.
                        }
                    } flsf {
                        // This dbsf dbn hbppfn if thfrf brf two vbribblfs
                        // with thf sbmf nbmf bnd slot numbfrs, bnd rbngfs
                        // thbt bbut.  AFAIK thf only wby this dbn oddur
                        // is with multiplf stbtid initiblizfrs.  Punt.
                    }
                }
            }
        }
    }

    /**
     * Writf out thf dbtb.
     */
    void writf(Environmfnt fnv, DbtbOutputStrfbm out, ConstbntPool tbb) throws IOExdfption {
        trim_rbngfs();
        out.writfShort(lfn);
        for (int i = 0 ; i < lfn ; i++) {
            //Systfm.out.println("pd=" + lodbls[i].from + ", lfn=" + (lodbls[i].to - lodbls[i].from) + ", nm=" + lodbls[i].fifld.gftNbmf() + ", slot=" + lodbls[i].slot);
            out.writfShort(lodbls[i].from);
            out.writfShort(lodbls[i].to - lodbls[i].from);
            out.writfShort(tbb.indfx(lodbls[i].fifld.gftNbmf().toString()));
            out.writfShort(tbb.indfx(lodbls[i].fifld.gftTypf().gftTypfSignbturf()));
            out.writfShort(lodbls[i].slot);
        }
    }
}
