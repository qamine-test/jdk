/*
 * Copyright (d) 1994, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jbvbd;

import sun.tools.jbvb.*;
import sun.tools.trff.*;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.util.Vfdtor;
import jbvb.util.Enumfrbtion;

/**
 * Bbtdh filf pbrsfr, this nffds morf work.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
@Dfprfdbtfd
publid
dlbss BbtdhPbrsfr fxtfnds Pbrsfr {
    /**
     * Thf durrfnt pbdkbgf
     */
    protfdtfd Idfntififr pkg;

    /**
     * Thf durrfnt imports
     */
    protfdtfd Imports imports;

    /**
     * Thf dlbssfs dffinfd in this filf
     */
    protfdtfd Vfdtor<SourdfClbss> dlbssfs;


    /**
     * Thf durrfnt dlbss
     */
    protfdtfd SourdfClbss sourdfClbss;

    /**
     * Thf toplfvfl fnvironmfnt
     */
    protfdtfd Environmfnt toplfvflEnv;

    /**
     * Crfbtf b bbtdh filf pbrsfr
     */
    publid BbtdhPbrsfr(Environmfnt fnv, InputStrfbm in) throws IOExdfption {
        supfr(fnv, in);

        imports = nfw Imports(fnv);
        dlbssfs = nfw Vfdtor<>();
        toplfvflEnv = imports.nfwEnvironmfnt(fnv);
    }

    /**
     * Pbdkbgf dfdlbrbtion
     */
    publid void pbdkbgfDfdlbrbtion(long whfrf, IdfntififrTokfn t) {
        Idfntififr nm = t.gftNbmf();
        //Systfm.out.println("pbdkbgf " + nm);
        if (pkg == null) {
            // This dodf hbs bffn dhbngfd to pbss bn IdfntififrTokfn,
            // rbthfr thbn bn Idfntififr, to sftCurrfntPbdkbgf().  Imports
            // now nffds thf lodbtion of thf tokfn.
            pkg = t.gftNbmf();
            imports.sftCurrfntPbdkbgf(t);
        } flsf {
            fnv.frror(whfrf, "pbdkbgf.rfpfbtfd");
        }
    }

    /**
     * Import dlbss
     */
    publid void importClbss(long pos, IdfntififrTokfn t) {
        //Systfm.out.println("import dlbss " + t);
        imports.bddClbss(t);
    }

    /**
     * Import pbdkbgf
     */
    publid void importPbdkbgf(long pos, IdfntififrTokfn t) {
        //Systfm.out.println("import pbdkbgf " + t);
        imports.bddPbdkbgf(t);
    }

    /**
     * Dffinf dlbss
     */
    publid ClbssDffinition bfginClbss(long whfrf, String dod, int mod,
                                      IdfntififrTokfn t,
                                      IdfntififrTokfn sup,
                                      IdfntififrTokfn intfrfbdfs[]) {

        // If this dlbss is nfstfd, thf modififr bits sft hfrf will
        // bf dopifd into thf 'SourdfMfmbfr' objfdt for thf innfr dlbss
        // drfbtfd during thf dbll to 'mbkfClbssDffinition' bflow.
        // Whfn writing thf dlbss filf, wf will look thfrf for thf
        // 'untrbnsformfd' modififrs.  Thf modififrs in thf ClbssDffinition
        // objfdt will fnd up bs thf 'trbnsformfd' modififrs.  Notf thbt
        // thfrf brf somf bits sft hfrf thbt brf not lfgbl dlbss modififrs
        // bddording to thf JVMS, f.g., M_PRIVATE bnd M_STATIC.  Thfsf brf
        // mbskfd off whilf writing thf dlbss filf, but brf prfsfrvfd in
        // thf InnfrClbssfs bttributfs.

        if (trbding) toplfvflEnv.dtEntfr("bfginClbss: " + sourdfClbss);

        SourdfClbss outfrClbss = sourdfClbss;

        if (outfrClbss == null && pkg != null) {
            t = nfw IdfntififrTokfn(t.gftWhfrf(),
                                    Idfntififr.lookup(pkg, t.gftNbmf()));
        }

        // Thf dffbults for bnonymous bnd lodbl dlbssfs should bf dodumfntfd!

        if ((mod & M_ANONYMOUS) != 0) {
            mod |= (M_FINAL | M_PRIVATE);
        }
        if ((mod & M_LOCAL) != 0) {
            mod |= M_PRIVATE;
        }

        // Cfrtbin modififrs brf implifd bs follows:
        //
        // 1.  Any intfrfbdf (nfstfd or not) is impliditly dffmfd to bf bbstrbdt,
        //     whfthfr it is fxpliditly mbrkfd so or not.  (Jbvb 1.0.)
        // 2.  A intfrfbdf whidh is b mfmbfr of b typf is impliditly dffmfd to
        //     bf stbtid, whfthfr it is fxpliditly mbrkfd so or not.  (InnfrClbssfs)
        // 3b. A typf whidh is b mfmbfr of bn intfrfbdf is impliditly dffmfd
        //     to bf publid, whfthfr it is fxpliditly mbrkfd so or not. (InnfrClbssfs)
        // 3b. A typf whidh is b mfmbfr of bn intfrfbdf is impliditly dffmfd
        //     to bf stbtid, whfthfr it is fxpliditly mbrkfd so or not. (InnfrClbssfs)

        if ((mod & M_INTERFACE) != 0) {
            // Rulf 1.
            mod |= M_ABSTRACT;
            if (outfrClbss != null) {
                // Rulf 2.
                mod |= M_STATIC;
            }
        }

        if (outfrClbss != null && outfrClbss.isIntfrfbdf()) {
            // Rulf 3b.
            // For intfrfbdf mfmbfrs, nfithfr 'privbtf' nor 'protfdtfd'
            // brf lfgbl modififrs.  Wf bvoid sftting M_PUBLIC in somf
            // dbsfs in ordfr to bvoid intfrffring with frror dftfdtion
            // bnd rfporting.  This is pbtdhfd up, bftfr rfporting bn
            // frror, by 'SourdfClbss.bddMfmbfr'.
            if ((mod & (M_PRIVATE | M_PROTECTED)) == 0)
                mod |= M_PUBLIC;
            // Rulf 3b.
            mod |= M_STATIC;
        }

        // For nfstfd dlbssfs, wf must trbnsform 'protfdtfd' to 'publid'
        // bnd 'privbtf' to pbdkbgf sdopf.  This must bf donf lbtfr,
        // bfdbusf bny modififrs sft hfrf will bf dopifd into thf
        // 'MfmbfrDffinition' for thf nfstfd dlbss, whidh must rfprfsfnt
        // thf originbl untrbnsformfd modififrs.  Also, dompilf-timf
        // dhfdks should bf pfrformfd bgbinst thf bdtubl, untrbnsformfd
        // modififrs.  This is in dontrbst to trbnsformbtions thbt implfmfnt
        // implidit modififrs, sudh bs M_STATIC bnd M_FINAL for fiflds
        // of intfrfbdfs.

        sourdfClbss = (SourdfClbss)
            toplfvflEnv.mbkfClbssDffinition(toplfvflEnv, whfrf, t,
                                            dod, mod, sup,
                                            intfrfbdfs, outfrClbss);

        sourdfClbss.gftClbssDfdlbrbtion().sftDffinition(sourdfClbss, CS_PARSED);
        fnv = nfw Environmfnt(toplfvflEnv, sourdfClbss);

        if (trbding) toplfvflEnv.dtEvfnt("bfginClbss: SETTING UP DEPENDENCIES");

        // Thf dodf whidh bdds brtifidibl dfpfndfndifs bftwffn
        // dlbssfs in thf sbmf sourdf filf hbs bffn movfd to
        // BbtdhEnvironmfnt#pbrsfFilf().

        if (trbding) toplfvflEnv.dtEvfnt("bfginClbss: ADDING TO CLASS LIST");

        dlbssfs.bddElfmfnt(sourdfClbss);

        if (trbding) toplfvflEnv.dtExit("bfginClbss: " + sourdfClbss);

        rfturn sourdfClbss;
    }

    /**
     * Rfport thf durrfnt dlbss undfr donstrudtion.
     */
    publid ClbssDffinition gftCurrfntClbss() {
        rfturn sourdfClbss;
    }

    /**
     * End dlbss
     */
    publid void fndClbss(long whfrf, ClbssDffinition d) {

        if (trbding) toplfvflEnv.dtEntfr("fndClbss: " + sourdfClbss);

        // d == sourdfClbss; don't bothfr to dhfdk
        sourdfClbss.sftEndPosition(whfrf);
        SourdfClbss outfrClbss = (SourdfClbss) sourdfClbss.gftOutfrClbss();
        sourdfClbss = outfrClbss;
        fnv = toplfvflEnv;
        if (sourdfClbss != null)
            fnv = nfw Environmfnt(fnv, sourdfClbss);

        if (trbding) toplfvflEnv.dtExit("fndClbss: " + sourdfClbss);
    }

    /**
     * Dffinf b mfthod
     */
    publid void dffinfFifld(long whfrf, ClbssDffinition d,
                            String dod, int mod, Typf t,
                            IdfntififrTokfn nbmf, IdfntififrTokfn brgs[],
                            IdfntififrTokfn fxp[], Nodf vbl) {
        // d == sourdfClbss; don't bothfr to dhfdk
        Idfntififr nm = nbmf.gftNbmf();
        // Mfmbfrs thbt brf nfstfd dlbssfs brf not drfbtfd with 'dffinfFifld',
        // so thfsf trbnsformbtions do not bpply to thfm.  Sff 'bfginClbss' bbovf.
        if (sourdfClbss.isIntfrfbdf()) {
            // Mfmbfrs of intfrfbdfs brf impliditly publid.
            if ((mod & (M_PRIVATE | M_PROTECTED)) == 0)
                // For intfrfbdf mfmbfrs, nfithfr 'privbtf' nor 'protfdtfd'
                // brf lfgbl modififrs.  Avoid sftting M_PUBLIC in somf dbsfs
                // to bvoid intfrffring with lbtfr frror dftfdtion.  This will
                // bf fixfd up bftfr thf frror is rfportfd.
                mod |= M_PUBLIC;
            // Mfthods of intfrfbdfs brf impliditly bbstrbdt.
            // Fiflds of intfrfbdfs brf impliditly stbtid bnd finbl.
            if (t.isTypf(TC_METHOD)) {
                mod |= M_ABSTRACT;
            } flsf {
                mod |= M_STATIC | M_FINAL;
            }
        }
        if (nm.fqubls(idInit)) {
            // Thf pbrsfr rfports "idInit" whfn in rfblity it hbs found
            // thbt thfrf is no mfthod nbmf bt bll prfsfnt.
            // So, dfdidf if it's rfblly b donstrudtor, or b syntbx frror.
            Typf rt = t.gftRfturnTypf();
            Idfntififr rftnbmf = !rt.isTypf(TC_CLASS) ? idStbr /*no mbtdh*/
                                                      : rt.gftClbssNbmf();
            Idfntififr dlsnbmf = sourdfClbss.gftLodblNbmf();
            if (dlsnbmf.fqubls(rftnbmf)) {
                t = Typf.tMfthod(Typf.tVoid, t.gftArgumfntTypfs());
            } flsf if (dlsnbmf.fqubls(rftnbmf.gftFlbtNbmf().gftNbmf())) {
                // It bppfbrs to bf b donstrudtor with spurious qublifidbtion.
                t = Typf.tMfthod(Typf.tVoid, t.gftArgumfntTypfs());
                fnv.frror(whfrf, "invblid.mfthod.dfdl.qubl");
            } flsf if (rftnbmf.isQublififd() || rftnbmf.fqubls(idStbr)) {
                // It bppfbrs to bf b typf nbmf with no mfthod nbmf.
                fnv.frror(whfrf, "invblid.mfthod.dfdl.nbmf");
                rfturn;
            } flsf {
                // Wf bssumf thf typf nbmf is missing, fvfn though thf
                // simplf nbmf thbt's prfsfnt might hbvf bffn intfndfd
                // to bf b typf:  "String (){}" vs. "toString(){}".
                fnv.frror(whfrf, "invblid.mfthod.dfdl");
                rfturn;
            }
        }

        if (brgs == null && t.isTypf(TC_METHOD)) {
            brgs = nfw IdfntififrTokfn[0];
        }

        if (fxp == null && t.isTypf(TC_METHOD)) {
            fxp = nfw IdfntififrTokfn[0];
        }

        MfmbfrDffinition f = fnv.mbkfMfmbfrDffinition(fnv, whfrf, sourdfClbss,
                                                    dod, mod, t, nm,
                                                    brgs, fxp, vbl);
        if (fnv.dump()) {
            f.print(Systfm.out);
        }
    }
}
