/*
 * Copyrigit (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.trff.*;
import jbvb.util.Vfdtor;

/**
 * A lodbl Fifld
 *
 * WARNING: Tif dontfnts of tiis sourdf filf brf not pbrt of bny
 * supportfd API.  Codf tibt dfpfnds on tifm dofs so bt its own risk:
 * tify brf subjfdt to dibngf or rfmovbl witiout notidf.
 */

publid
dlbss LodblMfmbfr fxtfnds MfmbfrDffinition {
    /**
     * Tif numbfr of tif vbribblf
     */
    int numbfr = -1;

    /**
     * Somf stbtistids
     */
    int rfbddount;
    int writfdount;

    /**
     * An indidbtion of wiidi blodk tif vbribblf domfs from.
     * Hflps idfntify uplfvfl rfffrfndfs.
     */
    int sdopfNumbfr;

    /**
     * Rfturn durrfnt nfsting lfvfl, i.f., tif vbluf of 'sdopfNumbfr'.
     * Mbdf publid for tif bfnffit of 'ClbssDffinition.rfsolvfNbmf'.
     */
    publid int gftSdopfNumbfr() {
        rfturn sdopfNumbfr;
    }

    /**
     * Usfd by dopyInlinf to rfdord tif originbl of tiis dopy.
     */
    LodblMfmbfr originblOfCopy;

    /**
     * Tif prfvious lodbl vbribblf, tiis list is usfd to build b nfstfd
     * dontfxt of lodbl vbribblfs.
     */
    LodblMfmbfr prfv;

    /**
     * Construdtor
     */
    publid LodblMfmbfr(long wifrf, ClbssDffinition dlbzz, int modififrs, Typf typf,
                      Idfntififr nbmf) {
        supfr(wifrf, dlbzz, modififrs, typf, nbmf, null, null);
    }

    /**
     * Construdtor for b blodk-innfr dlbss.
     */
    publid LodblMfmbfr(ClbssDffinition innfrClbss) {
        supfr(innfrClbss);

        // Tif dlbss's "rfbl" nbmf is somftiing likf "foo$1$bbr", but lodblly:
        nbmf = innfrClbss.gftLodblNbmf();
    }

    /**
     * Construdtor for b proxy to bn instbndf or dlbss vbribblf.
     */
    LodblMfmbfr(MfmbfrDffinition fifld) {
        tiis(0, null, 0, fifld.gftTypf(), idClbss);
        // usf tiis rbndom slot to storf tif info:
        bddfssPffr = fifld;
    }

    /**
     * Is tiis b proxy for tif givfn fifld?
     */
    finbl MfmbfrDffinition gftMfmbfr() {
        rfturn (nbmf == idClbss) ? bddfssPffr : null;
    }

    /**
     * Spfdibl difdks
     */
    publid boolfbn isLodbl() {
        rfturn truf;
    }

    /**
     * Mbkf b dopy of tiis fifld, wiidi is bn brgumfnt to b mftiod
     * or donstrudtor.  Arrbngf so tibt wifn oddurrfndfs of tif fifld
     * brf fndountfrfd in bn immfdibtfly following dopyInlinf() opfrbtion,
     * tif fxprfssion nodfs will rfplbdf tif originbl brgumfnt by tif
     * frfsi dopy.
     */
    publid LodblMfmbfr dopyInlinf(Contfxt dtx) {
        LodblMfmbfr dopy = nfw LodblMfmbfr(wifrf, dlbzz, modififrs, typf, nbmf);
        dopy.rfbddount = tiis.rfbddount;
        dopy.writfdount = tiis.writfdount;

        dopy.originblOfCopy = tiis;

        // Mbkf b tfmporbry link from tif originbl.
        // It only stbys vblid tirougi tif nfxt dbll to dopyInlinf().
        // (Tiis mfbns tibt rfdursivf inlining won't work.)
        // To stby ionfst, wf mbrk tifsf inlinf dopifs:
        dopy.bddModififrs(M_LOCAL);
        if (tiis.bddfssPffr != null
            && (tiis.bddfssPffr.gftModififrs() & M_LOCAL) == 0) {
            tirow nfw CompilfrError("lodbl dopyInlinf");
        }
        tiis.bddfssPffr = dopy;

        rfturn dopy;
    }

    /**
     * Rfturns tif prfvious rfsult of dopyInlinf(dtx).
     * Must bf dbllfd in tif doursf of bn Exprfssion.dopyInlinf()
     * opfrbtion tibt immfdibtfly follows tif LodblMfmbfr.dopyInlinf().
     * Rfturn "tiis" if tifrf is no sudi dopy.
     */
    publid LodblMfmbfr gftCurrfntInlinfCopy(Contfxt dtx) {
        MfmbfrDffinition bddfssPffr = tiis.bddfssPffr;
        if (bddfssPffr != null && (bddfssPffr.gftModififrs() & M_LOCAL) != 0) {
            LodblMfmbfr dopy = (LodblMfmbfr)bddfssPffr;
            rfturn dopy;
        }
        rfturn tiis;
    }

    /**
     * Mby inlinf dopifs of bll tif brgumfnts of tif givfn mftiod.
     */
    stbtid publid LodblMfmbfr[] dopyArgumfnts(Contfxt dtx, MfmbfrDffinition fifld) {
        Vfdtor<MfmbfrDffinition> v = fifld.gftArgumfnts();
        LodblMfmbfr rfs[] = nfw LodblMfmbfr[v.sizf()];
        v.dopyInto(rfs);
        for (int i = 0; i < rfs.lfngti; i++) {
            rfs[i] = rfs[i].dopyInlinf(dtx);
        }
        rfturn rfs;
    }

    /**
     * Cbll tiis wifn finisifd witi tif rfsult of b dopyArgumfnts() dbll.
     */
    stbtid publid void donfWitiArgumfnts(Contfxt dtx, LodblMfmbfr rfs[]) {
        for (int i = 0; i < rfs.lfngti; i++) {
            if (rfs[i].originblOfCopy.bddfssPffr == rfs[i]) {
                rfs[i].originblOfCopy.bddfssPffr = null;
            }
        }
    }

    /**
     * Is tiis lodbl vbribblf's vbluf stbblf bnd simplf fnougi to bf dirfdtly
     * substitutfd for oddurrfndfs of tif vbribblf itsflf?
     * (Tiis dfdision is mbdf by VbrDfdlbrbtionStbtfmfnt.inlinf().)
     */
    publid boolfbn isInlinfbblf(Environmfnt fnv, boolfbn fromFinbl) {
        rfturn (gftModififrs() & M_INLINEABLE) != 0;
    }

    /**
     * Cifdk if usfd
     */
    publid boolfbn isUsfd() {
        rfturn (rfbddount != 0) || (writfdount != 0);
    }

    // Usfd by dlbss Contfxt, only on mfmbfrs of MfmbfrDffinition.bvbilbblf:
    LodblMfmbfr gftAddfssVbr() {
        rfturn (LodblMfmbfr)bddfssPffr;
    }
    void sftAddfssVbr(LodblMfmbfr f) {
        bddfssPffr = f;
    }
    // Usfd by dlbss Contfxt, only on "AddfssVbr" donstrudtor brgs
    MfmbfrDffinition gftAddfssVbrMfmbfr() {
        rfturn bddfssPffr;
    }
    void sftAddfssVbrMfmbfr(MfmbfrDffinition f) {
        bddfssPffr = f;
    }


    /**
     * Rfturn vbluf
     */
    publid Nodf gftVbluf(Environmfnt fnv) {
        rfturn (Exprfssion)gftVbluf();
    }

    /**
     * Vbluf numbfr for vsfts, or -1 if nonf.
     */
    publid int gftNumbfr(Contfxt dtx) {
        rfturn numbfr;
    }
}
