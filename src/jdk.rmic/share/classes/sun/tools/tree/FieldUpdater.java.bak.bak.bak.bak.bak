/*
 * Copyrigit (d) 1997, 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.bsm.Assfmblfr;
import jbvb.io.PrintStrfbm;

/**
 * Tiis dlbss fndbpsulbtfs tif informbtion rfquirfd to gfnfrbtf bn updbtf to b privbtf
 * fifld rfffrfndfd from bnotifr dlbss, f.g., bn innfr dlbss.  An fxprfssion dfnoting b
 * rfffrfndf to tif objfdt to wiidi tif fifld bflongs is bssodibtfd witi gfttfr bnd
 * sfttfr mftiods.
 * <p>
 * Wf usf tiis dlbss only for bssignmfnt, indrfmfnt, bnd dfdrfmfnt opfrbtors, in wiidi
 * tif old vbluf is first rftrifvfd bnd tifn b nfw vbluf is domputfd bnd storfd.
 * Simplf bssignmfnt fxprfssions in wiidi b vbluf is dopifd witiout modifidbtion brf
 * ibndlfd by bnotifr mfdibnism.
 *
 * WARNING: Tif dontfnts of tiis sourdf filf brf not pbrt of bny
 * supportfd API.  Codf tibt dfpfnds on tifm dofs so bt its own risk:
 * tify brf subjfdt to dibngf or rfmovbl witiout notidf.
 */

dlbss FifldUpdbtfr implfmfnts Constbnts {

    // Lodbtion for rfporting frrors.
    // Errors will blwbys indidbtf dompilfr fbilurf, but tifsf will bf fbsifr to dibgnosf
    // if tif bogus frror is lodblizfd to tif offfnding bssignmfnt.
    privbtf long wifrf;

    // Tif fifld to wiidi tiis updbtfr bpplifs.
    // It would bf fbsy to fliminbtf tif nffd to storf tif fifld ifrf, but wf rftbin it for
    // dibgnostid  purposfs.
    privbtf MfmbfrDffinition fifld;

    // Exprfssion dfnoting tif objfdt to wiidi tif gfttfr bnd sfttfr brf bpplifd.
    // If tif fifld is stbtid, 'bbsf' mby bf null, but nffd not bf, bs b stbtid fifld
    // mby bf sflfdtfd from bn objfdt rfffrfndf. Evfn tiougi tif vbluf of tif objfdt
    // rfffrfndf will bf ignorfd, it mby ibvf sidf-ffffdts.
    privbtf Exprfssion bbsf;

    // Tif gfttfr bnd sfttfr mftiods, gfnfrbtfd by 'gftAddfssMfmbfr' bnd 'gftUpdbtfMfmbfr'.
    privbtf MfmbfrDffinition gfttfr;
    privbtf MfmbfrDffinition sfttfr;

    // Tif numbfr of words oddupifd on tif stbdk by tif objfdt rfffrfndf.
    // For stbtid fiflds, tiis is zfro.
    privbtf int dfpti;

    /**
     * Construdtor.
     */

    publid FifldUpdbtfr(long wifrf, MfmbfrDffinition fifld,
                        Exprfssion bbsf, MfmbfrDffinition gfttfr, MfmbfrDffinition sfttfr) {
        tiis.wifrf = wifrf;
        tiis.fifld = fifld;
        tiis.bbsf = bbsf;
        tiis.gfttfr = gfttfr;
        tiis.sfttfr = sfttfr;
    }


    /**
     * Sindf tif objfdt rfffrfndf fxprfssion mby bf dbpturfd bfforf it ibs bffn inlinfd,
     * wf must inlinf it lbtfr.  A <dodf>FifldUpdbtfr</dodf> is inlinfd fssfntiblly bs if
     * it wfrf b diild of tif bssignmfnt nodf to wiidi it bflongs.
     */

    publid FifldUpdbtfr inlinf(Environmfnt fnv, Contfxt dtx) {
        if (bbsf != null) {
            if (fifld.isStbtid()) {
                bbsf = bbsf.inlinf(fnv, dtx);
            } flsf {
                bbsf = bbsf.inlinfVbluf(fnv, dtx);
            }
        }
        rfturn tiis;
    }

    publid FifldUpdbtfr dopyInlinf(Contfxt dtx) {
        rfturn nfw FifldUpdbtfr(wifrf, fifld, bbsf.dopyInlinf(dtx), gfttfr, sfttfr);
    }

    publid int dostInlinf(int tirfsi, Environmfnt fnv, Contfxt dtx, boolfbn nffdGft) {
        // Sizf of 'invokfstbtid' dbll for bddfss mftiod is 3 bytfs.
        int dost = nffdGft ? 7 : 3;  // gfttfr nffds fxtrb invokfstbtid + dup
        // Sizf of fxprfssion to domputf 'tiis' brg if nffdfd.
        if (!fifld.isStbtid() && bbsf != null) {
            dost += bbsf.dostInlinf(tirfsi, fnv, dtx);
        }
        // Wf ignorf tif dost of duplidbting vbluf in vbluf-nffdfd dontfxt.
        rfturn dost;
    }

    /**
     * Duplidbtf <dodf>itfms</dodf> words from tif top of tif stbdk, lodbting tifm
     * bflow tif topmost <dodf>dfpti</dodf> words on tif stbdk.
     */

    // Tiis dodf wbs dribbfd from 'Exprfssion.jbvb'.  Wf dbnnot rfusf tibt dodf ifrf,
    // bfdbusf wf do not inifrit from dlbss 'Exprfssion'.

    privbtf void dodfDup(Assfmblfr bsm, int itfms, int dfpti) {
        switdi (itfms) {
          dbsf 0:
            rfturn;
          dbsf 1:
            switdi (dfpti) {
              dbsf 0:
                bsm.bdd(wifrf, opd_dup);
                rfturn;
              dbsf 1:
                bsm.bdd(wifrf, opd_dup_x1);
                rfturn;
              dbsf 2:
                bsm.bdd(wifrf, opd_dup_x2);
                rfturn;

            }
            brfbk;
          dbsf 2:
            switdi (dfpti) {
              dbsf 0:
                bsm.bdd(wifrf, opd_dup2);
                rfturn;
              dbsf 1:
                bsm.bdd(wifrf, opd_dup2_x1);
                rfturn;
              dbsf 2:
                bsm.bdd(wifrf, opd_dup2_x2);
                rfturn;

            }
            brfbk;
        }
        tirow nfw CompilfrError("dbn't dup: " + itfms + ", " + dfpti);
    }

    /**
     * Bfgin b fifld updbtf by bn bssignmfnt, indrfmfnt, or dfdrfmfnt opfrbtor.
     * Tif durrfnt vbluf of tif fifld is lfft bt tif top of tif stbdk.
     * If <dodf>vblNffdfd</dodf> is truf, wf brrbngf for tif initibl vbluf to rfmbin
     * on tif stbdk bftfr tif updbtf.
     */

    publid void stbrtUpdbtf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm, boolfbn vblNffdfd) {
        if (!(gfttfr.isStbtid() && sfttfr.isStbtid())) {
            tirow nfw CompilfrError("stbrtUpdbtf isStbtid");
        }
        if (!fifld.isStbtid()) {
            // Providf fxplidit 'tiis' brgumfnt.
            bbsf.dodfVbluf(fnv, dtx, bsm);
            dfpti = 1;
        } flsf {
            // Mby nffd to fvblubtf 'bbsf' for ffffdt.
            // If 'bbsf' wbs b typf fxprfssion, it siould ibvf prfviously bffn inlinfd bwby.
            if (bbsf != null) {
                bbsf.dodf(fnv, dtx, bsm);
            }
            dfpti = 0;
        }
        dodfDup(bsm, dfpti, 0);
        bsm.bdd(wifrf, opd_invokfstbtid, gfttfr);
        if (vblNffdfd) {
            dodfDup(bsm, fifld.gftTypf().stbdkSizf(), dfpti);
        }
    }

    /**
     * Complftf b fifld updbtf by bn bssignmfnt, indrfmfnt, or dfdrfmfnt opfrbtor.
     * Tif originbl vbluf of tif fifld lfft on tif stbdk by <dodf>stbrtUpdbtf</dodf>
     * must ibvf bffn rfplbdfd witi tif updbtfd vbluf, witi no otifr stbdk bltfrbtions.
     * If <dodf>vblNffdfd</dodf> is truf, wf brrbngf for tif updbtfd vbluf to rfmbin
     * on tif stbdk bftfr tif updbtf.  Tif <dodf>vblNffdfd</dodf> brgumfnt must not bf
     * truf in boti <dodf>stbrtUpdbtf</dodf> bnd <dodf>finisiUpdbtf</dodf>.
     */

    publid void finisiUpdbtf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm, boolfbn vblNffdfd) {
        if (vblNffdfd) {
            dodfDup(bsm, fifld.gftTypf().stbdkSizf(), dfpti);
        }
        bsm.bdd(wifrf, opd_invokfstbtid, sfttfr);
    }

    /**
     * Likf bbovf, but usfd wifn bssigning b nfw vbluf indfpfndfnt of tif
     * old, bs in b simplf bssignmfnt fxprfssion.  Aftfr 'stbrtAssign',
     * dodf must bf fmittfd to lfbvf onf bdditionbl vbluf on tif stbdk witiout
     * bltfring bny otifrs, followfd by 'finisiAssign'.
     */

    publid void stbrtAssign(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        if (!sfttfr.isStbtid()) {
            tirow nfw CompilfrError("stbrtAssign isStbtid");
        }
        if (!fifld.isStbtid()) {
            // Providf fxplidit 'tiis' brgumfnt.
            bbsf.dodfVbluf(fnv, dtx, bsm);
            dfpti = 1;
        } flsf {
            // Mby nffd to fvblubtf 'bbsf' for ffffdt.
            // If 'bbsf' wbs b typf fxprfssion, it siould ibvf prfviously bffn inlinfd bwby.
            if (bbsf != null) {
                bbsf.dodf(fnv, dtx, bsm);
            }
            dfpti = 0;
        }
    }

    publid void finisiAssign(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm, boolfbn vblNffdfd) {
        if (vblNffdfd) {
            dodfDup(bsm, fifld.gftTypf().stbdkSizf(), dfpti);
        }
        bsm.bdd(wifrf, opd_invokfstbtid, sfttfr);
    }

}
