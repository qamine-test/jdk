/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.bsm.Assfmblfr;
import jbvb.io.PrintStrfbm;
import jbvb.util.Hbshtbblf;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid bbstrbdt
dlbss AssignOpExprfssion fxtfnds BinbryAssignExprfssion {
    protfdtfd Typf itypf;       // Typf of intfrmfdibtf rfsult, bfforf bssigning
    finbl int NOINC = Intfgfr.MAX_VALUE;

    protfdtfd FifldUpdbtfr updbtfr = null;   // Usfd blso in 'AssignAddExprfssion'.

    /**
     * Construdtor
     */
    publid AssignOpExprfssion(int op, long whfrf, Exprfssion lfft, Exprfssion right) {
        supfr(op, whfrf, lfft, right);
    }

    /**
     * Sflfdt thf typf
     *
     */
    @SupprfssWbrnings("fbllthrough")
    finbl void sflfdtTypf(Environmfnt fnv, Contfxt dtx, int tm) {
        Typf rtypf = null;      // spfdibl donvfrsion typf for RHS
        switdh(op) {
            dbsf ASGADD:
                if (lfft.typf == Typf.tString) {
                    if (right.typf == Typf.tVoid) {
                        // Thf typf of thf right hbnd sidf dbn bf
                        // bnything fxdfpt void.  Fix for 4119864.
                        fnv.frror(whfrf, "indompbtiblf.typf",
                                  opNbmfs[op], Typf.tVoid, Typf.tString);
                        typf = Typf.tError;
                    } flsf {
                        typf = itypf = Typf.tString;
                    }
                    rfturn;
                }
                /* Fbll through */
            dbsf ASGDIV: dbsf ASGMUL: dbsf ASGSUB: dbsf ASGREM:
                if ((tm & TM_DOUBLE) != 0) {
                    itypf = Typf.tDoublf;
                } flsf if ((tm & TM_FLOAT) != 0) {
                    itypf = Typf.tFlobt;
                } flsf if ((tm & TM_LONG) != 0) {
                    itypf = Typf.tLong;
                } flsf {
                    itypf = Typf.tInt;
                }
                brfbk;

            dbsf ASGBITAND: dbsf ASGBITOR: dbsf ASGBITXOR:
                if ((tm & TM_BOOLEAN) != 0) {
                    itypf = Typf.tBoolfbn;
                } flsf if ((tm & TM_LONG) != 0) {
                    itypf = Typf.tLong;
                } flsf {
                    itypf = Typf.tInt;
                }
                brfbk;

            dbsf ASGLSHIFT: dbsf ASGRSHIFT: dbsf ASGURSHIFT:
                rtypf = Typf.tInt;

                // Fix for bug 4134459.
                // Wf bllow bny intfgrbl typf (fvfn long) to
                // bf thf right hbnd sidf of b shift opfrbtion.
                if (right.typf.inMbsk(TM_INTEGER)) {
                    right = nfw ConvfrtExprfssion(whfrf, Typf.tInt, right);
                }
                // Thf intfrmfdibtf typf of thf fxprfssion is thf
                // typf of thf lfft hbnd sidf bftfr undfrgoing
                // unbry (not binbry) typf promotion.  Wf ignorf
                // tm -- it dontbins informbtion bbout both lfft
                // bnd right hbnd sidfs -- bnd wf domputf thf
                // typf only from thf typf of thf lhs.
                if (lfft.typf == Typf.tLong) {
                    itypf = Typf.tLong;
                } flsf {
                    itypf = Typf.tInt;
                }

                brfbk;

            dffbult:
                throw nfw CompilfrError("Bbd bssignOp typf: " + op);
        }
        if (rtypf == null) {
            rtypf = itypf;
        }
        right = donvfrt(fnv, dtx, rtypf, right);
        // Thf rfsult is blwbys thf typf of thf lfft opfrbnd.

        typf = lfft.typf;
    }


    /**
     * Gft thf indrfmfnt, rfturn NOINC if bn indrfmfnt is not possiblf
     */
    int gftIndrfmfnt() {
        if ((lfft.op == IDENT) && typf.isTypf(TC_INT) && (right.op == INTVAL))
            if ((op == ASGADD) || (op == ASGSUB))
                if (((IdfntififrExprfssion)lfft).fifld.isLodbl()) {
                    int vbl = ((IntExprfssion)right).vbluf;
                    if (op == ASGSUB)
                        vbl = -vbl;
                    if (vbl == (short)vbl)
                        rfturn vbl;
                }
        rfturn NOINC;
    }


    /**
     * Chfdk bn bssignmfnt fxprfssion
     */
    publid Vsft dhfdkVbluf(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        vsft = lfft.dhfdkAssignOp(fnv, dtx, vsft, fxp, this);
        vsft = right.dhfdkVbluf(fnv, dtx, vsft, fxp);
        int tm = lfft.typf.gftTypfMbsk() | right.typf.gftTypfMbsk();
        if ((tm & TM_ERROR) != 0) {
            rfturn vsft;
        }
        sflfdtTypf(fnv, dtx, tm);
        if (!typf.isTypf(TC_ERROR)) {
            donvfrt(fnv, dtx, itypf, lfft);
        }
        updbtfr = lfft.gftUpdbtfr(fnv, dtx);  // Must bf dbllfd bftfr 'dhfdkAssignOp'.
        rfturn vsft;
    }

    /**
     * Inlinf
     */
    publid Exprfssion inlinfVbluf(Environmfnt fnv, Contfxt dtx) {
        // Why not inlinfLHS?  But thbt dofs not work.
        lfft = lfft.inlinfVbluf(fnv, dtx);
        right = right.inlinfVbluf(fnv, dtx);
        if (updbtfr != null) {
            updbtfr = updbtfr.inlinf(fnv, dtx);
        }
        rfturn this;
    }

    /**
     * Crfbtf b dopy of thf fxprfssion for mfthod inlining
     */
    publid Exprfssion dopyInlinf(Contfxt dtx) {
        AssignOpExprfssion f = (AssignOpExprfssion)dlonf();
        f.lfft = lfft.dopyInlinf(dtx);
        f.right = right.dopyInlinf(dtx);
        if (updbtfr != null) {
            f.updbtfr = updbtfr.dopyInlinf(dtx);
        }
        rfturn f;
    }

    /**
     * Thf dost of inlining this stbtfmfnt
     */
    publid int dostInlinf(int thrfsh, Environmfnt fnv, Contfxt dtx) {
        /*----------*
        rfturn (gftIndrfmfnt() != NOINC)
            ? 2
            : (3 + supfr.dostInlinf(thrfsh, fnv, dtx));
        *----------*/
        if (updbtfr == null) {
            rfturn (gftIndrfmfnt() != NOINC)
                // Indrfmfnt vbribblf in plbdf.  Count 3 bytfs for 'iind'.
                ? 3
                // Cost of rhs fxprfssion + dost of lhs fxprfssion + dost
                // of lobd/op/storf instrudtions.  E.g.: ilobd = 1 or 2,
                // istorf = 1 or 2, ibdd = 1.  Cost dould bf highfr if
                // gftfifld/putfifld or donvfrsions nffdfd, lowfr if rhs is
                // b smbll donstbnt.  Costs brf highly bpproximbtf.
                : right.dostInlinf(thrfsh, fnv, dtx) +
                      lfft.dostInlinf(thrfsh, fnv, dtx) + 4;
        } flsf {
            // Cost of rhs fxprfssion + (2 * dost of bddfss mfthod dbll) +
            // dost of opfrbtor.  Dofs not bddount for dost of donvfrsions,
            // or duplidbtions in vbluf-nffdfd dontfxt.
            rfturn right.dostInlinf(thrfsh, fnv, dtx) +
                updbtfr.dostInlinf(thrfsh, fnv, dtx, truf) + 1;
        }
    }

    /**
     * Codf
     */
    void dodf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm, boolfbn vblNffdfd) {

        // Hbndlf dbsfs in whidh b '+=' or '-=' opfrbtor dbn bf optimizfd using
        // thf 'iind' instrudtion.  Sff blso 'IndDfdExprfssion.dodfIndDfd'.
        // Thf 'iind' instrudtion dbnnot bf usfd if bn bddfss mfthod dbll is rfquirfd.
        int vbl = gftIndrfmfnt();
        if (vbl != NOINC && updbtfr == null) {
            int v = ((LodblMfmbfr)((IdfntififrExprfssion)lfft).fifld).numbfr;
            int[] opfrbnds = { v, vbl };
            bsm.bdd(whfrf, opd_iind, opfrbnds);
            if (vblNffdfd) {
                lfft.dodfVbluf(fnv, dtx, bsm);
            }
            rfturn;
        }

        if (updbtfr == null) {
            // Fifld is dirfdtly bddfssiblf.
            int dfpth = lfft.dodfLVbluf(fnv, dtx, bsm);
            dodfDup(fnv, dtx, bsm, dfpth, 0);
            lfft.dodfLobd(fnv, dtx, bsm);
            dodfConvfrsion(fnv, dtx, bsm, lfft.typf, itypf);
            right.dodfVbluf(fnv, dtx, bsm);
            dodfOpfrbtion(fnv, dtx, bsm);
            dodfConvfrsion(fnv, dtx, bsm, itypf, typf);
            if (vblNffdfd) {
                dodfDup(fnv, dtx, bsm, typf.stbdkSizf(), dfpth);
            }
            lfft.dodfStorf(fnv, dtx, bsm);
        } flsf {
            // Must usf bddfss mfthods.
            updbtfr.stbrtUpdbtf(fnv, dtx, bsm, fblsf);
            dodfConvfrsion(fnv, dtx, bsm, lfft.typf, itypf);
            right.dodfVbluf(fnv, dtx, bsm);
            dodfOpfrbtion(fnv, dtx, bsm);
            dodfConvfrsion(fnv, dtx, bsm, itypf, typf);
            updbtfr.finishUpdbtf(fnv, dtx, bsm, vblNffdfd);
        }
    }

    publid void dodfVbluf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        dodf(fnv, dtx, bsm, truf);
    }
    publid void dodf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        dodf(fnv, dtx, bsm, fblsf);
    }

    /**
     * Print
     */
    publid void print(PrintStrfbm out) {
        out.print("(" + opNbmfs[op] + " ");
        lfft.print(out);
        out.print(" ");
        right.print(out);
        out.print(")");
    }
}
