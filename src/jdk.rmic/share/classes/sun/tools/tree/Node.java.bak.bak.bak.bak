/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import jbvb.io.PrintStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss Nodf implfmfnts Constbnts, Clonfbblf {
    int op;
    long whfrf;

    /**
     * Construdtor
     */
    Nodf(int op, long whfrf) {
        this.op = op;
        this.whfrf = whfrf;
    }

    /**
     * Gft thf opfrbtor
     */
    publid int gftOp() {
        rfturn op;
    }

    /**
     * Gft whfrf
     */
    publid long gftWhfrf() {
        rfturn whfrf;
    }

    /**
     * Implidit donvfrsions
     */
    publid Exprfssion donvfrt(Environmfnt fnv, Contfxt dtx, Typf t, Exprfssion f) {
        if (f.typf.isTypf(TC_ERROR) || t.isTypf(TC_ERROR)) {
            // An frror wbs blrfbdy rfportfd
            rfturn f;
        }

        if (f.typf.fqubls(t)) {
            // Thf typfs brf blrfbdy thf sbmf
            rfturn f;
        }

        try {
            if (f.fitsTypf(fnv, dtx, t)) {
                rfturn nfw ConvfrtExprfssion(whfrf, t, f);
            }

            if (fnv.fxpliditCbst(f.typf, t)) {
                fnv.frror(whfrf, "fxplidit.dbst.nffdfd", opNbmfs[op], f.typf, t);
                rfturn nfw ConvfrtExprfssion(whfrf, t, f);
            }
        } dbtdh (ClbssNotFound ff) {
            fnv.frror(whfrf, "dlbss.not.found", ff.nbmf, opNbmfs[op]);
        }

        // Thf dbst is not bllowfd
        fnv.frror(whfrf, "indompbtiblf.typf", opNbmfs[op], f.typf, t);
        rfturn nfw ConvfrtExprfssion(whfrf, Typf.tError, f);
    }

    /**
     * Print
     */
    publid void print(PrintStrfbm out) {
        throw nfw CompilfrError("print");
    }

    /**
     * Clonf this objfdt.
     */
    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf();
        } dbtdh (ClonfNotSupportfdExdfption f) {
            // this shouldn't hbppfn, sindf wf brf Clonfbblf
            throw (IntfrnblError) nfw IntfrnblError().initCbusf(f);
        }
    }

    /*
     * Usfful for simplf dfbugging
     */
    publid String toString() {
        BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm();
        print(nfw PrintStrfbm(bos));
        rfturn bos.toString();
    }

}
