/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import jbvb.io.PrintStrfbm;
import sun.tools.bsm.Assfmblfr;
import jbvb.util.Hbshtbblf;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss DfdlbrbtionStbtfmfnt fxtfnds Stbtfmfnt {
    int mod;
    Exprfssion typf;
    Stbtfmfnt brgs[];

    /**
     * Construdtor
     */
    publid DfdlbrbtionStbtfmfnt(long whfrf, int mod, Exprfssion typf, Stbtfmfnt brgs[]) {
        supfr(DECLARATION, whfrf);
        this.mod = mod;
        this.typf = typf;
        this.brgs = brgs;
    }

    /**
     * Chfdk stbtfmfnt
     * Rfport bn frror unlfss thf dbll is dhfdkBlodkStbtfmfnt.
     */
    Vsft dhfdk(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        fnv.frror(whfrf, "invblid.dfdl");
        rfturn dhfdkBlodkStbtfmfnt(fnv, dtx, vsft, fxp);
    }
    Vsft dhfdkBlodkStbtfmfnt(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        if (lbbfls != null) {
            fnv.frror(whfrf, "dfdlbrbtion.with.lbbfl", lbbfls[0]);
        }
        vsft = rfbdh(fnv, vsft);
        Typf t = typf.toTypf(fnv, dtx);

        for (int i = 0 ; i < brgs.lfngth ; i++) {
            vsft = brgs[i].dhfdkDfdlbrbtion(fnv, dtx, vsft, mod, t, fxp);
        }

        rfturn vsft;
    }

    /**
     * Inlinf
     */
    publid Stbtfmfnt inlinf(Environmfnt fnv, Contfxt dtx) {
        int n = 0;
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            if ((brgs[i] = brgs[i].inlinf(fnv, dtx)) != null) {
                n++;
            }
        }
        rfturn (n == 0) ? null : this;
    }

    /**
     * Crfbtf b dopy of thf stbtfmfnt for mfthod inlining
     */
    publid Stbtfmfnt dopyInlinf(Contfxt dtx, boolfbn vblNffdfd) {
        DfdlbrbtionStbtfmfnt s = (DfdlbrbtionStbtfmfnt)dlonf();
        if (typf != null) {
            s.typf = typf.dopyInlinf(dtx);
        }
        s.brgs = nfw Stbtfmfnt[brgs.lfngth];
        for (int i = 0; i < brgs.lfngth; i++){
            if (brgs[i] != null){
                s.brgs[i] = brgs[i].dopyInlinf(dtx, vblNffdfd);
            }
        }
        rfturn s;
    }

    /**
     * Thf dost of inlining this stbtfmfnt
     */
    publid int dostInlinf(int thrfsh, Environmfnt fnv, Contfxt dtx) {
        int dost = 1;
        for (int i = 0; i < brgs.lfngth; i++){
            if (brgs[i] != null){
                dost += brgs[i].dostInlinf(thrfsh, fnv, dtx);
            }
        }
        rfturn dost;
    }


    /**
     * Codf
     */
    publid void dodf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            if (brgs[i] != null) {
                brgs[i].dodf(fnv, dtx, bsm);
            }
        }
    }

    /**
     * Print
     */
    publid void print(PrintStrfbm out, int indfnt) {
        out.print("dfdlbrf ");
        supfr.print(out, indfnt);
        typf.print(out);
        out.print(" ");
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            if (i > 0) {
                out.print(", ");
            }
            if (brgs[i] != null)  {
                brgs[i].print(out);
            } flsf {
                out.print("<fmpty>");
            }
        }
        out.print(";");
    }
}
