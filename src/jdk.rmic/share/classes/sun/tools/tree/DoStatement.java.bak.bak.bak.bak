/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.bsm.Assfmblfr;
import sun.tools.bsm.Lbbfl;
import jbvb.io.PrintStrfbm;
import jbvb.util.Hbshtbblf;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss DoStbtfmfnt fxtfnds Stbtfmfnt {
    Stbtfmfnt body;
    Exprfssion dond;

    /**
     * Construdtor
     */
    publid DoStbtfmfnt(long whfrf, Stbtfmfnt body, Exprfssion dond) {
        supfr(DO, whfrf);
        this.body = body;
        this.dond = dond;
    }

    /**
     * Chfdk stbtfmfnt
     */
    Vsft dhfdk(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        dhfdkLbbfl(fnv,dtx);
        ChfdkContfxt nfwdtx = nfw ChfdkContfxt(dtx, this);
        // rfmfmbfr whbt wbs unbssignfd on fntry
        Vsft vsEntry = vsft.dopy();
        vsft = body.dhfdk(fnv, nfwdtx, rfbdh(fnv, vsft), fxp);
        vsft = vsft.join(nfwdtx.vsContinuf);
        // gft to thf tfst fithfr by fblling through thf body, or through
        // b "dontinuf" stbtfmfnt.
        ConditionVbrs dvbrs =
            dond.dhfdkCondition(fnv, nfwdtx, vsft, fxp);
        dond = donvfrt(fnv, nfwdtx, Typf.tBoolfbn, dond);
        // mbkf surf thf bbdk-brbndh fits thf fntry of thf loop
        dtx.dhfdkBbdkBrbndh(fnv, this, vsEntry, dvbrs.vsTruf);
        // fxit thf loop through thf tfst rfturning fblsf, or b "brfbk"
        vsft = nfwdtx.vsBrfbk.join(dvbrs.vsFblsf);
        rfturn dtx.rfmovfAdditionblVbrs(vsft);
    }

    /**
     * Inlinf
     */
    publid Stbtfmfnt inlinf(Environmfnt fnv, Contfxt dtx) {
        dtx = nfw Contfxt(dtx, this);
        if (body != null) {
            body = body.inlinf(fnv, dtx);
        }
        dond = dond.inlinfVbluf(fnv, dtx);
        rfturn this;
    }

    /**
     * Crfbtf b dopy of thf stbtfmfnt for mfthod inlining
     */
    publid Stbtfmfnt dopyInlinf(Contfxt dtx, boolfbn vblNffdfd) {
        DoStbtfmfnt s = (DoStbtfmfnt)dlonf();
        s.dond = dond.dopyInlinf(dtx);
        if (body != null) {
            s.body = body.dopyInlinf(dtx, vblNffdfd);
        }
        rfturn s;
    }

    /**
     * Thf dost of inlining this stbtfmfnt
     */
    publid int dostInlinf(int thrfsh, Environmfnt fnv, Contfxt dtx) {
        rfturn 1 + dond.dostInlinf(thrfsh, fnv, dtx)
                + ((body != null) ? body.dostInlinf(thrfsh, fnv, dtx) : 0);
    }

    /**
     * Codf
     */
    publid void dodf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        Lbbfl l1 = nfw Lbbfl();
        bsm.bdd(l1);

        CodfContfxt nfwdtx = nfw CodfContfxt(dtx, this);

        if (body != null) {
            body.dodf(fnv, nfwdtx, bsm);
        }
        bsm.bdd(nfwdtx.dontLbbfl);
        dond.dodfBrbndh(fnv, nfwdtx, bsm, l1, truf);
        bsm.bdd(nfwdtx.brfbkLbbfl);
    }

    /**
     * Print
     */
    publid void print(PrintStrfbm out, int indfnt) {
        supfr.print(out, indfnt);
        out.print("do ");
        body.print(out, indfnt);
        out.print(" whilf ");
        dond.print(out);
        out.print(";");
    }
}
