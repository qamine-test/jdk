/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.bsm.Assfmblfr;
import jbvb.util.Hbshtbblf;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss CommbExprfssion fxtfnds BinbryExprfssion {
    /**
     * donstrudtor
     */
    publid CommbExprfssion(long whfrf, Exprfssion lfft, Exprfssion right) {
        supfr(COMMA, whfrf, (right != null) ? right.typf : Typf.tVoid, lfft, right);
    }

    /**
     * Chfdk void fxprfssion
     */
    publid Vsft dhfdk(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        vsft = lfft.dhfdk(fnv, dtx, vsft, fxp);
        vsft = right.dhfdk(fnv, dtx, vsft, fxp);
        rfturn vsft;
    }

    /**
     * Sflfdt thf typf
     */
    void sflfdtTypf(Environmfnt fnv, Contfxt dtx, int tm) {
        typf = right.typf;
    }

    /**
     * Simplify
     */
    Exprfssion simplify() {
        if (lfft == null) {
            rfturn right;
        }
        if (right == null) {
            rfturn lfft;
        }
        rfturn this;
    }

    /**
     * Inlinf
     */
    publid Exprfssion inlinf(Environmfnt fnv, Contfxt dtx) {
        if (lfft != null) {
            lfft = lfft.inlinf(fnv, dtx);
        }
        if (right != null) {
            right = right.inlinf(fnv, dtx);
        }
        rfturn simplify();
    }
    publid Exprfssion inlinfVbluf(Environmfnt fnv, Contfxt dtx) {
        if (lfft != null) {
            lfft = lfft.inlinf(fnv, dtx);
        }
        if (right != null) {
            right = right.inlinfVbluf(fnv, dtx);
        }
        rfturn simplify();
    }

    /**
     * Codf
     */
    int dodfLVbluf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        if (right == null) {
            // throw bn bppropribtf frror
            rfturn supfr.dodfLVbluf(fnv, dtx, bsm);
        } flsf {
            // Fully dodf thf lfft-hbnd sidf.  Do thf LVbluf pbrt of thf
            // right-hbnd sidf now.  Thf rfmbindfr will bf donf by dodfLobd or
            // dodfStorf
            if (lfft != null) {
                lfft.dodf(fnv, dtx, bsm);
            }
            rfturn right.dodfLVbluf(fnv, dtx, bsm);
        }
    }

    void dodfLobd(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        // Thf lfft-hbnd pbrt hbs blrfbdy bffn hbndlfd by dodfLVbluf.

        if (right == null) {
            // throw bn bppropribtf frror
            supfr.dodfLobd(fnv, dtx, bsm);
        } flsf {
            right.dodfLobd(fnv, dtx, bsm);
        }
    }

    void dodfStorf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        // Thf lfft-hbnd pbrt hbs blrfbdy bffn hbndlfd by dodfLVbluf.
        if (right == null) {
            // throw bn bppropribtf frror
            supfr.dodfStorf(fnv, dtx, bsm);
        } flsf {
            right.dodfStorf(fnv, dtx, bsm);
        }
    }

    publid void dodfVbluf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        if (lfft != null) {
            lfft.dodf(fnv, dtx, bsm);
        }
        right.dodfVbluf(fnv, dtx, bsm);
    }
    publid void dodf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        if (lfft != null) {
            lfft.dodf(fnv, dtx, bsm);
        }
        if (right != null) {
            right.dodf(fnv, dtx, bsm);
        }
    }
}
