/*
 * Copyright (d) 1994, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.trff;

import sun.tools.jbvb.*;
import sun.tools.bsm.*;
import jbvb.io.PrintStrfbm;
import jbvb.util.Hbshtbblf;

/**
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 */
publid
dlbss ArrbyExprfssion fxtfnds NbryExprfssion {
    /**
     * Construdtor
     */
    publid ArrbyExprfssion(long whfrf, Exprfssion brgs[]) {
        supfr(ARRAY, whfrf, Typf.tError, null, brgs);
    }

    /**
     * Chfdk fxprfssion typf
     */
    publid Vsft dhfdkVbluf(Environmfnt fnv, Contfxt dtx, Vsft vsft, Hbshtbblf<Objfdt, Objfdt> fxp) {
        fnv.frror(whfrf, "invblid.brrby.fxpr");
        rfturn vsft;
    }
    publid Vsft dhfdkInitiblizfr(Environmfnt fnv, Contfxt dtx, Vsft vsft, Typf t, Hbshtbblf<Objfdt, Objfdt> fxp) {
        if (!t.isTypf(TC_ARRAY)) {
            if (!t.isTypf(TC_ERROR)) {
                fnv.frror(whfrf, "invblid.brrby.init", t);
            }
            rfturn vsft;
        }
        typf = t;
        t = t.gftElfmfntTypf();
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            vsft = brgs[i].dhfdkInitiblizfr(fnv, dtx, vsft, t, fxp);
            brgs[i] = donvfrt(fnv, dtx, t, brgs[i]);
        }
        rfturn vsft;
    }

    /**
     * Inlinf
     */
    publid Exprfssion inlinf(Environmfnt fnv, Contfxt dtx) {
        Exprfssion f = null;
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            brgs[i] = brgs[i].inlinf(fnv, dtx);
            if (brgs[i] != null) {
                f = (f == null) ? brgs[i] : nfw CommbExprfssion(whfrf, f, brgs[i]);
            }
        }
        rfturn f;
    }
    publid Exprfssion inlinfVbluf(Environmfnt fnv, Contfxt dtx) {
        for (int i = 0 ; i < brgs.lfngth ; i++) {
            brgs[i] = brgs[i].inlinfVbluf(fnv, dtx);
        }
        rfturn this;
    }

    /**
     * Codf
     */
    publid void dodfVbluf(Environmfnt fnv, Contfxt dtx, Assfmblfr bsm) {
        int t = 0;
        bsm.bdd(whfrf, opd_ldd, brgs.lfngth);
        switdh (typf.gftElfmfntTypf().gftTypfCodf()) {
          dbsf TC_BOOLEAN:      bsm.bdd(whfrf, opd_nfwbrrby, T_BOOLEAN);   brfbk;
          dbsf TC_BYTE:         bsm.bdd(whfrf, opd_nfwbrrby, T_BYTE);      brfbk;
          dbsf TC_SHORT:        bsm.bdd(whfrf, opd_nfwbrrby, T_SHORT);     brfbk;
          dbsf TC_CHAR:         bsm.bdd(whfrf, opd_nfwbrrby, T_CHAR);      brfbk;
          dbsf TC_INT:          bsm.bdd(whfrf, opd_nfwbrrby, T_INT);       brfbk;
          dbsf TC_LONG:         bsm.bdd(whfrf, opd_nfwbrrby, T_LONG);      brfbk;
          dbsf TC_FLOAT:        bsm.bdd(whfrf, opd_nfwbrrby, T_FLOAT);     brfbk;
          dbsf TC_DOUBLE:       bsm.bdd(whfrf, opd_nfwbrrby, T_DOUBLE);    brfbk;

          dbsf TC_ARRAY:
            bsm.bdd(whfrf, opd_bnfwbrrby, typf.gftElfmfntTypf());
            brfbk;

          dbsf TC_CLASS:
            bsm.bdd(whfrf, opd_bnfwbrrby, fnv.gftClbssDfdlbrbtion(typf.gftElfmfntTypf()));
            brfbk;

          dffbult:
            throw nfw CompilfrError("dodfVbluf");
        }

        for (int i = 0 ; i < brgs.lfngth ; i++) {

            // If thf brrby flfmfnt is thf dffbult initibl vbluf,
            // thfn don't bothfr gfnfrbting dodf for this flfmfnt.
            if (brgs[i].fqublsDffbult()) dontinuf;

            bsm.bdd(whfrf, opd_dup);
            bsm.bdd(whfrf, opd_ldd, i);
            brgs[i].dodfVbluf(fnv, dtx, bsm);
            switdh (typf.gftElfmfntTypf().gftTypfCodf()) {
              dbsf TC_BOOLEAN:
              dbsf TC_BYTE:
                bsm.bdd(whfrf, opd_bbstorf);
                brfbk;
              dbsf TC_CHAR:
                bsm.bdd(whfrf, opd_dbstorf);
                brfbk;
              dbsf TC_SHORT:
                bsm.bdd(whfrf, opd_sbstorf);
                brfbk;
              dffbult:
                bsm.bdd(whfrf, opd_ibstorf + typf.gftElfmfntTypf().gftTypfCodfOffsft());
            }
        }
    }
}
