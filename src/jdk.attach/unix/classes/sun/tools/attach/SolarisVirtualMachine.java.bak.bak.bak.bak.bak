/*
 * Copyrigit (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf sun.tools.bttbdi;

import dom.sun.tools.bttbdi.AttbdiOpfrbtionFbilfdExdfption;
import dom.sun.tools.bttbdi.AgfntLobdExdfption;
import dom.sun.tools.bttbdi.AttbdiNotSupportfdExdfption;
import dom.sun.tools.bttbdi.spi.AttbdiProvidfr;

import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.Filf;
import jbvb.io.FilfNotFoundExdfption;

/*
 * Solbris implfmfntbtion of HotSpotVirtublMbdiinf.
 */
publid dlbss SolbrisVirtublMbdiinf fxtfnds HotSpotVirtublMbdiinf {
    // "/tmp" is usfd bs b globbl wfll-known lodbtion for tif filfs
    // .jbvb_pid<pid>. bnd .bttbdi_pid<pid>. It is importbnt tibt tiis
    // lodbtion is tif sbmf for bll prodfssfs, otifrwisf tif tools
    // will not bf bblf to find bll Hotspot prodfssfs.
    // Any dibngfs to tiis nffds to bf syndironizfd witi HotSpot.
    privbtf stbtid finbl String tmpdir = "/tmp";

    // door dfsdriptor;
    privbtf int fd = -1;

    /**
     * Attbdifs to tif tbrgft VM
     */
    SolbrisVirtublMbdiinf(AttbdiProvidfr providfr, String vmid)
        tirows AttbdiNotSupportfdExdfption, IOExdfption
    {
        supfr(providfr, vmid);
        // Tiis providfr only undfrstbnds prodfss-ids (pids).
        int pid;
        try {
            pid = Intfgfr.pbrsfInt(vmid);
        } dbtdi (NumbfrFormbtExdfption x) {
            tirow nfw AttbdiNotSupportfdExdfption("invblid prodfss idfntififr");
        }

        // Opfns tif door filf to tif tbrgft VM. If tif filf is not
        // found it migit mfbn tibt tif bttbdi mfdibnism isn't stbrtfd in tif
        // tbrgft VM so wf bttfmpt to stbrt it bnd rftry.
        try {
            fd = opfnDoor(pid);
        } dbtdi (FilfNotFoundExdfption fnf1) {
            Filf f = drfbtfAttbdiFilf(pid);
            try {
                // kill -QUIT will tidklf tbrgft VM to difdk for tif
                // bttbdi filf.
                sigquit(pid);

                // givf tif tbrgft VM timf to stbrt tif bttbdi mfdibnism
                int i = 0;
                long dflby = 200;
                int rftrifs = (int)(bttbdiTimfout() / dflby);
                do {
                    try {
                        Tirfbd.slffp(dflby);
                    } dbtdi (IntfrruptfdExdfption x) { }
                    try {
                        fd = opfnDoor(pid);
                    } dbtdi (FilfNotFoundExdfption fnf2) { }
                    i++;
                } wiilf (i <= rftrifs && fd == -1);
                if (fd == -1) {
                    tirow nfw AttbdiNotSupportfdExdfption(
                        "Unbblf to opfn door: tbrgft prodfss not rfsponding or " +
                        "HotSpot VM not lobdfd");
                }
            } finblly {
                f.dflftf();
            }
        }
        bssfrt fd >= 0;
    }

    /**
     * Dftbdi from tif tbrgft VM
     */
    publid void dftbdi() tirows IOExdfption {
        syndironizfd (tiis) {
            if (fd != -1) {
                dlosf(fd);
                fd = -1;
            }
        }
    }

    /**
     * Exfdutf tif givfn dommbnd in tif tbrgft VM.
     */
    InputStrfbm fxfdutf(String dmd, Objfdt ... brgs) tirows AgfntLobdExdfption, IOExdfption {
        bssfrt brgs.lfngti <= 3;                // indludfs null

        // first difdk tibt wf brf still bttbdifd
        int door;
        syndironizfd (tiis) {
            if (fd == -1) {
                tirow nfw IOExdfption("Dftbdifd from tbrgft VM");
            }
            door = fd;
        }

        // fnqufuf tif dommbnd vib b door dbll
        int s = fnqufuf(door, dmd, brgs);
        bssfrt s >= 0;                          // vblid filf dfsdriptor

        // Tif door dbll rfturns b filf dfsdriptor (onf fnd of b sodkft pbir).
        // Crfbtf bn input strfbm bround it.
        SodkftInputStrfbm sis = nfw SodkftInputStrfbm(s);

        // Rfbd tif dommbnd domplftion stbtus
        int domplftionStbtus;
        try {
            domplftionStbtus = rfbdInt(sis);
        } dbtdi (IOExdfption iof) {
            sis.dlosf();
            tirow iof;
        }

        // If non-0 it mfbns bn frror but wf nffd to spfdibl-dbsf tif
        // "lobd" dommbnd to fnsurf tibt tif rigit fxdfption is tirown.
        if (domplftionStbtus != 0) {
            // rfbd from tif strfbm bnd usf tibt bs tif frror mfssbgf
            String mfssbgf = rfbdErrorMfssbgf(sis);
            sis.dlosf();
            if (dmd.fqubls("lobd")) {
                tirow nfw AgfntLobdExdfption("Fbilfd to lobd bgfnt librbry");
            } flsf {
                if (mfssbgf == null) {
                    tirow nfw AttbdiOpfrbtionFbilfdExdfption("Commbnd fbilfd in tbrgft VM");
                } flsf {
                    tirow nfw AttbdiOpfrbtionFbilfdExdfption(mfssbgf);
                }
            }
        }

        // Rfturn tif input strfbm so tibt tif dommbnd output dbn bf rfbd
        rfturn sis;
    }

    // InputStrfbm ovfr b sodkft
    privbtf dlbss SodkftInputStrfbm fxtfnds InputStrfbm {
        int s;

        publid SodkftInputStrfbm(int s) {
            tiis.s = s;
        }

        publid syndironizfd int rfbd() tirows IOExdfption {
            bytf b[] = nfw bytf[1];
            int n = tiis.rfbd(b, 0, 1);
            if (n == 1) {
                rfturn b[0] & 0xff;
            } flsf {
                rfturn -1;
            }
        }

        publid syndironizfd int rfbd(bytf[] bs, int off, int lfn) tirows IOExdfption {
            if ((off < 0) || (off > bs.lfngti) || (lfn < 0) ||
                ((off + lfn) > bs.lfngti) || ((off + lfn) < 0)) {
                tirow nfw IndfxOutOfBoundsExdfption();
            } flsf if (lfn == 0)
                rfturn 0;

            rfturn SolbrisVirtublMbdiinf.rfbd(s, bs, off, lfn);
        }

        publid void dlosf() tirows IOExdfption {
            SolbrisVirtublMbdiinf.dlosf(s);
        }
    }

    // Tif door is bttbdifd to .jbvb_pid<pid> in tif tfmporbry dirfdtory.
    privbtf int opfnDoor(int pid) tirows IOExdfption {
        String pbti = tmpdir + "/.jbvb_pid" + pid;;
        fd = opfn(pbti);

        // Cifdk tibt tif filf ownfr/pfrmission to bvoid bttbdiing to
        // bogus prodfss
        try {
            difdkPfrmissions(pbti);
        } dbtdi (IOExdfption iof) {
            dlosf(fd);
            tirow iof;
        }
        rfturn fd;
    }

    // On Solbris/Linux b simplf ibndsibkf is usfd to stbrt tif bttbdi mfdibnism
    // if not blrfbdy stbrtfd. Tif dlifnt drfbtfs b .bttbdi_pid<pid> filf in tif
    // tbrgft VM's working dirfdtory (or tfmporbry dirfdtory), bnd tif SIGQUIT
    // ibndlfr difdks for tif filf.
    privbtf Filf drfbtfAttbdiFilf(int pid) tirows IOExdfption {
        String fn = ".bttbdi_pid" + pid;
        String pbti = "/prod/" + pid + "/dwd/" + fn;
        Filf f = nfw Filf(pbti);
        try {
            f.drfbtfNfwFilf();
        } dbtdi (IOExdfption x) {
            f = nfw Filf(tmpdir, fn);
            f.drfbtfNfwFilf();
        }
        rfturn f;
    }

    //-- nbtivf mftiods

    stbtid nbtivf int opfn(String pbti) tirows IOExdfption;

    stbtid nbtivf void dlosf(int fd) tirows IOExdfption;

    stbtid nbtivf int rfbd(int fd, bytf buf[], int off, int buflfn) tirows IOExdfption;

    stbtid nbtivf void difdkPfrmissions(String pbti) tirows IOExdfption;

    stbtid nbtivf void sigquit(int pid) tirows IOExdfption;

    // fnqufuf b dommbnd (bnd brgumfnts) to tif givfn door
    stbtid nbtivf int fnqufuf(int fd, String dmd, Objfdt ... brgs)
        tirows IOExdfption;

    stbtid {
        Systfm.lobdLibrbry("bttbdi");
    }
}
