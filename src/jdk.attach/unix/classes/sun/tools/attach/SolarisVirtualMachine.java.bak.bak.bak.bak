/*
 * Copyright (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.tools.bttbdh;

import dom.sun.tools.bttbdh.AttbdhOpfrbtionFbilfdExdfption;
import dom.sun.tools.bttbdh.AgfntLobdExdfption;
import dom.sun.tools.bttbdh.AttbdhNotSupportfdExdfption;
import dom.sun.tools.bttbdh.spi.AttbdhProvidfr;

import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.Filf;
import jbvb.io.FilfNotFoundExdfption;

/*
 * Solbris implfmfntbtion of HotSpotVirtublMbdhinf.
 */
publid dlbss SolbrisVirtublMbdhinf fxtfnds HotSpotVirtublMbdhinf {
    // "/tmp" is usfd bs b globbl wfll-known lodbtion for thf filfs
    // .jbvb_pid<pid>. bnd .bttbdh_pid<pid>. It is importbnt thbt this
    // lodbtion is thf sbmf for bll prodfssfs, othfrwisf thf tools
    // will not bf bblf to find bll Hotspot prodfssfs.
    // Any dhbngfs to this nffds to bf syndhronizfd with HotSpot.
    privbtf stbtid finbl String tmpdir = "/tmp";

    // door dfsdriptor;
    privbtf int fd = -1;

    /**
     * Attbdhfs to thf tbrgft VM
     */
    SolbrisVirtublMbdhinf(AttbdhProvidfr providfr, String vmid)
        throws AttbdhNotSupportfdExdfption, IOExdfption
    {
        supfr(providfr, vmid);
        // This providfr only undfrstbnds prodfss-ids (pids).
        int pid;
        try {
            pid = Intfgfr.pbrsfInt(vmid);
        } dbtdh (NumbfrFormbtExdfption x) {
            throw nfw AttbdhNotSupportfdExdfption("invblid prodfss idfntififr");
        }

        // Opfns thf door filf to thf tbrgft VM. If thf filf is not
        // found it might mfbn thbt thf bttbdh mfdhbnism isn't stbrtfd in thf
        // tbrgft VM so wf bttfmpt to stbrt it bnd rftry.
        try {
            fd = opfnDoor(pid);
        } dbtdh (FilfNotFoundExdfption fnf1) {
            Filf f = drfbtfAttbdhFilf(pid);
            try {
                // kill -QUIT will tidklf tbrgft VM to dhfdk for thf
                // bttbdh filf.
                sigquit(pid);

                // givf thf tbrgft VM timf to stbrt thf bttbdh mfdhbnism
                int i = 0;
                long dflby = 200;
                int rftrifs = (int)(bttbdhTimfout() / dflby);
                do {
                    try {
                        Thrfbd.slffp(dflby);
                    } dbtdh (IntfrruptfdExdfption x) { }
                    try {
                        fd = opfnDoor(pid);
                    } dbtdh (FilfNotFoundExdfption fnf2) { }
                    i++;
                } whilf (i <= rftrifs && fd == -1);
                if (fd == -1) {
                    throw nfw AttbdhNotSupportfdExdfption(
                        "Unbblf to opfn door: tbrgft prodfss not rfsponding or " +
                        "HotSpot VM not lobdfd");
                }
            } finblly {
                f.dflftf();
            }
        }
        bssfrt fd >= 0;
    }

    /**
     * Dftbdh from thf tbrgft VM
     */
    publid void dftbdh() throws IOExdfption {
        syndhronizfd (this) {
            if (fd != -1) {
                dlosf(fd);
                fd = -1;
            }
        }
    }

    /**
     * Exfdutf thf givfn dommbnd in thf tbrgft VM.
     */
    InputStrfbm fxfdutf(String dmd, Objfdt ... brgs) throws AgfntLobdExdfption, IOExdfption {
        bssfrt brgs.lfngth <= 3;                // indludfs null

        // first dhfdk thbt wf brf still bttbdhfd
        int door;
        syndhronizfd (this) {
            if (fd == -1) {
                throw nfw IOExdfption("Dftbdhfd from tbrgft VM");
            }
            door = fd;
        }

        // fnqufuf thf dommbnd vib b door dbll
        int s = fnqufuf(door, dmd, brgs);
        bssfrt s >= 0;                          // vblid filf dfsdriptor

        // Thf door dbll rfturns b filf dfsdriptor (onf fnd of b sodkft pbir).
        // Crfbtf bn input strfbm bround it.
        SodkftInputStrfbm sis = nfw SodkftInputStrfbm(s);

        // Rfbd thf dommbnd domplftion stbtus
        int domplftionStbtus;
        try {
            domplftionStbtus = rfbdInt(sis);
        } dbtdh (IOExdfption iof) {
            sis.dlosf();
            throw iof;
        }

        // If non-0 it mfbns bn frror but wf nffd to spfdibl-dbsf thf
        // "lobd" dommbnd to fnsurf thbt thf right fxdfption is thrown.
        if (domplftionStbtus != 0) {
            // rfbd from thf strfbm bnd usf thbt bs thf frror mfssbgf
            String mfssbgf = rfbdErrorMfssbgf(sis);
            sis.dlosf();
            if (dmd.fqubls("lobd")) {
                throw nfw AgfntLobdExdfption("Fbilfd to lobd bgfnt librbry");
            } flsf {
                if (mfssbgf == null) {
                    throw nfw AttbdhOpfrbtionFbilfdExdfption("Commbnd fbilfd in tbrgft VM");
                } flsf {
                    throw nfw AttbdhOpfrbtionFbilfdExdfption(mfssbgf);
                }
            }
        }

        // Rfturn thf input strfbm so thbt thf dommbnd output dbn bf rfbd
        rfturn sis;
    }

    // InputStrfbm ovfr b sodkft
    privbtf dlbss SodkftInputStrfbm fxtfnds InputStrfbm {
        int s;

        publid SodkftInputStrfbm(int s) {
            this.s = s;
        }

        publid syndhronizfd int rfbd() throws IOExdfption {
            bytf b[] = nfw bytf[1];
            int n = this.rfbd(b, 0, 1);
            if (n == 1) {
                rfturn b[0] & 0xff;
            } flsf {
                rfturn -1;
            }
        }

        publid syndhronizfd int rfbd(bytf[] bs, int off, int lfn) throws IOExdfption {
            if ((off < 0) || (off > bs.lfngth) || (lfn < 0) ||
                ((off + lfn) > bs.lfngth) || ((off + lfn) < 0)) {
                throw nfw IndfxOutOfBoundsExdfption();
            } flsf if (lfn == 0)
                rfturn 0;

            rfturn SolbrisVirtublMbdhinf.rfbd(s, bs, off, lfn);
        }

        publid void dlosf() throws IOExdfption {
            SolbrisVirtublMbdhinf.dlosf(s);
        }
    }

    // Thf door is bttbdhfd to .jbvb_pid<pid> in thf tfmporbry dirfdtory.
    privbtf int opfnDoor(int pid) throws IOExdfption {
        String pbth = tmpdir + "/.jbvb_pid" + pid;;
        fd = opfn(pbth);

        // Chfdk thbt thf filf ownfr/pfrmission to bvoid bttbdhing to
        // bogus prodfss
        try {
            dhfdkPfrmissions(pbth);
        } dbtdh (IOExdfption iof) {
            dlosf(fd);
            throw iof;
        }
        rfturn fd;
    }

    // On Solbris/Linux b simplf hbndshbkf is usfd to stbrt thf bttbdh mfdhbnism
    // if not blrfbdy stbrtfd. Thf dlifnt drfbtfs b .bttbdh_pid<pid> filf in thf
    // tbrgft VM's working dirfdtory (or tfmporbry dirfdtory), bnd thf SIGQUIT
    // hbndlfr dhfdks for thf filf.
    privbtf Filf drfbtfAttbdhFilf(int pid) throws IOExdfption {
        String fn = ".bttbdh_pid" + pid;
        String pbth = "/prod/" + pid + "/dwd/" + fn;
        Filf f = nfw Filf(pbth);
        try {
            f.drfbtfNfwFilf();
        } dbtdh (IOExdfption x) {
            f = nfw Filf(tmpdir, fn);
            f.drfbtfNfwFilf();
        }
        rfturn f;
    }

    //-- nbtivf mfthods

    stbtid nbtivf int opfn(String pbth) throws IOExdfption;

    stbtid nbtivf void dlosf(int fd) throws IOExdfption;

    stbtid nbtivf int rfbd(int fd, bytf buf[], int off, int buflfn) throws IOExdfption;

    stbtid nbtivf void dhfdkPfrmissions(String pbth) throws IOExdfption;

    stbtid nbtivf void sigquit(int pid) throws IOExdfption;

    // fnqufuf b dommbnd (bnd brgumfnts) to thf givfn door
    stbtid nbtivf int fnqufuf(int fd, String dmd, Objfdt ... brgs)
        throws IOExdfption;

    stbtid {
        Systfm.lobdLibrbry("bttbdh");
    }
}
