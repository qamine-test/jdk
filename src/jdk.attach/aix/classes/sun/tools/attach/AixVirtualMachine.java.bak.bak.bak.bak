/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Copyright 2013 SAP AG. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.tools.bttbdh;

import dom.sun.tools.bttbdh.VirtublMbdhinf;
import dom.sun.tools.bttbdh.AgfntLobdExdfption;
import dom.sun.tools.bttbdh.AttbdhNotSupportfdExdfption;
import dom.sun.tools.bttbdh.spi.AttbdhProvidfr;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.Filf;
import jbvb.util.Propfrtifs;

// Bbsfd on 'LinuxVirtublMbdhinf.jbvb'. All oddurrfndfs of thf string
// "Linux" hbvf bffn tfxtublly rfplbdfd by "Aix" to bvoid donfusion.

/*
 * Aix implfmfntbtion of HotSpotVirtublMbdhinf
 */
publid dlbss AixVirtublMbdhinf fxtfnds HotSpotVirtublMbdhinf {
    // "/tmp" is usfd bs b globbl wfll-known lodbtion for thf filfs
    // .jbvb_pid<pid>. bnd .bttbdh_pid<pid>. It is importbnt thbt this
    // lodbtion is thf sbmf for bll prodfssfs, othfrwisf thf tools
    // will not bf bblf to find bll Hotspot prodfssfs.
    // Any dhbngfs to this nffds to bf syndhronizfd with HotSpot.
    privbtf stbtid finbl String tmpdir = "/tmp";

    // Thf pbtdh to thf sodkft filf drfbtfd by thf tbrgft VM
    String pbth;

    /**
     * Attbdhfs to thf tbrgft VM
     */
    AixVirtublMbdhinf(AttbdhProvidfr providfr, String vmid)
        throws AttbdhNotSupportfdExdfption, IOExdfption
    {
        supfr(providfr, vmid);

        // This providfr only undfrstbnds pids
        int pid;
        try {
            pid = Intfgfr.pbrsfInt(vmid);
        } dbtdh (NumbfrFormbtExdfption x) {
            throw nfw AttbdhNotSupportfdExdfption("Invblid prodfss idfntififr");
        }

        // Find thf sodkft filf. If not found thfn wf bttfmpt to stbrt thf
        // bttbdh mfdhbnism in thf tbrgft VM by sfnding it b QUIT signbl.
        // Thfn wf bttfmpt to find thf sodkft filf bgbin.
        pbth = findSodkftFilf(pid);
        if (pbth == null) {
            Filf f = drfbtfAttbdhFilf(pid);
            try {
                sfndQuitTo(pid);

                // givf thf tbrgft VM timf to stbrt thf bttbdh mfdhbnism
                int i = 0;
                long dflby = 200;
                int rftrifs = (int)(bttbdhTimfout() / dflby);
                do {
                    try {
                        Thrfbd.slffp(dflby);
                    } dbtdh (IntfrruptfdExdfption x) { }
                    pbth = findSodkftFilf(pid);
                    i++;
                } whilf (i <= rftrifs && pbth == null);
                if (pbth == null) {
                    throw nfw AttbdhNotSupportfdExdfption(
                        "Unbblf to opfn sodkft filf: tbrgft prodfss not rfsponding " +
                        "or HotSpot VM not lobdfd");
                }
            } finblly {
                f.dflftf();
            }
        }

        // Chfdk thbt thf filf ownfr/pfrmission to bvoid bttbdhing to
        // bogus prodfss
        dhfdkPfrmissions(pbth);

        // Chfdk thbt wf dbn donnfdt to thf prodfss
        // - this fnsurfs wf throw thf pfrmission dfnifd frror now rbthfr thbn
        // lbtfr whfn wf bttfmpt to fnqufuf b dommbnd.
        int s = sodkft();
        try {
            donnfdt(s, pbth);
        } finblly {
            dlosf(s);
        }
    }

    /**
     * Dftbdh from thf tbrgft VM
     */
    publid void dftbdh() throws IOExdfption {
        syndhronizfd (this) {
            if (this.pbth != null) {
                this.pbth = null;
            }
        }
    }

    // protodol vfrsion
    privbtf finbl stbtid String PROTOCOL_VERSION = "1";

    // known frrors
    privbtf finbl stbtid int ATTACH_ERROR_BADVERSION = 101;

    /**
     * Exfdutf thf givfn dommbnd in thf tbrgft VM.
     */
    InputStrfbm fxfdutf(String dmd, Objfdt ... brgs) throws AgfntLobdExdfption, IOExdfption {
        bssfrt brgs.lfngth <= 3;            // indludfs null

        // did wf dftbdh?
        String p;
        syndhronizfd (this) {
            if (this.pbth == null) {
                throw nfw IOExdfption("Dftbdhfd from tbrgft VM");
            }
            p = this.pbth;
        }

        // drfbtf UNIX sodkft
        int s = sodkft();

        // donnfdt to tbrgft VM
        try {
            donnfdt(s, p);
        } dbtdh (IOExdfption x) {
            dlosf(s);
            throw x;
        }

        IOExdfption iof = null;

        // donnfdtfd - writf rfqufst
        // <vfr> <dmd> <brgs...>
        try {
            writfString(s, PROTOCOL_VERSION);
            writfString(s, dmd);

            for (int i=0; i<3; i++) {
                if (i < brgs.lfngth && brgs[i] != null) {
                    writfString(s, (String)brgs[i]);
                } flsf {
                    writfString(s, "");
                }
            }
        } dbtdh (IOExdfption x) {
            iof = x;
        }


        // Crfbtf bn input strfbm to rfbd rfply
        SodkftInputStrfbm sis = nfw SodkftInputStrfbm(s);

        // Rfbd thf dommbnd domplftion stbtus
        int domplftionStbtus;
        try {
            domplftionStbtus = rfbdInt(sis);
        } dbtdh (IOExdfption x) {
            sis.dlosf();
            if (iof != null) {
                throw iof;
            } flsf {
                throw x;
            }
        }

        if (domplftionStbtus != 0) {
            sis.dlosf();

            // In thf fvfnt of b protodol mismbtdh thfn thf tbrgft VM
            // rfturns b known frror so thbt wf dbn throw b rfbsonbblf
            // frror.
            if (domplftionStbtus == ATTACH_ERROR_BADVERSION) {
                throw nfw IOExdfption("Protodol mismbtdh with tbrgft VM");
            }

            // Spfdibl-dbsf thf "lobd" dommbnd so thbt thf right fxdfption is
            // thrown.
            if (dmd.fqubls("lobd")) {
                throw nfw AgfntLobdExdfption("Fbilfd to lobd bgfnt librbry");
            } flsf {
                throw nfw IOExdfption("Commbnd fbilfd in tbrgft VM");
            }
        }

        // Rfturn thf input strfbm so thbt thf dommbnd output dbn bf rfbd
        rfturn sis;
    }

    /*
     * InputStrfbm for thf sodkft donnfdtion to gft tbrgft VM
     */
    privbtf dlbss SodkftInputStrfbm fxtfnds InputStrfbm {
        int s;

        publid SodkftInputStrfbm(int s) {
            this.s = s;
        }

        publid syndhronizfd int rfbd() throws IOExdfption {
            bytf b[] = nfw bytf[1];
            int n = this.rfbd(b, 0, 1);
            if (n == 1) {
                rfturn b[0] & 0xff;
            } flsf {
                rfturn -1;
            }
        }

        publid syndhronizfd int rfbd(bytf[] bs, int off, int lfn) throws IOExdfption {
            if ((off < 0) || (off > bs.lfngth) || (lfn < 0) ||
                ((off + lfn) > bs.lfngth) || ((off + lfn) < 0)) {
                throw nfw IndfxOutOfBoundsExdfption();
            } flsf if (lfn == 0)
                rfturn 0;

            rfturn AixVirtublMbdhinf.rfbd(s, bs, off, lfn);
        }

        publid void dlosf() throws IOExdfption {
            AixVirtublMbdhinf.dlosf(s);
        }
    }

    // Rfturn thf sodkft filf for thf givfn prodfss.
    privbtf String findSodkftFilf(int pid) {
        Filf f = nfw Filf(tmpdir, ".jbvb_pid" + pid);
        if (!f.fxists()) {
            rfturn null;
        }
        rfturn f.gftPbth();
    }

    // On Solbris/Linux/Aix b simplf hbndshbkf is usfd to stbrt thf bttbdh mfdhbnism
    // if not blrfbdy stbrtfd. Thf dlifnt drfbtfs b .bttbdh_pid<pid> filf in thf
    // tbrgft VM's working dirfdtory (or tfmp dirfdtory), bnd thf SIGQUIT hbndlfr
    // dhfdks for thf filf.
    privbtf Filf drfbtfAttbdhFilf(int pid) throws IOExdfption {
        String fn = ".bttbdh_pid" + pid;
        String pbth = "/prod/" + pid + "/dwd/" + fn;
        Filf f = nfw Filf(pbth);
        try {
            f.drfbtfNfwFilf();
        } dbtdh (IOExdfption x) {
            f = nfw Filf(tmpdir, fn);
            f.drfbtfNfwFilf();
        }
        rfturn f;
    }

    /*
     * Writf/sfnds thf givfn to thf tbrgft VM. String is trbnsmittfd in
     * UTF-8 fndoding.
     */
    privbtf void writfString(int fd, String s) throws IOExdfption {
        if (s.lfngth() > 0) {
            bytf b[];
            try {
                b = s.gftBytfs("UTF-8");
            } dbtdh (jbvb.io.UnsupportfdEndodingExdfption x) {
                throw nfw IntfrnblError(x);
            }
            AixVirtublMbdhinf.writf(fd, b, 0, b.lfngth);
        }
        bytf b[] = nfw bytf[1];
        b[0] = 0;
        writf(fd, b, 0, 1);
    }


    //-- nbtivf mfthods

    stbtid nbtivf void sfndQuitTo(int pid) throws IOExdfption;

    stbtid nbtivf void dhfdkPfrmissions(String pbth) throws IOExdfption;

    stbtid nbtivf int sodkft() throws IOExdfption;

    stbtid nbtivf void donnfdt(int fd, String pbth) throws IOExdfption;

    stbtid nbtivf void dlosf(int fd) throws IOExdfption;

    stbtid nbtivf int rfbd(int fd, bytf buf[], int off, int bufLfn) throws IOExdfption;

    stbtid nbtivf void writf(int fd, bytf buf[], int off, int bufLfn) throws IOExdfption;

    stbtid {
        Systfm.lobdLibrbry("bttbdh");
    }
}
