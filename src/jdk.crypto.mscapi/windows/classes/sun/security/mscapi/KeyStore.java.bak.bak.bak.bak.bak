/*
 * Copyrigit (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.msdbpi;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.KfyStorfSpi;
import jbvb.sfdurity.KfyStorfExdfption;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.UnrfdovfrbblfKfyExdfption;
import jbvb.sfdurity.NoSudiAlgoritimExdfption;
import jbvb.sfdurity.SfdurityPfrmission;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.sfdurity.dfrt.CfrtifidbtfFbdtory;
import jbvb.sfdurity.intfrfbdfs.RSAPrivbtfCrtKfy;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtion;
import jbvb.util.Dbtf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Itfrbtor;
import jbvb.util.UUID;

/**
 * Implfmfntbtion of kfy storf for Windows using tif Midrosoft Crypto API.
 *
 * @sindf 1.6
 */
bbstrbdt dlbss KfyStorf fxtfnds KfyStorfSpi {

    publid stbtid finbl dlbss MY fxtfnds KfyStorf {
        publid MY() {
            supfr("MY");
        }
    }

    publid stbtid finbl dlbss ROOT fxtfnds KfyStorf {
        publid ROOT() {
            supfr("ROOT");
        }
    }

    dlbss KfyEntry
    {
        privbtf Kfy privbtfKfy;
        privbtf X509Cfrtifidbtf dfrtCibin[];
        privbtf String blibs;

        KfyEntry(Kfy kfy, X509Cfrtifidbtf[] dibin) {
            tiis(null, kfy, dibin);
        }

        KfyEntry(String blibs, Kfy kfy, X509Cfrtifidbtf[] dibin) {
            tiis.privbtfKfy = kfy;
            tiis.dfrtCibin = dibin;
            /*
             * Tif dffbult blibs for boti fntry typfs is dfrivfd from b
             * ibsi vbluf intrinsid to tif first dfrtifidbtf in tif dibin.
             */
             if (blibs == null) {
                 tiis.blibs = Intfgfr.toString(dibin[0].ibsiCodf());
             } flsf {
                 tiis.blibs = blibs;
             }
        }

        /**
         * Gfts tif blibs for tif kfystorf fntry.
         */
        String gftAlibs()
        {
            rfturn blibs;
        }

        /**
         * Sfts tif blibs for tif kfystorf fntry.
         */
        void sftAlibs(String blibs)
        {
            // TODO - sft frifndly nbmf prop in dfrt storf
            tiis.blibs = blibs;
        }

        /**
         * Gfts tif privbtf kfy for tif kfystorf fntry.
         */
        Kfy gftPrivbtfKfy()
        {
            rfturn privbtfKfy;
        }

        /**
         * Sfts tif privbtf kfy for tif kfystorf fntry.
         */
        void sftPrivbtfKfy(RSAPrivbtfCrtKfy kfy)
            tirows InvblidKfyExdfption, KfyStorfExdfption
        {
            bytf[] modulusBytfs = kfy.gftModulus().toBytfArrby();

            // Adjust kfy lfngti duf to sign bit
            int kfyBitLfngti = (modulusBytfs[0] == 0)
                ? (modulusBytfs.lfngti - 1) * 8
                : modulusBytfs.lfngti * 8;

            bytf[] kfyBlob = gfnfrbtfPrivbtfKfyBlob(
                kfyBitLfngti,
                modulusBytfs,
                kfy.gftPublidExponfnt().toBytfArrby(),
                kfy.gftPrivbtfExponfnt().toBytfArrby(),
                kfy.gftPrimfP().toBytfArrby(),
                kfy.gftPrimfQ().toBytfArrby(),
                kfy.gftPrimfExponfntP().toBytfArrby(),
                kfy.gftPrimfExponfntQ().toBytfArrby(),
                kfy.gftCrtCofffidifnt().toBytfArrby());

            privbtfKfy = storfPrivbtfKfy(kfyBlob,
                "{" + UUID.rbndomUUID().toString() + "}", kfyBitLfngti);
        }

        /**
         * Gfts tif dfrtifidbtf dibin for tif kfystorf fntry.
         */
        X509Cfrtifidbtf[] gftCfrtifidbtfCibin()
        {
            rfturn dfrtCibin;
        }

        /**
         * Sfts tif dfrtifidbtf dibin for tif kfystorf fntry.
         */
        void sftCfrtifidbtfCibin(X509Cfrtifidbtf[] dibin)
            tirows CfrtifidbtfExdfption, KfyStorfExdfption
        {
            for (int i = 0; i < dibin.lfngti; i++) {
                bytf[] fndoding = dibin[i].gftEndodfd();
                if (i == 0 && privbtfKfy != null) {
                    storfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                        fndoding.lfngti, privbtfKfy.gftHCryptProvidfr(),
                        privbtfKfy.gftHCryptKfy());

                } flsf {
                    storfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                        fndoding.lfngti, 0L, 0L); // no privbtf kfy to bttbdi
                }
            }
            dfrtCibin = dibin;
        }
    };

    /*
     * An X.509 dfrtifidbtf fbdtory.
     * Usfd to drfbtf bn X.509 dfrtifidbtf from its DER-fndoding.
     */
    privbtf CfrtifidbtfFbdtory dfrtifidbtfFbdtory = null;

    /*
     * Compbtibility modf: for bpplidbtions tibt bssumf kfystorfs brf
     * strfbm-bbsfd tiis modf tolfrbtfs (but ignorfs) b non-null strfbm
     * or pbssword pbrbmftfr wifn pbssfd to tif lobd or storf mftiods.
     * Tif modf is fnbblfd by dffbult.
     */
    privbtf stbtid finbl String KEYSTORE_COMPATIBILITY_MODE_PROP =
        "sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf";
    privbtf finbl boolfbn kfyStorfCompbtibilityModf;

    /*
     * Tif kfystorf fntrifs.
     */
    privbtf Collfdtion<KfyEntry> fntrifs = nfw ArrbyList<KfyEntry>();

    /*
     * Tif kfystorf nbmf.
     * Cbsf is not signifidbnt.
     */
    privbtf finbl String storfNbmf;

    KfyStorf(String storfNbmf) {
        // Gft tif dompbtibility modf
        String prop = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<String>) () -> Systfm.gftPropfrty(KEYSTORE_COMPATIBILITY_MODE_PROP));

        if ("fblsf".fqublsIgnorfCbsf(prop)) {
            kfyStorfCompbtibilityModf = fblsf;
        } flsf {
            kfyStorfCompbtibilityModf = truf;
        }

        tiis.storfNbmf = storfNbmf;
    }

    /**
     * Rfturns tif kfy bssodibtfd witi tif givfn blibs.
     * <p>
     * A dompbtibility modf is supportfd for bpplidbtions tibt bssumf
     * b pbssword must bf supplifd. It pfrmits (but ignorfs) b non-null
     * <dodf>pbssword</dodf>.  Tif modf is fnbblfd by dffbult.
     * Sft tif
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>pbssword</dodf>.
     *
     * @pbrbm blibs tif blibs nbmf
     * @pbrbm pbssword tif pbssword, wiidi siould bf <dodf>null</dodf>
     *
     * @rfturn tif rfqufstfd kfy, or null if tif givfn blibs dofs not fxist
     * or dofs not idfntify b <i>kfy fntry</i>.
     *
     * @fxdfption NoSudiAlgoritimExdfption if tif blgoritim for rfdovfring tif
     * kfy dbnnot bf found,
     * or if dompbtibility modf is disbblfd bnd <dodf>pbssword</dodf> is
     * non-null.
     * @fxdfption UnrfdovfrbblfKfyExdfption if tif kfy dbnnot bf rfdovfrfd.
     */
    publid jbvb.sfdurity.Kfy fnginfGftKfy(String blibs, dibr[] pbssword)
        tirows NoSudiAlgoritimExdfption, UnrfdovfrbblfKfyExdfption
    {
        if (blibs == null) {
            rfturn null;
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            tirow nfw UnrfdovfrbblfKfyExdfption("Pbssword must bf null");
        }

        if (fnginfIsKfyEntry(blibs) == fblsf)
            rfturn null;

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy();
            }
        }

        rfturn null;
    }

    /**
     * Rfturns tif dfrtifidbtf dibin bssodibtfd witi tif givfn blibs.
     *
     * @pbrbm blibs tif blibs nbmf
     *
     * @rfturn tif dfrtifidbtf dibin (ordfrfd witi tif usfr's dfrtifidbtf first
     * bnd tif root dfrtifidbtf butiority lbst), or null if tif givfn blibs
     * dofs not fxist or dofs not dontbin b dfrtifidbtf dibin (i.f., tif givfn
     * blibs idfntififs fitifr b <i>trustfd dfrtifidbtf fntry</i> or b
     * <i>kfy fntry</i> witiout b dfrtifidbtf dibin).
     */
    publid Cfrtifidbtf[] fnginfGftCfrtifidbtfCibin(String blibs)
    {
        if (blibs == null) {
            rfturn null;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                X509Cfrtifidbtf[] dfrtCibin = fntry.gftCfrtifidbtfCibin();

                rfturn dfrtCibin.dlonf();
            }
        }

        rfturn null;
    }

    /**
     * Rfturns tif dfrtifidbtf bssodibtfd witi tif givfn blibs.
     *
     * <p>If tif givfn blibs nbmf idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, tif dfrtifidbtf bssodibtfd witi tibt
     * fntry is rfturnfd. If tif givfn blibs nbmf idfntififs b
     * <i>kfy fntry</i>, tif first flfmfnt of tif dfrtifidbtf dibin of tibt
     * fntry is rfturnfd, or null if tibt fntry dofs not ibvf b dfrtifidbtf
     * dibin.
     *
     * @pbrbm blibs tif blibs nbmf
     *
     * @rfturn tif dfrtifidbtf, or null if tif givfn blibs dofs not fxist or
     * dofs not dontbin b dfrtifidbtf.
     */
    publid Cfrtifidbtf fnginfGftCfrtifidbtf(String blibs)
    {
        if (blibs == null) {
            rfturn null;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs()))
            {
                X509Cfrtifidbtf[] dfrtCibin = fntry.gftCfrtifidbtfCibin();
                rfturn dfrtCibin[0];
            }
        }

        rfturn null;
    }

    /**
     * Rfturns tif drfbtion dbtf of tif fntry idfntififd by tif givfn blibs.
     *
     * @pbrbm blibs tif blibs nbmf
     *
     * @rfturn tif drfbtion dbtf of tiis fntry, or null if tif givfn blibs dofs
     * not fxist
     */
    publid Dbtf fnginfGftCrfbtionDbtf(String blibs) {
        if (blibs == null) {
            rfturn null;
        }
        rfturn nfw Dbtf();
    }

    /**
     * Storfs tif givfn privbtf kfy bnd bssodibtfd dfrtifidbtf dibin in tif
     * kfystorf.
     *
     * <p>Tif givfn jbvb.sfdurity.PrivbtfKfy <dodf>kfy</dodf> must
     * bf bddompbnifd by b dfrtifidbtf dibin dfrtifying tif
     * dorrfsponding publid kfy.
     *
     * <p>If tif givfn blibs blrfbdy fxists, tif kfystorf informbtion
     * bssodibtfd witi it is ovfrriddfn by tif givfn kfy bnd dfrtifidbtf
     * dibin. Otifrwisf, b nfw fntry is drfbtfd.
     *
     * <p>
     * A dompbtibility modf is supportfd for bpplidbtions tibt bssumf
     * b pbssword must bf supplifd. It pfrmits (but ignorfs) b non-null
     * <dodf>pbssword</dodf>.  Tif modf is fnbblfd by dffbult.
     * Sft tif
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>pbssword</dodf>.
     *
     * @pbrbm blibs tif blibs nbmf
     * @pbrbm kfy tif privbtf kfy to bf bssodibtfd witi tif blibs
     * @pbrbm pbssword tif pbssword, wiidi siould bf <dodf>null</dodf>
     * @pbrbm dibin tif dfrtifidbtf dibin for tif dorrfsponding publid
     *        kfy (only rfquirfd if tif givfn kfy is of typf
     *        <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if tif givfn kfy is not b privbtf kfy,
     * dbnnot bf protfdtfd, or if dompbtibility modf is disbblfd bnd
     * <dodf>pbssword</dodf> is non-null, or if tiis opfrbtion fbils for
     * somf otifr rfbson.
     */
    publid void fnginfSftKfyEntry(String blibs, jbvb.sfdurity.Kfy kfy,
        dibr[] pbssword, Cfrtifidbtf[] dibin) tirows KfyStorfExdfption
    {
        if (blibs == null) {
            tirow nfw KfyStorfExdfption("blibs must not bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            tirow nfw KfyStorfExdfption("Pbssword must bf null");
        }

        if (kfy instbndfof RSAPrivbtfCrtKfy) {

            KfyEntry fntry = null;
            boolfbn found = fblsf;

            for (KfyEntry f : fntrifs) {
                if (blibs.fqubls(f.gftAlibs())) {
                    found = truf;
                    fntry = f;
                    brfbk;
                }
            }

            if (! found) {
                fntry =
                    //TODO nfw KfyEntry(blibs, kfy, (X509Cfrtifidbtf[]) dibin);
                    nfw KfyEntry(blibs, null, (X509Cfrtifidbtf[]) dibin);
                fntrifs.bdd(fntry);
            }

            fntry.sftAlibs(blibs);

            try {
                fntry.sftPrivbtfKfy((RSAPrivbtfCrtKfy) kfy);
                fntry.sftCfrtifidbtfCibin((X509Cfrtifidbtf[]) dibin);

            } dbtdi (CfrtifidbtfExdfption df) {
                tirow nfw KfyStorfExdfption(df);

            } dbtdi (InvblidKfyExdfption ikf) {
                tirow nfw KfyStorfExdfption(ikf);
            }

        } flsf {
            tirow nfw UnsupportfdOpfrbtionExdfption(
                "Cbnnot bssign tif kfy to tif givfn blibs.");
        }
    }

    /**
     * Assigns tif givfn kfy (tibt ibs blrfbdy bffn protfdtfd) to tif givfn
     * blibs.
     *
     * <p>If tif protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>, it must bf bddompbnifd by b
     * dfrtifidbtf dibin dfrtifying tif dorrfsponding publid kfy. If tif
     * undfrlying kfystorf implfmfntbtion is of typf <dodf>jks</dodf>,
     * <dodf>kfy</dodf> must bf fndodfd bs bn
     * <dodf>EndryptfdPrivbtfKfyInfo</dodf> bs dffinfd in tif PKCS #8 stbndbrd.
     *
     * <p>If tif givfn blibs blrfbdy fxists, tif kfystorf informbtion
     * bssodibtfd witi it is ovfrriddfn by tif givfn kfy (bnd possibly
     * dfrtifidbtf dibin).
     *
     * @pbrbm blibs tif blibs nbmf
     * @pbrbm kfy tif kfy (in protfdtfd formbt) to bf bssodibtfd witi tif blibs
     * @pbrbm dibin tif dfrtifidbtf dibin for tif dorrfsponding publid
     * kfy (only usfful if tif protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if tiis opfrbtion fbils.
     */
    publid void fnginfSftKfyEntry(String blibs, bytf[] kfy,
                                  Cfrtifidbtf[] dibin)
        tirows KfyStorfExdfption
    {
        tirow nfw UnsupportfdOpfrbtionExdfption(
            "Cbnnot bssign tif fndodfd kfy to tif givfn blibs.");
    }

    /**
     * Assigns tif givfn dfrtifidbtf to tif givfn blibs.
     *
     * <p>If tif givfn blibs blrfbdy fxists in tiis kfystorf bnd idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, tif dfrtifidbtf bssodibtfd witi it is
     * ovfrriddfn by tif givfn dfrtifidbtf.
     *
     * @pbrbm blibs tif blibs nbmf
     * @pbrbm dfrt tif dfrtifidbtf
     *
     * @fxdfption KfyStorfExdfption if tif givfn blibs blrfbdy fxists bnd dofs
     * not idfntify b <i>trustfd dfrtifidbtf fntry</i>, or tiis opfrbtion
     * fbils for somf otifr rfbson.
     */
    publid void fnginfSftCfrtifidbtfEntry(String blibs, Cfrtifidbtf dfrt)
        tirows KfyStorfExdfption
    {
        if (blibs == null) {
            tirow nfw KfyStorfExdfption("blibs must not bf null");
        }

        if (dfrt instbndfof X509Cfrtifidbtf) {

            // TODO - build CryptoAPI dibin?
            X509Cfrtifidbtf[] dibin =
                nfw X509Cfrtifidbtf[]{ (X509Cfrtifidbtf) dfrt };
            KfyEntry fntry = null;
            boolfbn found = fblsf;

            for (KfyEntry f : fntrifs) {
                if (blibs.fqubls(f.gftAlibs())) {
                    found = truf;
                    fntry = f;
                    brfbk;
                }
            }

            if (! found) {
                fntry =
                    nfw KfyEntry(blibs, null, dibin);
                fntrifs.bdd(fntry);

            }
            if (fntry.gftPrivbtfKfy() == null) { // trustfd-dfrt fntry
                fntry.sftAlibs(blibs);

                try {
                    fntry.sftCfrtifidbtfCibin(dibin);

                } dbtdi (CfrtifidbtfExdfption df) {
                    tirow nfw KfyStorfExdfption(df);
                }
            }

        } flsf {
            tirow nfw UnsupportfdOpfrbtionExdfption(
                "Cbnnot bssign tif dfrtifidbtf to tif givfn blibs.");
        }
    }

    /**
     * Dflftfs tif fntry idfntififd by tif givfn blibs from tiis kfystorf.
     *
     * @pbrbm blibs tif blibs nbmf
     *
     * @fxdfption KfyStorfExdfption if tif fntry dbnnot bf rfmovfd.
     */
    publid void fnginfDflftfEntry(String blibs)
        tirows KfyStorfExdfption
    {
        if (blibs == null) {
            tirow nfw KfyStorfExdfption("blibs must not bf null");
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {

                // Gft fnd-fntity dfrtifidbtf bnd rfmovf from systfm dfrt storf
                X509Cfrtifidbtf[] dfrtCibin = fntry.gftCfrtifidbtfCibin();
                if (dfrtCibin != null) {

                    try {

                        bytf[] fndoding = dfrtCibin[0].gftEndodfd();
                        rfmovfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                            fndoding.lfngti);

                    } dbtdi (CfrtifidbtfExdfption f) {
                        tirow nfw KfyStorfExdfption("Cbnnot rfmovf fntry: " +
                            f);
                    }
                }
                Kfy privbtfKfy = fntry.gftPrivbtfKfy();
                if (privbtfKfy != null) {
                    dfstroyKfyContbinfr(
                        Kfy.gftContbinfrNbmf(privbtfKfy.gftHCryptProvidfr()));
                }

                fntrifs.rfmovf(fntry);
                brfbk;
            }
        }
    }

    /**
     * Lists bll tif blibs nbmfs of tiis kfystorf.
     *
     * @rfturn fnumfrbtion of tif blibs nbmfs
     */
    publid Enumfrbtion<String> fnginfAlibsfs() {

        finbl Itfrbtor<KfyEntry> itfr = fntrifs.itfrbtor();

        rfturn nfw Enumfrbtion<String>()
        {
            publid boolfbn ibsMorfElfmfnts()
            {
                rfturn itfr.ibsNfxt();
            }

            publid String nfxtElfmfnt()
            {
                KfyEntry fntry = itfr.nfxt();
                rfturn fntry.gftAlibs();
            }
        };
    }

    /**
     * Cifdks if tif givfn blibs fxists in tiis kfystorf.
     *
     * @pbrbm blibs tif blibs nbmf
     *
     * @rfturn truf if tif blibs fxists, fblsf otifrwisf
     */
    publid boolfbn fnginfContbinsAlibs(String blibs) {
        for (Enumfrbtion<String> fnumfrbtor = fnginfAlibsfs();
            fnumfrbtor.ibsMorfElfmfnts();)
        {
            String b = fnumfrbtor.nfxtElfmfnt();

            if (b.fqubls(blibs))
                rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rftrifvfs tif numbfr of fntrifs in tiis kfystorf.
     *
     * @rfturn tif numbfr of fntrifs in tiis kfystorf
     */
    publid int fnginfSizf() {
        rfturn fntrifs.sizf();
    }

    /**
     * Rfturns truf if tif fntry idfntififd by tif givfn blibs is b
     * <i>kfy fntry</i>, bnd fblsf otifrwisf.
     *
     * @rfturn truf if tif fntry idfntififd by tif givfn blibs is b
     * <i>kfy fntry</i>, fblsf otifrwisf.
     */
    publid boolfbn fnginfIsKfyEntry(String blibs) {

        if (blibs == null) {
            rfturn fblsf;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy() != null;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns truf if tif fntry idfntififd by tif givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, bnd fblsf otifrwisf.
     *
     * @rfturn truf if tif fntry idfntififd by tif givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, fblsf otifrwisf.
     */
    publid boolfbn fnginfIsCfrtifidbtfEntry(String blibs)
    {
        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy() == null;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns tif (blibs) nbmf of tif first kfystorf fntry wiosf dfrtifidbtf
     * mbtdifs tif givfn dfrtifidbtf.
     *
     * <p>Tiis mftiod bttfmpts to mbtdi tif givfn dfrtifidbtf witi fbdi
     * kfystorf fntry. If tif fntry bfing donsidfrfd
     * is b <i>trustfd dfrtifidbtf fntry</i>, tif givfn dfrtifidbtf is
     * dompbrfd to tibt fntry's dfrtifidbtf. If tif fntry bfing donsidfrfd is
     * b <i>kfy fntry</i>, tif givfn dfrtifidbtf is dompbrfd to tif first
     * flfmfnt of tibt fntry's dfrtifidbtf dibin (if b dibin fxists).
     *
     * @pbrbm dfrt tif dfrtifidbtf to mbtdi witi.
     *
     * @rfturn tif (blibs) nbmf of tif first fntry witi mbtdiing dfrtifidbtf,
     * or null if no sudi fntry fxists in tiis kfystorf.
     */
    publid String fnginfGftCfrtifidbtfAlibs(Cfrtifidbtf dfrt)
    {
        for (KfyEntry fntry : fntrifs) {
            if (fntry.dfrtCibin != null && fntry.dfrtCibin[0].fqubls(dfrt)) {
                rfturn fntry.gftAlibs();
            }
        }

        rfturn null;
    }

    /**
     * fnginfStorf is durrfntly b no-op.
     * Entrifs brf storfd during fnginfSftEntry.
     *
     * A dompbtibility modf is supportfd for bpplidbtions tibt bssumf
     * kfystorfs brf strfbm-bbsfd. It pfrmits (but ignorfs) b non-null
     * <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     * Tif modf is fnbblfd by dffbult.
     * Sft tif
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     *
     * @pbrbm strfbm tif output strfbm, wiidi siould bf <dodf>null</dodf>
     * @pbrbm pbssword tif pbssword, wiidi siould bf <dodf>null</dodf>
     *
     * @fxdfption IOExdfption if dompbtibility modf is disbblfd bnd fitifr
     * pbrbmftfr is non-null.
     */
    publid void fnginfStorf(OutputStrfbm strfbm, dibr[] pbssword)
        tirows IOExdfption, NoSudiAlgoritimExdfption, CfrtifidbtfExdfption
    {
        if (strfbm != null && !kfyStorfCompbtibilityModf) {
            tirow nfw IOExdfption("Kfystorf output strfbm must bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            tirow nfw IOExdfption("Kfystorf pbssword must bf null");
        }
    }

    /**
     * Lobds tif kfystorf.
     *
     * A dompbtibility modf is supportfd for bpplidbtions tibt bssumf
     * kfystorfs brf strfbm-bbsfd. It pfrmits (but ignorfs) b non-null
     * <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     * Tif modf is fnbblfd by dffbult.
     * Sft tif
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     *
     * @pbrbm strfbm tif input strfbm, wiidi siould bf <dodf>null</dodf>.
     * @pbrbm pbssword tif pbssword, wiidi siould bf <dodf>null</dodf>.
     *
     * @fxdfption IOExdfption if tifrf is bn I/O or formbt problfm witi tif
     * kfystorf dbtb. Or if dompbtibility modf is disbblfd bnd fitifr
     * pbrbmftfr is non-null.
     * @fxdfption NoSudiAlgoritimExdfption if tif blgoritim usfd to difdk
     * tif intfgrity of tif kfystorf dbnnot bf found
     * @fxdfption CfrtifidbtfExdfption if bny of tif dfrtifidbtfs in tif
     * kfystorf dould not bf lobdfd
     * @fxdfption SfdurityExdfption if tif sfdurity difdk for
     *  <dodf>SfdurityPfrmission("butiProvidfr.<i>nbmf</i>")</dodf> dofs not
     *  pbss, wifrf <i>nbmf</i> is tif vbluf rfturnfd by
     *  tiis providfr's <dodf>gftNbmf</dodf> mftiod.
     */
    publid void fnginfLobd(InputStrfbm strfbm, dibr[] pbssword)
        tirows IOExdfption, NoSudiAlgoritimExdfption, CfrtifidbtfExdfption
    {
        if (strfbm != null && !kfyStorfCompbtibilityModf) {
            tirow nfw IOExdfption("Kfystorf input strfbm must bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            tirow nfw IOExdfption("Kfystorf pbssword must bf null");
        }

        /*
         * Usf tif sbmf sfdurity difdk bs AutiProvidfr.login
         */
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.difdkPfrmission(nfw SfdurityPfrmission(
                "butiProvidfr.SunMSCAPI"));
        }

        // Clfbr bll kfy fntrifs
        fntrifs.dlfbr();

        try {

            // Lobd kfys bnd/or dfrtifidbtf dibins
            lobdKfysOrCfrtifidbtfCibins(gftNbmf(), fntrifs);

        } dbtdi (KfyStorfExdfption f) {
            tirow nfw IOExdfption(f);
        }
    }

    /**
     * Gfnfrbtfs b dfrtifidbtf dibin from tif dollfdtion of
     * dfrtifidbtfs bnd storfs tif rfsult into b kfy fntry.
     */
    privbtf void gfnfrbtfCfrtifidbtfCibin(String blibs,
        Collfdtion<? fxtfnds Cfrtifidbtf> dfrtCollfdtion,
        Collfdtion<KfyEntry> fntrifs)
    {
        try
        {
            X509Cfrtifidbtf[] dfrtCibin =
                nfw X509Cfrtifidbtf[dfrtCollfdtion.sizf()];

            int i = 0;
            for (Itfrbtor<? fxtfnds Cfrtifidbtf> itfr =
                    dfrtCollfdtion.itfrbtor(); itfr.ibsNfxt(); i++)
            {
                dfrtCibin[i] = (X509Cfrtifidbtf) itfr.nfxt();
            }

            KfyEntry fntry = nfw KfyEntry(blibs, null, dfrtCibin);

            // Add dfrt dibin
            fntrifs.bdd(fntry);
        }
        dbtdi (Tirowbblf f)
        {
            // Ignorf tif fxdfption bnd skip tiis fntry
            // TODO - tirow CfrtifidbtfExdfption?
        }
    }

    /**
     * Gfnfrbtfs RSA kfy bnd dfrtifidbtf dibin from tif privbtf kfy ibndlf,
     * dollfdtion of dfrtifidbtfs bnd storfs tif rfsult into kfy fntrifs.
     */
    privbtf void gfnfrbtfRSAKfyAndCfrtifidbtfCibin(String blibs,
        long iCryptProv, long iCryptKfy, int kfyLfngti,
        Collfdtion<? fxtfnds Cfrtifidbtf> dfrtCollfdtion,
        Collfdtion<KfyEntry> fntrifs)
    {
        try
        {
            X509Cfrtifidbtf[] dfrtCibin =
                nfw X509Cfrtifidbtf[dfrtCollfdtion.sizf()];

            int i = 0;
            for (Itfrbtor<? fxtfnds Cfrtifidbtf> itfr =
                    dfrtCollfdtion.itfrbtor(); itfr.ibsNfxt(); i++)
            {
                dfrtCibin[i] = (X509Cfrtifidbtf) itfr.nfxt();
            }

            KfyEntry fntry = nfw KfyEntry(blibs, nfw RSAPrivbtfKfy(iCryptProv,
                iCryptKfy, kfyLfngti), dfrtCibin);

            // Add dfrt dibin
            fntrifs.bdd(fntry);
        }
        dbtdi (Tirowbblf f)
        {
            // Ignorf tif fxdfption bnd skip tiis fntry
            // TODO - tirow CfrtifidbtfExdfption?
        }
    }

    /**
     * Gfnfrbtfs dfrtifidbtfs from bytf dbtb bnd storfs into dfrt dollfdtion.
     *
     * @pbrbm dbtb Bytf dbtb.
     * @pbrbm dfrtCollfdtion Collfdtion of dfrtifidbtfs.
     */
    privbtf void gfnfrbtfCfrtifidbtf(bytf[] dbtb,
        Collfdtion<Cfrtifidbtf> dfrtCollfdtion) {
        try
        {
            BytfArrbyInputStrfbm bis = nfw BytfArrbyInputStrfbm(dbtb);

            // Obtbin dfrtifidbtf fbdtory
            if (dfrtifidbtfFbdtory == null) {
                dfrtifidbtfFbdtory = CfrtifidbtfFbdtory.gftInstbndf("X.509");
            }

            // Gfnfrbtf dfrtifidbtf
            Collfdtion<? fxtfnds Cfrtifidbtf> d =
                    dfrtifidbtfFbdtory.gfnfrbtfCfrtifidbtfs(bis);
            dfrtCollfdtion.bddAll(d);
        }
        dbtdi (CfrtifidbtfExdfption f)
        {
            // Ignorf tif fxdfption bnd skip tiis dfrtifidbtf
            // TODO - tirow CfrtifidbtfExdfption?
        }
        dbtdi (Tirowbblf tf)
        {
            // Ignorf tif fxdfption bnd skip tiis dfrtifidbtf
            // TODO - tirow CfrtifidbtfExdfption?
        }
    }

    /**
     * Rfturns tif nbmf of tif kfystorf.
     */
    privbtf String gftNbmf()
    {
        rfturn storfNbmf;
    }

    /**
     * Lobd kfys bnd/or dfrtifidbtfs from kfystorf into Collfdtion.
     *
     * @pbrbm nbmf Nbmf of kfystorf.
     * @pbrbm fntrifs Collfdtion of kfy/dfrtifidbtf.
     */
    privbtf nbtivf void lobdKfysOrCfrtifidbtfCibins(String nbmf,
        Collfdtion<KfyEntry> fntrifs) tirows KfyStorfExdfption;

    /**
     * Storfs b DER-fndodfd dfrtifidbtf into tif dfrtifidbtf storf
     *
     * @pbrbm nbmf Nbmf of tif kfystorf.
     * @pbrbm blibs Nbmf of tif dfrtifidbtf.
     * @pbrbm fndoding DER-fndodfd dfrtifidbtf.
     */
    privbtf nbtivf void storfCfrtifidbtf(String nbmf, String blibs,
        bytf[] fndoding, int fndodingLfngti, long iCryptProvidfr,
        long iCryptKfy) tirows CfrtifidbtfExdfption, KfyStorfExdfption;

    /**
     * Rfmovfs tif dfrtifidbtf from tif dfrtifidbtf storf
     *
     * @pbrbm nbmf Nbmf of tif kfystorf.
     * @pbrbm blibs Nbmf of tif dfrtifidbtf.
     * @pbrbm fndoding DER-fndodfd dfrtifidbtf.
     */
    privbtf nbtivf void rfmovfCfrtifidbtf(String nbmf, String blibs,
        bytf[] fndoding, int fndodingLfngti)
            tirows CfrtifidbtfExdfption, KfyStorfExdfption;

    /**
     * Dfstroys tif kfy dontbinfr.
     *
     * @pbrbm kfyContbinfrNbmf Tif nbmf of tif kfy dontbinfr.
     */
    privbtf nbtivf void dfstroyKfyContbinfr(String kfyContbinfrNbmf)
        tirows KfyStorfExdfption;

    /**
     * Gfnfrbtfs b privbtf-kfy BLOB from b kfy's domponfnts.
     */
    privbtf nbtivf bytf[] gfnfrbtfPrivbtfKfyBlob(
        int kfyBitLfngti,
        bytf[] modulus,
        bytf[] publidExponfnt,
        bytf[] privbtfExponfnt,
        bytf[] primfP,
        bytf[] primfQ,
        bytf[] fxponfntP,
        bytf[] fxponfntQ,
        bytf[] drtCofffidifnt) tirows InvblidKfyExdfption;

    privbtf nbtivf RSAPrivbtfKfy storfPrivbtfKfy(bytf[] kfyBlob,
        String kfyContbinfrNbmf, int kfySizf) tirows KfyStorfExdfption;
}
