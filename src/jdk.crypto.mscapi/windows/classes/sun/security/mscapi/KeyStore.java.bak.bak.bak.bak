/*
 * Copyright (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.msdbpi;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.KfyStorfSpi;
import jbvb.sfdurity.KfyStorfExdfption;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.UnrfdovfrbblfKfyExdfption;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.sfdurity.SfdurityPfrmission;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.sfdurity.dfrt.CfrtifidbtfFbdtory;
import jbvb.sfdurity.intfrfbdfs.RSAPrivbtfCrtKfy;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtion;
import jbvb.util.Dbtf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Itfrbtor;
import jbvb.util.UUID;

/**
 * Implfmfntbtion of kfy storf for Windows using thf Midrosoft Crypto API.
 *
 * @sindf 1.6
 */
bbstrbdt dlbss KfyStorf fxtfnds KfyStorfSpi {

    publid stbtid finbl dlbss MY fxtfnds KfyStorf {
        publid MY() {
            supfr("MY");
        }
    }

    publid stbtid finbl dlbss ROOT fxtfnds KfyStorf {
        publid ROOT() {
            supfr("ROOT");
        }
    }

    dlbss KfyEntry
    {
        privbtf Kfy privbtfKfy;
        privbtf X509Cfrtifidbtf dfrtChbin[];
        privbtf String blibs;

        KfyEntry(Kfy kfy, X509Cfrtifidbtf[] dhbin) {
            this(null, kfy, dhbin);
        }

        KfyEntry(String blibs, Kfy kfy, X509Cfrtifidbtf[] dhbin) {
            this.privbtfKfy = kfy;
            this.dfrtChbin = dhbin;
            /*
             * Thf dffbult blibs for both fntry typfs is dfrivfd from b
             * hbsh vbluf intrinsid to thf first dfrtifidbtf in thf dhbin.
             */
             if (blibs == null) {
                 this.blibs = Intfgfr.toString(dhbin[0].hbshCodf());
             } flsf {
                 this.blibs = blibs;
             }
        }

        /**
         * Gfts thf blibs for thf kfystorf fntry.
         */
        String gftAlibs()
        {
            rfturn blibs;
        }

        /**
         * Sfts thf blibs for thf kfystorf fntry.
         */
        void sftAlibs(String blibs)
        {
            // TODO - sft frifndly nbmf prop in dfrt storf
            this.blibs = blibs;
        }

        /**
         * Gfts thf privbtf kfy for thf kfystorf fntry.
         */
        Kfy gftPrivbtfKfy()
        {
            rfturn privbtfKfy;
        }

        /**
         * Sfts thf privbtf kfy for thf kfystorf fntry.
         */
        void sftPrivbtfKfy(RSAPrivbtfCrtKfy kfy)
            throws InvblidKfyExdfption, KfyStorfExdfption
        {
            bytf[] modulusBytfs = kfy.gftModulus().toBytfArrby();

            // Adjust kfy lfngth duf to sign bit
            int kfyBitLfngth = (modulusBytfs[0] == 0)
                ? (modulusBytfs.lfngth - 1) * 8
                : modulusBytfs.lfngth * 8;

            bytf[] kfyBlob = gfnfrbtfPrivbtfKfyBlob(
                kfyBitLfngth,
                modulusBytfs,
                kfy.gftPublidExponfnt().toBytfArrby(),
                kfy.gftPrivbtfExponfnt().toBytfArrby(),
                kfy.gftPrimfP().toBytfArrby(),
                kfy.gftPrimfQ().toBytfArrby(),
                kfy.gftPrimfExponfntP().toBytfArrby(),
                kfy.gftPrimfExponfntQ().toBytfArrby(),
                kfy.gftCrtCofffidifnt().toBytfArrby());

            privbtfKfy = storfPrivbtfKfy(kfyBlob,
                "{" + UUID.rbndomUUID().toString() + "}", kfyBitLfngth);
        }

        /**
         * Gfts thf dfrtifidbtf dhbin for thf kfystorf fntry.
         */
        X509Cfrtifidbtf[] gftCfrtifidbtfChbin()
        {
            rfturn dfrtChbin;
        }

        /**
         * Sfts thf dfrtifidbtf dhbin for thf kfystorf fntry.
         */
        void sftCfrtifidbtfChbin(X509Cfrtifidbtf[] dhbin)
            throws CfrtifidbtfExdfption, KfyStorfExdfption
        {
            for (int i = 0; i < dhbin.lfngth; i++) {
                bytf[] fndoding = dhbin[i].gftEndodfd();
                if (i == 0 && privbtfKfy != null) {
                    storfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                        fndoding.lfngth, privbtfKfy.gftHCryptProvidfr(),
                        privbtfKfy.gftHCryptKfy());

                } flsf {
                    storfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                        fndoding.lfngth, 0L, 0L); // no privbtf kfy to bttbdh
                }
            }
            dfrtChbin = dhbin;
        }
    };

    /*
     * An X.509 dfrtifidbtf fbdtory.
     * Usfd to drfbtf bn X.509 dfrtifidbtf from its DER-fndoding.
     */
    privbtf CfrtifidbtfFbdtory dfrtifidbtfFbdtory = null;

    /*
     * Compbtibility modf: for bpplidbtions thbt bssumf kfystorfs brf
     * strfbm-bbsfd this modf tolfrbtfs (but ignorfs) b non-null strfbm
     * or pbssword pbrbmftfr whfn pbssfd to thf lobd or storf mfthods.
     * Thf modf is fnbblfd by dffbult.
     */
    privbtf stbtid finbl String KEYSTORE_COMPATIBILITY_MODE_PROP =
        "sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf";
    privbtf finbl boolfbn kfyStorfCompbtibilityModf;

    /*
     * Thf kfystorf fntrifs.
     */
    privbtf Collfdtion<KfyEntry> fntrifs = nfw ArrbyList<KfyEntry>();

    /*
     * Thf kfystorf nbmf.
     * Cbsf is not signifidbnt.
     */
    privbtf finbl String storfNbmf;

    KfyStorf(String storfNbmf) {
        // Gft thf dompbtibility modf
        String prop = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<String>) () -> Systfm.gftPropfrty(KEYSTORE_COMPATIBILITY_MODE_PROP));

        if ("fblsf".fqublsIgnorfCbsf(prop)) {
            kfyStorfCompbtibilityModf = fblsf;
        } flsf {
            kfyStorfCompbtibilityModf = truf;
        }

        this.storfNbmf = storfNbmf;
    }

    /**
     * Rfturns thf kfy bssodibtfd with thf givfn blibs.
     * <p>
     * A dompbtibility modf is supportfd for bpplidbtions thbt bssumf
     * b pbssword must bf supplifd. It pfrmits (but ignorfs) b non-null
     * <dodf>pbssword</dodf>.  Thf modf is fnbblfd by dffbult.
     * Sft thf
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>pbssword</dodf>.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm pbssword thf pbssword, whidh should bf <dodf>null</dodf>
     *
     * @rfturn thf rfqufstfd kfy, or null if thf givfn blibs dofs not fxist
     * or dofs not idfntify b <i>kfy fntry</i>.
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf blgorithm for rfdovfring thf
     * kfy dbnnot bf found,
     * or if dompbtibility modf is disbblfd bnd <dodf>pbssword</dodf> is
     * non-null.
     * @fxdfption UnrfdovfrbblfKfyExdfption if thf kfy dbnnot bf rfdovfrfd.
     */
    publid jbvb.sfdurity.Kfy fnginfGftKfy(String blibs, dhbr[] pbssword)
        throws NoSudhAlgorithmExdfption, UnrfdovfrbblfKfyExdfption
    {
        if (blibs == null) {
            rfturn null;
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            throw nfw UnrfdovfrbblfKfyExdfption("Pbssword must bf null");
        }

        if (fnginfIsKfyEntry(blibs) == fblsf)
            rfturn null;

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy();
            }
        }

        rfturn null;
    }

    /**
     * Rfturns thf dfrtifidbtf dhbin bssodibtfd with thf givfn blibs.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf dfrtifidbtf dhbin (ordfrfd with thf usfr's dfrtifidbtf first
     * bnd thf root dfrtifidbtf buthority lbst), or null if thf givfn blibs
     * dofs not fxist or dofs not dontbin b dfrtifidbtf dhbin (i.f., thf givfn
     * blibs idfntififs fithfr b <i>trustfd dfrtifidbtf fntry</i> or b
     * <i>kfy fntry</i> without b dfrtifidbtf dhbin).
     */
    publid Cfrtifidbtf[] fnginfGftCfrtifidbtfChbin(String blibs)
    {
        if (blibs == null) {
            rfturn null;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                X509Cfrtifidbtf[] dfrtChbin = fntry.gftCfrtifidbtfChbin();

                rfturn dfrtChbin.dlonf();
            }
        }

        rfturn null;
    }

    /**
     * Rfturns thf dfrtifidbtf bssodibtfd with thf givfn blibs.
     *
     * <p>If thf givfn blibs nbmf idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, thf dfrtifidbtf bssodibtfd with thbt
     * fntry is rfturnfd. If thf givfn blibs nbmf idfntififs b
     * <i>kfy fntry</i>, thf first flfmfnt of thf dfrtifidbtf dhbin of thbt
     * fntry is rfturnfd, or null if thbt fntry dofs not hbvf b dfrtifidbtf
     * dhbin.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf dfrtifidbtf, or null if thf givfn blibs dofs not fxist or
     * dofs not dontbin b dfrtifidbtf.
     */
    publid Cfrtifidbtf fnginfGftCfrtifidbtf(String blibs)
    {
        if (blibs == null) {
            rfturn null;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs()))
            {
                X509Cfrtifidbtf[] dfrtChbin = fntry.gftCfrtifidbtfChbin();
                rfturn dfrtChbin[0];
            }
        }

        rfturn null;
    }

    /**
     * Rfturns thf drfbtion dbtf of thf fntry idfntififd by thf givfn blibs.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf drfbtion dbtf of this fntry, or null if thf givfn blibs dofs
     * not fxist
     */
    publid Dbtf fnginfGftCrfbtionDbtf(String blibs) {
        if (blibs == null) {
            rfturn null;
        }
        rfturn nfw Dbtf();
    }

    /**
     * Storfs thf givfn privbtf kfy bnd bssodibtfd dfrtifidbtf dhbin in thf
     * kfystorf.
     *
     * <p>Thf givfn jbvb.sfdurity.PrivbtfKfy <dodf>kfy</dodf> must
     * bf bddompbnifd by b dfrtifidbtf dhbin dfrtifying thf
     * dorrfsponding publid kfy.
     *
     * <p>If thf givfn blibs blrfbdy fxists, thf kfystorf informbtion
     * bssodibtfd with it is ovfrriddfn by thf givfn kfy bnd dfrtifidbtf
     * dhbin. Othfrwisf, b nfw fntry is drfbtfd.
     *
     * <p>
     * A dompbtibility modf is supportfd for bpplidbtions thbt bssumf
     * b pbssword must bf supplifd. It pfrmits (but ignorfs) b non-null
     * <dodf>pbssword</dodf>.  Thf modf is fnbblfd by dffbult.
     * Sft thf
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>pbssword</dodf>.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm kfy thf privbtf kfy to bf bssodibtfd with thf blibs
     * @pbrbm pbssword thf pbssword, whidh should bf <dodf>null</dodf>
     * @pbrbm dhbin thf dfrtifidbtf dhbin for thf dorrfsponding publid
     *        kfy (only rfquirfd if thf givfn kfy is of typf
     *        <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if thf givfn kfy is not b privbtf kfy,
     * dbnnot bf protfdtfd, or if dompbtibility modf is disbblfd bnd
     * <dodf>pbssword</dodf> is non-null, or if this opfrbtion fbils for
     * somf othfr rfbson.
     */
    publid void fnginfSftKfyEntry(String blibs, jbvb.sfdurity.Kfy kfy,
        dhbr[] pbssword, Cfrtifidbtf[] dhbin) throws KfyStorfExdfption
    {
        if (blibs == null) {
            throw nfw KfyStorfExdfption("blibs must not bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            throw nfw KfyStorfExdfption("Pbssword must bf null");
        }

        if (kfy instbndfof RSAPrivbtfCrtKfy) {

            KfyEntry fntry = null;
            boolfbn found = fblsf;

            for (KfyEntry f : fntrifs) {
                if (blibs.fqubls(f.gftAlibs())) {
                    found = truf;
                    fntry = f;
                    brfbk;
                }
            }

            if (! found) {
                fntry =
                    //TODO nfw KfyEntry(blibs, kfy, (X509Cfrtifidbtf[]) dhbin);
                    nfw KfyEntry(blibs, null, (X509Cfrtifidbtf[]) dhbin);
                fntrifs.bdd(fntry);
            }

            fntry.sftAlibs(blibs);

            try {
                fntry.sftPrivbtfKfy((RSAPrivbtfCrtKfy) kfy);
                fntry.sftCfrtifidbtfChbin((X509Cfrtifidbtf[]) dhbin);

            } dbtdh (CfrtifidbtfExdfption df) {
                throw nfw KfyStorfExdfption(df);

            } dbtdh (InvblidKfyExdfption ikf) {
                throw nfw KfyStorfExdfption(ikf);
            }

        } flsf {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Cbnnot bssign thf kfy to thf givfn blibs.");
        }
    }

    /**
     * Assigns thf givfn kfy (thbt hbs blrfbdy bffn protfdtfd) to thf givfn
     * blibs.
     *
     * <p>If thf protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>, it must bf bddompbnifd by b
     * dfrtifidbtf dhbin dfrtifying thf dorrfsponding publid kfy. If thf
     * undfrlying kfystorf implfmfntbtion is of typf <dodf>jks</dodf>,
     * <dodf>kfy</dodf> must bf fndodfd bs bn
     * <dodf>EndryptfdPrivbtfKfyInfo</dodf> bs dffinfd in thf PKCS #8 stbndbrd.
     *
     * <p>If thf givfn blibs blrfbdy fxists, thf kfystorf informbtion
     * bssodibtfd with it is ovfrriddfn by thf givfn kfy (bnd possibly
     * dfrtifidbtf dhbin).
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm kfy thf kfy (in protfdtfd formbt) to bf bssodibtfd with thf blibs
     * @pbrbm dhbin thf dfrtifidbtf dhbin for thf dorrfsponding publid
     * kfy (only usfful if thf protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if this opfrbtion fbils.
     */
    publid void fnginfSftKfyEntry(String blibs, bytf[] kfy,
                                  Cfrtifidbtf[] dhbin)
        throws KfyStorfExdfption
    {
        throw nfw UnsupportfdOpfrbtionExdfption(
            "Cbnnot bssign thf fndodfd kfy to thf givfn blibs.");
    }

    /**
     * Assigns thf givfn dfrtifidbtf to thf givfn blibs.
     *
     * <p>If thf givfn blibs blrfbdy fxists in this kfystorf bnd idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, thf dfrtifidbtf bssodibtfd with it is
     * ovfrriddfn by thf givfn dfrtifidbtf.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm dfrt thf dfrtifidbtf
     *
     * @fxdfption KfyStorfExdfption if thf givfn blibs blrfbdy fxists bnd dofs
     * not idfntify b <i>trustfd dfrtifidbtf fntry</i>, or this opfrbtion
     * fbils for somf othfr rfbson.
     */
    publid void fnginfSftCfrtifidbtfEntry(String blibs, Cfrtifidbtf dfrt)
        throws KfyStorfExdfption
    {
        if (blibs == null) {
            throw nfw KfyStorfExdfption("blibs must not bf null");
        }

        if (dfrt instbndfof X509Cfrtifidbtf) {

            // TODO - build CryptoAPI dhbin?
            X509Cfrtifidbtf[] dhbin =
                nfw X509Cfrtifidbtf[]{ (X509Cfrtifidbtf) dfrt };
            KfyEntry fntry = null;
            boolfbn found = fblsf;

            for (KfyEntry f : fntrifs) {
                if (blibs.fqubls(f.gftAlibs())) {
                    found = truf;
                    fntry = f;
                    brfbk;
                }
            }

            if (! found) {
                fntry =
                    nfw KfyEntry(blibs, null, dhbin);
                fntrifs.bdd(fntry);

            }
            if (fntry.gftPrivbtfKfy() == null) { // trustfd-dfrt fntry
                fntry.sftAlibs(blibs);

                try {
                    fntry.sftCfrtifidbtfChbin(dhbin);

                } dbtdh (CfrtifidbtfExdfption df) {
                    throw nfw KfyStorfExdfption(df);
                }
            }

        } flsf {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Cbnnot bssign thf dfrtifidbtf to thf givfn blibs.");
        }
    }

    /**
     * Dflftfs thf fntry idfntififd by thf givfn blibs from this kfystorf.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @fxdfption KfyStorfExdfption if thf fntry dbnnot bf rfmovfd.
     */
    publid void fnginfDflftfEntry(String blibs)
        throws KfyStorfExdfption
    {
        if (blibs == null) {
            throw nfw KfyStorfExdfption("blibs must not bf null");
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {

                // Gft fnd-fntity dfrtifidbtf bnd rfmovf from systfm dfrt storf
                X509Cfrtifidbtf[] dfrtChbin = fntry.gftCfrtifidbtfChbin();
                if (dfrtChbin != null) {

                    try {

                        bytf[] fndoding = dfrtChbin[0].gftEndodfd();
                        rfmovfCfrtifidbtf(gftNbmf(), blibs, fndoding,
                            fndoding.lfngth);

                    } dbtdh (CfrtifidbtfExdfption f) {
                        throw nfw KfyStorfExdfption("Cbnnot rfmovf fntry: " +
                            f);
                    }
                }
                Kfy privbtfKfy = fntry.gftPrivbtfKfy();
                if (privbtfKfy != null) {
                    dfstroyKfyContbinfr(
                        Kfy.gftContbinfrNbmf(privbtfKfy.gftHCryptProvidfr()));
                }

                fntrifs.rfmovf(fntry);
                brfbk;
            }
        }
    }

    /**
     * Lists bll thf blibs nbmfs of this kfystorf.
     *
     * @rfturn fnumfrbtion of thf blibs nbmfs
     */
    publid Enumfrbtion<String> fnginfAlibsfs() {

        finbl Itfrbtor<KfyEntry> itfr = fntrifs.itfrbtor();

        rfturn nfw Enumfrbtion<String>()
        {
            publid boolfbn hbsMorfElfmfnts()
            {
                rfturn itfr.hbsNfxt();
            }

            publid String nfxtElfmfnt()
            {
                KfyEntry fntry = itfr.nfxt();
                rfturn fntry.gftAlibs();
            }
        };
    }

    /**
     * Chfdks if thf givfn blibs fxists in this kfystorf.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn truf if thf blibs fxists, fblsf othfrwisf
     */
    publid boolfbn fnginfContbinsAlibs(String blibs) {
        for (Enumfrbtion<String> fnumfrbtor = fnginfAlibsfs();
            fnumfrbtor.hbsMorfElfmfnts();)
        {
            String b = fnumfrbtor.nfxtElfmfnt();

            if (b.fqubls(blibs))
                rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rftrifvfs thf numbfr of fntrifs in this kfystorf.
     *
     * @rfturn thf numbfr of fntrifs in this kfystorf
     */
    publid int fnginfSizf() {
        rfturn fntrifs.sizf();
    }

    /**
     * Rfturns truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>kfy fntry</i>, bnd fblsf othfrwisf.
     *
     * @rfturn truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>kfy fntry</i>, fblsf othfrwisf.
     */
    publid boolfbn fnginfIsKfyEntry(String blibs) {

        if (blibs == null) {
            rfturn fblsf;
        }

        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy() != null;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, bnd fblsf othfrwisf.
     *
     * @rfturn truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, fblsf othfrwisf.
     */
    publid boolfbn fnginfIsCfrtifidbtfEntry(String blibs)
    {
        for (KfyEntry fntry : fntrifs) {
            if (blibs.fqubls(fntry.gftAlibs())) {
                rfturn fntry.gftPrivbtfKfy() == null;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns thf (blibs) nbmf of thf first kfystorf fntry whosf dfrtifidbtf
     * mbtdhfs thf givfn dfrtifidbtf.
     *
     * <p>This mfthod bttfmpts to mbtdh thf givfn dfrtifidbtf with fbdh
     * kfystorf fntry. If thf fntry bfing donsidfrfd
     * is b <i>trustfd dfrtifidbtf fntry</i>, thf givfn dfrtifidbtf is
     * dompbrfd to thbt fntry's dfrtifidbtf. If thf fntry bfing donsidfrfd is
     * b <i>kfy fntry</i>, thf givfn dfrtifidbtf is dompbrfd to thf first
     * flfmfnt of thbt fntry's dfrtifidbtf dhbin (if b dhbin fxists).
     *
     * @pbrbm dfrt thf dfrtifidbtf to mbtdh with.
     *
     * @rfturn thf (blibs) nbmf of thf first fntry with mbtdhing dfrtifidbtf,
     * or null if no sudh fntry fxists in this kfystorf.
     */
    publid String fnginfGftCfrtifidbtfAlibs(Cfrtifidbtf dfrt)
    {
        for (KfyEntry fntry : fntrifs) {
            if (fntry.dfrtChbin != null && fntry.dfrtChbin[0].fqubls(dfrt)) {
                rfturn fntry.gftAlibs();
            }
        }

        rfturn null;
    }

    /**
     * fnginfStorf is durrfntly b no-op.
     * Entrifs brf storfd during fnginfSftEntry.
     *
     * A dompbtibility modf is supportfd for bpplidbtions thbt bssumf
     * kfystorfs brf strfbm-bbsfd. It pfrmits (but ignorfs) b non-null
     * <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     * Thf modf is fnbblfd by dffbult.
     * Sft thf
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     *
     * @pbrbm strfbm thf output strfbm, whidh should bf <dodf>null</dodf>
     * @pbrbm pbssword thf pbssword, whidh should bf <dodf>null</dodf>
     *
     * @fxdfption IOExdfption if dompbtibility modf is disbblfd bnd fithfr
     * pbrbmftfr is non-null.
     */
    publid void fnginfStorf(OutputStrfbm strfbm, dhbr[] pbssword)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        if (strfbm != null && !kfyStorfCompbtibilityModf) {
            throw nfw IOExdfption("Kfystorf output strfbm must bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            throw nfw IOExdfption("Kfystorf pbssword must bf null");
        }
    }

    /**
     * Lobds thf kfystorf.
     *
     * A dompbtibility modf is supportfd for bpplidbtions thbt bssumf
     * kfystorfs brf strfbm-bbsfd. It pfrmits (but ignorfs) b non-null
     * <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     * Thf modf is fnbblfd by dffbult.
     * Sft thf
     * <dodf>sun.sfdurity.msdbpi.kfyStorfCompbtibilityModf</dodf>
     * systfm propfrty to <dodf>fblsf</dodf> to disbblf dompbtibility modf
     * bnd rfjfdt b non-null <dodf>strfbm</dodf> or <dodf>pbssword</dodf>.
     *
     * @pbrbm strfbm thf input strfbm, whidh should bf <dodf>null</dodf>.
     * @pbrbm pbssword thf pbssword, whidh should bf <dodf>null</dodf>.
     *
     * @fxdfption IOExdfption if thfrf is bn I/O or formbt problfm with thf
     * kfystorf dbtb. Or if dompbtibility modf is disbblfd bnd fithfr
     * pbrbmftfr is non-null.
     * @fxdfption NoSudhAlgorithmExdfption if thf blgorithm usfd to dhfdk
     * thf intfgrity of thf kfystorf dbnnot bf found
     * @fxdfption CfrtifidbtfExdfption if bny of thf dfrtifidbtfs in thf
     * kfystorf dould not bf lobdfd
     * @fxdfption SfdurityExdfption if thf sfdurity dhfdk for
     *  <dodf>SfdurityPfrmission("buthProvidfr.<i>nbmf</i>")</dodf> dofs not
     *  pbss, whfrf <i>nbmf</i> is thf vbluf rfturnfd by
     *  this providfr's <dodf>gftNbmf</dodf> mfthod.
     */
    publid void fnginfLobd(InputStrfbm strfbm, dhbr[] pbssword)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        if (strfbm != null && !kfyStorfCompbtibilityModf) {
            throw nfw IOExdfption("Kfystorf input strfbm must bf null");
        }

        if (pbssword != null && !kfyStorfCompbtibilityModf) {
            throw nfw IOExdfption("Kfystorf pbssword must bf null");
        }

        /*
         * Usf thf sbmf sfdurity dhfdk bs AuthProvidfr.login
         */
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkPfrmission(nfw SfdurityPfrmission(
                "buthProvidfr.SunMSCAPI"));
        }

        // Clfbr bll kfy fntrifs
        fntrifs.dlfbr();

        try {

            // Lobd kfys bnd/or dfrtifidbtf dhbins
            lobdKfysOrCfrtifidbtfChbins(gftNbmf(), fntrifs);

        } dbtdh (KfyStorfExdfption f) {
            throw nfw IOExdfption(f);
        }
    }

    /**
     * Gfnfrbtfs b dfrtifidbtf dhbin from thf dollfdtion of
     * dfrtifidbtfs bnd storfs thf rfsult into b kfy fntry.
     */
    privbtf void gfnfrbtfCfrtifidbtfChbin(String blibs,
        Collfdtion<? fxtfnds Cfrtifidbtf> dfrtCollfdtion,
        Collfdtion<KfyEntry> fntrifs)
    {
        try
        {
            X509Cfrtifidbtf[] dfrtChbin =
                nfw X509Cfrtifidbtf[dfrtCollfdtion.sizf()];

            int i = 0;
            for (Itfrbtor<? fxtfnds Cfrtifidbtf> itfr =
                    dfrtCollfdtion.itfrbtor(); itfr.hbsNfxt(); i++)
            {
                dfrtChbin[i] = (X509Cfrtifidbtf) itfr.nfxt();
            }

            KfyEntry fntry = nfw KfyEntry(blibs, null, dfrtChbin);

            // Add dfrt dhbin
            fntrifs.bdd(fntry);
        }
        dbtdh (Throwbblf f)
        {
            // Ignorf thf fxdfption bnd skip this fntry
            // TODO - throw CfrtifidbtfExdfption?
        }
    }

    /**
     * Gfnfrbtfs RSA kfy bnd dfrtifidbtf dhbin from thf privbtf kfy hbndlf,
     * dollfdtion of dfrtifidbtfs bnd storfs thf rfsult into kfy fntrifs.
     */
    privbtf void gfnfrbtfRSAKfyAndCfrtifidbtfChbin(String blibs,
        long hCryptProv, long hCryptKfy, int kfyLfngth,
        Collfdtion<? fxtfnds Cfrtifidbtf> dfrtCollfdtion,
        Collfdtion<KfyEntry> fntrifs)
    {
        try
        {
            X509Cfrtifidbtf[] dfrtChbin =
                nfw X509Cfrtifidbtf[dfrtCollfdtion.sizf()];

            int i = 0;
            for (Itfrbtor<? fxtfnds Cfrtifidbtf> itfr =
                    dfrtCollfdtion.itfrbtor(); itfr.hbsNfxt(); i++)
            {
                dfrtChbin[i] = (X509Cfrtifidbtf) itfr.nfxt();
            }

            KfyEntry fntry = nfw KfyEntry(blibs, nfw RSAPrivbtfKfy(hCryptProv,
                hCryptKfy, kfyLfngth), dfrtChbin);

            // Add dfrt dhbin
            fntrifs.bdd(fntry);
        }
        dbtdh (Throwbblf f)
        {
            // Ignorf thf fxdfption bnd skip this fntry
            // TODO - throw CfrtifidbtfExdfption?
        }
    }

    /**
     * Gfnfrbtfs dfrtifidbtfs from bytf dbtb bnd storfs into dfrt dollfdtion.
     *
     * @pbrbm dbtb Bytf dbtb.
     * @pbrbm dfrtCollfdtion Collfdtion of dfrtifidbtfs.
     */
    privbtf void gfnfrbtfCfrtifidbtf(bytf[] dbtb,
        Collfdtion<Cfrtifidbtf> dfrtCollfdtion) {
        try
        {
            BytfArrbyInputStrfbm bis = nfw BytfArrbyInputStrfbm(dbtb);

            // Obtbin dfrtifidbtf fbdtory
            if (dfrtifidbtfFbdtory == null) {
                dfrtifidbtfFbdtory = CfrtifidbtfFbdtory.gftInstbndf("X.509");
            }

            // Gfnfrbtf dfrtifidbtf
            Collfdtion<? fxtfnds Cfrtifidbtf> d =
                    dfrtifidbtfFbdtory.gfnfrbtfCfrtifidbtfs(bis);
            dfrtCollfdtion.bddAll(d);
        }
        dbtdh (CfrtifidbtfExdfption f)
        {
            // Ignorf thf fxdfption bnd skip this dfrtifidbtf
            // TODO - throw CfrtifidbtfExdfption?
        }
        dbtdh (Throwbblf tf)
        {
            // Ignorf thf fxdfption bnd skip this dfrtifidbtf
            // TODO - throw CfrtifidbtfExdfption?
        }
    }

    /**
     * Rfturns thf nbmf of thf kfystorf.
     */
    privbtf String gftNbmf()
    {
        rfturn storfNbmf;
    }

    /**
     * Lobd kfys bnd/or dfrtifidbtfs from kfystorf into Collfdtion.
     *
     * @pbrbm nbmf Nbmf of kfystorf.
     * @pbrbm fntrifs Collfdtion of kfy/dfrtifidbtf.
     */
    privbtf nbtivf void lobdKfysOrCfrtifidbtfChbins(String nbmf,
        Collfdtion<KfyEntry> fntrifs) throws KfyStorfExdfption;

    /**
     * Storfs b DER-fndodfd dfrtifidbtf into thf dfrtifidbtf storf
     *
     * @pbrbm nbmf Nbmf of thf kfystorf.
     * @pbrbm blibs Nbmf of thf dfrtifidbtf.
     * @pbrbm fndoding DER-fndodfd dfrtifidbtf.
     */
    privbtf nbtivf void storfCfrtifidbtf(String nbmf, String blibs,
        bytf[] fndoding, int fndodingLfngth, long hCryptProvidfr,
        long hCryptKfy) throws CfrtifidbtfExdfption, KfyStorfExdfption;

    /**
     * Rfmovfs thf dfrtifidbtf from thf dfrtifidbtf storf
     *
     * @pbrbm nbmf Nbmf of thf kfystorf.
     * @pbrbm blibs Nbmf of thf dfrtifidbtf.
     * @pbrbm fndoding DER-fndodfd dfrtifidbtf.
     */
    privbtf nbtivf void rfmovfCfrtifidbtf(String nbmf, String blibs,
        bytf[] fndoding, int fndodingLfngth)
            throws CfrtifidbtfExdfption, KfyStorfExdfption;

    /**
     * Dfstroys thf kfy dontbinfr.
     *
     * @pbrbm kfyContbinfrNbmf Thf nbmf of thf kfy dontbinfr.
     */
    privbtf nbtivf void dfstroyKfyContbinfr(String kfyContbinfrNbmf)
        throws KfyStorfExdfption;

    /**
     * Gfnfrbtfs b privbtf-kfy BLOB from b kfy's domponfnts.
     */
    privbtf nbtivf bytf[] gfnfrbtfPrivbtfKfyBlob(
        int kfyBitLfngth,
        bytf[] modulus,
        bytf[] publidExponfnt,
        bytf[] privbtfExponfnt,
        bytf[] primfP,
        bytf[] primfQ,
        bytf[] fxponfntP,
        bytf[] fxponfntQ,
        bytf[] drtCofffidifnt) throws InvblidKfyExdfption;

    privbtf nbtivf RSAPrivbtfKfy storfPrivbtfKfy(bytf[] kfyBlob,
        String kfyContbinfrNbmf, int kfySizf) throws KfyStorfExdfption;
}
