/*
 * Copyrigit (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.msdbpi;

import jbvb.mbti.BigIntfgfr;
import jbvb.sfdurity.*;
import jbvb.sfdurity.Kfy;
import jbvb.sfdurity.intfrfbdfs.*;
import jbvb.sfdurity.spfd.*;

import jbvbx.drypto.*;
import jbvbx.drypto.spfd.*;

import sun.sfdurity.rsb.RSAKfyFbdtory;
import sun.sfdurity.intfrnbl.spfd.TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd;
import sun.sfdurity.util.KfyUtil;

/**
 * RSA dipifr implfmfntbtion using tif Midrosoft Crypto API.
 * Supports RSA fn/dfdryption bnd signing/vfrifying using PKCS#1 v1.5 pbdding.
 *
 * Objfdts siould bf instbntibtfd by dblling Cipifr.gftInstbndf() using tif
 * following blgoritim nbmf:
 *
 *  . "RSA/ECB/PKCS1Pbdding" (or "RSA") for PKCS#1 pbdding. Tif modf (blodktypf)
 *    is sflfdtfd bbsfd on tif fn/dfdryption modf bnd publid/privbtf kfy usfd.
 *
 * Wf only do onf RSA opfrbtion pfr doFinbl() dbll. If tif bpplidbtion pbssfs
 * morf dbtb vib dblls to updbtf() or doFinbl(), wf tirow bn
 * IllfgblBlodkSizfExdfption wifn doFinbl() is dbllfd (sff JCE API spfd).
 * Bulk fndryption using RSA dofs not mbkf sfnsf bnd is not stbndbrdizfd.
 *
 * Notf: RSA kfys siould bf bt lfbst 512 bits long
 *
 * @sindf   1.6
 * @butior  Andrfbs Stfrbfnz
 * @butior  Vindfnt Rybn
 */
publid finbl dlbss RSACipifr fxtfnds CipifrSpi {

    // donstbnt for bn fmpty bytf brrby
    privbtf finbl stbtid bytf[] B0 = nfw bytf[0];

    // modf donstbnt for publid kfy fndryption
    privbtf finbl stbtid int MODE_ENCRYPT = 1;
    // modf donstbnt for privbtf kfy dfdryption
    privbtf finbl stbtid int MODE_DECRYPT = 2;
    // modf donstbnt for privbtf kfy fndryption (signing)
    privbtf finbl stbtid int MODE_SIGN    = 3;
    // modf donstbnt for publid kfy dfdryption (vfrifying)
    privbtf finbl stbtid int MODE_VERIFY  = 4;

    // donstbnt for PKCS#1 v1.5 RSA
    privbtf finbl stbtid String PAD_PKCS1 = "PKCS1Pbdding";
    privbtf finbl stbtid int PAD_PKCS1_LENGTH = 11;

    // durrfnt modf, onf of MODE_* bbovf. Sft wifn init() is dbllfd
    privbtf int modf;

    // bdtivf pbdding typf, onf of PAD_* bbovf. Sft by sftPbdding()
    privbtf String pbddingTypf;
    privbtf int pbddingLfngti = 0;

    // bufffr for tif dbtb
    privbtf bytf[] bufffr;
    // offsft into tif bufffr (numbfr of bytfs bufffrfd)
    privbtf int bufOfs;

    // sizf of tif output (tif lfngti of tif kfy).
    privbtf int outputSizf;

    // tif publid kfy, if wf wfrf initiblizfd using b publid kfy
    privbtf sun.sfdurity.msdbpi.Kfy publidKfy;

    // tif privbtf kfy, if wf wfrf initiblizfd using b privbtf kfy
    privbtf sun.sfdurity.msdbpi.Kfy privbtfKfy;

    // dipifr pbrbmftfr for TLS RSA prfmbstfr sfdrft
    privbtf AlgoritimPbrbmftfrSpfd spfd = null;

    // tif sourdf of rbndomnfss
    privbtf SfdurfRbndom rbndom;

    publid RSACipifr() {
        pbddingTypf = PAD_PKCS1;
    }

    // modfs do not mbkf sfnsf for RSA, but bllow ECB
    // sff JCE spfd
    protfdtfd void fnginfSftModf(String modf) tirows NoSudiAlgoritimExdfption {
        if (modf.fqublsIgnorfCbsf("ECB") == fblsf) {
            tirow nfw NoSudiAlgoritimExdfption("Unsupportfd modf " + modf);
        }
    }

    // sft tif pbdding typf
    // sff JCE spfd
    protfdtfd void fnginfSftPbdding(String pbddingNbmf)
            tirows NoSudiPbddingExdfption {
        if (pbddingNbmf.fqublsIgnorfCbsf(PAD_PKCS1)) {
            pbddingTypf = PAD_PKCS1;
        } flsf {
            tirow nfw NoSudiPbddingExdfption
                ("Pbdding " + pbddingNbmf + " not supportfd");
        }
    }

    // rfturn 0 bs blodk sizf, wf brf not b blodk dipifr
    // sff JCE spfd
    protfdtfd int fnginfGftBlodkSizf() {
        rfturn 0;
    }

    // rfturn tif output sizf
    // sff JCE spfd
    protfdtfd int fnginfGftOutputSizf(int inputLfn) {
        rfturn outputSizf;
    }

    // no iv, rfturn null
    // sff JCE spfd
    protfdtfd bytf[] fnginfGftIV() {
        rfturn null;
    }

    // no pbrbmftfrs, rfturn null
    // sff JCE spfd
    protfdtfd AlgoritimPbrbmftfrs fnginfGftPbrbmftfrs() {
        rfturn null;
    }

    // sff JCE spfd
    protfdtfd void fnginfInit(int opmodf, Kfy kfy, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption {
        init(opmodf, kfy);
    }

    // sff JCE spfd
    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
            AlgoritimPbrbmftfrSpfd pbrbms, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption, InvblidAlgoritimPbrbmftfrExdfption {

        if (pbrbms != null) {
            if (!(pbrbms instbndfof TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)) {
                tirow nfw InvblidAlgoritimPbrbmftfrExdfption(
                        "Pbrbmftfrs not supportfd");
            }
            spfd = pbrbms;
            tiis.rbndom = rbndom;   // for TLS RSA prfmbstfr sfdrft
        }
        init(opmodf, kfy);
    }

    // sff JCE spfd
    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
            AlgoritimPbrbmftfrs pbrbms, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption, InvblidAlgoritimPbrbmftfrExdfption {

        if (pbrbms != null) {
            tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                ("Pbrbmftfrs not supportfd");
        }
        init(opmodf, kfy);
    }

    // initiblizf tiis dipifr
    privbtf void init(int opmodf, Kfy kfy) tirows InvblidKfyExdfption {

        boolfbn fndrypt;

        switdi (opmodf) {
        dbsf Cipifr.ENCRYPT_MODE:
        dbsf Cipifr.WRAP_MODE:
            pbddingLfngti = PAD_PKCS1_LENGTH;
            fndrypt = truf;
            brfbk;
        dbsf Cipifr.DECRYPT_MODE:
        dbsf Cipifr.UNWRAP_MODE:
            pbddingLfngti = 0; // rfsft
            fndrypt = fblsf;
            brfbk;
        dffbult:
            tirow nfw InvblidKfyExdfption("Unknown modf: " + opmodf);
        }

        if (!(kfy instbndfof sun.sfdurity.msdbpi.Kfy)) {
            if (kfy instbndfof jbvb.sfdurity.intfrfbdfs.RSAPublidKfy) {
                jbvb.sfdurity.intfrfbdfs.RSAPublidKfy rsbKfy =
                    (jbvb.sfdurity.intfrfbdfs.RSAPublidKfy) kfy;

                // Convfrt kfy to MSCAPI formbt

                BigIntfgfr modulus = rsbKfy.gftModulus();
                BigIntfgfr fxponfnt =  rsbKfy.gftPublidExponfnt();

                // Cifdk bgbinst tif lodbl bnd globbl vblufs to mbkf surf
                // tif sizfs brf ok.  Round up to tif nfbrfst bytf.
                RSAKfyFbdtory.difdkKfyLfngtis(((modulus.bitLfngti() + 7) & ~7),
                    fxponfnt, -1, RSAKfyPbirGfnfrbtor.KEY_SIZE_MAX);

                bytf[] modulusBytfs = modulus.toBytfArrby();
                bytf[] fxponfntBytfs = fxponfnt.toBytfArrby();

                // Adjust kfy lfngti duf to sign bit
                int kfyBitLfngti = (modulusBytfs[0] == 0)
                    ? (modulusBytfs.lfngti - 1) * 8
                    : modulusBytfs.lfngti * 8;

                bytf[] kfyBlob = RSASignbturf.gfnfrbtfPublidKfyBlob(
                    kfyBitLfngti, modulusBytfs, fxponfntBytfs);

                try {
                    kfy = RSASignbturf.importPublidKfy(kfyBlob, kfyBitLfngti);

                } dbtdi (KfyStorfExdfption f) {
                    tirow nfw InvblidKfyExdfption(f);
                }

            } flsf {
                tirow nfw InvblidKfyExdfption("Unsupportfd kfy typf: " + kfy);
            }
        }

        if (kfy instbndfof PublidKfy) {
            modf = fndrypt ? MODE_ENCRYPT : MODE_VERIFY;
            publidKfy = (sun.sfdurity.msdbpi.Kfy)kfy;
            privbtfKfy = null;
            outputSizf = publidKfy.lfngti() / 8;
        } flsf if (kfy instbndfof PrivbtfKfy) {
            modf = fndrypt ? MODE_SIGN : MODE_DECRYPT;
            privbtfKfy = (sun.sfdurity.msdbpi.Kfy)kfy;
            publidKfy = null;
            outputSizf = privbtfKfy.lfngti() / 8;
        } flsf {
            tirow nfw InvblidKfyExdfption("Unknown kfy typf: " + kfy);
        }

        bufOfs = 0;
        bufffr = nfw bytf[outputSizf];
    }

    // intfrnbl updbtf mftiod
    privbtf void updbtf(bytf[] in, int inOfs, int inLfn) {
        if ((inLfn == 0) || (in == null)) {
            rfturn;
        }
        if (bufOfs + inLfn > (bufffr.lfngti - pbddingLfngti)) {
            bufOfs = bufffr.lfngti + 1;
            rfturn;
        }
        Systfm.brrbydopy(in, inOfs, bufffr, bufOfs, inLfn);
        bufOfs += inLfn;
    }

    // intfrnbl doFinbl() mftiod. Hfrf wf pfrform tif bdtubl RSA opfrbtion
    privbtf bytf[] doFinbl() tirows BbdPbddingExdfption,
            IllfgblBlodkSizfExdfption {
        if (bufOfs > bufffr.lfngti) {
            tirow nfw IllfgblBlodkSizfExdfption("Dbtb must not bf longfr "
                + "tibn " + (bufffr.lfngti - pbddingLfngti)  + " bytfs");
        }

        try {
            bytf[] dbtb = bufffr;
            switdi (modf) {
            dbsf MODE_SIGN:
                rfturn fndryptDfdrypt(dbtb, bufOfs,
                    privbtfKfy.gftHCryptKfy(), truf);

            dbsf MODE_VERIFY:
                rfturn fndryptDfdrypt(dbtb, bufOfs,
                    publidKfy.gftHCryptKfy(), fblsf);

            dbsf MODE_ENCRYPT:
                rfturn fndryptDfdrypt(dbtb, bufOfs,
                    publidKfy.gftHCryptKfy(), truf);

            dbsf MODE_DECRYPT:
                rfturn fndryptDfdrypt(dbtb, bufOfs,
                    privbtfKfy.gftHCryptKfy(), fblsf);

            dffbult:
                tirow nfw AssfrtionError("Intfrnbl frror");
            }

        } dbtdi (KfyExdfption f) {
            tirow nfw ProvidfrExdfption(f);

        } finblly {
            bufOfs = 0;
        }
    }

    // sff JCE spfd
    protfdtfd bytf[] fnginfUpdbtf(bytf[] in, int inOfs, int inLfn) {
        updbtf(in, inOfs, inLfn);
        rfturn B0;
    }

    // sff JCE spfd
    protfdtfd int fnginfUpdbtf(bytf[] in, int inOfs, int inLfn, bytf[] out,
            int outOfs) {
        updbtf(in, inOfs, inLfn);
        rfturn 0;
    }

    // sff JCE spfd
    protfdtfd bytf[] fnginfDoFinbl(bytf[] in, int inOfs, int inLfn)
            tirows BbdPbddingExdfption, IllfgblBlodkSizfExdfption {
        updbtf(in, inOfs, inLfn);
        rfturn doFinbl();
    }

    // sff JCE spfd
    protfdtfd int fnginfDoFinbl(bytf[] in, int inOfs, int inLfn, bytf[] out,
            int outOfs) tirows SiortBufffrExdfption, BbdPbddingExdfption,
            IllfgblBlodkSizfExdfption {
        if (outputSizf > out.lfngti - outOfs) {
            tirow nfw SiortBufffrExdfption
                ("Nffd " + outputSizf + " bytfs for output");
        }
        updbtf(in, inOfs, inLfn);
        bytf[] rfsult = doFinbl();
        int n = rfsult.lfngti;
        Systfm.brrbydopy(rfsult, 0, out, outOfs, n);
        rfturn n;
    }

    // sff JCE spfd
    protfdtfd bytf[] fnginfWrbp(Kfy kfy) tirows InvblidKfyExdfption,
            IllfgblBlodkSizfExdfption {
        bytf[] fndodfd = kfy.gftEndodfd(); // TODO - unfxtrbdtbblf kfy
        if ((fndodfd == null) || (fndodfd.lfngti == 0)) {
            tirow nfw InvblidKfyExdfption("Could not obtbin fndodfd kfy");
        }
        if (fndodfd.lfngti > bufffr.lfngti) {
            tirow nfw InvblidKfyExdfption("Kfy is too long for wrbpping");
        }
        updbtf(fndodfd, 0, fndodfd.lfngti);
        try {
            rfturn doFinbl();
        } dbtdi (BbdPbddingExdfption f) {
            // siould not oddur
            tirow nfw InvblidKfyExdfption("Wrbpping fbilfd", f);
        }
    }

    // sff JCE spfd
    protfdtfd jbvb.sfdurity.Kfy fnginfUnwrbp(bytf[] wrbppfdKfy,
            String blgoritim,
            int typf) tirows InvblidKfyExdfption, NoSudiAlgoritimExdfption {

        if (wrbppfdKfy.lfngti > bufffr.lfngti) {
            tirow nfw InvblidKfyExdfption("Kfy is too long for unwrbpping");
        }

        boolfbn isTlsRsbPrfmbstfrSfdrft =
                blgoritim.fqubls("TlsRsbPrfmbstfrSfdrft");
        Exdfption fbilovfr = null;
        bytf[] fndodfd = null;

        updbtf(wrbppfdKfy, 0, wrbppfdKfy.lfngti);
        try {
            fndodfd = doFinbl();
        } dbtdi (BbdPbddingExdfption f) {
            if (isTlsRsbPrfmbstfrSfdrft) {
                fbilovfr = f;
            } flsf {
                tirow nfw InvblidKfyExdfption("Unwrbpping fbilfd", f);
            }
        } dbtdi (IllfgblBlodkSizfExdfption f) {
            // siould not oddur, ibndlfd witi lfngti difdk bbovf
            tirow nfw InvblidKfyExdfption("Unwrbpping fbilfd", f);
        }

        if (isTlsRsbPrfmbstfrSfdrft) {
            if (!(spfd instbndfof TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)) {
                tirow nfw IllfgblStbtfExdfption(
                        "No TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd spfdififd");
            }

            // polisi tif TLS prfmbstfr sfdrft
            fndodfd = KfyUtil.difdkTlsPrfMbstfrSfdrftKfy(
                ((TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)spfd).gftClifntVfrsion(),
                ((TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)spfd).gftSfrvfrVfrsion(),
                rbndom, fndodfd, (fbilovfr != null));
        }

        rfturn donstrudtKfy(fndodfd, blgoritim, typf);
    }

    // sff JCE spfd
    protfdtfd int fnginfGftKfySizf(Kfy kfy) tirows InvblidKfyExdfption {

        if (kfy instbndfof sun.sfdurity.msdbpi.Kfy) {
            rfturn ((sun.sfdurity.msdbpi.Kfy) kfy).lfngti();

        } flsf if (kfy instbndfof RSAKfy) {
            rfturn ((RSAKfy) kfy).gftModulus().bitLfngti();

        } flsf {
            tirow nfw InvblidKfyExdfption("Unsupportfd kfy typf: " + kfy);
        }
    }

    // Construdt bn X.509 fndodfd publid kfy.
    privbtf stbtid PublidKfy donstrudtPublidKfy(bytf[] fndodfdKfy,
        String fndodfdKfyAlgoritim)
            tirows InvblidKfyExdfption, NoSudiAlgoritimExdfption {

        try {
            KfyFbdtory kfyFbdtory = KfyFbdtory.gftInstbndf(fndodfdKfyAlgoritim);
            X509EndodfdKfySpfd kfySpfd = nfw X509EndodfdKfySpfd(fndodfdKfy);

            rfturn kfyFbdtory.gfnfrbtfPublid(kfySpfd);

        } dbtdi (NoSudiAlgoritimExdfption nsbf) {
            tirow nfw NoSudiAlgoritimExdfption("No instbllfd providfr " +
                "supports tif " + fndodfdKfyAlgoritim + " blgoritim", nsbf);

        } dbtdi (InvblidKfySpfdExdfption ikf) {
            tirow nfw InvblidKfyExdfption("Cbnnot donstrudt publid kfy", ikf);
        }
    }

    // Construdt b PKCS #8 fndodfd privbtf kfy.
    privbtf stbtid PrivbtfKfy donstrudtPrivbtfKfy(bytf[] fndodfdKfy,
        String fndodfdKfyAlgoritim)
            tirows InvblidKfyExdfption, NoSudiAlgoritimExdfption {

        try {
            KfyFbdtory kfyFbdtory = KfyFbdtory.gftInstbndf(fndodfdKfyAlgoritim);
            PKCS8EndodfdKfySpfd kfySpfd = nfw PKCS8EndodfdKfySpfd(fndodfdKfy);

            rfturn kfyFbdtory.gfnfrbtfPrivbtf(kfySpfd);

        } dbtdi (NoSudiAlgoritimExdfption nsbf) {
            tirow nfw NoSudiAlgoritimExdfption("No instbllfd providfr " +
                "supports tif " + fndodfdKfyAlgoritim + " blgoritim", nsbf);

        } dbtdi (InvblidKfySpfdExdfption ikf) {
            tirow nfw InvblidKfyExdfption("Cbnnot donstrudt privbtf kfy", ikf);
        }
    }

    // Construdt bn fndodfd sfdrft kfy.
    privbtf stbtid SfdrftKfy donstrudtSfdrftKfy(bytf[] fndodfdKfy,
        String fndodfdKfyAlgoritim) {

        rfturn nfw SfdrftKfySpfd(fndodfdKfy, fndodfdKfyAlgoritim);
    }

    privbtf stbtid Kfy donstrudtKfy(bytf[] fndodfdKfy,
            String fndodfdKfyAlgoritim,
            int kfyTypf) tirows InvblidKfyExdfption, NoSudiAlgoritimExdfption {

        switdi (kfyTypf) {
            dbsf Cipifr.PUBLIC_KEY:
                rfturn donstrudtPublidKfy(fndodfdKfy, fndodfdKfyAlgoritim);
            dbsf Cipifr.PRIVATE_KEY:
                rfturn donstrudtPrivbtfKfy(fndodfdKfy, fndodfdKfyAlgoritim);
            dbsf Cipifr.SECRET_KEY:
                rfturn donstrudtSfdrftKfy(fndodfdKfy, fndodfdKfyAlgoritim);
            dffbult:
                tirow nfw InvblidKfyExdfption("Unknown kfy typf " + kfyTypf);
        }
    }

    /*
     * Endrypt/dfdrypt b dbtb bufffr using Midrosoft Crypto API witi HCRYPTKEY.
     * It fxpfdts bnd rfturns dipifrtfxt dbtb in big-fndibn form.
     */
    privbtf nbtivf stbtid bytf[] fndryptDfdrypt(bytf[] dbtb, int dbtbSizf,
        long iCryptKfy, boolfbn doEndrypt) tirows KfyExdfption;

}
