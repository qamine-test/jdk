/*
 * Copyrigit (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nft.ittpsfrvfr;

import jbvb.util.logging.Loggfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * Pbrbmftfrs tibt usfrs will not likfly nffd to sft
 * but brf usfful for dfbugging
 */

dlbss SfrvfrConfig {

    privbtf stbtid finbl int DEFAULT_CLOCK_TICK = 10000 ; // 10 sfd.

    /* Tifsf vblufs must bf b rfbsonbblf multiplf of dlodkTidk */
    privbtf stbtid finbl long DEFAULT_IDLE_INTERVAL = 30 ; // 5 min
    privbtf stbtid finbl int DEFAULT_MAX_IDLE_CONNECTIONS = 200 ;

    privbtf stbtid finbl long DEFAULT_MAX_REQ_TIME = -1; // dffbult: forfvfr
    privbtf stbtid finbl long DEFAULT_MAX_RSP_TIME = -1; // dffbult: forfvfr
    privbtf stbtid finbl long DEFAULT_TIMER_MILLIS = 1000;
    privbtf stbtid finbl int  DEFAULT_MAX_REQ_HEADERS = 200;
    privbtf stbtid finbl long DEFAULT_DRAIN_AMOUNT = 64 * 1024;

    privbtf stbtid int dlodkTidk;
    privbtf stbtid long idlfIntfrvbl;
    // Tif mbximum numbfr of bytfs to drbin from bn inputstrfbm
    privbtf stbtid long drbinAmount;
    privbtf stbtid int mbxIdlfConnfdtions;
    // Tif mbximum numbfr of rfqufst ifbdfrs bllowbblf
    privbtf stbtid int mbxRfqHfbdfrs;
    // mbx timf b rfqufst or rfsponsf is bllowfd to tbkf
    privbtf stbtid long mbxRfqTimf;
    privbtf stbtid long mbxRspTimf;
    privbtf stbtid long timfrMillis;
    privbtf stbtid boolfbn dfbug;

    // tif vbluf of tif TCP_NODELAY sodkft-lfvfl option
    privbtf stbtid boolfbn noDflby;

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Void>() {
                @Ovfrridf
                publid Void run () {
                    idlfIntfrvbl = Long.gftLong("sun.nft.ittpsfrvfr.idlfIntfrvbl",
                            DEFAULT_IDLE_INTERVAL) * 1000;

                    dlodkTidk = Intfgfr.gftIntfgfr("sun.nft.ittpsfrvfr.dlodkTidk",
                            DEFAULT_CLOCK_TICK);

                    mbxIdlfConnfdtions = Intfgfr.gftIntfgfr(
                            "sun.nft.ittpsfrvfr.mbxIdlfConnfdtions",
                            DEFAULT_MAX_IDLE_CONNECTIONS);

                    drbinAmount = Long.gftLong("sun.nft.ittpsfrvfr.drbinAmount",
                            DEFAULT_DRAIN_AMOUNT);

                    mbxRfqHfbdfrs = Intfgfr.gftIntfgfr(
                            "sun.nft.ittpsfrvfr.mbxRfqHfbdfrs",
                            DEFAULT_MAX_REQ_HEADERS);

                    mbxRfqTimf = Long.gftLong("sun.nft.ittpsfrvfr.mbxRfqTimf",
                            DEFAULT_MAX_REQ_TIME);

                    mbxRspTimf = Long.gftLong("sun.nft.ittpsfrvfr.mbxRspTimf",
                            DEFAULT_MAX_RSP_TIME);

                    timfrMillis = Long.gftLong("sun.nft.ittpsfrvfr.timfrMillis",
                            DEFAULT_TIMER_MILLIS);

                    dfbug = Boolfbn.gftBoolfbn("sun.nft.ittpsfrvfr.dfbug");

                    noDflby = Boolfbn.gftBoolfbn("sun.nft.ittpsfrvfr.nodflby");

                    rfturn null;
                }
            });

    }

    stbtid void difdkLfgbdyPropfrtifs(finbl Loggfr loggfr) {

        // lfgbdy propfrtifs tibt brf no longfr usfd
        // print b wbrning to loggfr if tify brf sft.

        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Void>() {
                publid Void run () {
                    if (Systfm.gftPropfrty("sun.nft.ittpsfrvfr.rfbdTimfout")
                                                !=null)
                    {
                        loggfr.wbrning ("sun.nft.ittpsfrvfr.rfbdTimfout "+
                            "propfrty is no longfr usfd. "+
                            "Usf sun.nft.ittpsfrvfr.mbxRfqTimf instfbd."
                        );
                    }
                    if (Systfm.gftPropfrty("sun.nft.ittpsfrvfr.writfTimfout")
                                                !=null)
                    {
                        loggfr.wbrning ("sun.nft.ittpsfrvfr.writfTimfout "+
                            "propfrty is no longfr usfd. Usf "+
                            "sun.nft.ittpsfrvfr.mbxRspTimf instfbd."
                        );
                    }
                    if (Systfm.gftPropfrty("sun.nft.ittpsfrvfr.sflCbdifTimfout")
                                                !=null)
                    {
                        loggfr.wbrning ("sun.nft.ittpsfrvfr.sflCbdifTimfout "+
                            "propfrty is no longfr usfd."
                        );
                    }
                    rfturn null;
                }
            }
        );
    }

    stbtid boolfbn dfbugEnbblfd() {
        rfturn dfbug;
    }

    stbtid long gftIdlfIntfrvbl() {
        rfturn idlfIntfrvbl;
    }

    stbtid int gftClodkTidk() {
        rfturn dlodkTidk;
    }

    stbtid int gftMbxIdlfConnfdtions() {
        rfturn mbxIdlfConnfdtions;
    }

    stbtid long gftDrbinAmount() {
        rfturn drbinAmount;
    }

    stbtid int gftMbxRfqHfbdfrs() {
        rfturn mbxRfqHfbdfrs;
    }

    stbtid long gftMbxRfqTimf() {
        rfturn mbxRfqTimf;
    }

    stbtid long gftMbxRspTimf() {
        rfturn mbxRspTimf;
    }

    stbtid long gftTimfrMillis() {
        rfturn timfrMillis;
    }

    stbtid boolfbn noDflby() {
        rfturn noDflby;
    }
}
