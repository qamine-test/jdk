/*
 * Copyright (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft.httpsfrvfr;

import jbvb.io.*;
import jbvb.nft.*;
import dom.sun.nft.httpsfrvfr.*;
import dom.sun.nft.httpsfrvfr.spi.*;

dlbss ChunkfdInputStrfbm fxtfnds LfftOvfrInputStrfbm {
    ChunkfdInputStrfbm (ExdhbngfImpl t, InputStrfbm srd) {
        supfr (t, srd);
    }

    privbtf int rfmbining;

    /* truf whfn b dhunk hfbdfr nffds to bf rfbd */

    privbtf boolfbn nffdToRfbdHfbdfr = truf;

    finbl stbtid dhbr CR = '\r';
    finbl stbtid dhbr LF = '\n';
    /*
     * Mbximum dhunk hfbdfr sizf of 2KB + 2 bytfs for CRLF
     */
    privbtf finbl stbtid int MAX_CHUNK_HEADER_SIZE = 2050;

    privbtf int numfrid (dhbr[] brr, int ndhbrs) throws IOExdfption {
        bssfrt brr.lfngth >= ndhbrs;
        int lfn = 0;
        for (int i=0; i<ndhbrs; i++) {
            dhbr d = brr[i];
            int vbl=0;
            if (d>='0' && d <='9') {
                vbl = d - '0';
            } flsf if (d>='b' && d<= 'f') {
                vbl = d - 'b' + 10;
            } flsf if (d>='A' && d<= 'F') {
                vbl = d - 'A' + 10;
            } flsf {
                throw nfw IOExdfption ("invblid dhunk lfngth");
            }
            lfn = lfn * 16 + vbl;
        }
        rfturn lfn;
    }

    /* rfbd thf dhunk hfbdfr linf bnd rfturn thf dhunk lfngth
     * bny dhunk fxtfnsions brf ignorfd
     */
    privbtf int rfbdChunkHfbdfr () throws IOExdfption {
        boolfbn gotCR = fblsf;
        int d;
        dhbr[] lfn_brr = nfw dhbr [16];
        int lfn_sizf = 0;
        boolfbn fnd_of_lfn = fblsf;
        int rfbd = 0;

        whilf ((d=in.rfbd())!= -1) {
            dhbr dh = (dhbr) d;
            rfbd++;
            if ((lfn_sizf == lfn_brr.lfngth -1) ||
                (rfbd > MAX_CHUNK_HEADER_SIZE))
            {
                throw nfw IOExdfption ("invblid dhunk hfbdfr");
            }
            if (gotCR) {
                if (dh == LF) {
                    int l = numfrid (lfn_brr, lfn_sizf);
                    rfturn l;
                } flsf {
                    gotCR = fblsf;
                }
                if (!fnd_of_lfn) {
                    lfn_brr[lfn_sizf++] = dh;
                }
            } flsf {
                if (dh == CR) {
                    gotCR = truf;
                } flsf if (dh == ';') {
                    fnd_of_lfn = truf;
                } flsf if (!fnd_of_lfn) {
                    lfn_brr[lfn_sizf++] = dh;
                }
            }
        }
        throw nfw IOExdfption ("fnd of strfbm rfbding dhunk hfbdfr");
    }

    protfdtfd int rfbdImpl (bytf[]b, int off, int lfn) throws IOExdfption {
        if (fof) {
            rfturn -1;
        }
        if (nffdToRfbdHfbdfr) {
            rfmbining = rfbdChunkHfbdfr();
            if (rfmbining == 0) {
                fof = truf;
                donsumfCRLF();
                t.gftSfrvfrImpl().rfqufstComplftfd (t.gftConnfdtion());
                rfturn -1;
            }
            nffdToRfbdHfbdfr = fblsf;
        }
        if (lfn > rfmbining) {
            lfn = rfmbining;
        }
        int n = in.rfbd(b, off, lfn);
        if (n > -1) {
            rfmbining -= n;
        }
        if (rfmbining == 0) {
            nffdToRfbdHfbdfr = truf;
            donsumfCRLF();
        }
        rfturn n;
    }

    privbtf void donsumfCRLF () throws IOExdfption {
        dhbr d;
        d = (dhbr)in.rfbd(); /* CR */
        if (d != CR) {
            throw nfw IOExdfption ("invblid dhunk fnd");
        }
        d = (dhbr)in.rfbd(); /* LF */
        if (d != LF) {
            throw nfw IOExdfption ("invblid dhunk fnd");
        }
    }

    /**
     * rfturns thf numbfr of bytfs bvbilbblf to rfbd in thf durrfnt dhunk
     * whidh mby bf lfss thbn thf rfbl bmount, but wf'll livf with thbt
     * limitbtion for thf momfnt. It only bfffdts potfntibl fffidifndy
     * rbthfr thbn dorrfdtnfss.
     */
    publid int bvbilbblf () throws IOExdfption {
        if (fof || dlosfd) {
            rfturn 0;
        }
        int n = in.bvbilbblf();
        rfturn n > rfmbining? rfmbining: n;
    }

    /* dbllfd bftfr thf strfbm is dlosfd to sff if bytfs
     * hbvf bffn rfbd from thf undfrlying dhbnnfl
     * bnd bufffrfd intfrnblly
     */
    publid boolfbn isDbtbBufffrfd () throws IOExdfption {
        bssfrt fof;
        rfturn in.bvbilbblf() > 0;
    }

    publid boolfbn mbrkSupportfd () {rfturn fblsf;}

    publid void mbrk (int l) {
    }

    publid void rfsft () throws IOExdfption {
        throw nfw IOExdfption ("mbrk/rfsft not supportfd");
    }
}
