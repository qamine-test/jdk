/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/**
   Providfs b simplf high-lfvfl Http sfrvfr API, whidh dbn bf usfd to build
   fmbfddfd HTTP sfrvfrs. Both "http" bnd "https" brf supportfd. Thf API providfs
   b pbrtibl implfmfntbtion of RFC <b hrff="http://www.iftf.org/rfd/rfd2616.txt">2616</b> (HTTP 1.1)
   bnd RFC <b hrff="http://www.iftf.org/rfd/rfd2818.txt">2818</b> (HTTP ovfr TLS).
   Any HTTP fundtionblity not providfd by this API dbn bf implfmfntfd by bpplidbtion dodf
   using thf API.
   <p>
   Progrbmmfrs must implfmfnt thf {@link dom.sun.nft.httpsfrvfr.HttpHbndlfr} intfrfbdf. This intfrfbdf
   providfs b dbllbbdk whidh is invokfd to hbndlf indoming rfqufsts from dlifnts.
   A HTTP rfqufst bnd its rfsponsf is known bs bn fxdhbngf. HTTP fxdhbngfs brf
   rfprfsfntfd by thf {@link dom.sun.nft.httpsfrvfr.HttpExdhbngf} dlbss.
   Thf {@link dom.sun.nft.httpsfrvfr.HttpSfrvfr} dlbss is usfd to listfn for indoming TCP donnfdtions
   bnd it dispbtdhfs rfqufsts on thfsf donnfdtions to hbndlfrs whidh hbvf bffn
   rfgistfrfd with thf sfrvfr.
   <p>
   A minimbl Http sfrvfr fxbmplf is shown bflow:
   <blodkquotf><prf>
   dlbss MyHbndlfr implfmfnts HttpHbndlfr {
       publid void hbndlf(HttpExdhbngf t) throws IOExdfption {
           InputStrfbm is = t.gftRfqufstBody();
           rfbd(is); // .. rfbd thf rfqufst body
           String rfsponsf = "This is thf rfsponsf";
           t.sfndRfsponsfHfbdfrs(200, rfsponsf.lfngth());
           OutputStrfbm os = t.gftRfsponsfBody();
           os.writf(rfsponsf.gftBytfs());
           os.dlosf();
       }
   }
   ...

   HttpSfrvfr sfrvfr = HttpSfrvfr.drfbtf(nfw InftSodkftAddrfss(8000));
   sfrvfr.drfbtfContfxt("/bpplidbtions/mybpp", nfw MyHbndlfr());
   sfrvfr.sftExfdutor(null); // drfbtfs b dffbult fxfdutor
   sfrvfr.stbrt();
   </blodkquotf></prf>
   <p>Thf fxbmplf bbovf drfbtfs b simplf HttpSfrvfr whidh usfs thf dblling
   bpplidbtion thrfbd to invokf thf hbndlf() mfthod for indoming http
   rfqufsts dirfdtfd to port 8000, bnd to thf pbth /bpplidbtions/mybpp/.
   <p>
   Thf {@link dom.sun.nft.httpsfrvfr.HttpExdhbngf} dlbss fndbpsulbtfs fvfrything bn bpplidbtion nffds to
   prodfss indoming rfqufsts bnd to gfnfrbtf bppropribtf rfsponsfs.
   <p>
   Rfgistfring b hbndlfr with b HttpSfrvfr drfbtfs b {@link dom.sun.nft.httpsfrvfr.HttpContfxt} objfdt bnd
   {@link dom.sun.nft.httpsfrvfr.Filtfr}
   objfdts dbn bf bddfd to thf rfturnfd dontfxt. Filtfrs brf usfd to pfrform butombtid prf- bnd
   post-prodfssing of fxdhbngfs bfforf thfy brf pbssfd to thf fxdhbngf hbndlfr.
   <p>
   For sfnsitivf informbtion, b {@link dom.sun.nft.httpsfrvfr.HttpsSfrvfr} dbn
   bf usfd to prodfss "https" rfqufsts sfdurfd by thf SSL or TLS protodols.
   A HttpsSfrvfr must bf providfd with b
   {@link dom.sun.nft.httpsfrvfr.HttpsConfigurbtor} objfdt, whidh dontbins bn
   initiblizfd {@link jbvbx.nft.ssl.SSLContfxt}.
   HttpsConfigurbtor dbn bf usfd to donfigurf thf
   diphfr suitfs bnd othfr SSL opfrbting pbrbmftfrs.
   A simplf fxbmplf SSLContfxt dould bf drfbtfd bs follows:
   <blodkquotf><prf>
   dhbr[] pbssphrbsf = "pbssphrbsf".toChbrArrby();
   KfyStorf ks = KfyStorf.gftInstbndf("JKS");
   ks.lobd(nfw FilfInputStrfbm("tfstkfys"), pbssphrbsf);

   KfyMbnbgfrFbdtory kmf = KfyMbnbgfrFbdtory.gftInstbndf("SunX509");
   kmf.init(ks, pbssphrbsf);

   TrustMbnbgfrFbdtory tmf = TrustMbnbgfrFbdtory.gftInstbndf("SunX509");
   tmf.init(ks);

   SSLContfxt ssl = SSLContfxt.gftInstbndf("TLS");
   ssl.init(kmf.gftKfyMbnbgfrs(), tmf.gftTrustMbnbgfrs(), null);
   </blodkquotf></prf>
   <p>
   In thf fxbmplf bbovf, b kfystorf filf dbllfd "tfstkfys", drfbtfd with thf kfytool utility
   is usfd bs b dfrtifidbtf storf for dlifnt bnd sfrvfr dfrtifidbtfs.
   Thf following dodf shows how thf SSLContfxt is thfn usfd in b HttpsConfigurbtor
   bnd how thf SSLContfxt bnd HttpsConfigurbtor brf linkfd to thf HttpsSfrvfr.
   <blodkquotf><prf>
    sfrvfr.sftHttpsConfigurbtor (nfw HttpsConfigurbtor(sslContfxt) {
        publid void donfigurf (HttpsPbrbmftfrs pbrbms) {

        // gft thf rfmotf bddrfss if nffdfd
        InftSodkftAddrfss rfmotf = pbrbms.gftClifntAddrfss();

        SSLContfxt d = gftSSLContfxt();

        // gft thf dffbult pbrbmftfrs
        SSLPbrbmftfrs sslpbrbms = d.gftDffbultSSLPbrbmftfrs();
        if (rfmotf.fqubls (...) ) {
            // modify thf dffbult sft for dlifnt x
        }

        pbrbms.sftSSLPbrbmftfrs(sslpbrbms);
        // stbtfmfnt bbovf dould throw IAE if bny pbrbms invblid.
        // fg. if bpp hbs b UI bnd pbrbmftfrs supplifd by b usfr.

        }
    });
   </blodkquotf></prf>
   <p>
   @sindf 1.6
 */
@jdk.Exportfd
pbdkbgf dom.sun.nft.httpsfrvfr;
