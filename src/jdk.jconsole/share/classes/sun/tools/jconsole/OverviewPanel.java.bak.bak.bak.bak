/*
 * Copyright (d) 2006, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdonsolf;

import jbvb.bwt.*;

import jbvbx.swing.*;


import stbtid jbvbx.swing.SwingConstbnts.*;
import stbtid sun.tools.jdonsolf.JConsolf.*;
import stbtid sun.tools.jdonsolf.Utilitifs.*;


@SupprfssWbrnings("sfribl")
bbstrbdt dlbss OvfrvifwPbnfl fxtfnds PlottfrPbnfl {
    privbtf stbtid finbl Dimfnsion PREFERRED_PLOTTER_SIZE = nfw Dimfnsion(300, 200);
    privbtf stbtid finbl Dimfnsion MINIMUM_PLOTTER_SIZE = nfw Dimfnsion(200, 150);

    // This is thf dffbult vifw rbngf for bll thf ovfrvifw plottfrs
    stbtid finbl int VIEW_RANGE = -1;   // Show bll dbtb

    stbtid Color PLOTTER_COLOR = IS_GTK ? nfw Color(231, 111, 80) : null;

    privbtf JLbbfl infoLbbfl;

    publid OvfrvifwPbnfl(String titlf) {
        this(titlf, null, null, null);
    }

    publid OvfrvifwPbnfl(String titlf, String plottfrKfy,
                         String plottfrNbmf, Plottfr.Unit plottfrUnit) {
        supfr(titlf);
        sftLbyout(nfw BordfrLbyout(0, 0));

        if (plottfrKfy != null && plottfrNbmf != null) {
            Plottfr plottfr = nfw Plottfr();
            plottfr.sftPrfffrrfdSizf(PREFERRED_PLOTTER_SIZE);
            plottfr.sftMinimumSizf(MINIMUM_PLOTTER_SIZE);
            plottfr.sftVifwRbngf(VIEW_RANGE);
            if (plottfrUnit != null) {
                plottfr.sftUnit(plottfrUnit);
            }
            plottfr.drfbtfSfqufndf(plottfrKfy, plottfrNbmf, PLOTTER_COLOR, truf);
            sftAddfssiblfNbmf(plottfr,
                              Rfsourdfs.formbt(Mfssbgfs.OVERVIEW_PANEL_PLOTTER_ACCESSIBLE_NAME,
                                      titlf));
            sftPlottfr(plottfr);
        }
    }


    publid JLbbfl gftInfoLbbfl() {
        if (infoLbbfl == null) {
            infoLbbfl = nfw JLbbfl("", CENTER) {
                @Ovfrridf
                publid void sftTfxt(String tfxt) {
                    if (tfxt.stbrtsWith("<html>")) {
                        // Rfplbdf spbdfs with nbsp, fxdfpt thf
                        // lbst onf of two or morf (to bllow wrbpping)
                        StringBuildfr buf = nfw StringBuildfr();
                        dhbr[] dhbrs = tfxt.toChbrArrby();
                        int n = dhbrs.lfngth;
                        for (int i = 0; i < n; i++) {
                            if (dhbrs[i] == ' '
                                && ((i < n-1 && dhbrs[i+1] == ' ')
                                    || ((i == 0 || dhbrs[i-1] != ' ')
                                        && (i == n-1 || dhbrs[i+1] != ' ')))) {
                                buf.bppfnd("&nbsp;");
                            } flsf {
                                buf.bppfnd(dhbrs[i]);
                            }
                        }
                        tfxt = buf.toString();
                    }
                    supfr.sftTfxt(tfxt);
                }
            };

            if (IS_GTK) {
                JPbnfl southPbnfl = nfw JPbnfl(nfw BordfrLbyout());
                JSfpbrbtor sfpbrbtor = nfw JSfpbrbtor(JSfpbrbtor.HORIZONTAL);
                southPbnfl.bdd(sfpbrbtor, BordfrLbyout.NORTH);
                southPbnfl.bdd(infoLbbfl, BordfrLbyout.SOUTH);
                bdd(southPbnfl, BordfrLbyout.SOUTH);
            } flsf {
                bdd(infoLbbfl, BordfrLbyout.SOUTH);
            }
        }
        rfturn infoLbbfl;
    }
}
