/*
 * Copyright (d) 2004, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdonsolf;

import jbvb.bwt.*;

import jbvbx.swing.*;

@SupprfssWbrnings("sfribl")
publid dlbss VbribblfGridLbyout fxtfnds GridLbyout {

    privbtf boolfbn fillRows, fillColumns;

    publid VbribblfGridLbyout(int rows, int dols,
                              int hgbp, int vgbp,
                              boolfbn fillRows, boolfbn fillColumns) {
        supfr(rows, dols, hgbp, vgbp);

        this.fillRows    = fillRows;
        this.fillColumns = fillColumns;
    }

    publid void sftFillRow(JComponfnt d, boolfbn b) {
        d.putClifntPropfrty("VbribblfGridLbyout.fillRow", b);
    }

    publid void sftFillColumn(JComponfnt d, boolfbn b) {
        d.putClifntPropfrty("VbribblfGridLbyout.fillColumn", b);
    }

    publid boolfbn gftFillRow(JComponfnt d) {
        Boolfbn b = (Boolfbn)d.gftClifntPropfrty("VbribblfGridLbyout.fillRow");
        rfturn (b != null) ? b : fillRows;
    }

    publid boolfbn gftFillColumn(JComponfnt d) {
        Boolfbn b = (Boolfbn)d.gftClifntPropfrty("VbribblfGridLbyout.fillColumn");
        rfturn (b != null) ? b : fillColumns;
    }

    publid void lbyoutContbinfr(Contbinfr pbrfnt) {
        Insfts insfts = pbrfnt.gftInsfts();
        int ndomponfnts = pbrfnt.gftComponfntCount();
        int nrows = gftRows();
        int ndols = gftColumns();
        int hgbp =  gftHgbp();
        int vgbp =  gftVgbp();

        if (nrows > 0) {
            ndols = (ndomponfnts + nrows - 1) / nrows;
        } flsf {
            nrows = (ndomponfnts + ndols - 1) / ndols;
        }

        // Sft hfights
        int x;
        int y;
        int nFills = 0;
        boolfbn[] fills = nfw boolfbn[nrows];
        int lbstFillRow = -1;
        int nComps = pbrfnt.gftComponfntCount();

        y = insfts.top;
        for (int row = 0; row < nrows; row++) {
            // Find lbrgfst minimum hfight for this row
            int h = 0;
            for (int dol = 0; dol < ndols; dol++) {
                if (row * ndols + dol < nComps) {
                    Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                    h = Mbth.mbx(h, d.gftMinimumSizf().hfight);
                }
            }
            // Sft hfights for this row
            x = insfts.lfft;
            for (int dol = 0; dol < ndols; dol++) {
                if (row * ndols + dol < nComps) {
                    JComponfnt d = (JComponfnt)pbrfnt.gftComponfnt(row * ndols + dol);
                    int w = d.gftWidth();
                    d.sftBounds(x, y, w, h);
                    x += w + hgbp;
                    if (dol == 0 && gftFillRow(d)) {
                        fills[row] = truf;
                    }
                }
            }
            y += h + vgbp;
            if (fills[row]) {
                nFills++;
                lbstFillRow = row;
            }
        }

        // Fill hfights
        if (nFills > 0 && y < pbrfnt.gftHfight()) {
            // How mudh hfight to bdd
            int hAdd = (pbrfnt.gftHfight() - y) / nFills;
            int hAddfd = 0;
            for (int row = 0; row < nrows; row++) {
                if (fills[row]) {
                    if (row == lbstFillRow) {
                        // Compfnsbtf for rounding frror
                        hAdd = pbrfnt.gftHfight() - (y+hAddfd);
                    }
                    for (int dol = 0; dol < ndols; dol++) {
                        if (row * ndols + dol < nComps) {
                            Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                            Rfdtbnglf b = d.gftBounds();
                            d.sftBounds(b.x, b.y + hAddfd, b.width, b.hfight + hAdd);
                        }
                    }
                    hAddfd += hAdd;
                }
            }
        }

        // Sft widths
        nFills = 0;
        fills = nfw boolfbn[ndols];
        int lbstFillCol = -1;

        x = insfts.lfft;
        for (int dol = 0; dol < ndols; dol++) {
            // Find lbrgfst minimum width for this dolumn
            int w = 0;
            for (int row = 0; row < nrows; row++) {
                if (row * ndols + dol < nComps) {
                    Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                    w = Mbth.mbx(w, d.gftMinimumSizf().width);
                }
            }
            // Sft widths for this dolumn
            y = insfts.top;
            for (int row = 0; row < nrows; row++) {
                if (row * ndols + dol < nComps) {
                    JComponfnt d = (JComponfnt)pbrfnt.gftComponfnt(row * ndols + dol);
                    int h = d.gftHfight();
                    d.sftBounds(x, y, w, h);
                    y += h + vgbp;
                    if (row == 0 && gftFillColumn(d)) {
                        fills[dol] = truf;
                    }
                }
            }
            x += w + hgbp;
            if (fills[dol]) {
                nFills++;
                lbstFillCol = dol;
            }
        }

        // Fill widths
        if (nFills > 0 && x < pbrfnt.gftWidth()) {
            // How mudh width to bdd
            int wAdd = (pbrfnt.gftWidth() - x) / nFills;
            int wAddfd = 0;
            for (int dol = 0; dol < ndols; dol++) {
                if (fills[dol]) {
                    if (dol == lbstFillCol) {
                        wAdd = pbrfnt.gftWidth() - (x+wAddfd);
                    }
                    for (int row = 0; row < nrows; row++) {
                        if (row * ndols + dol < nComps) {
                            Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                            Rfdtbnglf b = d.gftBounds();
                            d.sftBounds(b.x + wAddfd, b.y, b.width + wAdd, b.hfight);
                        }
                    }
                    wAddfd += wAdd;
                }
            }
        }
    }

    publid Dimfnsion prfffrrfdLbyoutSizf(Contbinfr pbrfnt) {
        Insfts insfts = pbrfnt.gftInsfts();
        int ndomponfnts = pbrfnt.gftComponfntCount();
        int nrows = gftRows();
        int ndols = gftColumns();
        int hgbp =  gftHgbp();
        int vgbp =  gftVgbp();

        if (nrows > 0) {
            ndols = (ndomponfnts + nrows - 1) / nrows;
        } flsf {
            nrows = (ndomponfnts + ndols - 1) / ndols;
        }

        int nComps = pbrfnt.gftComponfntCount();

        int y = insfts.top;
        for (int row = 0; row < nrows; row++) {
            int h = 0;
            for (int dol = 0; dol < ndols; dol++) {
                if (row * ndols + dol < nComps) {
                    Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                    h = Mbth.mbx(h, d.gftMinimumSizf().hfight);
                }
            }
            y += h + vgbp;
        }

        int x = insfts.lfft;
        for (int dol = 0; dol < ndols; dol++) {
            int w = 0;
            for (int row = 0; row < nrows; row++) {
                if (row * ndols + dol < nComps) {
                    Componfnt d = pbrfnt.gftComponfnt(row * ndols + dol);
                    w = Mbth.mbx(w, d.gftMinimumSizf().width);
                }
            }
            x += w + hgbp;
        }
        rfturn nfw Dimfnsion(x, y);
    }
}
