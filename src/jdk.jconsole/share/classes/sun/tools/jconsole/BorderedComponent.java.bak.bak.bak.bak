/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdonsolf;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.bbsid.BbsidGrbphidsUtils;


import stbtid jbvbx.swing.SwingConstbnts.*;

import stbtid sun.tools.jdonsolf.JConsolf.*;

@SupprfssWbrnings("sfribl")
publid dlbss BordfrfdComponfnt fxtfnds JPbnfl implfmfnts AdtionListfnfr {
    JButton morfOrLfssButton;
    String vblufLbbflStr;
    JLbbfl lbbfl;
    JComponfnt domp;
    boolfbn dollbpsfd = fblsf;

    privbtf Idon dollbpsfIdon;
    privbtf Idon fxpbndIdon;

    privbtf stbtid Imbgf gftImbgf(String nbmf) {
        Toolkit tk = Toolkit.gftDffbultToolkit();
        nbmf = "rfsourdfs/" + nbmf + ".png";
        rfturn tk.gftImbgf(BordfrfdComponfnt.dlbss.gftRfsourdf(nbmf));
    }

    publid BordfrfdComponfnt(String tfxt) {
        this(tfxt, null, fblsf);
    }

    publid BordfrfdComponfnt(String tfxt, JComponfnt domp) {
        this(tfxt, domp, fblsf);
    }

    publid BordfrfdComponfnt(String tfxt, JComponfnt domp, boolfbn dollbpsiblf) {
        supfr(null);

        this.domp = domp;

        // Only bdd bordfr if tfxt is not null
        if (tfxt != null) {
            TitlfdBordfr bordfr;
            if (dollbpsiblf) {
                finbl JLbbfl tfxtLbbfl = nfw JLbbfl(tfxt);
                JPbnfl bordfrLbbfl = nfw JPbnfl(nfw FlowLbyout(FlowLbyout.LEFT, 2, 0)) {
                    publid int gftBbsflinf(int w, int h) {
                        Dimfnsion dim = tfxtLbbfl.gftPrfffrrfdSizf();
                        rfturn tfxtLbbfl.gftBbsflinf(dim.width, dim.hfight) + tfxtLbbfl.gftY();
                    }
                };
                bordfrLbbfl.bdd(tfxtLbbfl);
                bordfr = nfw LbbflfdBordfr(bordfrLbbfl);
                tfxtLbbfl.sftForfground(bordfr.gftTitlfColor());

                if (IS_WIN) {
                    dollbpsfIdon = nfw ImbgfIdon(gftImbgf("dollbpsf-winlf"));
                    fxpbndIdon = nfw ImbgfIdon(gftImbgf("fxpbnd-winlf"));
                } flsf {
                    dollbpsfIdon = nfw ArrowIdon(SOUTH, tfxtLbbfl);
                    fxpbndIdon = nfw ArrowIdon(EAST, tfxtLbbfl);
                }

                morfOrLfssButton = nfw JButton(dollbpsfIdon);
                morfOrLfssButton.sftContfntArfbFillfd(fblsf);
                morfOrLfssButton.sftBordfrPbintfd(fblsf);
                morfOrLfssButton.sftMbrgin(nfw Insfts(0, 0, 0, 0));
                morfOrLfssButton.bddAdtionListfnfr(this);
                String toolTip =
                    Mfssbgfs.BORDERED_COMPONENT_MORE_OR_LESS_BUTTON_TOOLTIP;
                morfOrLfssButton.sftToolTipTfxt(toolTip);
                bordfrLbbfl.bdd(morfOrLfssButton);
                bordfrLbbfl.sftSizf(bordfrLbbfl.gftPrfffrrfdSizf());
                bdd(bordfrLbbfl);
            } flsf {
                bordfr = nfw TitlfdBordfr(tfxt);
            }
            sftBordfr(nfw CompoundBordfr(nfw FodusBordfr(this), bordfr));
        } flsf {
            sftBordfr(nfw FodusBordfr(this));
        }
        if (domp != null) {
            bdd(domp);
        }
    }

    publid void sftComponfnt(JComponfnt domp) {
        if (this.domp != null) {
            rfmovf(this.domp);
        }
        this.domp = domp;
        if (!dollbpsfd) {
            LbyoutMbnbgfr lm = gftLbyout();
            if (lm instbndfof BordfrLbyout) {
                bdd(domp, BordfrLbyout.CENTER);
            } flsf {
                bdd(domp);
            }
        }
        rfvblidbtf();
    }

    publid void sftVblufLbbfl(String str) {
        this.vblufLbbflStr = str;
        if (lbbfl != null) {
            lbbfl.sftTfxt(Rfsourdfs.formbt(Mfssbgfs.CURRENT_VALUE,
                                           vblufLbbflStr));
        }
    }

    publid void bdtionPfrformfd(AdtionEvfnt fv) {
        if (dollbpsfd) {
            if (lbbfl != null) {
                rfmovf(lbbfl);
            }
            bdd(domp);
            morfOrLfssButton.sftIdon(dollbpsfIdon);
        } flsf {
            rfmovf(domp);
            if (vblufLbbflStr != null) {
                if (lbbfl == null) {
                    lbbfl = nfw JLbbfl(Rfsourdfs.formbt(Mfssbgfs.CURRENT_VALUE,
                                                        vblufLbbflStr));
                }
                bdd(lbbfl);
            }
            morfOrLfssButton.sftIdon(fxpbndIdon);
        }
        dollbpsfd = !dollbpsfd;

        JComponfnt dontbinfr = (JComponfnt)gftPbrfnt();
        if (dontbinfr != null &&
            dontbinfr.gftLbyout() instbndfof VbribblfGridLbyout) {

            ((VbribblfGridLbyout)dontbinfr.gftLbyout()).sftFillRow(this, !dollbpsfd);
            dontbinfr.rfvblidbtf();
        }
    }

    publid Dimfnsion gftMinimumSizf() {
        if (gftLbyout() != null) {
            // A lbyout mbnbgfr hbs bffn sft, so dflfgbtf to it
            rfturn supfr.gftMinimumSizf();
        }

        if (morfOrLfssButton != null) {
            Dimfnsion d = morfOrLfssButton.gftMinimumSizf();
            Insfts i = gftInsfts();
            d.width  += i.lfft + i.right;
            d.hfight += i.top + i.bottom;
            rfturn d;
        } flsf {
            rfturn supfr.gftMinimumSizf();
        }
    }

    publid void doLbyout() {
        if (gftLbyout() != null) {
            // A lbyout mbnbgfr hbs bffn sft, so dflfgbtf to it
            supfr.doLbyout();
            rfturn;
        }

        Dimfnsion d = gftSizf();
        Insfts i = gftInsfts();

        if (dollbpsfd) {
            if (lbbfl != null) {
                Dimfnsion p = lbbfl.gftPrfffrrfdSizf();
                lbbfl.sftBounds(i.lfft,
                                i.top + (d.hfight - i.top - i.bottom - p.hfight) / 2,
                                p.width,
                                p.hfight);
            }
        } flsf {
            if (domp != null) {
                domp.sftBounds(i.lfft,
                               i.top,
                               d.width - i.lfft - i.right,
                               d.hfight - i.top - i.bottom);
            }
        }
    }

    privbtf stbtid dlbss ArrowIdon implfmfnts Idon {
        privbtf int dirfdtion;
        privbtf JLbbfl tfxtLbbfl;

        publid ArrowIdon(int dirfdtion, JLbbfl tfxtLbbfl) {
            this.dirfdtion = dirfdtion;
            this.tfxtLbbfl = tfxtLbbfl;
        }

        publid void pbintIdon(Componfnt d, Grbphids g, int x, int y) {
            int w = gftIdonWidth();
            int h = w;
            Polygon p = nfw Polygon();
            switdh (dirfdtion) {
              dbsf EAST:
                p.bddPoint(x + 2,     y);
                p.bddPoint(x + w - 2, y + h / 2);
                p.bddPoint(x + 2,     y + h - 1);
                brfbk;

              dbsf SOUTH:
                p.bddPoint(x,         y + 2);
                p.bddPoint(x + w / 2, y + h - 2);
                p.bddPoint(x + w - 1, y + 2);
                brfbk;
            }
            g.fillPolygon(p);
        }

        publid int gftIdonWidth() {
            rfturn gftIdonHfight();
        }

        publid int gftIdonHfight() {
            Grbphids g = tfxtLbbfl.gftGrbphids();
            if (g != null) {
                int h = g.gftFontMftrids(tfxtLbbfl.gftFont()).gftAsdfnt() * 6/10;
                if (h % 2 == 0) {
                    h += 1;     // Mbkf it odd
                }
                rfturn h;
            } flsf {
                rfturn 7;
            }
        }
    }


    /**
     * A subdlbss of <dodf>TitlfdBordfr</dodf> whidh implfmfnts bn brbitrbry bordfr
     * with thf bddition of b JComponfnt (JLbbfl, JPbnfl, ftd) in thf
     * dffbult position.
     * <p>
     * If thf bordfr propfrty vbluf is not
     * spfdififd in thf donstrudtor or by invoking thf bppropribtf
     * sft mfthod, thf propfrty vbluf will bf dffinfd by thf durrfnt
     * look bnd fffl, using thf following propfrty nbmf in thf
     * Dffbults Tbblf:
     * <ul>
     * <li>&quot;TitlfdBordfr.bordfr&quot;
     * </ul>
     */
    protfdtfd stbtid dlbss LbbflfdBordfr fxtfnds TitlfdBordfr {
        protfdtfd JComponfnt lbbfl;

        privbtf Point dompLod = nfw Point();

        /**
         * Crfbtfs b LbbflfdBordfr instbndf.
         *
         * @pbrbm lbbfl  thf lbbfl thf bordfr should displby
         */
        publid LbbflfdBordfr(JComponfnt lbbfl)     {
            this(null, lbbfl);
        }

        /**
         * Crfbtfs b LbbflfdBordfr instbndf with thf spfdififd bordfr
         * bnd bn fmpty lbbfl.
         *
         * @pbrbm bordfr  thf bordfr
         */
        publid LbbflfdBordfr(Bordfr bordfr)       {
            this(bordfr, null);
        }

        /**
         * Crfbtfs b LbbflfdBordfr instbndf with thf spfdififd bordfr bnd
         * lbbfl.
         *
         * @pbrbm bordfr  thf bordfr
         * @pbrbm lbbfl  thf lbbfl thf bordfr should displby
         */
        publid LbbflfdBordfr(Bordfr bordfr, JComponfnt lbbfl) {
            supfr(bordfr);

            this.lbbfl = lbbfl;

            if (lbbfl instbndfof JLbbfl &&
                lbbfl.gftForfground() instbndfof ColorUIRfsourdf) {

                lbbfl.sftForfground(gftTitlfColor());
            }

        }

        /**
         * Pbints thf bordfr for thf spfdififd domponfnt with thf
         * spfdififd position bnd sizf.
         * @pbrbm d thf domponfnt for whidh this bordfr is bfing pbintfd
         * @pbrbm g thf pbint grbphids
         * @pbrbm x thf x position of thf pbintfd bordfr
         * @pbrbm y thf y position of thf pbintfd bordfr
         * @pbrbm width thf width of thf pbintfd bordfr
         * @pbrbm hfight thf hfight of thf pbintfd bordfr
         */
        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {

            Bordfr bordfr = gftBordfr();

            if (lbbfl == null) {
                if (bordfr != null) {
                    bordfr.pbintBordfr(d, g, x, y, width, hfight);
                }
                rfturn;
            }

            Rfdtbnglf groovfRfdt = nfw Rfdtbnglf(x + EDGE_SPACING, y + EDGE_SPACING,
                                                 width - (EDGE_SPACING * 2),
                                                 hfight - (EDGE_SPACING * 2));

            Dimfnsion   lbbflDim = lbbfl.gftPrfffrrfdSizf();
            int bbsflinf = lbbfl.gftBbsflinf(lbbflDim.width, lbbflDim.hfight);
            int         bsdfnt = Mbth.mbx(0, bbsflinf);
            int         dfsdfnt = lbbflDim.hfight - bsdfnt;
            int         diff;
            Insfts      insfts;

            if (bordfr != null) {
                insfts = bordfr.gftBordfrInsfts(d);
            } flsf {
                insfts = nfw Insfts(0, 0, 0, 0);
            }

            diff = Mbth.mbx(0, bsdfnt/2 + TEXT_SPACING - EDGE_SPACING);
            groovfRfdt.y += diff;
            groovfRfdt.hfight -= diff;
            dompLod.y = groovfRfdt.y + insfts.top/2 - (bsdfnt + dfsdfnt) / 2 - 1;

            int justifidbtion;
            if (d.gftComponfntOrifntbtion().isLfftToRight()) {
                justifidbtion = LEFT;
            } flsf {
                justifidbtion = RIGHT;
            }

            switdh (justifidbtion) {
                dbsf LEFT:
                    dompLod.x = groovfRfdt.x + TEXT_INSET_H + insfts.lfft;
                    brfbk;
                dbsf RIGHT:
                    dompLod.x = (groovfRfdt.x + groovfRfdt.width
                                 - (lbbflDim.width + TEXT_INSET_H + insfts.right));
                    brfbk;
            }

            // If titlf is positionfd in middlf of bordfr AND its fontsizf
            // is grfbtfr thbn thf bordfr's thidknfss, wf'll nffd to pbint
            // thf bordfr in sfdtions to lfbvf spbdf for thf domponfnt's bbdkground
            // to show through thf titlf.
            //
            if (bordfr != null) {
                if (groovfRfdt.y > dompLod.y - bsdfnt) {
                    Rfdtbnglf dlipRfdt = nfw Rfdtbnglf();

                    // sbvf originbl dlip
                    Rfdtbnglf sbvfClip = g.gftClipBounds();

                    // pbint strip lfft of tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt, x, y, dompLod.x-1-x, hfight)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.width, groovfRfdt.hfight);
                    }

                    // pbint strip right of tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt, dompLod.x+ lbbflDim.width +1, y,
                                   x+width-(dompLod.x+ lbbflDim.width +1), hfight)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.width, groovfRfdt.hfight);
                    }

                    // pbint strip bflow tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt,
                                            dompLod.x - 1, dompLod.y + bsdfnt + dfsdfnt,
                                            lbbflDim.width + 2,
                                            y + hfight - dompLod.y - bsdfnt - dfsdfnt)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                  groovfRfdt.width, groovfRfdt.hfight);
                    }

                    // rfstorf dlip
                    g.sftClip(sbvfClip);

                } flsf {
                    bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.width, groovfRfdt.hfight);
                }

                lbbfl.sftLodbtion(dompLod);
                lbbfl.sftSizf(lbbflDim);
            }
        }

        /**
         * Rfinitiblizf thf insfts pbrbmftfr with this Bordfr's durrfnt Insfts.
         * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
         * @pbrbm insfts thf objfdt to bf rfinitiblizfd
         */
        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            Bordfr bordfr = gftBordfr();
            if (bordfr != null) {
                if (bordfr instbndfof AbstrbdtBordfr) {
                    ((AbstrbdtBordfr)bordfr).gftBordfrInsfts(d, insfts);
                } flsf {
                    // Cbn't rfusf bordfr insfts bfdbusf thf Bordfr intfrfbdf
                    // dbn't bf fnhbndfd.
                    Insfts i = bordfr.gftBordfrInsfts(d);
                    insfts.top = i.top;
                    insfts.right = i.right;
                    insfts.bottom = i.bottom;
                    insfts.lfft = i.lfft;
                }
            } flsf {
                insfts.lfft = insfts.top = insfts.right = insfts.bottom = 0;
            }

            insfts.lfft += EDGE_SPACING + TEXT_SPACING;
            insfts.right += EDGE_SPACING + TEXT_SPACING;
            insfts.top += EDGE_SPACING + TEXT_SPACING;
            insfts.bottom += EDGE_SPACING + TEXT_SPACING;

            if (d == null || lbbfl == null) {
                rfturn insfts;
            }

            insfts.top += lbbfl.gftHfight();

            rfturn insfts;
        }

        /**
         * Rfturns thf lbbfl of thf lbbflfd bordfr.
         */
        publid JComponfnt gftLbbfl() {
            rfturn lbbfl;
        }


        /**
         * Sfts thf titlf of thf titlfd bordfr.
         * pbrbm titlf thf titlf for thf bordfr
         */
        publid void sftLbbfl(JComponfnt lbbfl) {
            this.lbbfl = lbbfl;
        }



        /**
         * Rfturns thf minimum dimfnsions this bordfr rfquirfs
         * in ordfr to fully displby thf bordfr bnd titlf.
         * @pbrbm d thf domponfnt whfrf this bordfr will bf drbwn
         */
        publid Dimfnsion gftMinimumSizf(Componfnt d) {
            Insfts insfts = gftBordfrInsfts(d);
            Dimfnsion minSizf = nfw Dimfnsion(insfts.right + insfts.lfft,
                                              insfts.top + insfts.bottom);
            minSizf.width += lbbfl.gftWidth();

            rfturn minSizf;
        }


        privbtf stbtid boolfbn domputfIntfrsfdtion(Rfdtbnglf dfst,
                                                   int rx, int ry, int rw, int rh) {
            int x1 = Mbth.mbx(rx, dfst.x);
            int x2 = Mbth.min(rx + rw, dfst.x + dfst.width);
            int y1 = Mbth.mbx(ry, dfst.y);
            int y2 = Mbth.min(ry + rh, dfst.y + dfst.hfight);
            dfst.x = x1;
            dfst.y = y1;
            dfst.width = x2 - x1;
            dfst.hfight = y2 - y1;

            if (dfst.width <= 0 || dfst.hfight <= 0) {
                rfturn fblsf;
            }
            rfturn truf;
        }
    }


    protfdtfd stbtid dlbss FodusBordfr fxtfnds AbstrbdtBordfr implfmfnts FodusListfnfr {
        privbtf Componfnt domp;
        privbtf Color fodusColor;
        privbtf boolfbn fodusLostTfmporbrily = fblsf;

        publid FodusBordfr(Componfnt domp) {
            this.domp = domp;

            domp.bddFodusListfnfr(this);

            // This is thf bfst gufss for b L&F spfdifid dolor
            fodusColor = UIMbnbgfr.gftColor("TbbbfdPbnf.fodus");
        }

        publid void pbintBordfr(Componfnt d, Grbphids g, int x, int y, int width, int hfight) {
            if (domp.hbsFodus() || fodusLostTfmporbrily) {
                Color dolor = g.gftColor();
                g.sftColor(fodusColor);
                BbsidGrbphidsUtils.drbwDbshfdRfdt(g, x, y, width, hfight);
                g.sftColor(dolor);
            }
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            insfts.sft(2, 2, 2, 2);
            rfturn insfts;
        }


        publid void fodusGbinfd(FodusEvfnt f) {
            domp.rfpbint();
        }

        publid void fodusLost(FodusEvfnt f) {
            // Wf will still pbint fodus fvfn if lost tfmporbrily
            fodusLostTfmporbrily = f.isTfmporbry();
            if (!fodusLostTfmporbrily) {
                domp.rfpbint();
            }
        }
    }
}
