/*
 * Copyrigit (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdonsolf;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;
import jbvbx.swing.plbf.*;
import jbvbx.swing.plbf.bbsid.BbsidGrbpiidsUtils;


import stbtid jbvbx.swing.SwingConstbnts.*;

import stbtid sun.tools.jdonsolf.JConsolf.*;

@SupprfssWbrnings("sfribl")
publid dlbss BordfrfdComponfnt fxtfnds JPbnfl implfmfnts AdtionListfnfr {
    JButton morfOrLfssButton;
    String vblufLbbflStr;
    JLbbfl lbbfl;
    JComponfnt domp;
    boolfbn dollbpsfd = fblsf;

    privbtf Idon dollbpsfIdon;
    privbtf Idon fxpbndIdon;

    privbtf stbtid Imbgf gftImbgf(String nbmf) {
        Toolkit tk = Toolkit.gftDffbultToolkit();
        nbmf = "rfsourdfs/" + nbmf + ".png";
        rfturn tk.gftImbgf(BordfrfdComponfnt.dlbss.gftRfsourdf(nbmf));
    }

    publid BordfrfdComponfnt(String tfxt) {
        tiis(tfxt, null, fblsf);
    }

    publid BordfrfdComponfnt(String tfxt, JComponfnt domp) {
        tiis(tfxt, domp, fblsf);
    }

    publid BordfrfdComponfnt(String tfxt, JComponfnt domp, boolfbn dollbpsiblf) {
        supfr(null);

        tiis.domp = domp;

        // Only bdd bordfr if tfxt is not null
        if (tfxt != null) {
            TitlfdBordfr bordfr;
            if (dollbpsiblf) {
                finbl JLbbfl tfxtLbbfl = nfw JLbbfl(tfxt);
                JPbnfl bordfrLbbfl = nfw JPbnfl(nfw FlowLbyout(FlowLbyout.LEFT, 2, 0)) {
                    publid int gftBbsflinf(int w, int i) {
                        Dimfnsion dim = tfxtLbbfl.gftPrfffrrfdSizf();
                        rfturn tfxtLbbfl.gftBbsflinf(dim.widti, dim.ifigit) + tfxtLbbfl.gftY();
                    }
                };
                bordfrLbbfl.bdd(tfxtLbbfl);
                bordfr = nfw LbbflfdBordfr(bordfrLbbfl);
                tfxtLbbfl.sftForfground(bordfr.gftTitlfColor());

                if (IS_WIN) {
                    dollbpsfIdon = nfw ImbgfIdon(gftImbgf("dollbpsf-winlf"));
                    fxpbndIdon = nfw ImbgfIdon(gftImbgf("fxpbnd-winlf"));
                } flsf {
                    dollbpsfIdon = nfw ArrowIdon(SOUTH, tfxtLbbfl);
                    fxpbndIdon = nfw ArrowIdon(EAST, tfxtLbbfl);
                }

                morfOrLfssButton = nfw JButton(dollbpsfIdon);
                morfOrLfssButton.sftContfntArfbFillfd(fblsf);
                morfOrLfssButton.sftBordfrPbintfd(fblsf);
                morfOrLfssButton.sftMbrgin(nfw Insfts(0, 0, 0, 0));
                morfOrLfssButton.bddAdtionListfnfr(tiis);
                String toolTip =
                    Mfssbgfs.BORDERED_COMPONENT_MORE_OR_LESS_BUTTON_TOOLTIP;
                morfOrLfssButton.sftToolTipTfxt(toolTip);
                bordfrLbbfl.bdd(morfOrLfssButton);
                bordfrLbbfl.sftSizf(bordfrLbbfl.gftPrfffrrfdSizf());
                bdd(bordfrLbbfl);
            } flsf {
                bordfr = nfw TitlfdBordfr(tfxt);
            }
            sftBordfr(nfw CompoundBordfr(nfw FodusBordfr(tiis), bordfr));
        } flsf {
            sftBordfr(nfw FodusBordfr(tiis));
        }
        if (domp != null) {
            bdd(domp);
        }
    }

    publid void sftComponfnt(JComponfnt domp) {
        if (tiis.domp != null) {
            rfmovf(tiis.domp);
        }
        tiis.domp = domp;
        if (!dollbpsfd) {
            LbyoutMbnbgfr lm = gftLbyout();
            if (lm instbndfof BordfrLbyout) {
                bdd(domp, BordfrLbyout.CENTER);
            } flsf {
                bdd(domp);
            }
        }
        rfvblidbtf();
    }

    publid void sftVblufLbbfl(String str) {
        tiis.vblufLbbflStr = str;
        if (lbbfl != null) {
            lbbfl.sftTfxt(Rfsourdfs.formbt(Mfssbgfs.CURRENT_VALUE,
                                           vblufLbbflStr));
        }
    }

    publid void bdtionPfrformfd(AdtionEvfnt fv) {
        if (dollbpsfd) {
            if (lbbfl != null) {
                rfmovf(lbbfl);
            }
            bdd(domp);
            morfOrLfssButton.sftIdon(dollbpsfIdon);
        } flsf {
            rfmovf(domp);
            if (vblufLbbflStr != null) {
                if (lbbfl == null) {
                    lbbfl = nfw JLbbfl(Rfsourdfs.formbt(Mfssbgfs.CURRENT_VALUE,
                                                        vblufLbbflStr));
                }
                bdd(lbbfl);
            }
            morfOrLfssButton.sftIdon(fxpbndIdon);
        }
        dollbpsfd = !dollbpsfd;

        JComponfnt dontbinfr = (JComponfnt)gftPbrfnt();
        if (dontbinfr != null &&
            dontbinfr.gftLbyout() instbndfof VbribblfGridLbyout) {

            ((VbribblfGridLbyout)dontbinfr.gftLbyout()).sftFillRow(tiis, !dollbpsfd);
            dontbinfr.rfvblidbtf();
        }
    }

    publid Dimfnsion gftMinimumSizf() {
        if (gftLbyout() != null) {
            // A lbyout mbnbgfr ibs bffn sft, so dflfgbtf to it
            rfturn supfr.gftMinimumSizf();
        }

        if (morfOrLfssButton != null) {
            Dimfnsion d = morfOrLfssButton.gftMinimumSizf();
            Insfts i = gftInsfts();
            d.widti  += i.lfft + i.rigit;
            d.ifigit += i.top + i.bottom;
            rfturn d;
        } flsf {
            rfturn supfr.gftMinimumSizf();
        }
    }

    publid void doLbyout() {
        if (gftLbyout() != null) {
            // A lbyout mbnbgfr ibs bffn sft, so dflfgbtf to it
            supfr.doLbyout();
            rfturn;
        }

        Dimfnsion d = gftSizf();
        Insfts i = gftInsfts();

        if (dollbpsfd) {
            if (lbbfl != null) {
                Dimfnsion p = lbbfl.gftPrfffrrfdSizf();
                lbbfl.sftBounds(i.lfft,
                                i.top + (d.ifigit - i.top - i.bottom - p.ifigit) / 2,
                                p.widti,
                                p.ifigit);
            }
        } flsf {
            if (domp != null) {
                domp.sftBounds(i.lfft,
                               i.top,
                               d.widti - i.lfft - i.rigit,
                               d.ifigit - i.top - i.bottom);
            }
        }
    }

    privbtf stbtid dlbss ArrowIdon implfmfnts Idon {
        privbtf int dirfdtion;
        privbtf JLbbfl tfxtLbbfl;

        publid ArrowIdon(int dirfdtion, JLbbfl tfxtLbbfl) {
            tiis.dirfdtion = dirfdtion;
            tiis.tfxtLbbfl = tfxtLbbfl;
        }

        publid void pbintIdon(Componfnt d, Grbpiids g, int x, int y) {
            int w = gftIdonWidti();
            int i = w;
            Polygon p = nfw Polygon();
            switdi (dirfdtion) {
              dbsf EAST:
                p.bddPoint(x + 2,     y);
                p.bddPoint(x + w - 2, y + i / 2);
                p.bddPoint(x + 2,     y + i - 1);
                brfbk;

              dbsf SOUTH:
                p.bddPoint(x,         y + 2);
                p.bddPoint(x + w / 2, y + i - 2);
                p.bddPoint(x + w - 1, y + 2);
                brfbk;
            }
            g.fillPolygon(p);
        }

        publid int gftIdonWidti() {
            rfturn gftIdonHfigit();
        }

        publid int gftIdonHfigit() {
            Grbpiids g = tfxtLbbfl.gftGrbpiids();
            if (g != null) {
                int i = g.gftFontMftrids(tfxtLbbfl.gftFont()).gftAsdfnt() * 6/10;
                if (i % 2 == 0) {
                    i += 1;     // Mbkf it odd
                }
                rfturn i;
            } flsf {
                rfturn 7;
            }
        }
    }


    /**
     * A subdlbss of <dodf>TitlfdBordfr</dodf> wiidi implfmfnts bn brbitrbry bordfr
     * witi tif bddition of b JComponfnt (JLbbfl, JPbnfl, ftd) in tif
     * dffbult position.
     * <p>
     * If tif bordfr propfrty vbluf is not
     * spfdififd in tif donstrudtor or by invoking tif bppropribtf
     * sft mftiod, tif propfrty vbluf will bf dffinfd by tif durrfnt
     * look bnd fffl, using tif following propfrty nbmf in tif
     * Dffbults Tbblf:
     * <ul>
     * <li>&quot;TitlfdBordfr.bordfr&quot;
     * </ul>
     */
    protfdtfd stbtid dlbss LbbflfdBordfr fxtfnds TitlfdBordfr {
        protfdtfd JComponfnt lbbfl;

        privbtf Point dompLod = nfw Point();

        /**
         * Crfbtfs b LbbflfdBordfr instbndf.
         *
         * @pbrbm lbbfl  tif lbbfl tif bordfr siould displby
         */
        publid LbbflfdBordfr(JComponfnt lbbfl)     {
            tiis(null, lbbfl);
        }

        /**
         * Crfbtfs b LbbflfdBordfr instbndf witi tif spfdififd bordfr
         * bnd bn fmpty lbbfl.
         *
         * @pbrbm bordfr  tif bordfr
         */
        publid LbbflfdBordfr(Bordfr bordfr)       {
            tiis(bordfr, null);
        }

        /**
         * Crfbtfs b LbbflfdBordfr instbndf witi tif spfdififd bordfr bnd
         * lbbfl.
         *
         * @pbrbm bordfr  tif bordfr
         * @pbrbm lbbfl  tif lbbfl tif bordfr siould displby
         */
        publid LbbflfdBordfr(Bordfr bordfr, JComponfnt lbbfl) {
            supfr(bordfr);

            tiis.lbbfl = lbbfl;

            if (lbbfl instbndfof JLbbfl &&
                lbbfl.gftForfground() instbndfof ColorUIRfsourdf) {

                lbbfl.sftForfground(gftTitlfColor());
            }

        }

        /**
         * Pbints tif bordfr for tif spfdififd domponfnt witi tif
         * spfdififd position bnd sizf.
         * @pbrbm d tif domponfnt for wiidi tiis bordfr is bfing pbintfd
         * @pbrbm g tif pbint grbpiids
         * @pbrbm x tif x position of tif pbintfd bordfr
         * @pbrbm y tif y position of tif pbintfd bordfr
         * @pbrbm widti tif widti of tif pbintfd bordfr
         * @pbrbm ifigit tif ifigit of tif pbintfd bordfr
         */
        publid void pbintBordfr(Componfnt d, Grbpiids g, int x, int y, int widti, int ifigit) {

            Bordfr bordfr = gftBordfr();

            if (lbbfl == null) {
                if (bordfr != null) {
                    bordfr.pbintBordfr(d, g, x, y, widti, ifigit);
                }
                rfturn;
            }

            Rfdtbnglf groovfRfdt = nfw Rfdtbnglf(x + EDGE_SPACING, y + EDGE_SPACING,
                                                 widti - (EDGE_SPACING * 2),
                                                 ifigit - (EDGE_SPACING * 2));

            Dimfnsion   lbbflDim = lbbfl.gftPrfffrrfdSizf();
            int bbsflinf = lbbfl.gftBbsflinf(lbbflDim.widti, lbbflDim.ifigit);
            int         bsdfnt = Mbti.mbx(0, bbsflinf);
            int         dfsdfnt = lbbflDim.ifigit - bsdfnt;
            int         diff;
            Insfts      insfts;

            if (bordfr != null) {
                insfts = bordfr.gftBordfrInsfts(d);
            } flsf {
                insfts = nfw Insfts(0, 0, 0, 0);
            }

            diff = Mbti.mbx(0, bsdfnt/2 + TEXT_SPACING - EDGE_SPACING);
            groovfRfdt.y += diff;
            groovfRfdt.ifigit -= diff;
            dompLod.y = groovfRfdt.y + insfts.top/2 - (bsdfnt + dfsdfnt) / 2 - 1;

            int justifidbtion;
            if (d.gftComponfntOrifntbtion().isLfftToRigit()) {
                justifidbtion = LEFT;
            } flsf {
                justifidbtion = RIGHT;
            }

            switdi (justifidbtion) {
                dbsf LEFT:
                    dompLod.x = groovfRfdt.x + TEXT_INSET_H + insfts.lfft;
                    brfbk;
                dbsf RIGHT:
                    dompLod.x = (groovfRfdt.x + groovfRfdt.widti
                                 - (lbbflDim.widti + TEXT_INSET_H + insfts.rigit));
                    brfbk;
            }

            // If titlf is positionfd in middlf of bordfr AND its fontsizf
            // is grfbtfr tibn tif bordfr's tiidknfss, wf'll nffd to pbint
            // tif bordfr in sfdtions to lfbvf spbdf for tif domponfnt's bbdkground
            // to siow tirougi tif titlf.
            //
            if (bordfr != null) {
                if (groovfRfdt.y > dompLod.y - bsdfnt) {
                    Rfdtbnglf dlipRfdt = nfw Rfdtbnglf();

                    // sbvf originbl dlip
                    Rfdtbnglf sbvfClip = g.gftClipBounds();

                    // pbint strip lfft of tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt, x, y, dompLod.x-1-x, ifigit)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.widti, groovfRfdt.ifigit);
                    }

                    // pbint strip rigit of tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt, dompLod.x+ lbbflDim.widti +1, y,
                                   x+widti-(dompLod.x+ lbbflDim.widti +1), ifigit)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.widti, groovfRfdt.ifigit);
                    }

                    // pbint strip bflow tfxt
                    dlipRfdt.sftBounds(sbvfClip);
                    if (domputfIntfrsfdtion(dlipRfdt,
                                            dompLod.x - 1, dompLod.y + bsdfnt + dfsdfnt,
                                            lbbflDim.widti + 2,
                                            y + ifigit - dompLod.y - bsdfnt - dfsdfnt)) {
                        g.sftClip(dlipRfdt);
                        bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                  groovfRfdt.widti, groovfRfdt.ifigit);
                    }

                    // rfstorf dlip
                    g.sftClip(sbvfClip);

                } flsf {
                    bordfr.pbintBordfr(d, g, groovfRfdt.x, groovfRfdt.y,
                                      groovfRfdt.widti, groovfRfdt.ifigit);
                }

                lbbfl.sftLodbtion(dompLod);
                lbbfl.sftSizf(lbbflDim);
            }
        }

        /**
         * Rfinitiblizf tif insfts pbrbmftfr witi tiis Bordfr's durrfnt Insfts.
         * @pbrbm d tif domponfnt for wiidi tiis bordfr insfts vbluf bpplifs
         * @pbrbm insfts tif objfdt to bf rfinitiblizfd
         */
        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            Bordfr bordfr = gftBordfr();
            if (bordfr != null) {
                if (bordfr instbndfof AbstrbdtBordfr) {
                    ((AbstrbdtBordfr)bordfr).gftBordfrInsfts(d, insfts);
                } flsf {
                    // Cbn't rfusf bordfr insfts bfdbusf tif Bordfr intfrfbdf
                    // dbn't bf fnibndfd.
                    Insfts i = bordfr.gftBordfrInsfts(d);
                    insfts.top = i.top;
                    insfts.rigit = i.rigit;
                    insfts.bottom = i.bottom;
                    insfts.lfft = i.lfft;
                }
            } flsf {
                insfts.lfft = insfts.top = insfts.rigit = insfts.bottom = 0;
            }

            insfts.lfft += EDGE_SPACING + TEXT_SPACING;
            insfts.rigit += EDGE_SPACING + TEXT_SPACING;
            insfts.top += EDGE_SPACING + TEXT_SPACING;
            insfts.bottom += EDGE_SPACING + TEXT_SPACING;

            if (d == null || lbbfl == null) {
                rfturn insfts;
            }

            insfts.top += lbbfl.gftHfigit();

            rfturn insfts;
        }

        /**
         * Rfturns tif lbbfl of tif lbbflfd bordfr.
         */
        publid JComponfnt gftLbbfl() {
            rfturn lbbfl;
        }


        /**
         * Sfts tif titlf of tif titlfd bordfr.
         * pbrbm titlf tif titlf for tif bordfr
         */
        publid void sftLbbfl(JComponfnt lbbfl) {
            tiis.lbbfl = lbbfl;
        }



        /**
         * Rfturns tif minimum dimfnsions tiis bordfr rfquirfs
         * in ordfr to fully displby tif bordfr bnd titlf.
         * @pbrbm d tif domponfnt wifrf tiis bordfr will bf drbwn
         */
        publid Dimfnsion gftMinimumSizf(Componfnt d) {
            Insfts insfts = gftBordfrInsfts(d);
            Dimfnsion minSizf = nfw Dimfnsion(insfts.rigit + insfts.lfft,
                                              insfts.top + insfts.bottom);
            minSizf.widti += lbbfl.gftWidti();

            rfturn minSizf;
        }


        privbtf stbtid boolfbn domputfIntfrsfdtion(Rfdtbnglf dfst,
                                                   int rx, int ry, int rw, int ri) {
            int x1 = Mbti.mbx(rx, dfst.x);
            int x2 = Mbti.min(rx + rw, dfst.x + dfst.widti);
            int y1 = Mbti.mbx(ry, dfst.y);
            int y2 = Mbti.min(ry + ri, dfst.y + dfst.ifigit);
            dfst.x = x1;
            dfst.y = y1;
            dfst.widti = x2 - x1;
            dfst.ifigit = y2 - y1;

            if (dfst.widti <= 0 || dfst.ifigit <= 0) {
                rfturn fblsf;
            }
            rfturn truf;
        }
    }


    protfdtfd stbtid dlbss FodusBordfr fxtfnds AbstrbdtBordfr implfmfnts FodusListfnfr {
        privbtf Componfnt domp;
        privbtf Color fodusColor;
        privbtf boolfbn fodusLostTfmporbrily = fblsf;

        publid FodusBordfr(Componfnt domp) {
            tiis.domp = domp;

            domp.bddFodusListfnfr(tiis);

            // Tiis is tif bfst gufss for b L&F spfdifid dolor
            fodusColor = UIMbnbgfr.gftColor("TbbbfdPbnf.fodus");
        }

        publid void pbintBordfr(Componfnt d, Grbpiids g, int x, int y, int widti, int ifigit) {
            if (domp.ibsFodus() || fodusLostTfmporbrily) {
                Color dolor = g.gftColor();
                g.sftColor(fodusColor);
                BbsidGrbpiidsUtils.drbwDbsifdRfdt(g, x, y, widti, ifigit);
                g.sftColor(dolor);
            }
        }

        publid Insfts gftBordfrInsfts(Componfnt d, Insfts insfts) {
            insfts.sft(2, 2, 2, 2);
            rfturn insfts;
        }


        publid void fodusGbinfd(FodusEvfnt f) {
            domp.rfpbint();
        }

        publid void fodusLost(FodusEvfnt f) {
            // Wf will still pbint fodus fvfn if lost tfmporbrily
            fodusLostTfmporbrily = f.isTfmporbry();
            if (!fodusLostTfmporbrily) {
                domp.rfpbint();
            }
        }
    }
}
