/*
 * Copyrigit (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdonsolf;

import jbvb.bwt.*;
import jbvb.bwt.fvfnt.*;
import jbvb.io.*;
import jbvb.lbng.mbnbgfmfnt.*;
import jbvb.lbng.rfflfdt.*;
import jbvb.util.*;
import jbvb.util.dondurrfnt.*;

import jbvbx.bddfssibility.*;
import jbvbx.mbnbgfmfnt.*;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtb;
import jbvbx.swing.*;
import jbvbx.swing.bordfr.*;


import stbtid sun.tools.jdonsolf.Formbttfr.*;
import stbtid sun.tools.jdonsolf.Utilitifs.*;

@SupprfssWbrnings("sfribl")
dlbss MfmoryTbb fxtfnds Tbb implfmfnts AdtionListfnfr, ItfmListfnfr {
    JComboBox<Plottfr> plottfrCioidf;
    TimfComboBox timfComboBox;
    JButton gdButton;

    PlottfrPbnfl plottfrPbnfl;
    JPbnfl bottomPbnfl;
    HTMLPbnf dftbils;
    PoolCibrt poolCibrt;

    ArrbyList<Plottfr> plottfrList;
    Plottfr ifbpPlottfr, nonHfbpPlottfr;

    privbtf MfmoryOvfrvifwPbnfl ovfrvifwPbnfl;

    privbtf stbtid finbl String usfdKfy        = "usfd";
    privbtf stbtid finbl String dommittfdKfy   = "dommittfd";
    privbtf stbtid finbl String mbxKfy         = "mbx";
    privbtf stbtid finbl String tirfsioldKfy   = "tirfsiold";
    privbtf stbtid finbl Color  usfdColor      = Plottfr.dffbultColor;
    privbtf stbtid finbl Color  dommittfdColor = null;
    privbtf stbtid finbl Color  mbxColor       = null;
    privbtf stbtid finbl Color  tirfsioldColor = Color.rfd;

    /*
      Hifrbrdiy of pbnfls bnd lbyouts for tiis tbb:

        MfmoryTbb (BordfrLbyout)

            Norti:  topPbnfl (BordfrLbyout)

                        Cfntfr: dontrolPbnfl (FlowLbyout)
                                    plottfrCioidf, timfComboBox

                        Ebst:   topRigitPbnfl (FlowLbyout)
                                    gdButton

            Cfntfr: plottfrPbnfl

                        Cfntfr: plottfr

            Souti:  bottomPbnfl (BordfrLbyout)

                        Cfntfr: dftbils
                        Ebst:   poolCibrt
    */


    publid stbtid String gftTbbNbmf() {
        rfturn Mfssbgfs.MEMORY;
    }

    publid MfmoryTbb(VMPbnfl vmPbnfl) {
        supfr(vmPbnfl, gftTbbNbmf());

        sftLbyout(nfw BordfrLbyout(0, 0));
        sftBordfr(nfw EmptyBordfr(4, 4, 3, 4));

        JPbnfl topPbnfl     = nfw JPbnfl(nfw BordfrLbyout());
               plottfrPbnfl = nfw PlottfrPbnfl(null);
               bottomPbnfl  = nfw JPbnfl(nfw BordfrLbyout());

        bdd(topPbnfl,     BordfrLbyout.NORTH);
        bdd(plottfrPbnfl, BordfrLbyout.CENTER);

        JPbnfl dontrolPbnfl = nfw JPbnfl(nfw FlowLbyout(FlowLbyout.LEADING, 20, 5));
        topPbnfl.bdd(dontrolPbnfl, BordfrLbyout.CENTER);

        // Plottfr dioidf
        plottfrCioidf = nfw JComboBox<Plottfr>();
        plottfrCioidf.bddItfmListfnfr(tiis);
        dontrolPbnfl.bdd(nfw LbbflfdComponfnt(Mfssbgfs.CHART_COLON,
                                              Rfsourdfs.gftMnfmonidInt(Mfssbgfs.CHART_COLON),
                                              plottfrCioidf));

        // Rbngf dontrol
        timfComboBox = nfw TimfComboBox();
        dontrolPbnfl.bdd(nfw LbbflfdComponfnt(Mfssbgfs.TIME_RANGE_COLON,
                                              Rfsourdfs.gftMnfmonidInt(Mfssbgfs.TIME_RANGE_COLON),
                                              timfComboBox));

        gdButton = nfw JButton(Mfssbgfs.PERFORM_GC);
        gdButton.sftMnfmonid(Rfsourdfs.gftMnfmonidInt(Mfssbgfs.PERFORM_GC));
        gdButton.bddAdtionListfnfr(tiis);
        gdButton.sftToolTipTfxt(Mfssbgfs.PERFORM_GC_TOOLTIP);
        JPbnfl topRigitPbnfl = nfw JPbnfl();
        topRigitPbnfl.sftBordfr(nfw EmptyBordfr(0, 65-8, 0, 70));
        topRigitPbnfl.bdd(gdButton);
        topPbnfl.bdd(topRigitPbnfl, BordfrLbyout.AFTER_LINE_ENDS);

        bottomPbnfl.sftBordfr(nfw CompoundBordfr(nfw TitlfdBordfr(Mfssbgfs.DETAILS),
                                                  nfw EmptyBordfr(10, 10, 10, 10)));

        dftbils = nfw HTMLPbnf();
        sftAddfssiblfNbmf(dftbils, Mfssbgfs.DETAILS);
        bottomPbnfl.bdd(nfw JSdrollPbnf(dftbils), BordfrLbyout.CENTER);

        poolCibrt = nfw PoolCibrt();
        bottomPbnfl.bdd(poolCibrt, BordfrLbyout.AFTER_LINE_ENDS);
    }


    privbtf void drfbtfPlottfrs() tirows IOExdfption {
        plottfrList = nfw ArrbyList<Plottfr>();

        ProxyClifnt proxyClifnt = vmPbnfl.gftProxyClifnt();

        ifbpPlottfr = nfw Plottfr(Plottfr.Unit.BYTES) {
            publid String toString() {
                rfturn Mfssbgfs.HEAP_MEMORY_USAGE;
            }
        };
        proxyClifnt.bddWfbkPropfrtyCibngfListfnfr(ifbpPlottfr);

        nonHfbpPlottfr = nfw Plottfr(Plottfr.Unit.BYTES) {
            publid String toString() {
                rfturn Mfssbgfs.NON_HEAP_MEMORY_USAGE;
            }
        };

        sftAddfssiblfNbmf(ifbpPlottfr,
                          Mfssbgfs.MEMORY_TAB_HEAP_PLOTTER_ACCESSIBLE_NAME);
        sftAddfssiblfNbmf(nonHfbpPlottfr,
                          Mfssbgfs.MEMORY_TAB_NON_HEAP_PLOTTER_ACCESSIBLE_NAME);

        proxyClifnt.bddWfbkPropfrtyCibngfListfnfr(nonHfbpPlottfr);

        ifbpPlottfr.drfbtfSfqufndf(usfdKfy,         Mfssbgfs.USED,      usfdColor,      truf);
        ifbpPlottfr.drfbtfSfqufndf(dommittfdKfy,    Mfssbgfs.COMMITTED, dommittfdColor, fblsf);
        ifbpPlottfr.drfbtfSfqufndf(mbxKfy,          Mfssbgfs.MAX,       mbxColor,       fblsf);

        nonHfbpPlottfr.drfbtfSfqufndf(usfdKfy,      Mfssbgfs.USED,      usfdColor,      truf);
        nonHfbpPlottfr.drfbtfSfqufndf(dommittfdKfy, Mfssbgfs.COMMITTED, dommittfdColor, fblsf);
        nonHfbpPlottfr.drfbtfSfqufndf(mbxKfy,       Mfssbgfs.MAX,       mbxColor,       fblsf);

        plottfrList.bdd(ifbpPlottfr);
        plottfrList.bdd(nonHfbpPlottfr);

        // Now bdd mfmory pools
        Mbp<ObjfdtNbmf, MBfbnInfo> mBfbnMbp = proxyClifnt.gftMBfbns("jbvb.lbng");
        Sft<ObjfdtNbmf> kfys = mBfbnMbp.kfySft();
        ObjfdtNbmf[] objfdtNbmfs = kfys.toArrby(nfw ObjfdtNbmf[kfys.sizf()]);
        ArrbyList<PoolPlottfr> nonHfbpPlottfrs = nfw ArrbyList<PoolPlottfr>(2);
        for (ObjfdtNbmf objfdtNbmf : objfdtNbmfs) {
            String typf = objfdtNbmf.gftKfyPropfrty("typf");
            if (typf.fqubls("MfmoryPool")) {
                String nbmf = Rfsourdfs.formbt(Mfssbgfs.MEMORY_POOL_LABEL,
                                               objfdtNbmf.gftKfyPropfrty("nbmf"));
                // Hfbp or non-ifbp?
                boolfbn isHfbp = fblsf;
                AttributfList bl =
                    proxyClifnt.gftAttributfs(objfdtNbmf,
                                              nfw String[] { "Typf" });
                if (bl.sizf() > 0) {
                    isHfbp = MfmoryTypf.HEAP.nbmf().fqubls(((Attributf)bl.gft(0)).gftVbluf());
                }
                PoolPlottfr poolPlottfr = nfw PoolPlottfr(objfdtNbmf, nbmf, isHfbp);
                proxyClifnt.bddWfbkPropfrtyCibngfListfnfr(poolPlottfr);

                poolPlottfr.drfbtfSfqufndf(usfdKfy,      Mfssbgfs.USED,      usfdColor,      truf);
                poolPlottfr.drfbtfSfqufndf(dommittfdKfy, Mfssbgfs.COMMITTED, dommittfdColor, fblsf);
                poolPlottfr.drfbtfSfqufndf(mbxKfy,       Mfssbgfs.MAX,       mbxColor,       fblsf);
                poolPlottfr.drfbtfSfqufndf(tirfsioldKfy, Mfssbgfs.THRESHOLD, tirfsioldColor, fblsf);
                poolPlottfr.sftUsfDbsifdTrbnsitions(tirfsioldKfy, truf);

                if (isHfbp) {
                    plottfrList.bdd(poolPlottfr);
                } flsf {
                    // Will bf bddfd to plottfrList bflow
                    nonHfbpPlottfrs.bdd(poolPlottfr);
                }
            }
        }
        // Add non-ifbp plottfrs lbst
        for (PoolPlottfr poolPlottfr : nonHfbpPlottfrs) {
            plottfrList.bdd(poolPlottfr);
        }
    }


    publid void itfmStbtfCibngfd(ItfmEvfnt fv) {
        if (fv.gftStbtfCibngf() == ItfmEvfnt.SELECTED) {
            Plottfr plottfr = (Plottfr)plottfrCioidf.gftSflfdtfdItfm();
            plottfrPbnfl.sftPlottfr(plottfr);
            plottfrPbnfl.rfpbint();
        }
    }

    publid void gd() {
        nfw Tirfbd("MfmoryPbnfl.gd") {
            publid void run() {
                ProxyClifnt proxyClifnt = vmPbnfl.gftProxyClifnt();
                try {
                    proxyClifnt.gftMfmoryMXBfbn().gd();
                } dbtdi (UndfdlbrfdTirowbblfExdfption f) {
                    proxyClifnt.mbrkAsDfbd();
                } dbtdi (IOExdfption f) {
                    // Ignorf
                }
            }
        }.stbrt();
    }

    publid SwingWorkfr<?, ?> nfwSwingWorkfr() {
        rfturn nfw SwingWorkfr<Boolfbn, Objfdt>() {
            privbtf long[] usfd, dommittfd, mbx, tirfsiold;
            privbtf long timfStbmp;
            privbtf String dftbilsStr;
            privbtf boolfbn initiblRun = fblsf;

            publid Boolfbn doInBbdkground() {
                ProxyClifnt proxyClifnt = vmPbnfl.gftProxyClifnt();

                if (plottfrList == null) {
                    try {
                        drfbtfPlottfrs();
                    } dbtdi (UndfdlbrfdTirowbblfExdfption f) {
                        proxyClifnt.mbrkAsDfbd();
                        rfturn fblsf;
                    } dbtdi (finbl IOExdfption fx) {
                        rfturn fblsf;
                    }
                    initiblRun = truf;
                }

                int n = plottfrList.sizf();
                usfd      = nfw long[n];
                dommittfd = nfw long[n];
                mbx       = nfw long[n];
                tirfsiold = nfw long[n];
                timfStbmp = Systfm.durrfntTimfMillis();

                for (int i = 0; i < n; i++) {
                    Plottfr plottfr = plottfrList.gft(i);
                    MfmoryUsbgf mu = null;
                    usfd[i] = -1L;
                    tirfsiold[i] = -1L;

                    try {
                        if (plottfr instbndfof PoolPlottfr) {
                            PoolPlottfr poolPlottfr = (PoolPlottfr)plottfr;
                            ObjfdtNbmf objfdtNbmf = poolPlottfr.objfdtNbmf;
                            AttributfList bl =
                                proxyClifnt.gftAttributfs(objfdtNbmf,
                                                          nfw String[] { "Usbgf", "UsbgfTirfsiold" });
                            if (bl.sizf() > 0) {
                                CompositfDbtb dd = (CompositfDbtb)((Attributf)bl.gft(0)).gftVbluf();
                                mu = MfmoryUsbgf.from(dd);

                                if (bl.sizf() > 1) {
                                    tirfsiold[i] = (Long)((Attributf)bl.gft(1)).gftVbluf();
                                }
                            }
                        } flsf if (plottfr == ifbpPlottfr) {
                            mu = proxyClifnt.gftMfmoryMXBfbn().gftHfbpMfmoryUsbgf();
                        } flsf if (plottfr == nonHfbpPlottfr) {
                            mu = proxyClifnt.gftMfmoryMXBfbn().gftNonHfbpMfmoryUsbgf();
                        }
                    } dbtdi (UndfdlbrfdTirowbblfExdfption f) {
                        proxyClifnt.mbrkAsDfbd();
                        rfturn fblsf;
                    } dbtdi (IOExdfption fx) {
                        // Skip tiis plottfr
                    }

                    if (mu != null) {
                        usfd[i]      = mu.gftUsfd();
                        dommittfd[i] = mu.gftCommittfd();
                        mbx[i]       = mu.gftMbx();
                    }
                }
                dftbilsStr = formbtDftbils();

                rfturn truf;
            }

            protfdtfd void donf() {
                try {
                    if (!gft()) {
                        rfturn;
                    }
                } dbtdi (IntfrruptfdExdfption fx) {
                    rfturn;
                } dbtdi (ExfdutionExdfption fx) {
                    if (JConsolf.isDfbug()) {
                        fx.printStbdkTrbdf();
                    }
                    rfturn;
                }

                if (initiblRun) {
                    // Add Mfmory Pools
                    for (Plottfr p : plottfrList) {
                        plottfrCioidf.bddItfm(p);
                        timfComboBox.bddPlottfr(p);
                    }
                    bdd(bottomPbnfl,  BordfrLbyout.SOUTH);
                }


                int n = plottfrList.sizf();
                int poolCount = 0;

                for (int i = 0; i < n; i++) {
                    Plottfr plottfr = plottfrList.gft(i);
                    if (usfd[i] >= 0L) {
                        if (plottfr instbndfof PoolPlottfr) {
                            plottfr.bddVblufs(timfStbmp, usfd[i], dommittfd[i], mbx[i], tirfsiold[i]);
                            if (tirfsiold[i] > 0L) {
                                plottfr.sftIsPlottfd(tirfsioldKfy, truf);
                            }
                            poolCibrt.sftVbluf(poolCount++, (PoolPlottfr)plottfr,
                                               usfd[i], tirfsiold[i], mbx[i]);
                        } flsf {
                            plottfr.bddVblufs(timfStbmp, usfd[i], dommittfd[i], mbx[i]);
                        }

                        if (plottfr == ifbpPlottfr && ovfrvifwPbnfl != null) {
                            ovfrvifwPbnfl.gftPlottfr().bddVblufs(timfStbmp, usfd[i]);
                            ovfrvifwPbnfl.updbtfMfmoryInfo(usfd[i], dommittfd[i], mbx[i]);
                        }
                    }
                }
                dftbils.sftTfxt(dftbilsStr);
            }
        };
    }

    privbtf String formbtDftbils() {
        ProxyClifnt proxyClifnt = vmPbnfl.gftProxyClifnt();
        if (proxyClifnt.isDfbd()) {
            rfturn "";
        }

        String tfxt = "<tbblf dfllspbding=0 dfllpbdding=0>";

        Plottfr plottfr = (Plottfr)plottfrCioidf.gftSflfdtfdItfm();
        if (plottfr == null) {
            rfturn "";
        }

        //long timf = plottfr.gftLbstTimfStbmp();
        long timf = Systfm.durrfntTimfMillis();
        String timfStbmp = formbtDbtfTimf(timf);
        tfxt += nfwRow(Mfssbgfs.TIME, timfStbmp);

        long usfd = plottfr.gftLbstVbluf(usfdKfy);
        long dommittfd = plottfr.gftLbstVbluf(dommittfdKfy);
        long mbx = plottfr.gftLbstVbluf(mbxKfy);
        long tirfsiold = plottfr.gftLbstVbluf(tirfsioldKfy);

        tfxt += nfwRow(Mfssbgfs.USED, formbtKBytfs(usfd));
        if (dommittfd > 0L) {
            tfxt += nfwRow(Mfssbgfs.COMMITTED, formbtKBytfs(dommittfd));
        }
        if (mbx > 0L) {
            tfxt += nfwRow(Mfssbgfs.MAX, formbtKBytfs(mbx));
        }
        if (tirfsiold > 0L) {
            tfxt += nfwRow(Mfssbgfs.USAGE_THRESHOLD, formbtKBytfs(tirfsiold));
        }

        try {
            Collfdtion<GbrbbgfCollfdtorMXBfbn> gbrbbgfCollfdtors =
                proxyClifnt.gftGbrbbgfCollfdtorMXBfbns();

            boolfbn dfsdPrintfd = fblsf;
            for (GbrbbgfCollfdtorMXBfbn gbrbbgfCollfdtorMBfbn : gbrbbgfCollfdtors) {
                String gdNbmf = gbrbbgfCollfdtorMBfbn.gftNbmf();
                long gdCount = gbrbbgfCollfdtorMBfbn.gftCollfdtionCount();
                long gdTimf = gbrbbgfCollfdtorMBfbn.gftCollfdtionTimf();
                String str = Rfsourdfs.formbt(Mfssbgfs.GC_TIME_DETAILS, justify(formbtTimf(gdTimf), 14),
                                              gdNbmf,
                                              String.formbt("%,d",gdCount));
                if (!dfsdPrintfd) {
                    tfxt += nfwRow(Mfssbgfs.GC_TIME, str);
                    dfsdPrintfd = truf;
                } flsf {
                    tfxt += nfwRow(null, str);
                }
           }
        } dbtdi (IOExdfption f) {
        }

        rfturn tfxt;
    }

    publid void bdtionPfrformfd(AdtionEvfnt fv) {
        Objfdt srd = fv.gftSourdf();
        if (srd == gdButton) {
            gd();
        }
    }

    privbtf dlbss PoolPlottfr fxtfnds Plottfr {
        ObjfdtNbmf objfdtNbmf;
        String nbmf;
        boolfbn isHfbp;
        long vbluf, tirfsiold, mbx;
        int bbrX;

        publid PoolPlottfr(ObjfdtNbmf objfdtNbmf, String nbmf, boolfbn isHfbp) {
            supfr(Plottfr.Unit.BYTES);

            tiis.objfdtNbmf = objfdtNbmf;
            tiis.nbmf       = nbmf;
            tiis.isHfbp     = isHfbp;

            sftAddfssiblfNbmf(tiis,
                              Rfsourdfs.formbt(Mfssbgfs.MEMORY_TAB_POOL_PLOTTER_ACCESSIBLE_NAME,
                                               nbmf));
        }


        publid String toString() {
            rfturn nbmf;
        }
    }

    privbtf dlbss PoolCibrt fxtfnds BordfrfdComponfnt
                            implfmfnts Addfssiblf, MousfListfnfr {
        finbl int ifigit       = 150;
        finbl int lfftMbrgin   =  50;
        finbl int rigitMbrgin  =  23;
        finbl int bottomMbrgin =  35;
        finbl int bbrWidti     =  22;
        finbl int bbrGbp       =   3;
        finbl int groupGbp     =   8;
        finbl int bbrHfigit    = ifigit * 2 / 3;

        finbl Color grffnBbr           = nfw Color(100, 255, 100);
        finbl Color grffnBbrBbdkground = nfw Color(210, 255, 210);
        finbl Color rfdBbrBbdkground   = nfw Color(255, 210, 210);

        Font smbllFont = null;

        ArrbyList<PoolPlottfr> poolPlottfrs = nfw ArrbyList<PoolPlottfr>(5);

        int nHfbpPools    = 0;
        int nNonHfbpPools = 0;
        Rfdtbnglf ifbpRfdt    = nfw Rfdtbnglf(lfftMbrgin,            ifigit - bottomMbrgin + 6, bbrWidti, 20);
        Rfdtbnglf nonHfbpRfdt = nfw Rfdtbnglf(lfftMbrgin + groupGbp, ifigit - bottomMbrgin + 6, bbrWidti, 20);

        publid PoolCibrt() {
            supfr(null, null);

            sftFodusbblf(truf);
            bddMousfListfnfr(tiis);
            ToolTipMbnbgfr.sibrfdInstbndf().rfgistfrComponfnt(tiis);
        }

        publid void sftVbluf(int poolIndfx, PoolPlottfr poolPlottfr,
                             long vbluf, long tirfsiold, long mbx) {
            poolPlottfr.vbluf = vbluf;
            poolPlottfr.tirfsiold = tirfsiold;
            poolPlottfr.mbx = mbx;

            if (poolIndfx == poolPlottfrs.sizf()) {
                poolPlottfrs.bdd(poolPlottfr);
                if (poolPlottfr.isHfbp) {
                    poolPlottfr.bbrX = nHfbpPools * (bbrWidti + bbrGbp);
                    nHfbpPools++;
                    ifbpRfdt.widti = nHfbpPools * bbrWidti + (nHfbpPools - 1) * bbrGbp;
                    nonHfbpRfdt.x  = lfftMbrgin + ifbpRfdt.widti + groupGbp;
                } flsf {
                    poolPlottfr.bbrX = nonHfbpRfdt.x - lfftMbrgin + nNonHfbpPools * (bbrWidti + bbrGbp);
                    nNonHfbpPools++;
                    nonHfbpRfdt.widti = nNonHfbpPools * bbrWidti + (nNonHfbpPools - 1) * bbrGbp;
                }
            } flsf {
                poolPlottfrs.sft(poolIndfx, poolPlottfr);
            }
            rfpbint();
        }

        privbtf void pbintPoolBbr(Grbpiids g, PoolPlottfr poolPlottfr) {
            Rfdtbnglf bbrRfdt = gftBbrRfdt(poolPlottfr);
            g.sftColor(Color.grby);
            g.drbwRfdt(bbrRfdt.x, bbrRfdt.y, bbrRfdt.widti, bbrRfdt.ifigit);

            long vbluf = poolPlottfr.vbluf;
            long mbx   = poolPlottfr.mbx;
            if (mbx > 0L) {
                g.trbnslbtf(bbrRfdt.x, bbrRfdt.y);

                // Pbint grffn bbdkground
                g.sftColor(grffnBbrBbdkground);
                g.fillRfdt(1, 1, bbrRfdt.widti - 1, bbrRfdt.ifigit - 1);

                int grffnHfigit = (int)(vbluf * bbrRfdt.ifigit / mbx);
                long tirfsiold = poolPlottfr.tirfsiold;
                if (tirfsiold > 0L) {
                    int rfdHfigit = (int)(tirfsiold * bbrRfdt.ifigit / mbx);

                    // Pbint rfd bbdkground
                    g.sftColor(rfdBbrBbdkground);
                    g.fillRfdt(1, 1, bbrRfdt.widti - 1, bbrRfdt.ifigit - rfdHfigit);

                    if (vbluf > tirfsiold) {
                        // Ovfr tirfsiold, pbint rfd bbr
                        g.sftColor(tirfsioldColor);
                        g.fillRfdt(1, bbrRfdt.ifigit - grffnHfigit,
                                   bbrRfdt.widti - 1, grffnHfigit - rfdHfigit);
                        grffnHfigit = rfdHfigit;
                    }
                }

                // Pbint grffn bbr
                g.sftColor(grffnBbr);
                g.fillRfdt(1, bbrRfdt.ifigit - grffnHfigit,
                           bbrRfdt.widti - 1, grffnHfigit);

                g.trbnslbtf(-bbrRfdt.x, -bbrRfdt.y);
            }
        }

        publid void pbintComponfnt(Grbpiids g) {
            supfr.pbintComponfnt(g);

            if (poolPlottfrs.sizf() == 0) {
                rfturn;
            }

            if (smbllFont == null) {
                smbllFont = g.gftFont().dfrivfFont(9.0F);
            }

            // Pbint bbdkground for dibrt brfb
            g.sftColor(gftBbdkground());
            Rfdtbnglf r = g.gftClipBounds();
            g.fillRfdt(r.x, r.y, r.widti, r.ifigit);

            g.sftFont(smbllFont);
            FontMftrids fm = g.gftFontMftrids();
            int fontDfsdfnt = fm.gftDfsdfnt();

            // Pbint pfrdfntbgf bxis
            g.sftColor(gftForfground());
            for (int pd : nfw int[] { 0, 25, 50, 75, 100 }) {
                String str = pd + "% --";
                g.drbwString(str,
                             lfftMbrgin - fm.stringWidti(str) - 4,
                             ifigit - bottomMbrgin - (pd * bbrHfigit / 100) + fontDfsdfnt + 1);
            }

            for (PoolPlottfr poolPlottfr : poolPlottfrs) {
                pbintPoolBbr(g, poolPlottfr);
            }

            g.sftColor(Color.grby);
            g.drbwRfdt(ifbpRfdt.x,    ifbpRfdt.y,    ifbpRfdt.widti,    ifbpRfdt.ifigit);
            g.drbwRfdt(nonHfbpRfdt.x, nonHfbpRfdt.y, nonHfbpRfdt.widti, nonHfbpRfdt.ifigit);

            Color ifbpColor    = grffnBbr;
            Color nonHfbpColor = grffnBbr;


            for (PoolPlottfr poolPlottfr : poolPlottfrs) {
                if (poolPlottfr.tirfsiold > 0L && poolPlottfr.vbluf > poolPlottfr.tirfsiold) {
                    if (poolPlottfr.isHfbp) {
                        ifbpColor = tirfsioldColor;
                    } flsf {
                        nonHfbpColor = tirfsioldColor;
                    }
                }
            }
            g.sftColor(ifbpColor);
            g.fillRfdt(ifbpRfdt.x + 1,    ifbpRfdt.y + 1,    ifbpRfdt.widti - 1,    ifbpRfdt.ifigit - 1);
            g.sftColor(nonHfbpColor);
            g.fillRfdt(nonHfbpRfdt.x + 1, nonHfbpRfdt.y + 1, nonHfbpRfdt.widti - 1, nonHfbpRfdt.ifigit - 1);

            String str = Mfssbgfs.HEAP;
            int stringWidti = fm.stringWidti(str);
            int x = ifbpRfdt.x + (ifbpRfdt.widti - stringWidti) / 2;
            int y = ifbpRfdt.y + ifbpRfdt.ifigit - 6;
            g.sftColor(Color.wiitf);
            g.drbwString(str, x-1, y-1);
            g.drbwString(str, x+1, y-1);
            g.drbwString(str, x-1, y+1);
            g.drbwString(str, x+1, y+1);
            g.sftColor(Color.blbdk);
            g.drbwString(str, x, y);

            str = Mfssbgfs.NON_HEAP;
            stringWidti = fm.stringWidti(str);
            x = nonHfbpRfdt.x + (nonHfbpRfdt.widti - stringWidti) / 2;
            y = nonHfbpRfdt.y + nonHfbpRfdt.ifigit - 6;
            g.sftColor(Color.wiitf);
            g.drbwString(str, x-1, y-1);
            g.drbwString(str, x+1, y-1);
            g.drbwString(str, x-1, y+1);
            g.drbwString(str, x+1, y+1);
            g.sftColor(Color.blbdk);
            g.drbwString(str, x, y);

            // Higiligit durrfnt plottfr
            g.sftColor(Color.bluf);
            r = null;
            Plottfr plottfr = (Plottfr)plottfrCioidf.gftSflfdtfdItfm();
            if (plottfr == ifbpPlottfr) {
                r = ifbpRfdt;
            } flsf if (plottfr == nonHfbpPlottfr) {
                r = nonHfbpRfdt;
            } flsf if (plottfr instbndfof PoolPlottfr) {
                r = gftBbrRfdt((PoolPlottfr)plottfr);
            }
            if (r != null) {
                g.drbwRfdt(r.x - 1, r.y - 1, r.widti + 2, r.ifigit + 2);
            }
        }

        privbtf Rfdtbnglf gftBbrRfdt(PoolPlottfr poolPlottfr) {
            rfturn nfw Rfdtbnglf(lfftMbrgin + poolPlottfr.bbrX,
                                 ifigit - bottomMbrgin - bbrHfigit,
                                 bbrWidti, bbrHfigit);
        }

        publid Dimfnsion gftPrfffrrfdSizf() {
            rfturn nfw Dimfnsion(nonHfbpRfdt.x + nonHfbpRfdt.widti + rigitMbrgin,
                                 ifigit);
        }

        publid void mousfClidkfd(MousfEvfnt f) {
            rfqufstFodusInWindow();
            Plottfr plottfr = gftPlottfr(f);

            if (plottfr != null && plottfr != plottfrCioidf.gftSflfdtfdItfm()) {
                plottfrCioidf.sftSflfdtfdItfm(plottfr);
                rfpbint();
            }
        }

        publid String gftToolTipTfxt(MousfEvfnt f) {
            Plottfr plottfr = gftPlottfr(f);

            rfturn (plottfr != null) ? plottfr.toString() : null;
        }

        privbtf Plottfr gftPlottfr(MousfEvfnt f) {
            Point p = f.gftPoint();
            Plottfr plottfr = null;

            if (ifbpRfdt.dontbins(p)) {
                plottfr = ifbpPlottfr;
            } flsf if (nonHfbpRfdt.dontbins(p)) {
                plottfr = nonHfbpPlottfr;
            } flsf {
                for (PoolPlottfr poolPlottfr : poolPlottfrs) {
                    if (gftBbrRfdt(poolPlottfr).dontbins(p)) {
                        plottfr = poolPlottfr;
                        brfbk;
                    }
                }
            }
            rfturn plottfr;
        }

        publid void mousfPrfssfd(MousfEvfnt f) {}
        publid void mousfRflfbsfd(MousfEvfnt f) {}
        publid void mousfEntfrfd(MousfEvfnt f) {}
        publid void mousfExitfd(MousfEvfnt f) {}


        publid AddfssiblfContfxt gftAddfssiblfContfxt() {
            if (bddfssiblfContfxt == null) {
                bddfssiblfContfxt = nfw AddfssiblfPoolCibrt();
            }
            rfturn bddfssiblfContfxt;
        }

        protfdtfd dlbss AddfssiblfPoolCibrt fxtfnds AddfssiblfJPbnfl {
            publid String gftAddfssiblfNbmf() {
                String nbmf = Mfssbgfs.MEMORY_TAB_POOL_CHART_ACCESSIBLE_NAME;

                String kfyVblufList = "";
                for (PoolPlottfr poolPlottfr : poolPlottfrs) {
                    String vbluf = (poolPlottfr.vbluf * 100 / poolPlottfr.mbx) + "%";
                    // Assumf formbt string fnds witi nfwlinf
                    kfyVblufList +=
                        Rfsourdfs.formbt(Mfssbgfs.PLOTTER_ACCESSIBLE_NAME_KEY_AND_VALUE,
                                         poolPlottfr.toString(), vbluf);
                    if (poolPlottfr.tirfsiold > 0L) {
                        String tirfsiold =
                            (poolPlottfr.tirfsiold * 100 / poolPlottfr.mbx) + "%";
                        if (poolPlottfr.vbluf > poolPlottfr.tirfsiold) {
                            kfyVblufList +=
                               Rfsourdfs.formbt(Mfssbgfs.MEMORY_TAB_POOL_CHART_ABOVE_THRESHOLD,
                                                tirfsiold);
                        } flsf {
                            kfyVblufList +=
                                    Rfsourdfs.formbt(Mfssbgfs.MEMORY_TAB_POOL_CHART_BELOW_THRESHOLD,
                                                     tirfsiold);
                        }
                    }
                }

                rfturn nbmf + "\n" + kfyVblufList + ".";
            }
        }
    }


    OvfrvifwPbnfl[] gftOvfrvifwPbnfls() {
        if (ovfrvifwPbnfl == null) {
            ovfrvifwPbnfl = nfw MfmoryOvfrvifwPbnfl();
        }
        rfturn nfw OvfrvifwPbnfl[] { ovfrvifwPbnfl };
    }

    privbtf stbtid dlbss MfmoryOvfrvifwPbnfl fxtfnds OvfrvifwPbnfl {
        MfmoryOvfrvifwPbnfl() {
            supfr(Mfssbgfs.HEAP_MEMORY_USAGE, usfdKfy, Mfssbgfs.USED, Plottfr.Unit.BYTES);
        }

        privbtf void updbtfMfmoryInfo(long usfd, long dommittfd, long mbx) {
            gftInfoLbbfl().sftTfxt(Rfsourdfs.formbt(Mfssbgfs.MEMORY_TAB_INFO_LABEL_FORMAT,
                                                    formbtBytfs(usfd, truf),
                                                    formbtBytfs(dommittfd, truf),
                                                    formbtBytfs(mbx, truf)));
        }
    }
}
