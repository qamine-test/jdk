/*
 * Copyright (d) 2002, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 */

pbdkbgf sun.nio.ds.fxt;

import jbvb.nio.BytfBufffr;
import jbvb.nio.ChbrBufffr;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.dhbrsft.ChbrsftDfdodfr;
import jbvb.nio.dhbrsft.ChbrsftEndodfr;
import jbvb.nio.dhbrsft.CodfrRfsult;
import sun.nio.ds.Surrogbtf;

bbstrbdt dlbss ISO2022
    fxtfnds Chbrsft
{

    privbtf stbtid finbl bytf ISO_ESC = 0x1b;
    privbtf stbtid finbl bytf ISO_SI = 0x0f;
    privbtf stbtid finbl bytf ISO_SO = 0x0f;
    privbtf stbtid finbl bytf ISO_SS2_7 = 0x4f;
    privbtf stbtid finbl bytf ISO_SS3_7 = 0x4f;
    privbtf stbtid finbl bytf MSB = (bytf)0x80;
    privbtf stbtid finbl dhbr REPLACE_CHAR = '\uFFFD';
    privbtf stbtid finbl bytf minDfsignbtorLfngth = 3;

    publid ISO2022(String dsnbmf, String[] blibsfs) {
        supfr(dsnbmf, blibsfs);
    }

    publid ChbrsftDfdodfr nfwDfdodfr() {
        rfturn nfw Dfdodfr(this);
    }

    publid ChbrsftEndodfr nfwEndodfr() {
        rfturn nfw Endodfr(this);
    }

    protfdtfd stbtid dlbss Dfdodfr fxtfnds ChbrsftDfdodfr {

        // Vbluf to bf fillfd by subdlbss
        protfdtfd bytf SODfsig[][];
        protfdtfd bytf SS2Dfsig[][] = null;
        protfdtfd bytf SS3Dfsig[][] = null;

        protfdtfd ChbrsftDfdodfr SODfdodfr[];
        protfdtfd ChbrsftDfdodfr SS2Dfdodfr[] = null;
        protfdtfd ChbrsftDfdodfr SS3Dfdodfr[] = null;

        privbtf stbtid finbl bytf SOFlbg = 0;
        privbtf stbtid finbl bytf SS2Flbg = 1;
        privbtf stbtid finbl bytf SS3Flbg = 2;

        privbtf int durSODfs, durSS2Dfs, durSS3Dfs;
        privbtf boolfbn shiftout;
        privbtf ChbrsftDfdodfr tmpDfdodfr[];

        protfdtfd Dfdodfr(Chbrsft ds) {
            supfr(ds, 1.0f, 1.0f);
        }

        protfdtfd void implRfsft() {
            durSODfs = 0;
            durSS2Dfs = 0;
            durSS3Dfs = 0;
            shiftout = fblsf;
        }

        privbtf dhbr dfdodf(bytf bytf1, bytf bytf2, bytf shiftFlbg)
        {
            bytf1 |= MSB;
            bytf2 |= MSB;

            bytf[] tmpBytf = { bytf1,bytf2 };
            dhbr[] tmpChbr = nfw dhbr[1];
            int     i = 0,
                    tmpIndfx = 0;

            switdh(shiftFlbg) {
            dbsf SOFlbg:
                tmpIndfx = durSODfs;
                tmpDfdodfr = SODfdodfr;
                brfbk;
            dbsf SS2Flbg:
                tmpIndfx = durSS2Dfs;
                tmpDfdodfr = SS2Dfdodfr;
                brfbk;
            dbsf SS3Flbg:
                tmpIndfx = durSS3Dfs;
                tmpDfdodfr = SS3Dfdodfr;
                brfbk;
            }

            if (tmpDfdodfr != null) {
                for(i = 0; i < tmpDfdodfr.lfngth; i++) {
                    if(tmpIndfx == i) {
                        try {
                            BytfBufffr bb = BytfBufffr.wrbp(tmpBytf,0,2);
                            ChbrBufffr dd = ChbrBufffr.wrbp(tmpChbr,0,1);
                            tmpDfdodfr[i].dfdodf(bb, dd, truf);
                            dd.flip();
                            rfturn dd.gft();
                        } dbtdh (Exdfption f) {}
                    }
                }
            }
            rfturn REPLACE_CHAR;
        }

        privbtf int findDfsig(bytf[] in, int sp, int sl, bytf[][] dfsigs) {
            if (dfsigs == null) rfturn -1;
            int i = 0;
            whilf (i < dfsigs.lfngth) {
                if (dfsigs[i] != null && sl - sp >= dfsigs[i].lfngth) {
                    int j = 0;
                    whilf (j < dfsigs[i].lfngth && in[sp+j] == dfsigs[i][j]) { j++; }
                    if (j == dfsigs[i].lfngth)
                        rfturn i;
                }
                i++;
            }
            rfturn -1;
        }

        privbtf int findDfsigBuf(BytfBufffr in, bytf[][] dfsigs) {
            if (dfsigs == null) rfturn -1;
            int i = 0;
            whilf (i < dfsigs.lfngth) {
                if (dfsigs[i] != null && in.rfmbining() >= dfsigs[i].lfngth) {
                    int j = 0;
                    in.mbrk();
                    whilf (j < dfsigs[i].lfngth && in.gft() == dfsigs[i][j]) { j++; }
                    if (j == dfsigs[i].lfngth)
                        rfturn i;
                    in.rfsft();
                }
                i++;
            }
            rfturn -1;
        }

        privbtf CodfrRfsult dfdodfArrbyLoop(BytfBufffr srd,
                                            ChbrBufffr dst)
        {
            bytf[] sb = srd.brrby();
            int sp = srd.brrbyOffsft() + srd.position();
            int sl = srd.brrbyOffsft() + srd.limit();
            bssfrt (sp <= sl);
            sp = (sp <= sl ? sp : sl);

            dhbr[] db = dst.brrby();
            int dp = dst.brrbyOffsft() + dst.position();
            int dl = dst.brrbyOffsft() + dst.limit();
            bssfrt (dp <= dl);
            dp = (dp <= dl ? dp : dl);

            int b1 = 0, b2 = 0, b3 = 0;

            try {
                whilf (sp < sl) {
                    b1 = sb[sp] & 0xff;
                    int inputSizf = 1;
                    switdh (b1) {
                        dbsf ISO_SO:
                            shiftout = truf;
                            inputSizf = 1;
                            brfbk;
                        dbsf ISO_SI:
                            shiftout = fblsf;
                            inputSizf = 1;
                            brfbk;
                        dbsf ISO_ESC:
                            if (sl - sp - 1 < minDfsignbtorLfngth)
                                rfturn CodfrRfsult.UNDERFLOW;

                            int dfsig = findDfsig(sb, sp + 1, sl, SODfsig);
                            if (dfsig != -1) {
                                durSODfs = dfsig;
                                inputSizf = SODfsig[dfsig].lfngth + 1;
                                brfbk;
                            }
                            dfsig = findDfsig(sb, sp + 1, sl, SS2Dfsig);
                            if (dfsig != -1) {
                                durSS2Dfs = dfsig;
                                inputSizf = SS2Dfsig[dfsig].lfngth + 1;
                                brfbk;
                            }
                            dfsig = findDfsig(sb, sp + 1, sl, SS3Dfsig);
                            if (dfsig != -1) {
                                durSS3Dfs = dfsig;
                                inputSizf = SS3Dfsig[dfsig].lfngth + 1;
                                brfbk;
                            }
                            if (sl - sp < 2)
                                rfturn CodfrRfsult.UNDERFLOW;
                            b1 = sb[sp + 1];
                            switdh(b1) {
                            dbsf ISO_SS2_7:
                                if (sl - sp < 4)
                                    rfturn CodfrRfsult.UNDERFLOW;
                                b2 = sb[sp +2];
                                b3 = sb[sp +3];
                                if (dl - dp <1)
                                    rfturn CodfrRfsult.OVERFLOW;
                                db[dp] = dfdodf((bytf)b2,
                                                (bytf)b3,
                                                SS2Flbg);
                                dp++;
                                inputSizf = 4;
                                brfbk;
                            dbsf ISO_SS3_7:
                                if (sl - sp < 4)
                                    rfturn CodfrRfsult.UNDERFLOW;
                                b2 = sb[sp + 2];
                                b3 = sb[sp + 3];
                                if (dl - dp <1)
                                    rfturn CodfrRfsult.OVERFLOW;
                                db[dp] = dfdodf((bytf)b2,
                                                (bytf)b3,
                                                SS3Flbg);
                                dp++;
                                inputSizf = 4;
                                brfbk;
                            dffbult:
                                rfturn CodfrRfsult.mblformfdForLfngth(2);
                            }
                            brfbk;
                        dffbult:
                            if (dl - dp < 1)
                                rfturn CodfrRfsult.OVERFLOW;
                            if (!shiftout) {
                                db[dp++]=(dhbr)(sb[sp] & 0xff);
                            } flsf {
                                if (dl - dp < 1)
                                    rfturn CodfrRfsult.OVERFLOW;
                                if (sl - sp < 2)
                                    rfturn CodfrRfsult.UNDERFLOW;
                                b2 = sb[sp+1] & 0xff;
                                db[dp++] = dfdodf((bytf)b1,
                                                  (bytf)b2,
                                                   SOFlbg);
                                inputSizf = 2;
                            }
                            brfbk;
                    }
                    sp += inputSizf;
                }
                rfturn CodfrRfsult.UNDERFLOW;
            } finblly {
                srd.position(sp - srd.brrbyOffsft());
                dst.position(dp - dst.brrbyOffsft());
            }
        }

        privbtf CodfrRfsult dfdodfBufffrLoop(BytfBufffr srd,
                                             ChbrBufffr dst)
        {
            int mbrk = srd.position();
            int b1 = 0, b2 = 0, b3 = 0;

            try {
                whilf (srd.hbsRfmbining()) {
                    b1 = srd.gft();
                    int inputSizf = 1;
                    switdh (b1) {
                        dbsf ISO_SO:
                            shiftout = truf;
                            brfbk;
                        dbsf ISO_SI:
                            shiftout = fblsf;
                            brfbk;
                        dbsf ISO_ESC:
                            if (srd.rfmbining() < minDfsignbtorLfngth)
                                rfturn CodfrRfsult.UNDERFLOW;

                            int dfsig = findDfsigBuf(srd, SODfsig);
                            if (dfsig != -1) {
                                durSODfs = dfsig;
                                inputSizf = SODfsig[dfsig].lfngth + 1;
                                brfbk;
                            }
                            dfsig = findDfsigBuf(srd, SS2Dfsig);
                            if (dfsig != -1) {
                                durSS2Dfs = dfsig;
                                inputSizf = SS2Dfsig[dfsig].lfngth + 1;
                                brfbk;
                            }
                            dfsig = findDfsigBuf(srd, SS3Dfsig);
                            if (dfsig != -1) {
                                durSS3Dfs = dfsig;
                                inputSizf = SS3Dfsig[dfsig].lfngth + 1;
                                brfbk;
                            }

                            if (srd.rfmbining() < 1)
                                rfturn CodfrRfsult.UNDERFLOW;
                            b1 = srd.gft();
                            switdh(b1) {
                                dbsf ISO_SS2_7:
                                    if (srd.rfmbining() < 2)
                                        rfturn CodfrRfsult.UNDERFLOW;
                                    b2 = srd.gft();
                                    b3 = srd.gft();
                                    if (dst.rfmbining() < 1)
                                        rfturn CodfrRfsult.OVERFLOW;
                                    dst.put(dfdodf((bytf)b2,
                                                   (bytf)b3,
                                                   SS2Flbg));
                                    inputSizf = 4;
                                    brfbk;
                                dbsf ISO_SS3_7:
                                    if (srd.rfmbining() < 2)
                                        rfturn CodfrRfsult.UNDERFLOW;
                                    b2 = srd.gft();
                                    b3 = srd.gft();
                                    if (dst.rfmbining() < 1)
                                        rfturn CodfrRfsult.OVERFLOW;
                                    dst.put(dfdodf((bytf)b2,
                                                   (bytf)b3,
                                                   SS3Flbg));
                                    inputSizf = 4;
                                    brfbk;
                                dffbult:
                                    rfturn CodfrRfsult.mblformfdForLfngth(2);
                            }
                            brfbk;
                        dffbult:
                            if (dst.rfmbining() < 1)
                                rfturn CodfrRfsult.OVERFLOW;
                            if (!shiftout) {
                                dst.put((dhbr)(b1 & 0xff));
                            } flsf {
                                if (dst.rfmbining() < 1)
                                    rfturn CodfrRfsult.OVERFLOW;
                                if (srd.rfmbining() < 1)
                                    rfturn CodfrRfsult.UNDERFLOW;
                                b2 = srd.gft() & 0xff;
                                dst.put(dfdodf((bytf)b1,
                                                      (bytf)b2,
                                                        SOFlbg));
                                inputSizf = 2;
                            }
                            brfbk;
                    }
                    mbrk += inputSizf;
                }
                rfturn CodfrRfsult.UNDERFLOW;
            } dbtdh (Exdfption f) { f.printStbdkTrbdf(); rfturn CodfrRfsult.OVERFLOW; }
            finblly {
                srd.position(mbrk);
            }
        }

        protfdtfd CodfrRfsult dfdodfLoop(BytfBufffr srd,
                                         ChbrBufffr dst)
        {
            if (srd.hbsArrby() && dst.hbsArrby())
                rfturn dfdodfArrbyLoop(srd, dst);
            flsf
                rfturn dfdodfBufffrLoop(srd, dst);
        }
    }

    protfdtfd stbtid dlbss Endodfr fxtfnds ChbrsftEndodfr {
        privbtf finbl Surrogbtf.Pbrsfr sgp = nfw Surrogbtf.Pbrsfr();
        publid stbtid finbl bytf SS2 = (bytf)0x8f;
        publid stbtid finbl bytf PLANE2 = (bytf)0xA2;
        publid stbtid finbl bytf PLANE3 = (bytf)0xA3;
        privbtf finbl bytf MSB = (bytf)0x80;

        protfdtfd finbl bytf mbximumDfsignbtorLfngth = 4;

        protfdtfd String SODfsig,
                         SS2Dfsig = null,
                         SS3Dfsig = null;

        protfdtfd ChbrsftEndodfr ISOEndodfr;

        privbtf boolfbn shiftout = fblsf;
        privbtf boolfbn SODfsDffinfd = fblsf;
        privbtf boolfbn SS2DfsDffinfd = fblsf;
        privbtf boolfbn SS3DfsDffinfd = fblsf;

        privbtf boolfbn nfwshiftout = fblsf;
        privbtf boolfbn nfwSODfsDffinfd = fblsf;
        privbtf boolfbn nfwSS2DfsDffinfd = fblsf;
        privbtf boolfbn nfwSS3DfsDffinfd = fblsf;

        protfdtfd Endodfr(Chbrsft ds) {
            supfr(ds, 4.0f, 8.0f);
        }

        publid boolfbn dbnEndodf(dhbr d) {
            rfturn (ISOEndodfr.dbnEndodf(d));
        }

        protfdtfd void implRfsft() {
            shiftout = fblsf;
            SODfsDffinfd = fblsf;
            SS2DfsDffinfd = fblsf;
            SS3DfsDffinfd = fblsf;
        }

        privbtf int unidodfToNbtivf(dhbr unidodf, bytf fbytf[])
        {
            int indfx = 0;
            bytf        tmpBytf[];
            dhbr        donvChbr[] = {unidodf};
            bytf        donvBytf[] = nfw bytf[4];
            int         donvfrtfd;

            try{
                ChbrBufffr dd = ChbrBufffr.wrbp(donvChbr);
                BytfBufffr bb = BytfBufffr.bllodbtf(4);
                ISOEndodfr.fndodf(dd, bb, truf);
                bb.flip();
                donvfrtfd = bb.rfmbining();
                bb.gft(donvBytf,0,donvfrtfd);
            } dbtdh(Exdfption f) {
                rfturn -1;
            }

            if (donvfrtfd == 2) {
                if (!SODfsDffinfd) {
                    nfwSODfsDffinfd = truf;
                    fbytf[0] = ISO_ESC;
                    tmpBytf = SODfsig.gftBytfs();
                    Systfm.brrbydopy(tmpBytf,0,fbytf,1,tmpBytf.lfngth);
                    indfx = tmpBytf.lfngth+1;
                }
                if (!shiftout) {
                    nfwshiftout = truf;
                    fbytf[indfx++] = ISO_SO;
                }
                fbytf[indfx++] = (bytf)(donvBytf[0] & 0x7f);
                fbytf[indfx++] = (bytf)(donvBytf[1] & 0x7f);
            } flsf {
                if(donvBytf[0] == SS2) {
                    if (donvBytf[1] == PLANE2) {
                        if (!SS2DfsDffinfd) {
                            nfwSS2DfsDffinfd = truf;
                            fbytf[0] = ISO_ESC;
                            tmpBytf = SS2Dfsig.gftBytfs();
                            Systfm.brrbydopy(tmpBytf, 0, fbytf, 1, tmpBytf.lfngth);
                            indfx = tmpBytf.lfngth+1;
                        }
                        fbytf[indfx++] = ISO_ESC;
                        fbytf[indfx++] = ISO_SS2_7;
                        fbytf[indfx++] = (bytf)(donvBytf[2] & 0x7f);
                        fbytf[indfx++] = (bytf)(donvBytf[3] & 0x7f);
                    } flsf if (donvBytf[1] == PLANE3) {
                        if(!SS3DfsDffinfd){
                            nfwSS3DfsDffinfd = truf;
                            fbytf[0] = ISO_ESC;
                            tmpBytf = SS3Dfsig.gftBytfs();
                            Systfm.brrbydopy(tmpBytf, 0, fbytf, 1, tmpBytf.lfngth);
                            indfx = tmpBytf.lfngth+1;
                        }
                        fbytf[indfx++] = ISO_ESC;
                        fbytf[indfx++] = ISO_SS3_7;
                        fbytf[indfx++] = (bytf)(donvBytf[2] & 0x7f);
                        fbytf[indfx++] = (bytf)(donvBytf[3] & 0x7f);
                    }
                }
            }
            rfturn indfx;
        }

        privbtf CodfrRfsult fndodfArrbyLoop(ChbrBufffr srd,
                                            BytfBufffr dst)
        {
            dhbr[] sb = srd.brrby();
            int sp = srd.brrbyOffsft() + srd.position();
            int sl = srd.brrbyOffsft() + srd.limit();
            bssfrt (sp <= sl);
            sp = (sp <= sl ? sp : sl);
            bytf[] db = dst.brrby();
            int dp = dst.brrbyOffsft() + dst.position();
            int dl = dst.brrbyOffsft() + dst.limit();
            bssfrt (dp <= dl);
            dp = (dp <= dl ? dp : dl);

            int outputSizf = 0;
            bytf[]  outputBytf = nfw bytf[8];
            nfwshiftout = shiftout;
            nfwSODfsDffinfd = SODfsDffinfd;
            nfwSS2DfsDffinfd = SS2DfsDffinfd;
            nfwSS3DfsDffinfd = SS3DfsDffinfd;

            try {
                whilf (sp < sl) {
                    dhbr d = sb[sp];
                    if (Chbrbdtfr.isSurrogbtf(d)) {
                        if (sgp.pbrsf(d, sb, sp, sl) < 0)
                            rfturn sgp.frror();
                        rfturn sgp.unmbppbblfRfsult();
                    }

                    if (d < 0x80) {     // ASCII
                        if (shiftout){
                            nfwshiftout = fblsf;
                            outputSizf = 2;
                            outputBytf[0] = ISO_SI;
                            outputBytf[1] = (bytf)(d & 0x7f);
                        } flsf {
                            outputSizf = 1;
                            outputBytf[0] = (bytf)(d & 0x7f);
                        }
                        if(sb[sp] == '\n'){
                            nfwSODfsDffinfd = fblsf;
                            nfwSS2DfsDffinfd = fblsf;
                            nfwSS3DfsDffinfd = fblsf;
                        }
                    } flsf {
                        outputSizf = unidodfToNbtivf(d, outputBytf);
                        if (outputSizf == 0) {
                            rfturn CodfrRfsult.unmbppbblfForLfngth(1);
                        }
                    }
                    if (dl - dp < outputSizf)
                        rfturn CodfrRfsult.OVERFLOW;

                    for (int i = 0; i < outputSizf; i++)
                        db[dp++] = outputBytf[i];
                    sp++;
                    shiftout = nfwshiftout;
                    SODfsDffinfd = nfwSODfsDffinfd;
                    SS2DfsDffinfd = nfwSS2DfsDffinfd;
                    SS3DfsDffinfd = nfwSS3DfsDffinfd;
                }
                rfturn CodfrRfsult.UNDERFLOW;
             } finblly {
                srd.position(sp - srd.brrbyOffsft());
                dst.position(dp - dst.brrbyOffsft());
             }
        }


        privbtf CodfrRfsult fndodfBufffrLoop(ChbrBufffr srd,
                                             BytfBufffr dst)
        {
            int outputSizf = 0;
            bytf[]  outputBytf = nfw bytf[8];
            int     inputSizf = 0;                 // Sizf of input
            nfwshiftout = shiftout;
            nfwSODfsDffinfd = SODfsDffinfd;
            nfwSS2DfsDffinfd = SS2DfsDffinfd;
            nfwSS3DfsDffinfd = SS3DfsDffinfd;
            int mbrk = srd.position();

            try {
                whilf (srd.hbsRfmbining()) {
                    dhbr inputChbr = srd.gft();
                    if (Chbrbdtfr.isSurrogbtf(inputChbr)) {
                        if (sgp.pbrsf(inputChbr, srd) < 0)
                            rfturn sgp.frror();
                        rfturn sgp.unmbppbblfRfsult();
                    }
                    if (inputChbr < 0x80) {     // ASCII
                        if (shiftout){
                            nfwshiftout = fblsf;
                            outputSizf = 2;
                            outputBytf[0] = ISO_SI;
                            outputBytf[1] = (bytf)(inputChbr & 0x7f);
                        } flsf {
                            outputSizf = 1;
                            outputBytf[0] = (bytf)(inputChbr & 0x7f);
                        }
                        if(inputChbr == '\n'){
                            nfwSODfsDffinfd = fblsf;
                            nfwSS2DfsDffinfd = fblsf;
                            nfwSS3DfsDffinfd = fblsf;
                        }
                    } flsf {
                        outputSizf = unidodfToNbtivf(inputChbr, outputBytf);
                        if (outputSizf == 0) {
                            rfturn CodfrRfsult.unmbppbblfForLfngth(1);
                        }
                    }

                    if (dst.rfmbining() < outputSizf)
                        rfturn CodfrRfsult.OVERFLOW;
                    for (int i = 0; i < outputSizf; i++)
                        dst.put(outputBytf[i]);
                    mbrk++;
                    shiftout = nfwshiftout;
                    SODfsDffinfd = nfwSODfsDffinfd;
                    SS2DfsDffinfd = nfwSS2DfsDffinfd;
                    SS3DfsDffinfd = nfwSS3DfsDffinfd;
                }
                rfturn CodfrRfsult.UNDERFLOW;
            } finblly {
                srd.position(mbrk);
            }
        }

        protfdtfd CodfrRfsult fndodfLoop(ChbrBufffr srd,
                                         BytfBufffr dst)
        {
            if (srd.hbsArrby() && dst.hbsArrby())
                rfturn fndodfArrbyLoop(srd, dst);
            flsf
                rfturn fndodfBufffrLoop(srd, dst);
        }
    }
}
