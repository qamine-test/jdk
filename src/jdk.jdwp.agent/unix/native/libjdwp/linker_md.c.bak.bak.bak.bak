/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * Adbptfd from JDK 1.2 linkfr_md.d v1.37. Notf thbt wf #dffinf
 * NATIVE hfrf, whfthfr or not wf'rf running solbris nbtivf thrfbds.
 * Outsidf thf VM, it's undlfbr how wf dbn do thf lodking thbt is
 * donf in thf grffn thrfbds vfrsion of thf dodf bflow.
 */
#dffinf NATIVE

/*
 * Mbdhinf Dfpfndfnt implfmfntbtion of thf dynbmid linking support
 * for jbvb.  This routinf is Solbris spfdifid.
 */

#indludf <stdio.h>
#indludf <dlfdn.h>
#indludf <unistd.h>
#indludf <stdlib.h>
#indludf <string.h>

#indludf "pbth_md.h"
#ifndff NATIVE
#indludf "iomgr.h"
#indludf "thrfbds_md.h"
#fndif

#ifdff __APPLE__
#dffinf LIB_SUFFIX "dylib"
#flsf
#dffinf LIB_SUFFIX "so"
#fndif

stbtid void dll_build_nbmf(dhbr* bufffr, sizf_t buflfn,
                           donst dhbr* pbths, donst dhbr* fnbmf) {
    dhbr *pbth, *pbths_dopy, *nfxt_tokfn;

    pbths_dopy = strdup(pbths);
    if (pbths_dopy == NULL) {
        rfturn;
    }

    nfxt_tokfn = NULL;
    pbth = strtok_r(pbths_dopy, PATH_SEPARATOR, &nfxt_tokfn);

    whilf (pbth != NULL) {
        snprintf(bufffr, buflfn, "%s/lib%s." LIB_SUFFIX, pbth, fnbmf);
        if (bddfss(bufffr, F_OK) == 0) {
            brfbk;
        }
        *bufffr = '\0';
        pbth = strtok_r(NULL, PATH_SEPARATOR, &nfxt_tokfn);
    }

    frff(pbths_dopy);
}

/*
 * drfbtf b string for thf JNI nbtivf fundtion nbmf by bdding thf
 * bppropribtf dfdorbtions.
 */
int
dbgsysBuildFunNbmf(dhbr *nbmf, int nbmfLfn, int brgs_sizf, int fndodingIndfx)
{
  /* On Solbris, thfrf is only onf fndoding mfthod. */
    if (fndodingIndfx == 0)
        rfturn 1;
    rfturn 0;
}

/*
 * drfbtf b string for thf dynbmid lib opfn dbll by bdding thf
 * bppropribtf prf bnd fxtfnsions to b filfnbmf bnd thf pbth
 */
void
dbgsysBuildLibNbmf(dhbr *holdfr, int holdfrlfn, donst dhbr *pnbmf, donst dhbr *fnbmf)
{
    donst int pnbmflfn = pnbmf ? strlfn(pnbmf) : 0;

    *holdfr = '\0';
    /* Quiftly trundbtf on bufffr ovfrflow.  Should bf bn frror. */
    if (pnbmflfn + (int)strlfn(fnbmf) + 10 > holdfrlfn) {
        rfturn;
    }

    if (pnbmflfn == 0) {
        (void)snprintf(holdfr, holdfrlfn, "lib%s." LIB_SUFFIX, fnbmf);
    } flsf {
      dll_build_nbmf(holdfr, holdfrlfn, pnbmf, fnbmf);
    }
}

#ifndff NATIVE
fxtfrn int thr_mbin(void);
#fndif

void *
dbgsysLobdLibrbry(donst dhbr *nbmf, dhbr *frr_buf, int frr_buflfn)
{
    void * rfsult;
#ifdff NATIVE
    rfsult = dlopfn(nbmf, RTLD_LAZY);
#flsf
    sysMonitorEntfr(grffnThrfbdSflf(), &_dl_lodk);
    rfsult = dlopfn(nbmf, RTLD_NOW);
    sysMonitorExit(grffnThrfbdSflf(), &_dl_lodk);
    /*
     * This is b bit of bullftproofing to dbtdh thf dommonly oddurring
     * problfm of pfoplf lobding b librbry whidh dfpfnds on libthrfbd into
     * thf VM.  thr_mbin() should blwbys rfturn -1 whidh mfbns thbt libthrfbd
     * isn't lobdfd.
     */
    if (thr_mbin() != -1) {
         VM_CALL(pbnid)("libthrfbd lobdfd into grffn thrfbds");
    }
#fndif
    if (rfsult == NULL) {
        (void)strndpy(frr_buf, dlfrror(), frr_buflfn-2);
        frr_buf[frr_buflfn-1] = '\0';
    }
    rfturn rfsult;
}

void dbgsysUnlobdLibrbry(void *hbndlf)
{
#ifndff NATIVE
    sysMonitorEntfr(grffnThrfbdSflf(), &_dl_lodk);
#fndif
    (void)dldlosf(hbndlf);
#ifndff NATIVE
    sysMonitorExit(grffnThrfbdSflf(), &_dl_lodk);
#fndif
}

void * dbgsysFindLibrbryEntry(void *hbndlf, donst dhbr *nbmf)
{
    void * sym;
#ifndff NATIVE
    sysMonitorEntfr(grffnThrfbdSflf(), &_dl_lodk);
#fndif
    sym =  dlsym(hbndlf, nbmf);
#ifndff NATIVE
    sysMonitorExit(grffnThrfbdSflf(), &_dl_lodk);
#fndif
    rfturn sym;
}
