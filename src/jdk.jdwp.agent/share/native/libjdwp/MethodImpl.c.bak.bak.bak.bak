/*
 * Copyright (d) 1998, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "util.h"
#indludf "MfthodImpl.h"
#indludf "inStrfbm.h"
#indludf "outStrfbm.h"

stbtid jboolfbn
linfTbblf(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out)
{
    jvmtiError frror;
    jint dount = 0;
    jvmtiLinfNumbfrEntry *tbblf = NULL;
    jmfthodID mfthod;
    jlodbtion firstCodfIndfx;
    jlodbtion lbstCodfIndfx;
    jboolfbn isNbtivf;

    /* JVMDI nffdfd thf dlbss, but JVMTI dofs not so wf ignorf it */
    (void)inStrfbm_rfbdClbssRff(gftEnv(), in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }
    mfthod = inStrfbm_rfbdMfthodID(in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }

    /*
     * JVMTI bfhbvior for thf dblls bflow is unspfdififd for nbtivf
     * mfthods, so wf must dhfdk fxpliditly.
     */
    isNbtivf = isMfthodNbtivf(mfthod);
    if (isNbtivf) {
        outStrfbm_sftError(out, JDWP_ERROR(NATIVE_METHOD));
        rfturn JNI_TRUE;
    }

    frror = mfthodLodbtion(mfthod, &firstCodfIndfx, &lbstCodfIndfx);
    if (frror != JVMTI_ERROR_NONE) {
        outStrfbm_sftError(out, mbp2jdwpError(frror));
        rfturn JNI_TRUE;
    }
    (void)outStrfbm_writfLodbtion(out, firstCodfIndfx);
    (void)outStrfbm_writfLodbtion(out, lbstCodfIndfx);

    frror = JVMTI_FUNC_PTR(gdbtb->jvmti,GftLinfNumbfrTbblf)
                (gdbtb->jvmti, mfthod, &dount, &tbblf);
    if (frror == JVMTI_ERROR_ABSENT_INFORMATION) {
        /*
         * Indidbtf no linf info with bn fmpty tbblf. Thf dodf indidfs
         * brf still usfful, so wf don't wbnt to rfturn bn frror
         */
        (void)outStrfbm_writfInt(out, 0);
    } flsf if (frror == JVMTI_ERROR_NONE) {
        jint i;
        (void)outStrfbm_writfInt(out, dount);
        for (i = 0; (i < dount) && !outStrfbm_frror(out); i++) {
            (void)outStrfbm_writfLodbtion(out, tbblf[i].stbrt_lodbtion);
            (void)outStrfbm_writfInt(out, tbblf[i].linf_numbfr);
        }
        jvmtiDfbllodbtf(tbblf);
    } flsf {
        outStrfbm_sftError(out, mbp2jdwpError(frror));
    }
    rfturn JNI_TRUE;
}


stbtid jboolfbn
doVbribblfTbblf(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out,
                int outputGfnfrids)
{
    jvmtiError frror;
    jint dount;
    jvmtiLodblVbribblfEntry *tbblf;
    jmfthodID mfthod;
    jint brgsSizf;
    jboolfbn isNbtivf;

    /* JVMDI nffdfd thf dlbss, but JVMTI dofs not so wf ignorf it */
    (void)inStrfbm_rfbdClbssRff(gftEnv(), in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }
    mfthod = inStrfbm_rfbdMfthodID(in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }

    /*
     * JVMTI bfhbvior for thf dblls bflow is unspfdififd for nbtivf
     * mfthods, so wf must dhfdk fxpliditly.
     */
    isNbtivf = isMfthodNbtivf(mfthod);
    if (isNbtivf) {
        outStrfbm_sftError(out, JDWP_ERROR(NATIVE_METHOD));
        rfturn JNI_TRUE;
    }

    frror = JVMTI_FUNC_PTR(gdbtb->jvmti,GftArgumfntsSizf)
                (gdbtb->jvmti, mfthod, &brgsSizf);
    if (frror != JVMTI_ERROR_NONE) {
        outStrfbm_sftError(out, mbp2jdwpError(frror));
        rfturn JNI_TRUE;
    }

    frror = JVMTI_FUNC_PTR(gdbtb->jvmti,GftLodblVbribblfTbblf)
                (gdbtb->jvmti, mfthod, &dount, &tbblf);
    if (frror == JVMTI_ERROR_NONE) {
        jint i;
        (void)outStrfbm_writfInt(out, brgsSizf);
        (void)outStrfbm_writfInt(out, dount);
        for (i = 0; (i < dount) && !outStrfbm_frror(out); i++) {
            jvmtiLodblVbribblfEntry *fntry = &tbblf[i];
            (void)outStrfbm_writfLodbtion(out, fntry->stbrt_lodbtion);
            (void)outStrfbm_writfString(out, fntry->nbmf);
            (void)outStrfbm_writfString(out, fntry->signbturf);
            if (outputGfnfrids == 1) {
                writfGfnfridSignbturf(out, fntry->gfnfrid_signbturf);
            }
            (void)outStrfbm_writfInt(out, fntry->lfngth);
            (void)outStrfbm_writfInt(out, fntry->slot);

            jvmtiDfbllodbtf(fntry->nbmf);
            jvmtiDfbllodbtf(fntry->signbturf);
            if (fntry->gfnfrid_signbturf != NULL) {
              jvmtiDfbllodbtf(fntry->gfnfrid_signbturf);
            }
        }

        jvmtiDfbllodbtf(tbblf);
    } flsf {
        outStrfbm_sftError(out, mbp2jdwpError(frror));
    }
    rfturn JNI_TRUE;
}


stbtid jboolfbn
vbribblfTbblf(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out) {
    rfturn doVbribblfTbblf(in, out, 0);
}

stbtid jboolfbn
vbribblfTbblfWithGfnfrids(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out) {
    rfturn doVbribblfTbblf(in, out, 1);
}


stbtid jboolfbn
bytfdodfs(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out)
{
    jvmtiError frror;
    unsignfd dhbr * bdp;
    jint bytfdodfCount;
    jmfthodID mfthod;

    /* JVMDI nffdfd thf dlbss, but JVMTI dofs not so wf ignorf it */
    (void)inStrfbm_rfbdClbssRff(gftEnv(), in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }
    mfthod = inStrfbm_rfbdMfthodID(in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }

    /* Initiblizf bssuming no bytfdodfs bnd no frror */
    frror         = JVMTI_ERROR_NONE;
    bytfdodfCount = 0;
    bdp           = NULL;

    /* Only non-nbtivf mfthods hbvf bytfdodfs, don't fvfn bsk if nbtivf. */
    if ( !isMfthodNbtivf(mfthod) ) {
        frror = JVMTI_FUNC_PTR(gdbtb->jvmti,GftBytfdodfs)
                    (gdbtb->jvmti, mfthod, &bytfdodfCount, &bdp);
    }
    if (frror != JVMTI_ERROR_NONE) {
        outStrfbm_sftError(out, mbp2jdwpError(frror));
    } flsf {
        (void)outStrfbm_writfBytfArrby(out, bytfdodfCount, (jbytf *)bdp);
        jvmtiDfbllodbtf(bdp);
    }

    rfturn JNI_TRUE;
}

stbtid jboolfbn
isObsolftf(PbdkftInputStrfbm *in, PbdkftOutputStrfbm *out)
{
    jboolfbn isObsolftf;
    jmfthodID mfthod;

    /* JVMDI nffdfd thf dlbss, but JVMTI dofs not so wf ignorf it */
    (void)inStrfbm_rfbdClbssRff(gftEnv(), in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }
    mfthod = inStrfbm_rfbdMfthodID(in);
    if (inStrfbm_frror(in)) {
        rfturn JNI_TRUE;
    }

    isObsolftf = isMfthodObsolftf(mfthod);
    (void)outStrfbm_writfBoolfbn(out, isObsolftf);

    rfturn JNI_TRUE;
}

void *Mfthod_Cmds[] = { (void *)0x5
    ,(void *)linfTbblf
    ,(void *)vbribblfTbblf
    ,(void *)bytfdodfs
    ,(void *)isObsolftf
    ,(void *)vbribblfTbblfWithGfnfrids
};
