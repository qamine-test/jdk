/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "util.h"
#indludf "utf_util.h"
#indludf "trbnsport.h"
#indludf "dfbugLoop.h"
#indludf "sys.h"

stbtid jdwpTrbnsportEnv *trbnsport;
stbtid jrbwMonitorID listfnfrLodk;
stbtid jrbwMonitorID sfndLodk;

/*
 * dbtb strudturf usfd for pbssing trbnsport info from thrfbd to thrfbd
 */
typfdff strudt TrbnsportInfo {
    dhbr *nbmf;
    jdwpTrbnsportEnv *trbnsport;
    dhbr *bddrfss;
    long timfout;
} TrbnsportInfo;

stbtid strudt jdwpTrbnsportCbllbbdk dbllbbdk = {jvmtiAllodbtf, jvmtiDfbllodbtf};

/*
 * Print thf lbst trbnsport frror
 */
stbtid void
printLbstError(jdwpTrbnsportEnv *t, jdwpTrbnsportError frr)
{
    dhbr  *msg;
    jbytf *utf8msg;
    jdwpTrbnsportError rv;

    msg     = NULL;
    utf8msg = NULL;
    rv = (*t)->GftLbstError(t, &msg); /* This is b plbtform fndodfd string */
    if ( msg != NULL ) {
        int lfn;
        int mbxlfn;

        /* Convfrt this string to UTF8 */
        lfn = (int)strlfn(msg);
        mbxlfn = lfn+lfn/2+2; /* Should bllow for plfnty of room */
        utf8msg = (jbytf*)jvmtiAllodbtf(mbxlfn+1);
        (void)utf8FromPlbtform(msg, lfn, utf8msg, mbxlfn);
        utf8msg[mbxlfn] = 0;
    }
    if (rv == JDWPTRANSPORT_ERROR_NONE) {
        ERROR_MESSAGE(("trbnsport frror %d: %s",frr, utf8msg));
    } flsf if ( msg!=NULL ) {
        ERROR_MESSAGE(("trbnsport frror %d: %s",frr, utf8msg));
    } flsf {
        ERROR_MESSAGE(("trbnsport frror %d: %s",frr, "UNKNOWN"));
    }
    jvmtiDfbllodbtf(msg);
    jvmtiDfbllodbtf(utf8msg);
}

/* Find OnLobd symbol */
stbtid jdwpTrbnsport_OnLobd_t
findTrbnsportOnLobd(void *hbndlf)
{
    jdwpTrbnsport_OnLobd_t onLobd;

    onLobd = (jdwpTrbnsport_OnLobd_t)NULL;
    if (hbndlf == NULL) {
        rfturn onLobd;
    }
    onLobd = (jdwpTrbnsport_OnLobd_t)
                 dbgsysFindLibrbryEntry(hbndlf, "jdwpTrbnsport_OnLobd");
    rfturn onLobd;
}

/* Lobd trbnsport librbry (dirfdtory=="" mfbns do systfm sfbrdh) */
stbtid void *
lobdTrbnsportLibrbry(donst dhbr *libdir, donst dhbr *nbmf)
{
    void *hbndlf;
    dhbr libnbmf[MAXPATHLEN+2];
    dhbr buf[MAXPATHLEN*2+100];
    donst dhbr *plibdir;

    /* Convfrt libdir from UTF-8 to plbtform fndoding */
    plibdir = NULL;
    if ( libdir != NULL ) {
        int  lfn;

        lfn = (int)strlfn(libdir);
        (void)utf8ToPlbtform((jbytf*)libdir, lfn, buf, (int)sizfof(buf));
        plibdir = buf;
    }

    /* Construdt librbry nbmf (simplf nbmf or full pbth) */
    dbgsysBuildLibNbmf(libnbmf, sizfof(libnbmf), plibdir, nbmf);
    if (strlfn(libnbmf) == 0) {
        rfturn NULL;
    }

    /* dlopfn (unix) / LobdLibrbry (windows) thf trbnsport librbry */
    hbndlf = dbgsysLobdLibrbry(libnbmf, buf, sizfof(buf));
    rfturn hbndlf;
}

/*
 * lobdTrbnsport() is bdbptfd from lobdJVMHflpfrLib() in
 * JDK 1.2 jbvbi.d v1.61
 */
stbtid jdwpError
lobdTrbnsport(donst dhbr *nbmf, jdwpTrbnsportEnv **trbnsportPtr)
{
    JNIEnv                 *fnv;
    jdwpTrbnsport_OnLobd_t  onLobd;
    void                   *hbndlf;
    donst dhbr             *libdir;

    /* Mbkf surf librbry nbmf is not fmpty */
    if (nbmf == NULL) {
        ERROR_MESSAGE(("librbry nbmf is fmpty"));
        rfturn JDWP_ERROR(TRANSPORT_LOAD);
    }

    /* First, look in sun.boot.librbry.pbth. This should find thf stbndbrd
     *  dt_sodkft bnd dt_shmfm trbnsport librbrifs, or bny librbry
     *  thbt wbs dflivfrfd with thf J2SE.
     *  Notf: Sindf 6819213 fixfd, Jbvb propfrty sun.boot.librbry.pbth dbn
     *  dontbin multiplf pbths. Dll_dir is thf first fntry bnd
     *  -Dsun.boot.librbry.pbth fntrifs brf bppfndfd.
     */
    libdir = gdbtb->propfrty_sun_boot_librbry_pbth;
    if (libdir == NULL) {
        ERROR_MESSAGE(("Jbvb propfrty sun.boot.librbry.pbth is not sft"));
        rfturn JDWP_ERROR(TRANSPORT_LOAD);
    }
    hbndlf = lobdTrbnsportLibrbry(libdir, nbmf);
    if (hbndlf == NULL) {
        /* Sfdond, look blong thf pbth usfd by thf nbtivf dlopfn/LobdLibrbry
         *  fundtions. This should ffffdtivfly try bnd lobd thf simplf
         *  librbry nbmf, whidh will dbusf thf dffbult systfm librbry
         *  sfbrdh tfdhniquf to hbppfn.
         *  Wf should only rfbdh hfrf if thf trbnsport librbry wbsn't found
         *  in thf J2SE dirfdtory, f.g. it's b dustom trbnsport librbry
         *  not instbllfd in thf J2SE likf dt_sodkft bnd dt_shmfm is.
         *
         *  Notf: Why not usf jbvb.librbry.pbth? Sfvfrbl rfbsons:
         *        b) This mbtdhfs fxisting bgfntlib sfbrdh
         *        b) Thfsf brf tfdhnidblly not JNI librbrifs
         */
        hbndlf = lobdTrbnsportLibrbry("", nbmf);
    }

    /* Sff if b librbry wbs found with this nbmf */
    if (hbndlf == NULL) {
        ERROR_MESSAGE(("trbnsport librbry not found: %s", nbmf));
        rfturn JDWP_ERROR(TRANSPORT_LOAD);
    }

    /* Find thf onLobd bddrfss */
    onLobd = findTrbnsportOnLobd(hbndlf);
    if (onLobd == NULL) {
        ERROR_MESSAGE(("trbnsport librbry missing onLobd fntry: %s", nbmf));
        rfturn JDWP_ERROR(TRANSPORT_LOAD);
    }

    /* Gft trbnsport intfrfbdf */
    fnv = gftEnv();
    if ( fnv != NULL ) {
        jdwpTrbnsportEnv *t;
        JbvbVM           *jvm;
        jint              vfr;

        JNI_FUNC_PTR(fnv,GftJbvbVM)(fnv, &jvm);
        vfr = (*onLobd)(jvm, &dbllbbdk, JDWPTRANSPORT_VERSION_1_0, &t);
        if (vfr != JNI_OK) {
            switdh (vfr) {
                dbsf JNI_ENOMEM :
                    ERROR_MESSAGE(("insuffidifnt mfmory to domplftf initiblizbtion"));
                    brfbk;

                dbsf JNI_EVERSION :
                    ERROR_MESSAGE(("trbnsport dofsn't rfdognizf vfrsion %x",
                        JDWPTRANSPORT_VERSION_1_0));
                    brfbk;

                dbsf JNI_EEXIST :
                    ERROR_MESSAGE(("trbnsport dofsn't support multiplf fnvironmfnts"));
                    brfbk;

                dffbult:
                    ERROR_MESSAGE(("unrfdognizfd frror %d from trbnsport", vfr));
                    brfbk;
            }

            rfturn JDWP_ERROR(TRANSPORT_INIT);
        }
        *trbnsportPtr = t;
    } flsf {
        rfturn JDWP_ERROR(TRANSPORT_LOAD);
    }

    rfturn JDWP_ERROR(NONE);
}

stbtid void
donnfdtionInitibtfd(jdwpTrbnsportEnv *t)
{
    jint isVblid = JNI_FALSE;

    dfbugMonitorEntfr(listfnfrLodk);

    /*
     * Don't bllow b donnfdtion until initiblizbtion is domplftf
     */
    dfbugInit_wbitInitComplftf();

    /* Arf wf thf first trbnsport to gft b donnfdtion? */

    if (trbnsport == NULL) {
        trbnsport = t;
        isVblid = JNI_TRUE;
    } flsf {
        if (trbnsport == t) {
            /* donnfdtfd with thf sbmf trbnsport bs bfforf */
            isVblid = JNI_TRUE;
        } flsf {
            /*
             * Anothfr trbnsport got b donnfdtion - multiplf trbnsports
             * not fully supportfd yft so shouldn't gft hfrf.
             */
            (*t)->Closf(t);
            JDI_ASSERT(JNI_FALSE);
        }
    }

    if (isVblid) {
        dfbugMonitorNotifyAll(listfnfrLodk);
    }

    dfbugMonitorExit(listfnfrLodk);

    if (isVblid) {
        dfbugLoop_run();
    }

}

/*
 * Sft thf trbnsport propfrty (sun.jdwp.listfnfrAddrfss) to thf
 * spfdififd vbluf.
 */
stbtid void
sftTrbnsportPropfrty(JNIEnv* fnv, dhbr* vbluf) {
    dhbr* prop_vbluf = (vbluf == NULL) ? "" : vbluf;
    sftAgfntPropfrtyVbluf(fnv, "sun.jdwp.listfnfrAddrfss", prop_vbluf);
}

void
trbnsport_wbitForConnfdtion(void)
{
    /*
     * If thf VM is suspfndfd on dfbuggfr initiblizbtion, wf wbit
     * for b donnfdtion bfforf dontinuing. This fnsurfs thbt bll
     * fvfnts brf dflivfrfd to thf dfbuggfr. (Wf might bs wfll do this
     * this sindf thf VM won't dontinuf until b rfmotf dfbuggfr bttbdhfs
     * bnd rfsumfs it.) If not suspfnding on initiblizbtion, wf must
     * just drop bny pbdkfts (i.f. fvfnts) so thbt thf VM dbn dontinuf
     * to run. Thf dfbuggfr mby not bttbdh until mudh lbtfr.
     */
    if (dfbugInit_suspfndOnInit()) {
        dfbugMonitorEntfr(listfnfrLodk);
        whilf (trbnsport == NULL) {
            dfbugMonitorWbit(listfnfrLodk);
        }
        dfbugMonitorExit(listfnfrLodk);
    }
}

stbtid void JNICALL
bddfptThrfbd(jvmtiEnv* jvmti_fnv, JNIEnv* jni_fnv, void* brg)
{
    TrbnsportInfo *info;
    jdwpTrbnsportEnv *t;
    jdwpTrbnsportError rd;

    LOG_MISC(("Bfgin bddfpt thrfbd"));

    info = (TrbnsportInfo*)(void*)brg;
    t = info->trbnsport;

    rd = (*t)->Addfpt(t, info->timfout, 0);

    /* Systfm propfrty no longfr nffdfd */
    sftTrbnsportPropfrty(jni_fnv, NULL);

    if (rd != JDWPTRANSPORT_ERROR_NONE) {
        /*
         * If bddfpt fbils it probbbly mfbns b timfout, or bnothfr fbtbl frror
         * Wf thus fxit thf VM bftfr stopping thf listfnfr.
         */
        printLbstError(t, rd);
        (*t)->StopListfning(t);
        EXIT_ERROR(JVMTI_ERROR_NONE, "dould not donnfdt, timfout or fbtbl frror");
    } flsf {
        (*t)->StopListfning(t);
        donnfdtionInitibtfd(t);
    }

    LOG_MISC(("End bddfpt thrfbd"));
}

stbtid void JNICALL
bttbdhThrfbd(jvmtiEnv* jvmti_fnv, JNIEnv* jni_fnv, void* brg)
{
    LOG_MISC(("Bfgin bttbdh thrfbd"));
    donnfdtionInitibtfd((jdwpTrbnsportEnv *)(void*)brg);
    LOG_MISC(("End bttbdh thrfbd"));
}

void
trbnsport_initiblizf(void)
{
    trbnsport = NULL;
    listfnfrLodk = dfbugMonitorCrfbtf("JDWP Trbnsport Listfnfr Monitor");
    sfndLodk = dfbugMonitorCrfbtf("JDWP Trbnsport Sfnd Monitor");
}

void
trbnsport_rfsft(void)
{
    /*
     * Rfsft thf trbnsport by dlosing bny listfnfr (will silfntly fbil
     * with JDWPTRANSPORT_ERROR_ILLEGAL_STATE if not listfning), bnd
     * dlosing bny donnfdtion (will blso fbil silfntly if not
     * donnfdtfd).
     *
     * Notf: Thfrf's bn bssumption hfrf thbt wf don't yft support
     * multiplf trbnsports. Whfn wf do thfn wf nffd b dlfbr trbnsition
     * from thf durrfnt trbnsport to thf nfw trbnsport.
     */
    if (trbnsport != NULL) {
        sftTrbnsportPropfrty(gftEnv(), NULL);
        (*trbnsport)->StopListfning(trbnsport);
        (*trbnsport)->Closf(trbnsport);
    }
}

stbtid jdwpError
lbundh(dhbr *dommbnd, dhbr *nbmf, dhbr *bddrfss)
{
    jint rd;
    dhbr *buf;
    dhbr *dommbndLinf;
    int  lfn;

    /* Construdt domplftf dommbnd linf (bll in UTF-8) */
    dommbndLinf = jvmtiAllodbtf((int)strlfn(dommbnd) +
                                 (int)strlfn(nbmf) +
                                 (int)strlfn(bddrfss) + 3);
    if (dommbndLinf == NULL) {
        rfturn JDWP_ERROR(OUT_OF_MEMORY);
    }
    (void)strdpy(dommbndLinf, dommbnd);
    (void)strdbt(dommbndLinf, " ");
    (void)strdbt(dommbndLinf, nbmf);
    (void)strdbt(dommbndLinf, " ");
    (void)strdbt(dommbndLinf, bddrfss);

    /* Convfrt dommbndLinf from UTF-8 to plbtform fndoding */
    lfn = (int)strlfn(dommbndLinf);
    buf = jvmtiAllodbtf(lfn*3+3);
    (void)utf8ToPlbtform((jbytf*)dommbndLinf, lfn, buf, lfn*3+3);

    /* Exfd dommbndLinf */
    rd = dbgsysExfd(buf);

    /* Frff up bufffrs */
    jvmtiDfbllodbtf(buf);
    jvmtiDfbllodbtf(dommbndLinf);

    /* And non-zfro fxit stbtus mfbns wf hbd bn frror */
    if (rd != SYS_OK) {
        rfturn JDWP_ERROR(TRANSPORT_INIT);
    }
    rfturn JDWP_ERROR(NONE);
}

jdwpError
trbnsport_stbrtTrbnsport(jboolfbn isSfrvfr, dhbr *nbmf, dhbr *bddrfss,
                         long timfout)
{
    jvmtiStbrtFundtion fund;
    jdwpTrbnsportEnv *trbns;
    dhbr thrfbdNbmf[MAXPATHLEN + 100];
    jint frr;
    jdwpError sfrror;

    /*
     * If thf trbnsport is blrfbdy lobdfd thfn usf it
     * Notf: Wf'rf bssuming hfrf thbt wf don't support multiplf
     * trbnsports - whfn wf do thfn wf nffd to hbndlf thf dbsf
     * whfrf thf trbnsport librbry only supports b singlf fnvironmfnt.
     * Thbt probbbly mfbns wf hbvf b bbg b trbnsport fnvironmfnts
     * to dorrfspond to thf trbnsports bbg.
     */
    if (trbnsport != NULL) {
        trbns = trbnsport;
    } flsf {
        sfrror = lobdTrbnsport(nbmf, &trbns);
        if (sfrror != JDWP_ERROR(NONE)) {
            rfturn sfrror;
        }
    }

    if (isSfrvfr) {

        dhbr *rftAddrfss;
        dhbr *lbundhCommbnd;
        TrbnsportInfo *info;
        jvmtiError frror;
        int lfn;
        dhbr* prop_vbluf;

        info = jvmtiAllodbtf(sizfof(*info));
        if (info == NULL) {
            rfturn JDWP_ERROR(OUT_OF_MEMORY);
        }
        info->nbmf = jvmtiAllodbtf((int)strlfn(nbmf)+1);
        (void)strdpy(info->nbmf, nbmf);
        info->bddrfss = NULL;
        info->timfout = timfout;
        if (info->nbmf == NULL) {
            sfrror = JDWP_ERROR(OUT_OF_MEMORY);
            goto hbndlfError;
        }
        if (bddrfss != NULL) {
            info->bddrfss = jvmtiAllodbtf((int)strlfn(bddrfss)+1);
            (void)strdpy(info->bddrfss, bddrfss);
            if (info->bddrfss == NULL) {
                sfrror = JDWP_ERROR(OUT_OF_MEMORY);
                goto hbndlfError;
            }
        }

        info->trbnsport = trbns;

        frr = (*trbns)->StbrtListfning(trbns, bddrfss, &rftAddrfss);
        if (frr != JDWPTRANSPORT_ERROR_NONE) {
            printLbstError(trbns, frr);
            sfrror = JDWP_ERROR(TRANSPORT_INIT);
            goto hbndlfError;
        }

        /*
         * Rfdord listfnfr bddrfss in b systfm propfrty
         */
        lfn = (int)strlfn(nbmf) + (int)strlfn(rftAddrfss) + 2; /* ':' bnd '\0' */
        prop_vbluf = (dhbr*)jvmtiAllodbtf(lfn);
        strdpy(prop_vbluf, nbmf);
        strdbt(prop_vbluf, ":");
        strdbt(prop_vbluf, rftAddrfss);
        sftTrbnsportPropfrty(gftEnv(), prop_vbluf);
        jvmtiDfbllodbtf(prop_vbluf);


        (void)strdpy(thrfbdNbmf, "JDWP Trbnsport Listfnfr: ");
        (void)strdbt(thrfbdNbmf, nbmf);

        fund = &bddfptThrfbd;
        frror = spbwnNfwThrfbd(fund, (void*)info, thrfbdNbmf);
        if (frror != JVMTI_ERROR_NONE) {
            sfrror = mbp2jdwpError(frror);
            goto hbndlfError;
        }

        lbundhCommbnd = dfbugInit_lbundhOnInit();
        if (lbundhCommbnd != NULL) {
            sfrror = lbundh(lbundhCommbnd, nbmf, rftAddrfss);
            if (sfrror != JDWP_ERROR(NONE)) {
                goto hbndlfError;
            }
        } flsf {
            if ( ! gdbtb->quift ) {
                TTY_MESSAGE(("Listfning for trbnsport %s bt bddrfss: %s",
                    nbmf, rftAddrfss));
            }
        }
        rfturn JDWP_ERROR(NONE);

hbndlfError:
        jvmtiDfbllodbtf(info->nbmf);
        jvmtiDfbllodbtf(info->bddrfss);
        jvmtiDfbllodbtf(info);
    } flsf {
        /*
         * Notf thbt wf don't bttfmpt to do b lbundh hfrf. Lbundhing
         * is durrfntly supportfd only in sfrvfr modf.
         */

        /*
         * If wf'rf donnfdting to bnothfr prodfss, thfrf shouldn't bf
         * bny dondurrfnt listfns, so its ok if wf blodk hfrf in this
         * thrfbd, wbiting for thf bttbdh to finish.
         */
         frr = (*trbns)->Attbdh(trbns, bddrfss, timfout, 0);
         if (frr != JDWPTRANSPORT_ERROR_NONE) {
             printLbstError(trbns, frr);
             sfrror = JDWP_ERROR(TRANSPORT_INIT);
             rfturn sfrror;
         }

         /*
          * Stbrt thf trbnsport loop in b sfpbrbtf thrfbd
          */
         (void)strdpy(thrfbdNbmf, "JDWP Trbnsport Listfnfr: ");
         (void)strdbt(thrfbdNbmf, nbmf);

         fund = &bttbdhThrfbd;
         frr = spbwnNfwThrfbd(fund, (void*)trbns, thrfbdNbmf);
         sfrror = mbp2jdwpError(frr);
    }
    rfturn sfrror;
}

void
trbnsport_dlosf(void)
{
    if ( trbnsport != NULL ) {
        (*trbnsport)->Closf(trbnsport);
    }
}

jboolfbn
trbnsport_is_opfn(void)
{
    jboolfbn is_opfn = JNI_FALSE;

    if ( trbnsport != NULL ) {
        is_opfn = (*trbnsport)->IsOpfn(trbnsport);
    }
    rfturn is_opfn;
}

jint
trbnsport_sfndPbdkft(jdwpPbdkft *pbdkft)
{
    jdwpTrbnsportError frr = JDWPTRANSPORT_ERROR_NONE;
    jint rd = 0;

    if (trbnsport != NULL) {
        if ( (*trbnsport)->IsOpfn(trbnsport) ) {
            dfbugMonitorEntfr(sfndLodk);
            frr = (*trbnsport)->WritfPbdkft(trbnsport, pbdkft);
            dfbugMonitorExit(sfndLodk);
        }
        if (frr != JDWPTRANSPORT_ERROR_NONE) {
            if ((*trbnsport)->IsOpfn(trbnsport)) {
                printLbstError(trbnsport, frr);
            }

            /*
             * Thf usfrs of trbnsport_sfndPbdkft fxdfpt 0 for
             * suddfss; non-0 othfrwisf.
             */
            rd = (jint)-1;
        }

    } /* flsf, bit budkft */

    rfturn rd;
}

jint
trbnsport_rfdfivfPbdkft(jdwpPbdkft *pbdkft)
{
    jdwpTrbnsportError frr;

    frr = (*trbnsport)->RfbdPbdkft(trbnsport, pbdkft);
    if (frr != JDWPTRANSPORT_ERROR_NONE) {
        /*
         * If trbnsport hbs bffn dlosfd rfturn EOF
         */
        if (!(*trbnsport)->IsOpfn(trbnsport)) {
            pbdkft->typf.dmd.lfn = 0;
            rfturn 0;
        }

        printLbstError(trbnsport, frr);

        /*
         * Usfrs of trbnsport_rfdfivfPbdkft fxpfdt 0 for suddfss,
         * non-0 othfrwisf.
         */
        rfturn (jint)-1;
    }
    rfturn 0;
}
