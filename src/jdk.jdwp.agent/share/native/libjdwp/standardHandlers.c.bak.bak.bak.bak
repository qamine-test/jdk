/*
 * Copyright (d) 2001, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
/*
 * hbndlfrs
 *
 * Thf dffbult fvfnt rfqufst hbndlfr fundtions
 */

#indludf "util.h"
#indludf "fvfntHbndlfr.h"
#indludf "thrfbdControl.h"
#indludf "fvfntHflpfr.h"
#indludf "dlbssTrbdk.h"

#indludf "stbndbrdHbndlfrs.h"

stbtid void
hbndlfClbssPrfpbrf(JNIEnv *fnv, EvfntInfo *fvinfo,
                   HbndlfrNodf *nodf,
                   strudt bbg *fvfntBbg)
{
    jthrfbd thrfbd = fvinfo->thrfbd;

    /* Wf try hbrd to bvoid dlbss lobds/prfpbrfs in dfbuggfr
     * thrfbds, but it is still possiblf for thfm to hbppfn (most
     * likfly for fxdfptions thbt brf thrown within JNI
     * mfthods). If sudh bn fvfnt oddurs, wf must rfport it, but
     * wf dbnnot suspfnd thf dfbuggfr thrfbd.
     *
     * 1) Wf rfport thf thrfbd bs NULL bfdbusf wf don't wbnt thf
     *    bpplidbtion to gft hold of b dfbuggfr thrfbd objfdt.
     * 2) Wf try to do thf right thing wrt to suspfnding
     *    thrfbds without suspfnding dfbuggfr thrfbds. If thf
     *    rfqufstfd suspfnd polidy is NONE, thfrf's no problfm. If
     *    thf rfqufstfd polidy is ALL, wf dbn just suspfnd bll
     *    bpplidbtion thrfbds without produding bny surprising
     *    rfsults by lfbving thf dfbuggfr thrfbd running. Howfvfr,
     *    if thf rfqufstfd polidy is EVENT_THREAD, wf brf fordfd
     *    to do somfthing difffrfnt thbn rfqufstfd. Thf most
     *    usfful bfhbvior is to suspfnd bll bpplidbtion thrfbds
     *    (just bs if thf polidy wbs ALL). This bllows thf
     *    bpplidbtion to opfrbtf on thf dlbss bfforf it gfts into
     *    dirdulbtion bnd so it is prfffrbblf to thf othfr
     *    bltfrnbtivf of suspfnding no thrfbds.
     */
    if (thrfbdControl_isDfbugThrfbd(thrfbd)) {
        fvinfo->thrfbd = NULL;
        if (nodf->suspfndPolidy == JDWP_SUSPEND_POLICY(EVENT_THREAD)) {
            nodf->suspfndPolidy = JDWP_SUSPEND_POLICY(ALL);
        }
    }
    fvfntHflpfr_rfdordEvfnt(fvinfo, nodf->hbndlfrID,
                            nodf->suspfndPolidy, fvfntBbg);
}

stbtid void
hbndlfGbrbbgfCollfdtionFinish(JNIEnv *fnv, EvfntInfo *fvinfo,
                  HbndlfrNodf *nodf,
                  strudt bbg *fvfntBbg)
{
    JDI_ASSERT_MSG(JNI_FALSE, "Should nfvfr dbll hbndlfGbrbbgfCollfdtionFinish");
}

stbtid void
hbndlfFrbmfEvfnt(JNIEnv *fnv, EvfntInfo *fvinfo,
                 HbndlfrNodf *nodf,
                 strudt bbg *fvfntBbg)
{
    /*
     * Thf frbmf id thbt domfs with this fvfnt is vfry trbnsifnt.
     * Wf dbn't sfnd thf frbmf to thf hflpfr thrfbd bfdbusf it
     * might bf usflfss by thf timf thf hflpfr thrfbd dbn usf it
     * (if suspfnd polidy is NONE). So, gft thf nffdfd info from
     * thf frbmf bnd thfn usf b spfdibl dommbnd to thf hflpfr
     * thrfbd.
     */

    jmfthodID mfthod;
    jlodbtion lodbtion;
    jvmtiError frror;
    FrbmfNumbfr fnum = 0;
    jvbluf rfturnVbluf;

    frror = JVMTI_FUNC_PTR(gdbtb->jvmti,GftFrbmfLodbtion)
            (gdbtb->jvmti, fvinfo->thrfbd, fnum, &mfthod, &lodbtion);
    if (frror != JVMTI_ERROR_NONE) {
        lodbtion = -1;
    }
    rfturnVbluf = fvinfo->u.mfthod_fxit.rfturn_vbluf;

    fvfntHflpfr_rfdordFrbmfEvfnt(nodf->hbndlfrID,
                                 nodf->suspfndPolidy,
                                 fvinfo->fi,
                                 fvinfo->thrfbd,
                                 fvinfo->dlbzz,
                                 fvinfo->mfthod,
                                 lodbtion,
                                 nodf->nffdRfturnVbluf,
                                 rfturnVbluf,
                                 fvfntBbg);
}

stbtid void
gfnfridHbndlfr(JNIEnv *fnv, EvfntInfo *fvinfo,
               HbndlfrNodf *nodf,
               strudt bbg *fvfntBbg)
{
    fvfntHflpfr_rfdordEvfnt(fvinfo, nodf->hbndlfrID, nodf->suspfndPolidy,
                            fvfntBbg);
}

HbndlfrFundtion
stbndbrdHbndlfrs_dffbultHbndlfr(EvfntIndfx fi)
{
    switdh (fi) {
        dbsf EI_BREAKPOINT:
        dbsf EI_EXCEPTION:
        dbsf EI_FIELD_ACCESS:
        dbsf EI_FIELD_MODIFICATION:
        dbsf EI_SINGLE_STEP:
        dbsf EI_THREAD_START:
        dbsf EI_THREAD_END:
        dbsf EI_VM_DEATH:
        dbsf EI_MONITOR_CONTENDED_ENTER:
        dbsf EI_MONITOR_CONTENDED_ENTERED:
        dbsf EI_MONITOR_WAIT:
        dbsf EI_MONITOR_WAITED:
            rfturn &gfnfridHbndlfr;

        dbsf EI_CLASS_PREPARE:
            rfturn &hbndlfClbssPrfpbrf;

        dbsf EI_GC_FINISH:
            rfturn &hbndlfGbrbbgfCollfdtionFinish;

        dbsf EI_METHOD_ENTRY:
        dbsf EI_METHOD_EXIT:
            rfturn &hbndlfFrbmfEvfnt;

        dffbult:
            /* This NULL will triggfr b AGENT_ERROR_INVALID_EVENT_TYPE */
            rfturn NULL;
    }
}

void
stbndbrdHbndlfrs_onConnfdt(void)
{
    jboolfbn instbllfd;

    /* blwbys rfport VMDfbth to b donnfdtfd dfbuggfr */
    instbllfd = (fvfntHbndlfr_drfbtfPfrmbnfntIntfrnbl(
                        EI_VM_DEATH, gfnfridHbndlfr) != NULL);
    if (!instbllfd) {
        EXIT_ERROR(AGENT_ERROR_INVALID_EVENT_TYPE,"Unbblf to instbll VM Dfbth fvfnt hbndlfr");
    }
}

void
stbndbrdHbndlfrs_onDisdonnfdt(void)
{
}
