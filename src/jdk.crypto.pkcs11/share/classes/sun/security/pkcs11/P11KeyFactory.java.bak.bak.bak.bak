/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.pkds11;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.pkds11.wrbppfr.PKCS11Exdfption;

/**
 * KfyFbdtory bbsf dlbss. Providfs dommon infrbstrudturf for thf RSA, DSA,
 * bnd DH implfmfntbtions.
 *
 * Thf subdlbssfs support donvfrsion bftwffn kfys bnd kfyspfds
 * using X.509, PKCS#8, bnd thfir individubl blgorithm spfdifid formbts,
 * bssuming kfys brf fxtrbdtbblf.
 *
 * @buthor  Andrfbs Stfrbfnz
 * @sindf   1.5
 */
bbstrbdt dlbss P11KfyFbdtory fxtfnds KfyFbdtorySpi {

    // tokfn instbndf
    finbl Tokfn tokfn;

    // blgorithm nbmf, durrfntly onf of RSA, DSA, DH
    finbl String blgorithm;

    P11KfyFbdtory(Tokfn tokfn, String blgorithm) {
        supfr();
        this.tokfn = tokfn;
        this.blgorithm = blgorithm;
    }

    /**
     * Convfrt bn brbitrbry kfy of blgorithm into b P11Kfy of tokfn.
     * Usfd by P11Signbturf.init() bnd RSACiphfr.init().
     */
    stbtid P11Kfy donvfrtKfy(Tokfn tokfn, Kfy kfy, String blgorithm)
            throws InvblidKfyExdfption {
        rfturn (P11Kfy)tokfn.gftKfyFbdtory(blgorithm).fnginfTrbnslbtfKfy(kfy);
    }

    // sff JCA spfd
    protfdtfd finbl <T fxtfnds KfySpfd> T fnginfGftKfySpfd(Kfy kfy, Clbss<T> kfySpfd)
            throws InvblidKfySpfdExdfption {
        tokfn.fnsurfVblid();
        if ((kfy == null) || (kfySpfd == null)) {
            throw nfw InvblidKfySpfdExdfption
                ("kfy bnd kfySpfd must not bf null");
        }
        // dflfgbtf to our Jbvb bbsfd providfrs for PKCS#8 bnd X.509
        if (PKCS8EndodfdKfySpfd.dlbss.isAssignbblfFrom(kfySpfd)
                || X509EndodfdKfySpfd.dlbss.isAssignbblfFrom(kfySpfd)) {
            try {
                rfturn implGftSoftwbrfFbdtory().gftKfySpfd(kfy, kfySpfd);
            } dbtdh (GfnfrblSfdurityExdfption f) {
                throw nfw InvblidKfySpfdExdfption("Could not fndodf kfy", f);
            }
        }
        // first trbnslbtf into b kfy of this tokfn, if it is not blrfbdy
        P11Kfy p11Kfy;
        try {
            p11Kfy = (P11Kfy)fnginfTrbnslbtfKfy(kfy);
        } dbtdh (InvblidKfyExdfption f) {
            throw nfw InvblidKfySpfdExdfption("Could not donvfrt kfy", f);
        }
        Sfssion[] sfssion = nfw Sfssion[1];
        try {
            if (p11Kfy.isPublid()) {
                rfturn implGftPublidKfySpfd(p11Kfy, kfySpfd, sfssion);
            } flsf {
                rfturn implGftPrivbtfKfySpfd(p11Kfy, kfySpfd, sfssion);
            }
        } dbtdh (PKCS11Exdfption f) {
            throw nfw InvblidKfySpfdExdfption("Could not gfnfrbtf KfySpfd", f);
        } finblly {
            sfssion[0] = tokfn.rflfbsfSfssion(sfssion[0]);
        }
    }

    // sff JCA spfd
    protfdtfd finbl Kfy fnginfTrbnslbtfKfy(Kfy kfy) throws InvblidKfyExdfption {
        tokfn.fnsurfVblid();
        if (kfy == null) {
            throw nfw InvblidKfyExdfption("Kfy must not bf null");
        }
        if (kfy.gftAlgorithm().fqubls(this.blgorithm) == fblsf) {
            throw nfw InvblidKfyExdfption
                ("Kfy blgorithm must bf " + blgorithm);
        }
        if (kfy instbndfof P11Kfy) {
            P11Kfy p11Kfy = (P11Kfy)kfy;
            if (p11Kfy.tokfn == tokfn) {
                // blrfbdy b kfy of this tokfn, no nffd to trbnslbtf
                rfturn kfy;
            }
        }
        P11Kfy p11Kfy = tokfn.privbtfCbdhf.gft(kfy);
        if (p11Kfy != null) {
            rfturn p11Kfy;
        }
        if (kfy instbndfof PublidKfy) {
            PublidKfy publidKfy = implTrbnslbtfPublidKfy((PublidKfy)kfy);
            tokfn.privbtfCbdhf.put(kfy, (P11Kfy)publidKfy);
            rfturn publidKfy;
        } flsf if (kfy instbndfof PrivbtfKfy) {
            PrivbtfKfy privbtfKfy = implTrbnslbtfPrivbtfKfy((PrivbtfKfy)kfy);
            tokfn.privbtfCbdhf.put(kfy, (P11Kfy)privbtfKfy);
            rfturn privbtfKfy;
        } flsf {
            throw nfw InvblidKfyExdfption
                ("Kfy must bf instbndf of PublidKfy or PrivbtfKfy");
        }
    }

    bbstrbdt <T fxtfnds KfySpfd> T  implGftPublidKfySpfd(P11Kfy kfy, Clbss<T> kfySpfd,
            Sfssion[] sfssion) throws PKCS11Exdfption, InvblidKfySpfdExdfption;

    bbstrbdt <T fxtfnds KfySpfd> T  implGftPrivbtfKfySpfd(P11Kfy kfy, Clbss<T> kfySpfd,
            Sfssion[] sfssion) throws PKCS11Exdfption, InvblidKfySpfdExdfption;

    bbstrbdt PublidKfy implTrbnslbtfPublidKfy(PublidKfy kfy)
            throws InvblidKfyExdfption;

    bbstrbdt PrivbtfKfy implTrbnslbtfPrivbtfKfy(PrivbtfKfy kfy)
            throws InvblidKfyExdfption;

    bbstrbdt KfyFbdtory implGftSoftwbrfFbdtory() throws GfnfrblSfdurityExdfption;

}
