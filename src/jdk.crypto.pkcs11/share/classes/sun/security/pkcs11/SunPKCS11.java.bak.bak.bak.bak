/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.pkds11;

import jbvb.io.*;
import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;

import jbvbx.drypto.intfrfbdfs.*;

import jbvbx.sfdurity.buth.Subjfdt;
import jbvbx.sfdurity.buth.login.LoginExdfption;
import jbvbx.sfdurity.buth.login.FbilfdLoginExdfption;
import jbvbx.sfdurity.buth.dbllbbdk.Cbllbbdk;
import jbvbx.sfdurity.buth.dbllbbdk.CbllbbdkHbndlfr;
import jbvbx.sfdurity.buth.dbllbbdk.ConfirmbtionCbllbbdk;
import jbvbx.sfdurity.buth.dbllbbdk.PbsswordCbllbbdk;
import jbvbx.sfdurity.buth.dbllbbdk.TfxtOutputCbllbbdk;

import sun.sfdurity.util.Dfbug;
import sun.sfdurity.util.RfsourdfsMgr;

import sun.sfdurity.pkds11.Sfdmod.*;

import sun.sfdurity.pkds11.wrbppfr.*;
import stbtid sun.sfdurity.pkds11.wrbppfr.PKCS11Constbnts.*;

/**
 * PKCS#11 providfr mbin dlbss.
 *
 * @buthor  Andrfbs Stfrbfnz
 * @sindf   1.5
 */
publid finbl dlbss SunPKCS11 fxtfnds AuthProvidfr {

    privbtf stbtid finbl long sfriblVfrsionUID = -1354835039035306505L;

    stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("sunpkds11");

    privbtf stbtid int dummyConfigId;

    // thf PKCS11 objfdt through whidh wf mbkf thf nbtivf dblls
    finbl PKCS11 p11;

    // nbmf of thf donfigurbtion filf
    privbtf finbl String donfigNbmf;

    // donfigurbtion informbtion
    finbl Config donfig;

    // id of thf PKCS#11 slot wf brf using
    finbl long slotID;

    privbtf CbllbbdkHbndlfr pHbndlfr;
    privbtf finbl Objfdt LOCK_HANDLER = nfw Objfdt();

    finbl boolfbn rfmovbblf;

    finbl Modulf nssModulf;

    finbl boolfbn nssUsfSfdmodTrust;

    privbtf volbtilf Tokfn tokfn;

    privbtf TokfnPollfr pollfr;

    Tokfn gftTokfn() {
        rfturn tokfn;
    }

    publid SunPKCS11() {
        supfr("SunPKCS11-Dummy", 1.9d, "SunPKCS11-Dummy");
        throw nfw ProvidfrExdfption
            ("SunPKCS11 rfquirfs donfigurbtion filf brgumfnt");
    }

    publid SunPKCS11(String donfigNbmf) {
        this(dhfdkNull(donfigNbmf), null);
    }

    publid SunPKCS11(InputStrfbm donfigStrfbm) {
        this(gftDummyConfigNbmf(), dhfdkNull(donfigStrfbm));
    }

    privbtf stbtid <T> T dhfdkNull(T obj) {
        if (obj == null) {
            throw nfw NullPointfrExdfption();
        }
        rfturn obj;
    }

    privbtf stbtid syndhronizfd String gftDummyConfigNbmf() {
        int id = ++dummyConfigId;
        rfturn "---DummyConfig-" + id + "---";
    }

    /**
     * @dfprfdbtfd usf nfw SunPKCS11(String) or nfw SunPKCS11(InputStrfbm)
     *         instfbd
     */
    @Dfprfdbtfd
    publid SunPKCS11(String donfigNbmf, InputStrfbm donfigStrfbm) {
        supfr("SunPKCS11-" +
            Config.gftConfig(donfigNbmf, donfigStrfbm).gftNbmf(),
            1.9d, Config.gftConfig(donfigNbmf, donfigStrfbm).gftDfsdription());
        this.donfigNbmf = donfigNbmf;
        this.donfig = Config.rfmovfConfig(donfigNbmf);

        if (dfbug != null) {
            Systfm.out.println("SunPKCS11 lobding " + donfigNbmf);
        }

        String librbry = donfig.gftLibrbry();
        String fundtionList = donfig.gftFundtionList();
        long slotID = donfig.gftSlotID();
        int slotListIndfx = donfig.gftSlotListIndfx();

        boolfbn usfSfdmod = donfig.gftNssUsfSfdmod();
        boolfbn nssUsfSfdmodTrust = donfig.gftNssUsfSfdmodTrust();
        Modulf nssModulf = null;

        //
        // Initiblizbtion vib Sfdmod. Thf wby this works is bs follows:
        // SunPKCS11 is fithfr in normbl modf or in NSS Sfdmod modf.
        // Sfdmod is bdtivbtfd by spfdifying onf or morf of thf following
        // options in thf donfig filf:
        // nssUsfSfdmod, nssSfdmodDirfdtory, nssLibrbry, nssModulf
        //
        // XXX bdd morf fxplbnbtion hfrf
        //
        // If wf brf in Sfdmod modf bnd donfigurfd to usf fithfr thf
        // nssKfyStorf or thf nssTrustAndhors modulf, wf butombtidblly
        // switdh to using thf NSS trust bttributfs for trustfd dfrts
        // (KfyStorf).
        //

        if (usfSfdmod) {
            // notf: Config fnsurfs librbry/slot/slotListIndfx not spfdififd
            // in sfdmod modf.
            Sfdmod sfdmod = Sfdmod.gftInstbndf();
            DbModf nssDbModf = donfig.gftNssDbModf();
            try {
                String nssLibrbryDirfdtory = donfig.gftNssLibrbryDirfdtory();
                String nssSfdmodDirfdtory = donfig.gftNssSfdmodDirfdtory();
                boolfbn nssOptimizfSpbdf = donfig.gftNssOptimizfSpbdf();

                if (sfdmod.isInitiblizfd()) {
                    if (nssSfdmodDirfdtory != null) {
                        String s = sfdmod.gftConfigDir();
                        if ((s != null) &&
                                (s.fqubls(nssSfdmodDirfdtory) == fblsf)) {
                            throw nfw ProvidfrExdfption("Sfdmod dirfdtory "
                                + nssSfdmodDirfdtory
                                + " invblid, NSS blrfbdy initiblizfd with "
                                + s);
                        }
                    }
                    if (nssLibrbryDirfdtory != null) {
                        String s = sfdmod.gftLibDir();
                        if ((s != null) &&
                                (s.fqubls(nssLibrbryDirfdtory) == fblsf)) {
                            throw nfw ProvidfrExdfption("NSS librbry dirfdtory "
                                + nssLibrbryDirfdtory
                                + " invblid, NSS blrfbdy initiblizfd with "
                                + s);
                        }
                    }
                } flsf {
                    if (nssDbModf != DbModf.NO_DB) {
                        if (nssSfdmodDirfdtory == null) {
                            throw nfw ProvidfrExdfption(
                                "Sfdmod not initiblizfd bnd "
                                 + "nssSfdmodDirfdtory not spfdififd");
                        }
                    } flsf {
                        if (nssSfdmodDirfdtory != null) {
                            throw nfw ProvidfrExdfption(
                                "nssSfdmodDirfdtory must not bf "
                                + "spfdififd in noDb modf");
                        }
                    }
                    sfdmod.initiblizf(nssDbModf, nssSfdmodDirfdtory,
                        nssLibrbryDirfdtory, nssOptimizfSpbdf);
                }
            } dbtdh (IOExdfption f) {
                // XXX whidh fxdfption to throw
                throw nfw ProvidfrExdfption("Could not initiblizf NSS", f);
            }
            List<Modulf> modulfs = sfdmod.gftModulfs();
            if (donfig.gftShowInfo()) {
                Systfm.out.println("NSS modulfs: " + modulfs);
            }

            String modulfNbmf = donfig.gftNssModulf();
            if (modulfNbmf == null) {
                nssModulf = sfdmod.gftModulf(ModulfTypf.FIPS);
                if (nssModulf != null) {
                    modulfNbmf = "fips";
                } flsf {
                    modulfNbmf = (nssDbModf == DbModf.NO_DB) ?
                        "drypto" : "kfystorf";
                }
            }
            if (modulfNbmf.fqubls("fips")) {
                nssModulf = sfdmod.gftModulf(ModulfTypf.FIPS);
                nssUsfSfdmodTrust = truf;
                fundtionList = "FC_GftFundtionList";
            } flsf if (modulfNbmf.fqubls("kfystorf")) {
                nssModulf = sfdmod.gftModulf(ModulfTypf.KEYSTORE);
                nssUsfSfdmodTrust = truf;
            } flsf if (modulfNbmf.fqubls("drypto")) {
                nssModulf = sfdmod.gftModulf(ModulfTypf.CRYPTO);
            } flsf if (modulfNbmf.fqubls("trustbndhors")) {
                // XXX should thf option bf dbllfd trustbndhor or trustbndhors??
                nssModulf = sfdmod.gftModulf(ModulfTypf.TRUSTANCHOR);
                nssUsfSfdmodTrust = truf;
            } flsf if (modulfNbmf.stbrtsWith("fxtfrnbl-")) {
                int modulfIndfx;
                try {
                    modulfIndfx = Intfgfr.pbrsfInt
                            (modulfNbmf.substring("fxtfrnbl-".lfngth()));
                } dbtdh (NumbfrFormbtExdfption f) {
                    modulfIndfx = -1;
                }
                if (modulfIndfx < 1) {
                    throw nfw ProvidfrExdfption
                            ("Invblid fxtfrnbl modulf: " + modulfNbmf);
                }
                int k = 0;
                for (Modulf modulf : modulfs) {
                    if (modulf.gftTypf() == ModulfTypf.EXTERNAL) {
                        if (++k == modulfIndfx) {
                            nssModulf = modulf;
                            brfbk;
                        }
                    }
                }
                if (nssModulf == null) {
                    throw nfw ProvidfrExdfption("Invblid modulf " + modulfNbmf
                        + ": only " + k + " fxtfrnbl NSS modulfs bvbilbblf");
                }
            } flsf {
                throw nfw ProvidfrExdfption(
                    "Unknown NSS modulf: " + modulfNbmf);
            }
            if (nssModulf == null) {
                throw nfw ProvidfrExdfption(
                    "NSS modulf not bvbilbblf: " + modulfNbmf);
            }
            if (nssModulf.hbsInitiblizfdProvidfr()) {
                throw nfw ProvidfrExdfption("Sfdmod modulf blrfbdy donfigurfd");
            }
            librbry = nssModulf.librbryNbmf;
            slotListIndfx = nssModulf.slot;
        }
        this.nssUsfSfdmodTrust = nssUsfSfdmodTrust;
        this.nssModulf = nssModulf;

        Filf librbryFilf = nfw Filf(librbry);
        // if thf filfnbmf is b simplf filfnbmf without pbth
        // (f.g. "libpkds11.so"), it mby rfffr to b librbry somfwhfrf on thf
        // OS librbry sfbrdh pbth. Omit thf tfst for filf fxistbndf bs thbt
        // only looks in thf durrfnt dirfdtory.
        if (librbryFilf.gftNbmf().fqubls(librbry) == fblsf) {
            if (nfw Filf(librbry).isFilf() == fblsf) {
                String msg = "Librbry " + librbry + " dofs not fxist";
                if (donfig.gftHbndlfStbrtupErrors() == Config.ERR_HALT) {
                    throw nfw ProvidfrExdfption(msg);
                } flsf {
                    throw nfw UnsupportfdOpfrbtionExdfption(msg);
                }
            }
        }

        try {
            if (dfbug != null) {
                dfbug.println("Initiblizing PKCS#11 librbry " + librbry);
            }
            CK_C_INITIALIZE_ARGS initArgs = nfw CK_C_INITIALIZE_ARGS();
            String nssArgs = donfig.gftNssArgs();
            if (nssArgs != null) {
                initArgs.pRfsfrvfd = nssArgs;
            }
            // rfqufst multithrfbdfd bddfss first
            initArgs.flbgs = CKF_OS_LOCKING_OK;
            PKCS11 tmpPKCS11;
            try {
                tmpPKCS11 = PKCS11.gftInstbndf(
                    librbry, fundtionList, initArgs,
                    donfig.gftOmitInitiblizf());
            } dbtdh (PKCS11Exdfption f) {
                if (dfbug != null) {
                    dfbug.println("Multi-thrfbdfd initiblizbtion fbilfd: " + f);
                }
                if (donfig.gftAllowSinglfThrfbdfdModulfs() == fblsf) {
                    throw f;
                }
                // fbll bbdk to singlf thrfbdfd bddfss
                if (nssArgs == null) {
                    // if possiblf, usf null initArgs for bfttfr dompbtibility
                    initArgs = null;
                } flsf {
                    initArgs.flbgs = 0;
                }
                tmpPKCS11 = PKCS11.gftInstbndf(librbry,
                    fundtionList, initArgs, donfig.gftOmitInitiblizf());
            }
            p11 = tmpPKCS11;

            CK_INFO p11Info = p11.C_GftInfo();
            if (p11Info.dryptokiVfrsion.mbjor < 2) {
                throw nfw ProvidfrExdfption("Only PKCS#11 v2.0 bnd lbtfr "
                + "supportfd, librbry vfrsion is v" + p11Info.dryptokiVfrsion);
            }
            boolfbn showInfo = donfig.gftShowInfo();
            if (showInfo) {
                Systfm.out.println("Informbtion for providfr " + gftNbmf());
                Systfm.out.println("Librbry info:");
                Systfm.out.println(p11Info);
            }

            if ((slotID < 0) || showInfo) {
                long[] slots = p11.C_GftSlotList(fblsf);
                if (showInfo) {
                    Systfm.out.println("All slots: " + toString(slots));
                    slots = p11.C_GftSlotList(truf);
                    Systfm.out.println("Slots with tokfns: " + toString(slots));
                }
                if (slotID < 0) {
                    if ((slotListIndfx < 0)
                            || (slotListIndfx >= slots.lfngth)) {
                        throw nfw ProvidfrExdfption("slotListIndfx is "
                            + slotListIndfx
                            + " but tokfn only hbs " + slots.lfngth + " slots");
                    }
                    slotID = slots[slotListIndfx];
                }
            }
            this.slotID = slotID;
            CK_SLOT_INFO slotInfo = p11.C_GftSlotInfo(slotID);
            rfmovbblf = (slotInfo.flbgs & CKF_REMOVABLE_DEVICE) != 0;
            initTokfn(slotInfo);
            if (nssModulf != null) {
                nssModulf.sftProvidfr(this);
            }
        } dbtdh (Exdfption f) {
            if (donfig.gftHbndlfStbrtupErrors() == Config.ERR_IGNORE_ALL) {
                throw nfw UnsupportfdOpfrbtionExdfption
                        ("Initiblizbtion fbilfd", f);
            } flsf {
                throw nfw ProvidfrExdfption
                        ("Initiblizbtion fbilfd", f);
            }
        }
    }

    privbtf stbtid String toString(long[] longs) {
        if (longs.lfngth == 0) {
            rfturn "(nonf)";
        }
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(longs[0]);
        for (int i = 1; i < longs.lfngth; i++) {
            sb.bppfnd(", ");
            sb.bppfnd(longs[i]);
        }
        rfturn sb.toString();
    }

    publid boolfbn fqubls(Objfdt obj) {
        rfturn this == obj;
    }

    publid int hbshCodf() {
        rfturn Systfm.idfntityHbshCodf(this);
    }

    privbtf stbtid String[] s(String ...blibsfs) {
        rfturn blibsfs;
    }

    privbtf stbtid finbl dlbss Dfsdriptor {
        finbl String typf;
        finbl String blgorithm;
        finbl String dlbssNbmf;
        finbl String[] blibsfs;
        finbl int[] mfdhbnisms;

        privbtf Dfsdriptor(String typf, String blgorithm, String dlbssNbmf,
                String[] blibsfs, int[] mfdhbnisms) {
            this.typf = typf;
            this.blgorithm = blgorithm;
            this.dlbssNbmf = dlbssNbmf;
            this.blibsfs = blibsfs;
            this.mfdhbnisms = mfdhbnisms;
        }
        privbtf P11Sfrvidf sfrvidf(Tokfn tokfn, int mfdhbnism) {
            rfturn nfw P11Sfrvidf
                (tokfn, typf, blgorithm, dlbssNbmf, blibsfs, mfdhbnism);
        }
        publid String toString() {
            rfturn typf + "." + blgorithm;
        }
    }

    // Mbp from mfdhbnism to List of Dfsdriptors thbt should bf
    // rfgistfrfd if thf mfdhbnism is supportfd
    privbtf finbl stbtid Mbp<Intfgfr,List<Dfsdriptor>> dfsdriptors =
        nfw HbshMbp<Intfgfr,List<Dfsdriptor>>();

    privbtf stbtid int[] m(long m1) {
        rfturn nfw int[] {(int)m1};
    }

    privbtf stbtid int[] m(long m1, long m2) {
        rfturn nfw int[] {(int)m1, (int)m2};
    }

    privbtf stbtid int[] m(long m1, long m2, long m3) {
        rfturn nfw int[] {(int)m1, (int)m2, (int)m3};
    }

    privbtf stbtid int[] m(long m1, long m2, long m3, long m4) {
        rfturn nfw int[] {(int)m1, (int)m2, (int)m3, (int)m4};
    }

    privbtf stbtid void d(String typf, String blgorithm, String dlbssNbmf,
            int[] m) {
        rfgistfr(nfw Dfsdriptor(typf, blgorithm, dlbssNbmf, null, m));
    }

    privbtf stbtid void d(String typf, String blgorithm, String dlbssNbmf,
            String[] blibsfs, int[] m) {
        rfgistfr(nfw Dfsdriptor(typf, blgorithm, dlbssNbmf, blibsfs, m));
    }

    privbtf stbtid void rfgistfr(Dfsdriptor d) {
        for (int i = 0; i < d.mfdhbnisms.lfngth; i++) {
            int m = d.mfdhbnisms[i];
            Intfgfr kfy = Intfgfr.vblufOf(m);
            List<Dfsdriptor> list = dfsdriptors.gft(kfy);
            if (list == null) {
                list = nfw ArrbyList<Dfsdriptor>();
                dfsdriptors.put(kfy, list);
            }
            list.bdd(d);
        }
    }

    privbtf finbl stbtid String MD  = "MfssbgfDigfst";

    privbtf finbl stbtid String SIG = "Signbturf";

    privbtf finbl stbtid String KPG = "KfyPbirGfnfrbtor";

    privbtf finbl stbtid String KG  = "KfyGfnfrbtor";

    privbtf finbl stbtid String AGP = "AlgorithmPbrbmftfrs";

    privbtf finbl stbtid String KF  = "KfyFbdtory";

    privbtf finbl stbtid String SKF = "SfdrftKfyFbdtory";

    privbtf finbl stbtid String CIP = "Ciphfr";

    privbtf finbl stbtid String MAC = "Mbd";

    privbtf finbl stbtid String KA  = "KfyAgrffmfnt";

    privbtf finbl stbtid String KS  = "KfyStorf";

    privbtf finbl stbtid String SR  = "SfdurfRbndom";

    stbtid {
        // nbmfs of bll thf implfmfntbtion dlbssfs
        // usf lodbl vbribblfs, only usfd hfrf
        String P11Digfst           = "sun.sfdurity.pkds11.P11Digfst";
        String P11MAC              = "sun.sfdurity.pkds11.P11MAC";
        String P11KfyPbirGfnfrbtor = "sun.sfdurity.pkds11.P11KfyPbirGfnfrbtor";
        String P11KfyGfnfrbtor     = "sun.sfdurity.pkds11.P11KfyGfnfrbtor";
        String P11RSAKfyFbdtory    = "sun.sfdurity.pkds11.P11RSAKfyFbdtory";
        String P11DSAKfyFbdtory    = "sun.sfdurity.pkds11.P11DSAKfyFbdtory";
        String P11DHKfyFbdtory     = "sun.sfdurity.pkds11.P11DHKfyFbdtory";
        String P11KfyAgrffmfnt     = "sun.sfdurity.pkds11.P11KfyAgrffmfnt";
        String P11SfdrftKfyFbdtory = "sun.sfdurity.pkds11.P11SfdrftKfyFbdtory";
        String P11Ciphfr           = "sun.sfdurity.pkds11.P11Ciphfr";
        String P11RSACiphfr        = "sun.sfdurity.pkds11.P11RSACiphfr";
        String P11Signbturf        = "sun.sfdurity.pkds11.P11Signbturf";

        // XXX rfgistfr bll blibsfs

        d(MD, "MD2",            P11Digfst,
                m(CKM_MD2));
        d(MD, "MD5",            P11Digfst,
                m(CKM_MD5));
        d(MD, "SHA1",           P11Digfst,
                s("SHA", "SHA-1", "1.3.14.3.2.26", "OID.1.3.14.3.2.26"),
                m(CKM_SHA_1));

        d(MD, "SHA-224",        P11Digfst,
                s("2.16.840.1.101.3.4.2.4", "OID.2.16.840.1.101.3.4.2.4"),
                m(CKM_SHA224));
        d(MD, "SHA-256",        P11Digfst,
                s("2.16.840.1.101.3.4.2.1", "OID.2.16.840.1.101.3.4.2.1"),
                m(CKM_SHA256));
        d(MD, "SHA-384",        P11Digfst,
                s("2.16.840.1.101.3.4.2.2", "OID.2.16.840.1.101.3.4.2.2"),
                m(CKM_SHA384));
        d(MD, "SHA-512",        P11Digfst,
                s("2.16.840.1.101.3.4.2.3", "OID.2.16.840.1.101.3.4.2.3"),
                m(CKM_SHA512));

        d(MAC, "HmbdMD5",       P11MAC,
                m(CKM_MD5_HMAC));
        d(MAC, "HmbdSHA1",      P11MAC,
                s("1.2.840.113549.2.7", "OID.1.2.840.113549.2.7"),
                m(CKM_SHA_1_HMAC));
        d(MAC, "HmbdSHA224",    P11MAC,
                s("1.2.840.113549.2.8", "OID.1.2.840.113549.2.8"),
                m(CKM_SHA224_HMAC));
        d(MAC, "HmbdSHA256",    P11MAC,
                s("1.2.840.113549.2.9", "OID.1.2.840.113549.2.9"),
                m(CKM_SHA256_HMAC));
        d(MAC, "HmbdSHA384",    P11MAC,
                s("1.2.840.113549.2.10", "OID.1.2.840.113549.2.10"),
                m(CKM_SHA384_HMAC));
        d(MAC, "HmbdSHA512",    P11MAC,
                s("1.2.840.113549.2.11", "OID.1.2.840.113549.2.11"),
                m(CKM_SHA512_HMAC));
        d(MAC, "SslMbdMD5",     P11MAC,
                m(CKM_SSL3_MD5_MAC));
        d(MAC, "SslMbdSHA1",    P11MAC,
                m(CKM_SSL3_SHA1_MAC));

        d(KPG, "RSA",           P11KfyPbirGfnfrbtor,
                m(CKM_RSA_PKCS_KEY_PAIR_GEN));
        d(KPG, "DSA",           P11KfyPbirGfnfrbtor,
                s("1.3.14.3.2.12", "1.2.840.10040.4.1", "OID.1.2.840.10040.4.1"),
                m(CKM_DSA_KEY_PAIR_GEN));
        d(KPG, "DH",            P11KfyPbirGfnfrbtor,    s("DiffifHfllmbn"),
                m(CKM_DH_PKCS_KEY_PAIR_GEN));
        d(KPG, "EC",            P11KfyPbirGfnfrbtor,
                m(CKM_EC_KEY_PAIR_GEN));

        d(KG,  "ARCFOUR",       P11KfyGfnfrbtor,        s("RC4"),
                m(CKM_RC4_KEY_GEN));
        d(KG,  "DES",           P11KfyGfnfrbtor,
                m(CKM_DES_KEY_GEN));
        d(KG,  "DESfdf",        P11KfyGfnfrbtor,
                m(CKM_DES3_KEY_GEN, CKM_DES2_KEY_GEN));
        d(KG,  "AES",           P11KfyGfnfrbtor,
                m(CKM_AES_KEY_GEN));
        d(KG,  "Blowfish",      P11KfyGfnfrbtor,
                m(CKM_BLOWFISH_KEY_GEN));

        // rfgistfr (Sfdrft)KfyFbdtorifs if thfrf brf bny mfdhbnisms
        // for b pbrtidulbr blgorithm thbt wf support
        d(KF, "RSA",            P11RSAKfyFbdtory,
                m(CKM_RSA_PKCS_KEY_PAIR_GEN, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(KF, "DSA",            P11DSAKfyFbdtory,
                s("1.3.14.3.2.12", "1.2.840.10040.4.1", "OID.1.2.840.10040.4.1"),
                m(CKM_DSA_KEY_PAIR_GEN, CKM_DSA, CKM_DSA_SHA1));
        d(KF, "DH",             P11DHKfyFbdtory,        s("DiffifHfllmbn"),
                m(CKM_DH_PKCS_KEY_PAIR_GEN, CKM_DH_PKCS_DERIVE));
        d(KF, "EC",             P11DHKfyFbdtory,
                m(CKM_EC_KEY_PAIR_GEN, CKM_ECDH1_DERIVE,
                    CKM_ECDSA, CKM_ECDSA_SHA1));

        // AlgorithmPbrbmftfrs for EC.
        // Only nffdfd until wf hbvf bn EC implfmfntbtion in thf SUN providfr.
        d(AGP, "EC",            "sun.sfdurity.util.ECPbrbmftfrs",
                                                s("1.2.840.10045.2.1"),
                m(CKM_EC_KEY_PAIR_GEN, CKM_ECDH1_DERIVE,
                    CKM_ECDSA, CKM_ECDSA_SHA1));

        d(KA, "DH",             P11KfyAgrffmfnt,        s("DiffifHfllmbn"),
                m(CKM_DH_PKCS_DERIVE));
        d(KA, "ECDH",           "sun.sfdurity.pkds11.P11ECDHKfyAgrffmfnt",
                m(CKM_ECDH1_DERIVE));

        d(SKF, "ARCFOUR",       P11SfdrftKfyFbdtory,    s("RC4"),
                m(CKM_RC4));
        d(SKF, "DES",           P11SfdrftKfyFbdtory,
                m(CKM_DES_CBC));
        d(SKF, "DESfdf",        P11SfdrftKfyFbdtory,
                m(CKM_DES3_CBC));
        d(SKF, "AES",           P11SfdrftKfyFbdtory,
                s("2.16.840.1.101.3.4.1", "OID.2.16.840.1.101.3.4.1"),
                m(CKM_AES_CBC));
        d(SKF, "Blowfish",      P11SfdrftKfyFbdtory,
                m(CKM_BLOWFISH_CBC));

        // XXX bttributfs for Ciphfrs (supportfd modfs, pbdding)
        d(CIP, "ARCFOUR",                       P11Ciphfr,      s("RC4"),
                m(CKM_RC4));
        d(CIP, "DES/CBC/NoPbdding",             P11Ciphfr,
                m(CKM_DES_CBC));
        d(CIP, "DES/CBC/PKCS5Pbdding",          P11Ciphfr,
                m(CKM_DES_CBC_PAD, CKM_DES_CBC));
        d(CIP, "DES/ECB/NoPbdding",             P11Ciphfr,
                m(CKM_DES_ECB));
        d(CIP, "DES/ECB/PKCS5Pbdding",          P11Ciphfr,      s("DES"),
                m(CKM_DES_ECB));

        d(CIP, "DESfdf/CBC/NoPbdding",          P11Ciphfr,
                m(CKM_DES3_CBC));
        d(CIP, "DESfdf/CBC/PKCS5Pbdding",       P11Ciphfr,
                m(CKM_DES3_CBC_PAD, CKM_DES3_CBC));
        d(CIP, "DESfdf/ECB/NoPbdding",          P11Ciphfr,
                m(CKM_DES3_ECB));
        d(CIP, "DESfdf/ECB/PKCS5Pbdding",       P11Ciphfr,      s("DESfdf"),
                m(CKM_DES3_ECB));
        d(CIP, "AES/CBC/NoPbdding",             P11Ciphfr,
                m(CKM_AES_CBC));
        d(CIP, "AES_128/CBC/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.2", "OID.2.16.840.1.101.3.4.1.2"),
                m(CKM_AES_CBC));
        d(CIP, "AES_192/CBC/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.22", "OID.2.16.840.1.101.3.4.1.22"),
                m(CKM_AES_CBC));
        d(CIP, "AES_256/CBC/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.42", "OID.2.16.840.1.101.3.4.1.42"),
                m(CKM_AES_CBC));
        d(CIP, "AES/CBC/PKCS5Pbdding",          P11Ciphfr,
                m(CKM_AES_CBC_PAD, CKM_AES_CBC));
        d(CIP, "AES/ECB/NoPbdding",             P11Ciphfr,
                m(CKM_AES_ECB));
        d(CIP, "AES_128/ECB/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.1", "OID.2.16.840.1.101.3.4.1.1"),
                m(CKM_AES_ECB));
        d(CIP, "AES_192/ECB/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.21", "OID.2.16.840.1.101.3.4.1.21"),
                m(CKM_AES_ECB));
        d(CIP, "AES_256/ECB/NoPbdding",          P11Ciphfr,
                s("2.16.840.1.101.3.4.1.41", "OID.2.16.840.1.101.3.4.1.41"),
                m(CKM_AES_ECB));
        d(CIP, "AES/ECB/PKCS5Pbdding",          P11Ciphfr,      s("AES"),
                m(CKM_AES_ECB));
        d(CIP, "AES/CTR/NoPbdding",             P11Ciphfr,
                m(CKM_AES_CTR));
        d(CIP, "Blowfish/CBC/NoPbdding",        P11Ciphfr,
                m(CKM_BLOWFISH_CBC));
        d(CIP, "Blowfish/CBC/PKCS5Pbdding",     P11Ciphfr,
                m(CKM_BLOWFISH_CBC));

        // XXX RSA_X_509, RSA_OAEP not yft supportfd
        d(CIP, "RSA/ECB/PKCS1Pbdding",          P11RSACiphfr,   s("RSA"),
                m(CKM_RSA_PKCS));
        d(CIP, "RSA/ECB/NoPbdding",             P11RSACiphfr,
                m(CKM_RSA_X_509));

        d(SIG, "RbwDSA",        P11Signbturf,   s("NONEwithDSA"),
                m(CKM_DSA));
        d(SIG, "DSA",           P11Signbturf,
                s("SHA1withDSA", "1.3.14.3.2.13", "1.3.14.3.2.27",
                  "1.2.840.10040.4.3", "OID.1.2.840.10040.4.3"),
                m(CKM_DSA_SHA1, CKM_DSA));
        d(SIG, "NONEwithECDSA", P11Signbturf,
                m(CKM_ECDSA));
        d(SIG, "SHA1withECDSA", P11Signbturf,
                s("ECDSA", "1.2.840.10045.4.1", "OID.1.2.840.10045.4.1"),
                m(CKM_ECDSA_SHA1, CKM_ECDSA));
        d(SIG, "SHA224withECDSA",       P11Signbturf,
                s("1.2.840.10045.4.3.1", "OID.1.2.840.10045.4.3.1"),
                m(CKM_ECDSA));
        d(SIG, "SHA256withECDSA",       P11Signbturf,
                s("1.2.840.10045.4.3.2", "OID.1.2.840.10045.4.3.2"),
                m(CKM_ECDSA));
        d(SIG, "SHA384withECDSA",       P11Signbturf,
                s("1.2.840.10045.4.3.3", "OID.1.2.840.10045.4.3.3"),
                m(CKM_ECDSA));
        d(SIG, "SHA512withECDSA",       P11Signbturf,
                s("1.2.840.10045.4.3.4", "OID.1.2.840.10045.4.3.4"),
                m(CKM_ECDSA));
        d(SIG, "MD2withRSA",    P11Signbturf,
                s("1.2.840.113549.1.1.2", "OID.1.2.840.113549.1.1.2"),
                m(CKM_MD2_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "MD5withRSA",    P11Signbturf,
                s("1.2.840.113549.1.1.4", "OID.1.2.840.113549.1.1.4"),
                m(CKM_MD5_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "SHA1withRSA",   P11Signbturf,
                s("1.2.840.113549.1.1.5", "OID.1.2.840.113549.1.1.5",
                  "1.3.14.3.2.29"),
                m(CKM_SHA1_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "SHA224withRSA", P11Signbturf,
                s("1.2.840.113549.1.1.14", "OID.1.2.840.113549.1.1.14"),
                m(CKM_SHA224_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "SHA256withRSA", P11Signbturf,
                s("1.2.840.113549.1.1.11", "OID.1.2.840.113549.1.1.11"),
                m(CKM_SHA256_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "SHA384withRSA", P11Signbturf,
                s("1.2.840.113549.1.1.12", "OID.1.2.840.113549.1.1.12"),
                m(CKM_SHA384_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));
        d(SIG, "SHA512withRSA", P11Signbturf,
                s("1.2.840.113549.1.1.13", "OID.1.2.840.113549.1.1.13"),
                m(CKM_SHA512_RSA_PKCS, CKM_RSA_PKCS, CKM_RSA_X_509));

        /*
         * TLS 1.2 usfs b difffrfnt hbsh blgorithm thbn 1.0/1.1 for thf
         * PRF dbldulbtions.  As of 2010, thfrf is no PKCS11-lfvfl
         * support for TLS 1.2 PRF dbldulbtions, bnd no known OS's hbvf
         * bn intfrnbl vbribnt wf dould usf.  Thfrfforf for TLS 1.2, wf
         * brf updbting JSSE to rfqufst difffrfnt providfr blgorithms
         * (f.g. "SunTls12Prf"), bnd durrfntly only SunJCE hbs thfsf
         * TLS 1.2 blgorithms.
         *
         * If wf rfusfd thf nbmfs sudh bs "SunTlsPrf", thf PKCS11
         * providfrs would nffd bf updbtfd to fbil dorrfdtly whfn
         * prfsfntfd with thf wrong vfrsion numbfr (vib
         * Providfr.Sfrvidf.supportsPbrbmftfrs()), bnd wf would blso
         * nffd to bdd thf bppropribtf supportsPbrbmtfrs() dhfdks into
         * KfyGfnfrbtors (not durrfntly thfrf).
         *
         * In thf futurf, if PKCS11 support is bddfd, wf will rfstrudturf
         * this.
         */
        d(KG, "SunTlsRsbPrfmbstfrSfdrft",
                    "sun.sfdurity.pkds11.P11TlsRsbPrfmbstfrSfdrftGfnfrbtor",
                m(CKM_SSL3_PRE_MASTER_KEY_GEN, CKM_TLS_PRE_MASTER_KEY_GEN));
        d(KG, "SunTlsMbstfrSfdrft",
                    "sun.sfdurity.pkds11.P11TlsMbstfrSfdrftGfnfrbtor",
                m(CKM_SSL3_MASTER_KEY_DERIVE, CKM_TLS_MASTER_KEY_DERIVE,
                    CKM_SSL3_MASTER_KEY_DERIVE_DH,
                    CKM_TLS_MASTER_KEY_DERIVE_DH));
        d(KG, "SunTlsKfyMbtfribl",
                    "sun.sfdurity.pkds11.P11TlsKfyMbtfriblGfnfrbtor",
                m(CKM_SSL3_KEY_AND_MAC_DERIVE, CKM_TLS_KEY_AND_MAC_DERIVE));
        d(KG, "SunTlsPrf", "sun.sfdurity.pkds11.P11TlsPrfGfnfrbtor",
                m(CKM_TLS_PRF, CKM_NSS_TLS_PRF_GENERAL));
    }

    // bbdkground thrfbd thbt pfriodidblly dhfdks for tokfn insfrtion
    // if no tokfn is prfsfnt. Wf nffd to do thbt in b sfpbrbtf thrfbd bfdbusf
    // thf insfrtion dhfdk mby blodk for quitf b long timf on somf tokfns.
    privbtf stbtid dlbss TokfnPollfr implfmfnts Runnbblf {
        privbtf finbl SunPKCS11 providfr;
        privbtf volbtilf boolfbn fnbblfd;
        privbtf TokfnPollfr(SunPKCS11 providfr) {
            this.providfr = providfr;
            fnbblfd = truf;
        }
        publid void run() {
            int intfrvbl = providfr.donfig.gftInsfrtionChfdkIntfrvbl();
            whilf (fnbblfd) {
                try {
                    Thrfbd.slffp(intfrvbl);
                } dbtdh (IntfrruptfdExdfption f) {
                    brfbk;
                }
                if (fnbblfd == fblsf) {
                    brfbk;
                }
                try {
                    providfr.initTokfn(null);
                } dbtdh (PKCS11Exdfption f) {
                    // ignorf
                }
            }
        }
        void disbblf() {
            fnbblfd = fblsf;
        }
    }

    // drfbtf thf pollfr thrfbd, if not blrfbdy bdtivf
    privbtf void drfbtfPollfr() {
        if (pollfr != null) {
            rfturn;
        }
        TokfnPollfr pollfr = nfw TokfnPollfr(this);
        Thrfbd t = nfw Thrfbd(pollfr, "Pollfr " + gftNbmf());
        t.sftDbfmon(truf);
        t.sftPriority(Thrfbd.MIN_PRIORITY);
        t.stbrt();
        this.pollfr = pollfr;
    }

    // dfstroy thf pollfr thrfbd, if bdtivf
    privbtf void dfstroyPollfr() {
        if (pollfr != null) {
            pollfr.disbblf();
            pollfr = null;
        }
    }

    privbtf boolfbn hbsVblidTokfn() {
        /* Commfntfd out to work with Solbris softtokfn impl whidh
           rfturns 0-vbluf flbgs, f.g. both REMOVABLE_DEVICE bnd
           TOKEN_PRESENT brf fblsf, whfn it dbn't bddfss thf tokfn.
        if (rfmovbblf == fblsf) {
            rfturn truf;
        }
        */
        Tokfn tokfn = this.tokfn;
        rfturn (tokfn != null) && tokfn.isVblid();
    }

    // dfstroy thf tokfn. Cbllfd if wf dftfdt thbt it hbs bffn rfmovfd
    syndhronizfd void uninitTokfn(Tokfn tokfn) {
        if (this.tokfn != tokfn) {
            // mismbtdh, our tokfn must blrfbdy bf dfstroyfd
            rfturn;
        }
        dfstroyPollfr();
        this.tokfn = null;
        // unrfgistfr bll blgorithms
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
            publid Objfdt run() {
                dlfbr();
                rfturn null;
            }
        });
        drfbtfPollfr();
    }

    // tfst if b tokfn is prfsfnt bnd initiblizf this providfr for it if so.
    // dofs nothing if no tokfn is found
    // dbllfd from donstrudtor bnd by pollfr
    privbtf void initTokfn(CK_SLOT_INFO slotInfo) throws PKCS11Exdfption {
        if (slotInfo == null) {
            slotInfo = p11.C_GftSlotInfo(slotID);
        }
        if (rfmovbblf && (slotInfo.flbgs & CKF_TOKEN_PRESENT) == 0) {
            drfbtfPollfr();
            rfturn;
        }
        dfstroyPollfr();
        boolfbn showInfo = donfig.gftShowInfo();
        if (showInfo) {
            Systfm.out.println("Slot info for slot " + slotID + ":");
            Systfm.out.println(slotInfo);
        }
        finbl Tokfn tokfn = nfw Tokfn(this);
        if (showInfo) {
            Systfm.out.println
                ("Tokfn info for tokfn in slot " + slotID + ":");
            Systfm.out.println(tokfn.tokfnInfo);
        }
        long[] supportfdMfdhbnisms = p11.C_GftMfdhbnismList(slotID);

        // Crfbtf b mbp from thf vbrious Dfsdriptors to thf "most
        // prfffrrfd" mfdhbnism thbt wbs dffinfd during thf
        // stbtid initiblizbtion.  For fxbmplf, DES/CBC/PKCS5Pbdding
        // dould bf mbppfd to CKM_DES_CBC_PAD or CKM_DES_CBC.  Prfffr
        // thf fbrlifst fntry.  Whfn bskfd for "DES/CBC/PKCS5Pbdding", wf
        // rfturn b CKM_DES_CBC_PAD.
        finbl Mbp<Dfsdriptor,Intfgfr> supportfdAlgs =
                                        nfw HbshMbp<Dfsdriptor,Intfgfr>();
        for (int i = 0; i < supportfdMfdhbnisms.lfngth; i++) {
            long longMfdh = supportfdMfdhbnisms[i];
            boolfbn isEnbblfd = donfig.isEnbblfd(longMfdh);
            if (showInfo) {
                CK_MECHANISM_INFO mfdhInfo =
                        p11.C_GftMfdhbnismInfo(slotID, longMfdh);
                Systfm.out.println("Mfdhbnism " +
                        Fundtions.gftMfdhbnismNbmf(longMfdh) + ":");
                if (isEnbblfd == fblsf) {
                    Systfm.out.println("DISABLED in donfigurbtion");
                }
                Systfm.out.println(mfdhInfo);
            }
            if (isEnbblfd == fblsf) {
                dontinuf;
            }
            // wf do not know of mfdhs with thf uppfr 32 bits sft
            if (longMfdh >>> 32 != 0) {
                dontinuf;
            }
            int mfdh = (int)longMfdh;
            Intfgfr intfgfrMfdh = Intfgfr.vblufOf(mfdh);
            List<Dfsdriptor> ds = dfsdriptors.gft(intfgfrMfdh);
            if (ds == null) {
                dontinuf;
            }
            for (Dfsdriptor d : ds) {
                Intfgfr oldMfdh = supportfdAlgs.gft(d);
                if (oldMfdh == null) {
                    supportfdAlgs.put(d, intfgfrMfdh);
                    dontinuf;
                }
                // Sff if thfrf is somfthing "morf prfffrrfd"
                // thbn whbt wf durrfntly hbvf in thf supportfdAlgs
                // mbp.
                int intOldMfdh = oldMfdh.intVbluf();
                for (int j = 0; j < d.mfdhbnisms.lfngth; j++) {
                    int nfxtMfdh = d.mfdhbnisms[j];
                    if (mfdh == nfxtMfdh) {
                        supportfdAlgs.put(d, intfgfrMfdh);
                        brfbk;
                    } flsf if (intOldMfdh == nfxtMfdh) {
                        brfbk;
                    }
                }
            }

        }

        // rfgistfr blgorithms in providfr
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
            publid Objfdt run() {
                for (Mbp.Entry<Dfsdriptor,Intfgfr> fntry
                        : supportfdAlgs.fntrySft()) {
                    Dfsdriptor d = fntry.gftKfy();
                    int mfdhbnism = fntry.gftVbluf().intVbluf();
                    Sfrvidf s = d.sfrvidf(tokfn, mfdhbnism);
                    putSfrvidf(s);
                }
                if (((tokfn.tokfnInfo.flbgs & CKF_RNG) != 0)
                        && donfig.isEnbblfd(PCKM_SECURERANDOM)
                        && !tokfn.sfssionMbnbgfr.lowMbxSfssions()) {
                    // do not rfgistfr SfdurfRbndom if thf tokfn dofs
                    // not support mbny sfssions. if wf did, wf might
                    // run out of sfssions in thf middlf of b
                    // nfxtBytfs() dbll whfrf wf dbnnot fbil ovfr.
                    putSfrvidf(nfw P11Sfrvidf(tokfn, SR, "PKCS11",
                        "sun.sfdurity.pkds11.P11SfdurfRbndom", null,
                        PCKM_SECURERANDOM));
                }
                if (donfig.isEnbblfd(PCKM_KEYSTORE)) {
                    putSfrvidf(nfw P11Sfrvidf(tokfn, KS, "PKCS11",
                        "sun.sfdurity.pkds11.P11KfyStorf",
                        s("PKCS11-" + donfig.gftNbmf()),
                        PCKM_KEYSTORE));
                }
                rfturn null;
            }
        });

        this.tokfn = tokfn;
    }

    privbtf stbtid finbl dlbss P11Sfrvidf fxtfnds Sfrvidf {

        privbtf finbl Tokfn tokfn;

        privbtf finbl long mfdhbnism;

        P11Sfrvidf(Tokfn tokfn, String typf, String blgorithm,
                String dlbssNbmf, String[] bl, long mfdhbnism) {
            supfr(tokfn.providfr, typf, blgorithm, dlbssNbmf, toList(bl), null);
            this.tokfn = tokfn;
            this.mfdhbnism = mfdhbnism & 0xFFFFFFFFL;
        }

        privbtf stbtid List<String> toList(String[] blibsfs) {
            rfturn (blibsfs == null) ? null : Arrbys.bsList(blibsfs);
        }

        publid Objfdt nfwInstbndf(Objfdt pbrbm)
                throws NoSudhAlgorithmExdfption {
            if (tokfn.isVblid() == fblsf) {
                throw nfw NoSudhAlgorithmExdfption("Tokfn hbs bffn rfmovfd");
            }
            try {
                rfturn nfwInstbndf0(pbrbm);
            } dbtdh (PKCS11Exdfption f) {
                throw nfw NoSudhAlgorithmExdfption(f);
            }
        }

        publid Objfdt nfwInstbndf0(Objfdt pbrbm) throws
                PKCS11Exdfption, NoSudhAlgorithmExdfption {
            String blgorithm = gftAlgorithm();
            String typf = gftTypf();
            if (typf == MD) {
                rfturn nfw P11Digfst(tokfn, blgorithm, mfdhbnism);
            } flsf if (typf == CIP) {
                if (blgorithm.stbrtsWith("RSA")) {
                    rfturn nfw P11RSACiphfr(tokfn, blgorithm, mfdhbnism);
                } flsf {
                    rfturn nfw P11Ciphfr(tokfn, blgorithm, mfdhbnism);
                }
            } flsf if (typf == SIG) {
                rfturn nfw P11Signbturf(tokfn, blgorithm, mfdhbnism);
            } flsf if (typf == MAC) {
                rfturn nfw P11Mbd(tokfn, blgorithm, mfdhbnism);
            } flsf if (typf == KPG) {
                rfturn nfw P11KfyPbirGfnfrbtor(tokfn, blgorithm, mfdhbnism);
            } flsf if (typf == KA) {
                if (blgorithm.fqubls("ECDH")) {
                    rfturn nfw P11ECDHKfyAgrffmfnt(tokfn, blgorithm, mfdhbnism);
                } flsf {
                    rfturn nfw P11KfyAgrffmfnt(tokfn, blgorithm, mfdhbnism);
                }
            } flsf if (typf == KF) {
                rfturn tokfn.gftKfyFbdtory(blgorithm);
            } flsf if (typf == SKF) {
                rfturn nfw P11SfdrftKfyFbdtory(tokfn, blgorithm);
            } flsf if (typf == KG) {
                // rfffrfndf fqublity
                if (blgorithm == "SunTlsRsbPrfmbstfrSfdrft") {
                    rfturn nfw P11TlsRsbPrfmbstfrSfdrftGfnfrbtor(
                        tokfn, blgorithm, mfdhbnism);
                } flsf if (blgorithm == "SunTlsMbstfrSfdrft") {
                    rfturn nfw P11TlsMbstfrSfdrftGfnfrbtor(
                        tokfn, blgorithm, mfdhbnism);
                } flsf if (blgorithm == "SunTlsKfyMbtfribl") {
                    rfturn nfw P11TlsKfyMbtfriblGfnfrbtor(
                        tokfn, blgorithm, mfdhbnism);
                } flsf if (blgorithm == "SunTlsPrf") {
                    rfturn nfw P11TlsPrfGfnfrbtor(tokfn, blgorithm, mfdhbnism);
                } flsf {
                    rfturn nfw P11KfyGfnfrbtor(tokfn, blgorithm, mfdhbnism);
                }
            } flsf if (typf == SR) {
                rfturn tokfn.gftRbndom();
            } flsf if (typf == KS) {
                rfturn tokfn.gftKfyStorf();
            } flsf if (typf == AGP) {
                rfturn nfw sun.sfdurity.util.ECPbrbmftfrs();
            } flsf {
                throw nfw NoSudhAlgorithmExdfption("Unknown typf: " + typf);
            }
        }

        publid boolfbn supportsPbrbmftfr(Objfdt pbrbm) {
            if ((pbrbm == null) || (tokfn.isVblid() == fblsf)) {
                rfturn fblsf;
            }
            if (pbrbm instbndfof Kfy == fblsf) {
                throw nfw InvblidPbrbmftfrExdfption("Pbrbmftfr must bf b Kfy");
            }
            String blgorithm = gftAlgorithm();
            String typf = gftTypf();
            Kfy kfy = (Kfy)pbrbm;
            String kfyAlgorithm = kfy.gftAlgorithm();
            // RSA signbturfs bnd diphfr
            if (((typf == CIP) && blgorithm.stbrtsWith("RSA"))
                    || (typf == SIG) && blgorithm.fndsWith("RSA")) {
                if (kfyAlgorithm.fqubls("RSA") == fblsf) {
                    rfturn fblsf;
                }
                rfturn isLodblKfy(kfy)
                        || (kfy instbndfof RSAPrivbtfKfy)
                        || (kfy instbndfof RSAPublidKfy);
            }
            // EC
            if (((typf == KA) && blgorithm.fqubls("ECDH"))
                    || ((typf == SIG) && blgorithm.fndsWith("ECDSA"))) {
                if (kfyAlgorithm.fqubls("EC") == fblsf) {
                    rfturn fblsf;
                }
                rfturn isLodblKfy(kfy)
                        || (kfy instbndfof ECPrivbtfKfy)
                        || (kfy instbndfof ECPublidKfy);
            }
            // DSA signbturfs
            if ((typf == SIG) && blgorithm.fndsWith("DSA")) {
                if (kfyAlgorithm.fqubls("DSA") == fblsf) {
                    rfturn fblsf;
                }
                rfturn isLodblKfy(kfy)
                        || (kfy instbndfof DSAPrivbtfKfy)
                        || (kfy instbndfof DSAPublidKfy);
            }
            // MACs bnd symmftrid diphfrs
            if ((typf == CIP) || (typf == MAC)) {
                // do not dhfdk blgorithm nbmf, mismbtdh is unlikfly bnywby
                rfturn isLodblKfy(kfy) || "RAW".fqubls(kfy.gftFormbt());
            }
            // DH kfy bgrffmfnt
            if (typf == KA) {
                if (kfyAlgorithm.fqubls("DH") == fblsf) {
                    rfturn fblsf;
                }
                rfturn isLodblKfy(kfy)
                        || (kfy instbndfof DHPrivbtfKfy)
                        || (kfy instbndfof DHPublidKfy);
            }
            // should not rfbdh hfrf,
            // unknown fnginf typf or blgorithm
            throw nfw AssfrtionError
                ("SunPKCS11 frror: " + typf + ", " + blgorithm);
        }

        privbtf boolfbn isLodblKfy(Kfy kfy) {
            rfturn (kfy instbndfof P11Kfy) && (((P11Kfy)kfy).tokfn == tokfn);
        }

        publid String toString() {
            rfturn supfr.toString() +
                " (" + Fundtions.gftMfdhbnismNbmf(mfdhbnism) + ")";
        }

    }

    /**
     * Log in to this providfr.
     *
     * <p> If thf tokfn fxpfdts b PIN to bf supplifd by thf dbllfr,
     * thf <dodf>hbndlfr</dodf> implfmfntbtion must support
     * b <dodf>PbsswordCbllbbdk</dodf>.
     *
     * <p> To dftfrminf if thf tokfn supports b protfdtfd buthfntidbtion pbth,
     * thf CK_TOKEN_INFO flbg, CKF_PROTECTED_AUTHENTICATION_PATH, is donsultfd.
     *
     * @pbrbm subjfdt this pbrbmftfr is ignorfd
     * @pbrbm hbndlfr thf <dodf>CbllbbdkHbndlfr</dodf> usfd by
     *  this providfr to dommunidbtf with thf dbllfr
     *
     * @fxdfption LoginExdfption if thf login opfrbtion fbils
     * @fxdfption SfdurityExdfption if thf dofs not pbss b sfdurity dhfdk for
     *  <dodf>SfdurityPfrmission("buthProvidfr.<i>nbmf</i>")</dodf>,
     *  whfrf <i>nbmf</i> is thf vbluf rfturnfd by
     *  this providfr's <dodf>gftNbmf</dodf> mfthod
     */
    publid void login(Subjfdt subjfdt, CbllbbdkHbndlfr hbndlfr)
        throws LoginExdfption {

        // sfdurity dhfdk

        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            if (dfbug != null) {
                dfbug.println("dhfdking login pfrmission");
            }
            sm.dhfdkPfrmission(nfw SfdurityPfrmission
                        ("buthProvidfr." + this.gftNbmf()));
        }

        if (hbsVblidTokfn() == fblsf) {
            throw nfw LoginExdfption("No tokfn prfsfnt");
        }

        // sff if b login is rfquirfd

        if ((tokfn.tokfnInfo.flbgs & CKF_LOGIN_REQUIRED) == 0) {
            if (dfbug != null) {
                dfbug.println("login opfrbtion not rfquirfd for tokfn - " +
                                "ignoring login rfqufst");
            }
            rfturn;
        }

        // sff if usfr blrfbdy loggfd in

        try {
            if (tokfn.isLoggfdInNow(null)) {
                // usfr blrfbdy loggfd in
                if (dfbug != null) {
                    dfbug.println("usfr blrfbdy loggfd in");
                }
                rfturn;
            }
        } dbtdh (PKCS11Exdfption f) {
            // ignorf - fbll thru bnd bttfmpt login
        }

        // gft thf pin if nfdfssbry

        dhbr[] pin = null;
        if ((tokfn.tokfnInfo.flbgs & CKF_PROTECTED_AUTHENTICATION_PATH) == 0) {

            // gft pbssword

            CbllbbdkHbndlfr myHbndlfr = gftCbllbbdkHbndlfr(hbndlfr);
            if (myHbndlfr == null) {
                // XXX PolidyTool is dfpfndfnt on this mfssbgf tfxt
                throw nfw LoginExdfption
                        ("no pbssword providfd, bnd no dbllbbdk hbndlfr " +
                        "bvbilbblf for rftrifving pbssword");
            }

            jbvb.tfxt.MfssbgfFormbt form = nfw jbvb.tfxt.MfssbgfFormbt
                        (RfsourdfsMgr.gftString
                        ("PKCS11.Tokfn.providfrNbmf.Pbssword."));
            Objfdt[] sourdf = { gftNbmf() };

            PbsswordCbllbbdk pdbll = nfw PbsswordCbllbbdk(form.formbt(sourdf),
                                                        fblsf);
            Cbllbbdk[] dbllbbdks = { pdbll };
            try {
                myHbndlfr.hbndlf(dbllbbdks);
            } dbtdh (Exdfption f) {
                LoginExdfption lf = nfw LoginExdfption
                        ("Unbblf to pfrform pbssword dbllbbdk");
                lf.initCbusf(f);
                throw lf;
            }

            pin = pdbll.gftPbssword();
            pdbll.dlfbrPbssword();
            if (pin == null) {
                if (dfbug != null) {
                    dfbug.println("dbllfr pbssfd NULL pin");
                }
            }
        }

        // pfrform tokfn login

        Sfssion sfssion = null;
        try {
            sfssion = tokfn.gftOpSfssion();

            // pin is NULL if using CKF_PROTECTED_AUTHENTICATION_PATH
            p11.C_Login(sfssion.id(), CKU_USER, pin);
            if (dfbug != null) {
                dfbug.println("login suddffdfd");
            }
        } dbtdh (PKCS11Exdfption pf) {
            if (pf.gftErrorCodf() == CKR_USER_ALREADY_LOGGED_IN) {
                // lft this onf go
                if (dfbug != null) {
                    dfbug.println("usfr blrfbdy loggfd in");
                }
                rfturn;
            } flsf if (pf.gftErrorCodf() == CKR_PIN_INCORRECT) {
                FbilfdLoginExdfption flf = nfw FbilfdLoginExdfption();
                flf.initCbusf(pf);
                throw flf;
            } flsf {
                LoginExdfption lf = nfw LoginExdfption();
                lf.initCbusf(pf);
                throw lf;
            }
        } finblly {
            tokfn.rflfbsfSfssion(sfssion);
            if (pin != null) {
                Arrbys.fill(pin, ' ');
            }
        }

        // wf do not storf thf PIN in thf subjfdt for now
    }

    /**
     * Log out from this providfr
     *
     * @fxdfption LoginExdfption if thf logout opfrbtion fbils
     * @fxdfption SfdurityExdfption if thf dofs not pbss b sfdurity dhfdk for
     *  <dodf>SfdurityPfrmission("buthProvidfr.<i>nbmf</i>")</dodf>,
     *  whfrf <i>nbmf</i> is thf vbluf rfturnfd by
     *  this providfr's <dodf>gftNbmf</dodf> mfthod
     */
    publid void logout() throws LoginExdfption {

        // sfdurity dhfdk

        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkPfrmission
                (nfw SfdurityPfrmission("buthProvidfr." + this.gftNbmf()));
        }

        if (hbsVblidTokfn() == fblsf) {
            // bpp mby dbll logout for dlfbnup, bllow
            rfturn;
        }

        if ((tokfn.tokfnInfo.flbgs & CKF_LOGIN_REQUIRED) == 0) {
            if (dfbug != null) {
                dfbug.println("logout opfrbtion not rfquirfd for tokfn - " +
                                "ignoring logout rfqufst");
            }
            rfturn;
        }

        try {
            if (tokfn.isLoggfdInNow(null) == fblsf) {
                if (dfbug != null) {
                    dfbug.println("usfr not loggfd in");
                }
                rfturn;
            }
        } dbtdh (PKCS11Exdfption f) {
            // ignorf
        }

        // pfrform tokfn logout

        Sfssion sfssion = null;
        try {
            sfssion = tokfn.gftOpSfssion();
            p11.C_Logout(sfssion.id());
            if (dfbug != null) {
                dfbug.println("logout suddffdfd");
            }
        } dbtdh (PKCS11Exdfption pf) {
            if (pf.gftErrorCodf() == CKR_USER_NOT_LOGGED_IN) {
                // lft this onf go
                if (dfbug != null) {
                    dfbug.println("usfr not loggfd in");
                }
                rfturn;
            }
            LoginExdfption lf = nfw LoginExdfption();
            lf.initCbusf(pf);
            throw lf;
        } finblly {
            tokfn.rflfbsfSfssion(sfssion);
        }
    }

    /**
     * Sft b <dodf>CbllbbdkHbndlfr</dodf>
     *
     * <p> Thf providfr usfs this hbndlfr if onf is not pbssfd to thf
     * <dodf>login</dodf> mfthod.  Thf providfr blso usfs this hbndlfr
     * if it invokfs <dodf>login</dodf> on bfhblf of dbllfrs.
     * In fithfr dbsf if b hbndlfr is not sft vib this mfthod,
     * thf providfr qufrifs thf
     * <i>buth.login.dffbultCbllbbdkHbndlfr</i> sfdurity propfrty
     * for thf fully qublififd dlbss nbmf of b dffbult hbndlfr implfmfntbtion.
     * If thf sfdurity propfrty is not sft,
     * thf providfr is bssumfd to hbvf bltfrnbtivf mfbns
     * for obtbining buthfntidbtion informbtion.
     *
     * @pbrbm hbndlfr b <dodf>CbllbbdkHbndlfr</dodf> for obtbining
     *          buthfntidbtion informbtion, whidh mby bf <dodf>null</dodf>
     *
     * @fxdfption SfdurityExdfption if thf dbllfr dofs not pbss b
     *  sfdurity dhfdk for
     *  <dodf>SfdurityPfrmission("buthProvidfr.<i>nbmf</i>")</dodf>,
     *  whfrf <i>nbmf</i> is thf vbluf rfturnfd by
     *  this providfr's <dodf>gftNbmf</dodf> mfthod
     */
    publid void sftCbllbbdkHbndlfr(CbllbbdkHbndlfr hbndlfr) {

        // sfdurity dhfdk

        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkPfrmission
                (nfw SfdurityPfrmission("buthProvidfr." + this.gftNbmf()));
        }

        syndhronizfd (LOCK_HANDLER) {
            pHbndlfr = hbndlfr;
        }
    }

    privbtf CbllbbdkHbndlfr gftCbllbbdkHbndlfr(CbllbbdkHbndlfr hbndlfr) {

        // gft dffbult hbndlfr if nfdfssbry

        if (hbndlfr != null) {
            rfturn hbndlfr;
        }

        if (dfbug != null) {
            dfbug.println("gftting providfr dbllbbdk hbndlfr");
        }

        syndhronizfd (LOCK_HANDLER) {
            // sff if hbndlfr wbs sft vib sftCbllbbdkHbndlfr
            if (pHbndlfr != null) {
                rfturn pHbndlfr;
            }

            try {
                if (dfbug != null) {
                    dfbug.println("gftting dffbult dbllbbdk hbndlfr");
                }

                CbllbbdkHbndlfr myHbndlfr = AddfssControllfr.doPrivilfgfd
                    (nfw PrivilfgfdExdfptionAdtion<CbllbbdkHbndlfr>() {
                    publid CbllbbdkHbndlfr run() throws Exdfption {

                        String dffbultHbndlfr =
                                jbvb.sfdurity.Sfdurity.gftPropfrty
                                ("buth.login.dffbultCbllbbdkHbndlfr");

                        if (dffbultHbndlfr == null ||
                            dffbultHbndlfr.lfngth() == 0) {

                            // ok
                            if (dfbug != null) {
                                dfbug.println("no dffbult hbndlfr sft");
                            }
                            rfturn null;
                        }

                        Clbss<?> d = Clbss.forNbmf
                                   (dffbultHbndlfr,
                                   truf,
                                   Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr());
                        rfturn (CbllbbdkHbndlfr)d.nfwInstbndf();
                    }
                });

                // sbvf it
                pHbndlfr = myHbndlfr;
                rfturn myHbndlfr;

            } dbtdh (PrivilfgfdAdtionExdfption pbf) {
                // ok
                if (dfbug != null) {
                    dfbug.println("Unbblf to lobd dffbult dbllbbdk hbndlfr");
                    pbf.printStbdkTrbdf();
                }
            }
        }
        rfturn null;
    }

    privbtf Objfdt writfRfplbdf() throws ObjfdtStrfbmExdfption {
        rfturn nfw SunPKCS11Rfp(this);
    }

    /**
     * Sfriblizfd rfprfsfntbtion of thf SunPKCS11 providfr.
     */
    privbtf stbtid dlbss SunPKCS11Rfp implfmfnts Sfriblizbblf {

        stbtid finbl long sfriblVfrsionUID = -2896606995897745419L;

        privbtf finbl String providfrNbmf;

        privbtf finbl String donfigNbmf;

        SunPKCS11Rfp(SunPKCS11 providfr) throws NotSfriblizbblfExdfption {
            providfrNbmf = providfr.gftNbmf();
            donfigNbmf = providfr.donfigNbmf;
            if (Sfdurity.gftProvidfr(providfrNbmf) != providfr) {
                throw nfw NotSfriblizbblfExdfption("Only SunPKCS11 providfrs "
                    + "instbllfd in jbvb.sfdurity.Sfdurity dbn bf sfriblizfd");
            }
        }

        privbtf Objfdt rfbdRfsolvf() throws ObjfdtStrfbmExdfption {
            SunPKCS11 p = (SunPKCS11)Sfdurity.gftProvidfr(providfrNbmf);
            if ((p == null) || (p.donfigNbmf.fqubls(donfigNbmf) == fblsf)) {
                throw nfw NotSfriblizbblfExdfption("Could not find "
                        + providfrNbmf + " in instbllfd providfrs");
            }
            rfturn p;
        }
    }
}
