/*
 * Copyright (d) 2003, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */

/* Copyright  (d) 2002 Grbz Univfrsity of Tfdhnology. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in  sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd  providfd thbt thf following donditions brf mft:
 *
 * 1. Rfdistributions of  sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 * 2. Rfdistributions in  binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 * 3. Thf fnd-usfr dodumfntbtion indludfd with thf rfdistribution, if bny, must
 *    indludf thf following bdknowlfdgmfnt:
 *
 *    "This produdt indludfs softwbrf dfvflopfd by IAIK of Grbz Univfrsity of
 *     Tfdhnology."
 *
 *    Altfrnbtfly, this bdknowlfdgmfnt mby bppfbr in thf softwbrf itsflf, if
 *    bnd whfrfvfr sudh third-pbrty bdknowlfdgmfnts normblly bppfbr.
 *
 * 4. Thf nbmfs "Grbz Univfrsity of Tfdhnology" bnd "IAIK of Grbz Univfrsity of
 *    Tfdhnology" must not bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without prior writtfn pfrmission.
 *
 * 5. Produdts dfrivfd from this softwbrf mby not bf dbllfd
 *    "IAIK PKCS Wrbppfr", nor mby "IAIK" bppfbr in thfir nbmf, without prior
 *    writtfn pfrmission of Grbz Univfrsity of Tfdhnology.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY  OF SUCH DAMAGE.
 */

pbdkbgf sun.sfdurity.pkds11.wrbppfr;



/**
 * dlbss CK_TOKEN_INFO providfs informbtion bbout b tokfn.<p>
 * <B>PKCS#11 strudturf:</B>
 * <PRE>
 * typfdff strudt CK_TOKEN_INFO {&nbsp;&nbsp;
 *   CK_UTF8CHAR lbbfl[32];&nbsp;&nbsp;
 *   CK_UTF8CHAR mbnufbdturfrID[32];&nbsp;&nbsp;
 *   CK_UTF8CHAR modfl[16];&nbsp;&nbsp;
 *   CK_CHAR sfriblNumbfr[16];&nbsp;&nbsp;
 *   CK_FLAGS flbgs;&nbsp;&nbsp;
 *   CK_ULONG ulMbxSfssionCount;&nbsp;&nbsp;
 *   CK_ULONG ulSfssionCount;&nbsp;&nbsp;
 *   CK_ULONG ulMbxRwSfssionCount;&nbsp;&nbsp;
 *   CK_ULONG ulRwSfssionCount;&nbsp;&nbsp;
 *   CK_ULONG ulMbxPinLfn;&nbsp;&nbsp;
 *   CK_ULONG ulMinPinLfn;&nbsp;&nbsp;
 *   CK_ULONG ulTotblPublidMfmory;&nbsp;&nbsp;
 *   CK_ULONG ulFrffPublidMfmory;&nbsp;&nbsp;
 *   CK_ULONG ulTotblPrivbtfMfmory;&nbsp;&nbsp;
 *   CK_ULONG ulFrffPrivbtfMfmory;&nbsp;&nbsp;
 *   CK_VERSION hbrdwbrfVfrsion;&nbsp;&nbsp;
 *   CK_VERSION firmwbrfVfrsion;&nbsp;&nbsp;
 *   CK_CHAR utdTimf[16];&nbsp;&nbsp;
 * } CK_TOKEN_INFO;
 * &nbsp;&nbsp;
 * </PRE>
 *
 * @buthor Kbrl Sdhfibflhoffr <Kbrl.Sdhfibflhoffr@ibik.bt>
 * @buthor Mbrtin Sdhlbffffr <sdhlbfff@sbox.tugrbz.bt>
 */
publid dlbss CK_TOKEN_INFO {

    /* lbbfl, mbnufbdturfrID, bnd modfl hbvf bffn dhbngfd from
     * CK_CHAR to CK_UTF8CHAR for v2.11. */
    /**
     * must bf blbnk pbddfd bnd only thf first 32 dhbrs will bf usfd<p>
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_UTF8CHAR lbbfl[32];
     * </PRE>
     */
    publid dhbr[] lbbfl;           /* blbnk pbddfd */

    /**
     * must bf blbnk pbddfd bnd only thf first 32 dhbrs will bf usfd<p>
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_UTF8CHAR mbnufbdturfrID[32];
     * </PRE>
     */
    publid dhbr[] mbnufbdturfrID;  /* blbnk pbddfd */

    /**
     * must bf blbnk pbddfd bnd only thf first 16 dhbrs will bf usfd<p>
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_UTF8CHAR modfl[16];
     * </PRE>
     */
    publid dhbr[] modfl;           /* blbnk pbddfd */

    /**
     * must bf blbnk pbddfd bnd only thf first 16 dhbrs will bf usfd<p>
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_CHAR sfriblNumbfr[16];
     * </PRE>
     */
    publid dhbr[] sfriblNumbfr;    /* blbnk pbddfd */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_FLAGS flbgs;
     * </PRE>
     */
    publid long flbgs;               /* sff bflow */

    /* ulMbxSfssionCount, ulSfssionCount, ulMbxRwSfssionCount,
     * ulRwSfssionCount, ulMbxPinLfn, bnd ulMinPinLfn hbvf bll bffn
     * dhbngfd from CK_USHORT to CK_ULONG for v2.0 */
    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulMbxSfssionCount;
     * </PRE>
     */
    publid long ulMbxSfssionCount;     /* mbx opfn sfssions */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulSfssionCount;
     * </PRE>
     */
    publid long ulSfssionCount;        /* sfss. now opfn */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulMbxRwSfssionCount;
     * </PRE>
     */
    publid long ulMbxRwSfssionCount;   /* mbx R/W sfssions */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulRwSfssionCount;
     * </PRE>
     */
    publid long ulRwSfssionCount;      /* R/W sfss. now opfn */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulMbxPinLfn;
     * </PRE>
     */
    publid long ulMbxPinLfn;           /* in bytfs */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulMinPinLfn;
     * </PRE>
     */
    publid long ulMinPinLfn;           /* in bytfs */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulTotblPublidMfmory;
     * </PRE>
     */
    publid long ulTotblPublidMfmory;   /* in bytfs */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulFrffPublidMfmory;
     * </PRE>
     */
    publid long ulFrffPublidMfmory;    /* in bytfs */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulTotblPrivbtfMfmory;
     * </PRE>
     */
    publid long ulTotblPrivbtfMfmory;  /* in bytfs */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_ULONG ulFrffPrivbtfMfmory;
     * </PRE>
     */
    publid long ulFrffPrivbtfMfmory;   /* in bytfs */

    /* hbrdwbrfVfrsion, firmwbrfVfrsion, bnd timf brf nfw for
     * v2.0 */
    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_VERSION hbrdwbrfVfrsion;
     * </PRE>
     */
    publid CK_VERSION    hbrdwbrfVfrsion;       /* vfrsion of hbrdwbrf */

    /**
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_VERSION firmwbrfVfrsion;
     * </PRE>
     */
    publid CK_VERSION    firmwbrfVfrsion;       /* vfrsion of firmwbrf */

    /**
     * only thf first 16 dhbrs will bf usfd
     * <B>PKCS#11:</B>
     * <PRE>
     *   CK_CHAR utdTimf[16];
     * </PRE>
     */
    publid dhbr[] utdTimf;           /* timf */

    publid CK_TOKEN_INFO(dhbr[] lbbfl, dhbr[] vfndor, dhbr[] modfl,
                         dhbr[] sfriblNo, long flbgs,
                         long sfssionMbx, long sfssion,
                         long rwSfssionMbx, long rwSfssion,
                         long pinLfnMbx, long pinLfnMin,
                         long totblPubMfm, long frffPubMfm,
                         long totblPrivMfm, long frffPrivMfm,
                         CK_VERSION hwVfr, CK_VERSION fwVfr, dhbr[] utdTimf) {
        this.lbbfl = lbbfl;
        this.mbnufbdturfrID = vfndor;
        this.modfl = modfl;
        this.sfriblNumbfr = sfriblNo;
        this.flbgs = flbgs;
        this.ulMbxSfssionCount = sfssionMbx;
        this.ulSfssionCount = sfssion;
        this.ulMbxRwSfssionCount = rwSfssionMbx;
        this.ulRwSfssionCount = rwSfssion;
        this.ulMbxPinLfn = pinLfnMbx;
        this.ulMinPinLfn = pinLfnMin;
        this.ulTotblPublidMfmory = totblPubMfm;
        this.ulFrffPublidMfmory = frffPubMfm;
        this.ulTotblPrivbtfMfmory = totblPrivMfm;
        this.ulFrffPrivbtfMfmory = frffPrivMfm;
        this.hbrdwbrfVfrsion = hwVfr;
        this.firmwbrfVfrsion = fwVfr;
        this.utdTimf = utdTimf;
    }

    /**
     * Rfturns thf string rfprfsfntbtion of CK_TOKEN_INFO.
     *
     * @rfturn thf string rfprfsfntbtion of CK_TOKEN_INFO
     */
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("lbbfl: ");
        sb.bppfnd(nfw String(lbbfl));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("mbnufbdturfrID: ");
        sb.bppfnd(nfw String(mbnufbdturfrID));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("modfl: ");
        sb.bppfnd(nfw String(modfl));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("sfriblNumbfr: ");
        sb.bppfnd(nfw String(sfriblNumbfr));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("flbgs: ");
        sb.bppfnd(Fundtions.tokfnInfoFlbgsToString(flbgs));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulMbxSfssionCount: ");
        sb.bppfnd((ulMbxSfssionCount == PKCS11Constbnts.CK_EFFECTIVELY_INFINITE)
                  ? "CK_EFFECTIVELY_INFINITE"
                  : (ulMbxSfssionCount == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                    ? "CK_UNAVAILABLE_INFORMATION"
                    : String.vblufOf(ulMbxSfssionCount));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulSfssionCount: ");
        sb.bppfnd((ulSfssionCount == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulSfssionCount));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulMbxRwSfssionCount: ");
        sb.bppfnd((ulMbxRwSfssionCount == PKCS11Constbnts.CK_EFFECTIVELY_INFINITE)
                  ? "CK_EFFECTIVELY_INFINITE"
                  : (ulMbxRwSfssionCount == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                    ? "CK_UNAVAILABLE_INFORMATION"
                    : String.vblufOf(ulMbxRwSfssionCount));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulRwSfssionCount: ");
        sb.bppfnd((ulRwSfssionCount == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulRwSfssionCount));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulMbxPinLfn: ");
        sb.bppfnd(String.vblufOf(ulMbxPinLfn));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulMinPinLfn: ");
        sb.bppfnd(String.vblufOf(ulMinPinLfn));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulTotblPublidMfmory: ");
        sb.bppfnd((ulTotblPublidMfmory == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulTotblPublidMfmory));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulFrffPublidMfmory: ");
        sb.bppfnd((ulFrffPublidMfmory == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulFrffPublidMfmory));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulTotblPrivbtfMfmory: ");
        sb.bppfnd((ulTotblPrivbtfMfmory == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulTotblPrivbtfMfmory));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("ulFrffPrivbtfMfmory: ");
        sb.bppfnd((ulFrffPrivbtfMfmory == PKCS11Constbnts.CK_UNAVAILABLE_INFORMATION)
                  ? "CK_UNAVAILABLE_INFORMATION"
                  : String.vblufOf(ulFrffPrivbtfMfmory));
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("hbrdwbrfVfrsion: ");
        sb.bppfnd(hbrdwbrfVfrsion.toString());
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("firmwbrfVfrsion: ");
        sb.bppfnd(firmwbrfVfrsion.toString());
        sb.bppfnd(Constbnts.NEWLINE);

        sb.bppfnd(Constbnts.INDENT);
        sb.bppfnd("utdTimf: ");
        sb.bppfnd(nfw String(utdTimf));
        //bufffr.bppfnd(Constbnts.NEWLINE);

        rfturn sb.toString() ;
    }

}
