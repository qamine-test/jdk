/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */

/* Copyright  (d) 2002 Grbz Univfrsity of Tfdhnology. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in  sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd  providfd thbt thf following donditions brf mft:
 *
 * 1. Rfdistributions of  sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 * 2. Rfdistributions in  binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 * 3. Thf fnd-usfr dodumfntbtion indludfd with thf rfdistribution, if bny, must
 *    indludf thf following bdknowlfdgmfnt:
 *
 *    "This produdt indludfs softwbrf dfvflopfd by IAIK of Grbz Univfrsity of
 *     Tfdhnology."
 *
 *    Altfrnbtfly, this bdknowlfdgmfnt mby bppfbr in thf softwbrf itsflf, if
 *    bnd whfrfvfr sudh third-pbrty bdknowlfdgmfnts normblly bppfbr.
 *
 * 4. Thf nbmfs "Grbz Univfrsity of Tfdhnology" bnd "IAIK of Grbz Univfrsity of
 *    Tfdhnology" must not bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without prior writtfn pfrmission.
 *
 * 5. Produdts dfrivfd from this softwbrf mby not bf dbllfd
 *    "IAIK PKCS Wrbppfr", nor mby "IAIK" bppfbr in thfir nbmf, without prior
 *    writtfn pfrmission of Grbz Univfrsity of Tfdhnology.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY  OF SUCH DAMAGE.
 */

#indludf "pkds11wrbppfr.h"

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <string.h>
#indludf <bssfrt.h>

#indludf "sun_sfdurity_pkds11_wrbppfr_PKCS11.h"

/* dfdlbrf filf privbtf fundtions */

void prffftdhFiflds(JNIEnv *fnv, jdlbss thisClbss);
jobjfdt dkInfoPtrToJInfo(JNIEnv *fnv, donst CK_INFO_PTR dkpInfo);
jobjfdt dkSlotInfoPtrToJSlotInfo(JNIEnv *fnv, donst CK_SLOT_INFO_PTR dkpSlotInfo);
jobjfdt dkTokfnInfoPtrToJTokfnInfo(JNIEnv *fnv, donst CK_TOKEN_INFO_PTR dkpTokfnInfo);
jobjfdt dkMfdhbnismInfoPtrToJMfdhbnismInfo(JNIEnv *fnv, donst CK_MECHANISM_INFO_PTR dkpMfdhbnismInfo);

/* dffinf vbribblfs */

jfifldID pNbtivfDbtbID;
jfifldID mfdh_mfdhbnismID;
jfifldID mfdh_pPbrbmftfrID;

jdlbss jBytfArrbyClbss;
jdlbss jLongClbss;

JbvbVM* jvm = NULL;

JNIEXPORT jint JNICALL JNI_OnLobd(JbvbVM *vm, void *rfsfrvfd) {
    jvm = vm;
    rfturn JNI_VERSION_1_4;
}

/* ************************************************************************** */
/* Thf nbtivf implfmfntbtion of thf mfthods of thf PKCS11Implfmfntbtion dlbss */
/* ************************************************************************** */

/*
 * This mfthod is usfd to do stbtid initiblizbtion. This mfthod is stbtid bnd
 * syndhronizfd. Summbry: usf this mfthod likf b stbtid initiblizbtion blodk.
 *
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    initiblizfLibrbry
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_initiblizfLibrbry
(JNIEnv *fnv, jdlbss thisClbss)
{
#ifndff NO_CALLBACKS
    if (notifyListLodk == NULL) {
        notifyListLodk = drfbtfLodkObjfdt(fnv);
    }
#fndif

    prffftdhFiflds(fnv, thisClbss);
}

jdlbss fftdhClbss(JNIEnv *fnv, donst dhbr *nbmf) {
    jdlbss tmpClbss = (*fnv)->FindClbss(fnv, nbmf);
    if (tmpClbss == NULL) { rfturn NULL; }
    rfturn (*fnv)->NfwGlobblRff(fnv, tmpClbss);
}

void prffftdhFiflds(JNIEnv *fnv, jdlbss thisClbss) {
    jdlbss tmpClbss;

    /* PKCS11 */
    pNbtivfDbtbID = (*fnv)->GftFifldID(fnv, thisClbss, "pNbtivfDbtb", "J");
    if (pNbtivfDbtbID == NULL) { rfturn; }

    /* CK_MECHANISM */
    tmpClbss = (*fnv)->FindClbss(fnv, CLASS_MECHANISM);
    if (tmpClbss == NULL) { rfturn; }
    mfdh_mfdhbnismID = (*fnv)->GftFifldID(fnv, tmpClbss, "mfdhbnism", "J");
    if (mfdh_mfdhbnismID == NULL) { rfturn; }
    mfdh_pPbrbmftfrID = (*fnv)->GftFifldID(fnv, tmpClbss, "pPbrbmftfr",
                                           "Ljbvb/lbng/Objfdt;");
    if (mfdh_pPbrbmftfrID == NULL) { rfturn; }
    jBytfArrbyClbss = fftdhClbss(fnv, "[B");
    if (jBytfArrbyClbss == NULL) { rfturn; }
    jLongClbss = fftdhClbss(fnv, "jbvb/lbng/Long");
}

/* This mfthod is dfsignfd to do b dlfbn-up. It rflfbsfs bll globbl rfsourdfs
 * of this librbry. By now, this fundtion is not dbllfd. Cblling from
 * JNI_OnUnlobd would bf bn option, but somf VMs do not support JNI_OnUnlobd.
 *
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    finblizfLibrbry
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_finblizfLibrbry
(JNIEnv *fnv, jdlbss thisClbss)
{
/* XXX
    * rfmovf bll lfft lists bnd rflfbsf thf rfsourdfs bnd thf lodk
     * objfdts thbt syndhroniz bddfss to thfsf lists.
     *
    rfmovfAllModulfEntrifs(fnv);
    if (modulfListHfbd == NULL) { * dhfdk, if wf rfmovfd thf lbst bdtivf modulf *
        * rfmovf blso thf modulfListLodk, it is no longfr usfd *
        if (modulfListLodk != NULL) {
            dfstroyLodkObjfdt(fnv, modulfListLodk);
            modulfListLodk = NULL;
        }
#ifndff NO_CALLBACKS
        * rfmovf bll lfft notify dbllbbdk fntrifs *
        whilf (rfmovfFirstNotifyEntry(fnv));
        * rfmovf blso thf notifyListLodk, it is no longfr usfd *
        if (notifyListLodk != NULL) {
            dfstroyLodkObjfdt(fnv, notifyListLodk);
            notifyListLodk = NULL;
        }
        if (jInitArgsObjfdt != NULL) {
            (*fnv)->DflftfGlobblRff(fnv, jInitArgsObjfdt);
        }
        if (dkpGlobblInitArgs != NULL_PTR) {
            frff(dkpGlobblInitArgs);
        }
#fndif * NO_CALLBACKS *
    }
*/
}

#ifdff P11_ENABLE_C_INITIALIZE
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_Initiblizf
 * Signbturf: (Ljbvb/lbng/Objfdt;)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jobjfdt jInitArgs           CK_VOID_PTR pInitArgs
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1Initiblizf
(JNIEnv *fnv, jobjfdt obj, jobjfdt jInitArgs)
{
    /*
     * Initblizf Cryptoki
     */
    CK_C_INITIALIZE_ARGS_PTR dkpInitArgs;
    CK_RV rv;
    CK_FUNCTION_LIST_PTR dkpFundtions;

    TRACE0("DEBUG: initiblizing modulf... ");

    dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) {
        TRACE0("fbilfd gftting modulf fntry");
        rfturn;
    }

    dkpInitArgs = (jInitArgs != NULL)
                ? mbkfCKInitArgsAdbptfr(fnv, jInitArgs)
                : NULL_PTR;

    rv = (*dkpFundtions->C_Initiblizf)(dkpInitArgs);

    frff(dkpInitArgs);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }

    TRACE0("FINISHED\n");
}
#fndif

#ifdff P11_ENABLE_C_FINALIZE
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_Finblizf
 * Signbturf: (Ljbvb/lbng/Objfdt;)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jobjfdt jRfsfrvfd           CK_VOID_PTR pRfsfrvfd
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1Finblizf
(JNIEnv *fnv, jobjfdt obj, jobjfdt jRfsfrvfd)
{
    /*
     * Finblizf Cryptoki
     */
    CK_VOID_PTR dkpRfsfrvfd;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkpRfsfrvfd = jObjfdtToCKVoidPtr(jRfsfrvfd);

    rv = (*dkpFundtions->C_Finblizf)(dkpRfsfrvfd);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

#ifdff P11_ENABLE_C_GETINFO
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftInfo
 * Signbturf: ()Lsun/sfdurity/pkds11/wrbppfr/CK_INFO;
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @rfturn  jobjfdt jInfoObjfdt         CK_INFO_PTR pInfo
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftInfo
(JNIEnv *fnv, jobjfdt obj)
{
    CK_INFO dkLibInfo;
    jobjfdt jInfoObjfdt=NULL;
    CK_RV rv;
    CK_FUNCTION_LIST_PTR dkpFundtions;
    mfmsft(&dkLibInfo, 0, sizfof(CK_INFO));

    dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    rv = (*dkpFundtions->C_GftInfo)(&dkLibInfo);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jInfoObjfdt = dkInfoPtrToJInfo(fnv, &dkLibInfo);
    }
    rfturn jInfoObjfdt ;
}

/*
 * donvfrts b pointfr to b CK_INFO strudturf into b Jbvb CK_INFO Objfdt.
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to drfbtf thf nfw Jbvb objfdt
 * @pbrbm dkpInfo - thf pointfr to thf CK_INFO strudturf
 * @rfturn - thf nfw Jbvb CK_INFO objfdt
 */
jobjfdt dkInfoPtrToJInfo(JNIEnv *fnv, donst CK_INFO_PTR dkpInfo)
{
    jdlbss jInfoClbss;
    jmfthodID jCtrId;
    jobjfdt jInfoObjfdt;
    jobjfdt jCryptokiVfr;
    jdhbrArrby jVfndor;
    jlong jFlbgs;
    jdhbrArrby jLibrbryDfsd;
    jobjfdt jLibrbryVfr;

    /* lobd CK_INFO dlbss */
    jInfoClbss = (*fnv)->FindClbss(fnv, CLASS_INFO);
    if (jInfoClbss == NULL) { rfturn NULL; };

    /* lobd CK_INFO donstrudtor */
    jCtrId = (*fnv)->GftMfthodID
      (fnv, jInfoClbss, "<init>",
       "(Lsun/sfdurity/pkds11/wrbppfr/CK_VERSION;[CJ[CLsun/sfdurity/pkds11/wrbppfr/CK_VERSION;)V");
    if (jCtrId == NULL) { rfturn NULL; }

    /* prfp bll fiflds */
    jCryptokiVfr = dkVfrsionPtrToJVfrsion(fnv, &(dkpInfo->dryptokiVfrsion));
    if (jCryptokiVfr == NULL) { rfturn NULL; }
    jVfndor =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpInfo->mbnufbdturfrID[0]), 32);
    if (jVfndor == NULL) { rfturn NULL; }
    jFlbgs = dkULongToJLong(dkpInfo->flbgs);
    jLibrbryDfsd =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpInfo->librbryDfsdription[0]), 32);
    if (jLibrbryDfsd == NULL) { rfturn NULL; }
    jLibrbryVfr = dkVfrsionPtrToJVfrsion(fnv, &(dkpInfo->librbryVfrsion));
    if (jLibrbryVfr == NULL) { rfturn NULL; }

    /* drfbtf nfw CK_INFO objfdt */
    jInfoObjfdt = (*fnv)->NfwObjfdt(fnv, jInfoClbss, jCtrId, jCryptokiVfr,
                                    jVfndor, jFlbgs, jLibrbryDfsd, jLibrbryVfr);
    if (jInfoObjfdt == NULL) { rfturn NULL; }

    /* frff lodbl rfffrfndfs */
    (*fnv)->DflftfLodblRff(fnv, jInfoClbss);
    (*fnv)->DflftfLodblRff(fnv, jCryptokiVfr);
    (*fnv)->DflftfLodblRff(fnv, jVfndor);
    (*fnv)->DflftfLodblRff(fnv, jLibrbryDfsd);
    (*fnv)->DflftfLodblRff(fnv, jLibrbryVfr);

    rfturn jInfoObjfdt ;
}
#fndif

#ifdff P11_ENABLE_C_GETSLOTLIST
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftSlotList
 * Signbturf: (Z)[J
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jboolfbn jTokfnPrfsfnt      CK_BBOOL tokfnPrfsfnt
 * @rfturn  jlongArrby jSlotList        CK_SLOT_ID_PTR pSlotList
 *                                      CK_ULONG_PTR pulCount
 */
JNIEXPORT jlongArrby JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftSlotList
(JNIEnv *fnv, jobjfdt obj, jboolfbn jTokfnPrfsfnt)
{
    CK_ULONG dkTokfnNumbfr;
    CK_SLOT_ID_PTR dkpSlotList;
    CK_BBOOL dkTokfnPrfsfnt;
    jlongArrby jSlotList = NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkTokfnPrfsfnt = jBoolfbnToCKBBool(jTokfnPrfsfnt);

    rv = (*dkpFundtions->C_GftSlotList)(dkTokfnPrfsfnt, NULL_PTR,
                                        &dkTokfnNumbfr);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn NULL ; }

    dkpSlotList = (CK_SLOT_ID_PTR) mbllod(dkTokfnNumbfr * sizfof(CK_SLOT_ID));
    if (dkpSlotList == NULL) {
        throwOutOfMfmoryError(fnv, 0);
        rfturn NULL;
    }

    rv = (*dkpFundtions->C_GftSlotList)(dkTokfnPrfsfnt, dkpSlotList,
                                        &dkTokfnNumbfr);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jSlotList = dkULongArrbyToJLongArrby(fnv, dkpSlotList, dkTokfnNumbfr);
    }
    frff(dkpSlotList);

    rfturn jSlotList ;
}
#fndif

#ifdff P11_ENABLE_C_GETSLOTINFO
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftSlotInfo
 * Signbturf: (J)Lsun/sfdurity/pkds11/wrbppfr/CK_SLOT_INFO;
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @rfturn  jobjfdt jSlotInfoObjfdt     CK_SLOT_INFO_PTR pInfo
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftSlotInfo
(JNIEnv *fnv, jobjfdt obj, jlong jSlotID)
{
    CK_SLOT_ID dkSlotID;
    CK_SLOT_INFO dkSlotInfo;
    jobjfdt jSlotInfoObjfdt=NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSlotID = jLongToCKULong(jSlotID);

    rv = (*dkpFundtions->C_GftSlotInfo)(dkSlotID, &dkSlotInfo);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jSlotInfoObjfdt = dkSlotInfoPtrToJSlotInfo(fnv, &dkSlotInfo);
    }
    rfturn jSlotInfoObjfdt;
}

/*
 * donvfrts b pointfr to b CK_SLOT_INFO strudturf into b Jbvb CK_SLOT_INFO
 * Objfdt.
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to drfbtf thf nfw Jbvb objfdt
 * @pbrbm dkpSlotInfo - thf pointfr to thf CK_SLOT_INFO strudturf
 * @rfturn - thf nfw Jbvb CK_SLOT_INFO objfdt
 */
jobjfdt
dkSlotInfoPtrToJSlotInfo
(JNIEnv *fnv, donst CK_SLOT_INFO_PTR dkpSlotInfo)
{
    jdlbss jSlotInfoClbss;
    jmfthodID jCtrId;
    jobjfdt jSlotInfoObjfdt;
    jdhbrArrby jSlotDfsd;
    jdhbrArrby jVfndor;
    jlong jFlbgs;
    jobjfdt jHbrdwbrfVfr;
    jobjfdt jFirmwbrfVfr;

    /* lobd CK_SLOT_INFO dlbss */
    jSlotInfoClbss = (*fnv)->FindClbss(fnv, CLASS_SLOT_INFO);
    if (jSlotInfoClbss == NULL) { rfturn NULL; };

    /* lobd CK_SLOT_INFO donstrudtor */
    jCtrId = (*fnv)->GftMfthodID
      (fnv, jSlotInfoClbss, "<init>",
       "([C[CJLsun/sfdurity/pkds11/wrbppfr/CK_VERSION;Lsun/sfdurity/pkds11/wrbppfr/CK_VERSION;)V");
    if (jCtrId == NULL) { rfturn NULL; }

    /* prfp bll fiflds */
    jSlotDfsd =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpSlotInfo->slotDfsdription[0]), 64);
    if (jSlotDfsd == NULL) { rfturn NULL; }
    jVfndor =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpSlotInfo->mbnufbdturfrID[0]), 32);
    if (jVfndor == NULL) { rfturn NULL; }
    jFlbgs = dkULongToJLong(dkpSlotInfo->flbgs);
    jHbrdwbrfVfr = dkVfrsionPtrToJVfrsion(fnv, &(dkpSlotInfo->hbrdwbrfVfrsion));
    if (jHbrdwbrfVfr == NULL) { rfturn NULL; }
    jFirmwbrfVfr = dkVfrsionPtrToJVfrsion(fnv, &(dkpSlotInfo->firmwbrfVfrsion));
    if (jFirmwbrfVfr == NULL) { rfturn NULL; }

    /* drfbtf nfw CK_SLOT_INFO objfdt */
    jSlotInfoObjfdt = (*fnv)->NfwObjfdt
      (fnv, jSlotInfoClbss, jCtrId, jSlotDfsd, jVfndor, jFlbgs,
       jHbrdwbrfVfr, jFirmwbrfVfr);
    if (jSlotInfoObjfdt == NULL) { rfturn NULL; }

    /* frff lodbl rfffrfndfs */
    (*fnv)->DflftfLodblRff(fnv, jSlotInfoClbss);
    (*fnv)->DflftfLodblRff(fnv, jSlotDfsd);
    (*fnv)->DflftfLodblRff(fnv, jVfndor);
    (*fnv)->DflftfLodblRff(fnv, jHbrdwbrfVfr);
    (*fnv)->DflftfLodblRff(fnv, jFirmwbrfVfr);

    rfturn jSlotInfoObjfdt ;
}

#fndif

#ifdff P11_ENABLE_C_GETTOKENINFO
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftTokfnInfo
 * Signbturf: (J)Lsun/sfdurity/pkds11/wrbppfr/CK_TOKEN_INFO;
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @rfturn  jobjfdt jInfoTokfnObjfdt    CK_TOKEN_INFO_PTR pInfo
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftTokfnInfo
(JNIEnv *fnv, jobjfdt obj, jlong jSlotID)
{
    CK_SLOT_ID dkSlotID;
    CK_TOKEN_INFO dkTokfnInfo;
    jobjfdt jInfoTokfnObjfdt = NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSlotID = jLongToCKULong(jSlotID);

    rv = (*dkpFundtions->C_GftTokfnInfo)(dkSlotID, &dkTokfnInfo);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jInfoTokfnObjfdt = dkTokfnInfoPtrToJTokfnInfo(fnv, &dkTokfnInfo);
    }
    rfturn jInfoTokfnObjfdt ;
}

/*
 * donvfrts b pointfr to b CK_TOKEN_INFO strudturf into b Jbvb CK_TOKEN_INFO
 * Objfdt.
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to drfbtf thf nfw Jbvb objfdt
 * @pbrbm dkpTokfnInfo - thf pointfr to thf CK_TOKEN_INFO strudturf
 * @rfturn - thf nfw Jbvb CK_TOKEN_INFO objfdt
 */
jobjfdt
dkTokfnInfoPtrToJTokfnInfo
(JNIEnv *fnv, donst CK_TOKEN_INFO_PTR dkpTokfnInfo)
{
    jdlbss jTokfnInfoClbss;
    jmfthodID jCtrId;
    jobjfdt jTokfnInfoObjfdt;
    jdhbrArrby jLbbfl;
    jdhbrArrby jVfndor;
    jdhbrArrby jModfl;
    jdhbrArrby jSfriblNo;
    jlong jFlbgs;
    jlong jMbxSnCnt;
    jlong jSnCnt;
    jlong jMbxRwSnCnt;
    jlong jRwSnCnt;
    jlong jMbxPinLfn;
    jlong jMinPinLfn;
    jlong jTotblPubMfm;
    jlong jFrffPubMfm;
    jlong jTotblPrivMfm;
    jlong jFrffPrivMfm;
    jobjfdt jHbrdwbrfVfr;
    jobjfdt jFirmwbrfVfr;
    jdhbrArrby jUtdTimf;

    /* lobd CK_TOKEN_INFO dlbss */
    jTokfnInfoClbss = (*fnv)->FindClbss(fnv, CLASS_TOKEN_INFO);
    if (jTokfnInfoClbss == NULL)  { rfturn NULL; };

    /* lobd CK_TOKEN_INFO donstrudtor */
    jCtrId = (*fnv)->GftMfthodID
      (fnv, jTokfnInfoClbss, "<init>",
       "([C[C[C[CJJJJJJJJJJJLsun/sfdurity/pkds11/wrbppfr/CK_VERSION;Lsun/sfdurity/pkds11/wrbppfr/CK_VERSION;[C)V");
    if (jCtrId == NULL)  { rfturn NULL; };

    /* prfp bll fiflds */
    jLbbfl = dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpTokfnInfo->lbbfl[0]), 32);
    if (jLbbfl == NULL)  { rfturn NULL; };
    jVfndor =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpTokfnInfo->mbnufbdturfrID[0]), 32);
    if (jVfndor == NULL)  { rfturn NULL; };
    jModfl = dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpTokfnInfo->modfl[0]), 16);
    if (jModfl == NULL)  { rfturn NULL; };
    jSfriblNo =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpTokfnInfo->sfriblNumbfr[0]), 16);
    if (jSfriblNo == NULL)  { rfturn NULL; };
    jFlbgs = dkULongToJLong(dkpTokfnInfo->flbgs);
    jMbxSnCnt = dkULongSpfdiblToJLong(dkpTokfnInfo->ulMbxSfssionCount);
    jSnCnt = dkULongSpfdiblToJLong(dkpTokfnInfo->ulSfssionCount);
    jMbxRwSnCnt = dkULongSpfdiblToJLong(dkpTokfnInfo->ulMbxRwSfssionCount);
    jRwSnCnt = dkULongSpfdiblToJLong(dkpTokfnInfo->ulRwSfssionCount);
    jMbxPinLfn = dkULongToJLong(dkpTokfnInfo->ulMbxPinLfn);
    jMinPinLfn = dkULongToJLong(dkpTokfnInfo->ulMinPinLfn);
    jTotblPubMfm = dkULongSpfdiblToJLong(dkpTokfnInfo->ulTotblPublidMfmory);
    jFrffPubMfm = dkULongSpfdiblToJLong(dkpTokfnInfo->ulFrffPublidMfmory);
    jTotblPrivMfm = dkULongSpfdiblToJLong(dkpTokfnInfo->ulTotblPrivbtfMfmory);
    jFrffPrivMfm = dkULongSpfdiblToJLong(dkpTokfnInfo->ulFrffPrivbtfMfmory);
    jHbrdwbrfVfr =
      dkVfrsionPtrToJVfrsion(fnv, &(dkpTokfnInfo->hbrdwbrfVfrsion));
    if (jHbrdwbrfVfr == NULL) { rfturn NULL; }
    jFirmwbrfVfr =
      dkVfrsionPtrToJVfrsion(fnv, &(dkpTokfnInfo->firmwbrfVfrsion));
    if (jFirmwbrfVfr == NULL) { rfturn NULL; }
    jUtdTimf =
      dkUTF8ChbrArrbyToJChbrArrby(fnv, &(dkpTokfnInfo->utdTimf[0]), 16);
    if (jUtdTimf == NULL) { rfturn NULL; }

    /* drfbtf nfw CK_TOKEN_INFO objfdt */
    jTokfnInfoObjfdt =
      (*fnv)->NfwObjfdt(fnv, jTokfnInfoClbss, jCtrId, jLbbfl, jVfndor, jModfl,
                        jSfriblNo, jFlbgs,
                        jMbxSnCnt, jSnCnt, jMbxRwSnCnt, jRwSnCnt,
                        jMbxPinLfn, jMinPinLfn,
                        jTotblPubMfm, jFrffPubMfm, jTotblPrivMfm, jFrffPrivMfm,
                        jHbrdwbrfVfr, jFirmwbrfVfr, jUtdTimf);
    if (jTokfnInfoObjfdt == NULL) { rfturn NULL; }

    /* frff lodbl rfffrfndfs */
    (*fnv)->DflftfLodblRff(fnv, jTokfnInfoClbss);
    (*fnv)->DflftfLodblRff(fnv, jLbbfl);
    (*fnv)->DflftfLodblRff(fnv, jVfndor);
    (*fnv)->DflftfLodblRff(fnv, jModfl);
    (*fnv)->DflftfLodblRff(fnv, jSfriblNo);
    (*fnv)->DflftfLodblRff(fnv, jHbrdwbrfVfr);
    (*fnv)->DflftfLodblRff(fnv, jFirmwbrfVfr);

    rfturn jTokfnInfoObjfdt ;
}
#fndif

#ifdff P11_ENABLE_C_WAITFORSLOTEVENT
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_WbitForSlotEvfnt
 * Signbturf: (JLjbvb/lbng/Objfdt;)J
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jFlbgs                CK_FLAGS flbgs
 * @pbrbm   jobjfdt jRfsfrvfd           CK_VOID_PTR pRfsfrvfd
 * @rfturn  jlong jSlotID               CK_SLOT_ID_PTR pSlot
 */
JNIEXPORT jlong JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1WbitForSlotEvfnt
(JNIEnv *fnv, jobjfdt obj, jlong jFlbgs, jobjfdt jRfsfrvfd)
{
    CK_FLAGS dkFlbgs;
    CK_SLOT_ID dkSlotID;
    jlong jSlotID = 0L;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn 0L; }

    dkFlbgs = jLongToCKULong(jFlbgs);

    rv = (*dkpFundtions->C_WbitForSlotEvfnt)(dkFlbgs, &dkSlotID, NULL_PTR);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jSlotID = dkULongToJLong(dkSlotID);
    }

    rfturn jSlotID ;
}
#fndif

#ifdff P11_ENABLE_C_GETMECHANISMLIST
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftMfdhbnismList
 * Signbturf: (J)[J
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @rfturn  jlongArrby jMfdhbnismList   CK_MECHANISM_TYPE_PTR pMfdhbnismList
 *                                      CK_ULONG_PTR pulCount
 */
JNIEXPORT jlongArrby JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftMfdhbnismList
(JNIEnv *fnv, jobjfdt obj, jlong jSlotID)
{
    CK_SLOT_ID dkSlotID;
    CK_ULONG dkMfdhbnismNumbfr;
    CK_MECHANISM_TYPE_PTR dkpMfdhbnismList;
    jlongArrby jMfdhbnismList = NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSlotID = jLongToCKULong(jSlotID);

    rv = (*dkpFundtions->C_GftMfdhbnismList)(dkSlotID, NULL_PTR,
                                             &dkMfdhbnismNumbfr);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn NULL ; }

    dkpMfdhbnismList = (CK_MECHANISM_TYPE_PTR)
      mbllod(dkMfdhbnismNumbfr * sizfof(CK_MECHANISM_TYPE));
    if (dkpMfdhbnismList == NULL) {
        throwOutOfMfmoryError(fnv, 0);
        rfturn NULL;
    }

    rv = (*dkpFundtions->C_GftMfdhbnismList)(dkSlotID, dkpMfdhbnismList,
                                             &dkMfdhbnismNumbfr);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jMfdhbnismList = dkULongArrbyToJLongArrby(fnv, dkpMfdhbnismList,
                                                  dkMfdhbnismNumbfr);
    }
    frff(dkpMfdhbnismList);

    rfturn jMfdhbnismList ;
}
#fndif

#ifdff P11_ENABLE_C_GETMECHANISMINFO
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftMfdhbnismInfo
 * Signbturf: (JJ)Lsun/sfdurity/pkds11/wrbppfr/CK_MECHANISM_INFO;
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @pbrbm   jlong jTypf                 CK_MECHANISM_TYPE typf
 * @rfturn  jobjfdt jMfdhbnismInfo      CK_MECHANISM_INFO_PTR pInfo
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftMfdhbnismInfo
(JNIEnv *fnv, jobjfdt obj, jlong jSlotID, jlong jTypf)
{
    CK_SLOT_ID dkSlotID;
    CK_MECHANISM_TYPE dkMfdhbnismTypf;
    CK_MECHANISM_INFO dkMfdhbnismInfo;
    jobjfdt jMfdhbnismInfo = NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSlotID = jLongToCKULong(jSlotID);
    dkMfdhbnismTypf = jLongToCKULong(jTypf);

    rv = (*dkpFundtions->C_GftMfdhbnismInfo)(dkSlotID, dkMfdhbnismTypf,
                                             &dkMfdhbnismInfo);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jMfdhbnismInfo = dkMfdhbnismInfoPtrToJMfdhbnismInfo(fnv, &dkMfdhbnismInfo);
    }
    rfturn jMfdhbnismInfo ;
}

/*
 * donvfrts b pointfr to b CK_MECHANISM_INFO strudturf into b Jbvb
 * CK_MECHANISM_INFO Objfdt.
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to drfbtf thf nfw Jbvb objfdt
 * @pbrbm dkpMfdhbnismInfo - thf pointfr to thf CK_MECHANISM_INFO strudturf
 * @rfturn - thf nfw Jbvb CK_MECHANISM_INFO objfdt
 */
jobjfdt
dkMfdhbnismInfoPtrToJMfdhbnismInfo
(JNIEnv *fnv, donst CK_MECHANISM_INFO_PTR dkpMfdhbnismInfo)
{

    jdlbss jMfdhbnismInfoClbss;
    jmfthodID jCtrId;
    jobjfdt jMfdhbnismInfoObjfdt;
    jlong jMinKfySizf;
    jlong jMbxKfySizf;
    jlong jFlbgs;

    /* lobd CK_MECHANISM_INFO dlbss */
    jMfdhbnismInfoClbss = (*fnv)->FindClbss(fnv, CLASS_MECHANISM_INFO);
    if (jMfdhbnismInfoClbss == NULL) { rfturn NULL; };

    /* lobd CK_MECHANISM_INFO donstrudtor */
    jCtrId = (*fnv)->GftMfthodID(fnv, jMfdhbnismInfoClbss, "<init>", "(JJJ)V");
    if (jCtrId == NULL) { rfturn NULL; };

    /* prfp bll fiflds */
    jMinKfySizf = dkULongToJLong(dkpMfdhbnismInfo->ulMinKfySizf);
    jMbxKfySizf = dkULongToJLong(dkpMfdhbnismInfo->ulMbxKfySizf);
    jFlbgs = dkULongToJLong(dkpMfdhbnismInfo->flbgs);

    /* drfbtf nfw CK_MECHANISM_INFO objfdt */
    jMfdhbnismInfoObjfdt = (*fnv)->NfwObjfdt(fnv, jMfdhbnismInfoClbss, jCtrId,
                                             jMinKfySizf, jMbxKfySizf, jFlbgs);
    if (jMfdhbnismInfoObjfdt == NULL) { rfturn NULL; };

    /* frff lodbl rfffrfndfs */
    (*fnv)->DflftfLodblRff(fnv, jMfdhbnismInfoClbss);

    rfturn jMfdhbnismInfoObjfdt ;
}
#fndif

#ifdff P11_ENABLE_C_INITTOKEN
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_InitTokfn
 * Signbturf: (J[C[C)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @pbrbm   jdhbrArrby jPin             CK_CHAR_PTR pPin
 *                                      CK_ULONG ulPinLfn
 * @pbrbm   jdhbrArrby jLbbfl           CK_UTF8CHAR_PTR pLbbfl
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1InitTokfn
(JNIEnv *fnv, jobjfdt obj, jlong jSlotID, jdhbrArrby jPin, jdhbrArrby jLbbfl)
{
    CK_SLOT_ID dkSlotID;
    CK_CHAR_PTR dkpPin = NULL_PTR;
    CK_UTF8CHAR_PTR dkpLbbfl = NULL_PTR;
    CK_ULONG dkPinLfngth;
    CK_ULONG dkLbbflLfngth;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSlotID = jLongToCKULong(jSlotID);
    jChbrArrbyToCKChbrArrby(fnv, jPin, &dkpPin, &dkPinLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) { rfturn; }
    /* dkLbbflLfngth <= 32 !!! */
    jChbrArrbyToCKUTF8ChbrArrby(fnv, jLbbfl, &dkpLbbfl, &dkLbbflLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) {
        frff(dkpPin);
        rfturn;
    }

    rv = (*dkpFundtions->C_InitTokfn)(dkSlotID, dkpPin, dkPinLfngth, dkpLbbfl);
    TRACE1("InitTokfn rfturn dodf: %d", rv);

    frff(dkpPin);
    frff(dkpLbbfl);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

#ifdff P11_ENABLE_C_INITPIN
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_InitPIN
 * Signbturf: (J[C)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE
 * @pbrbm   jdhbrArrby jPin             CK_CHAR_PTR pPin
 *                                      CK_ULONG ulPinLfn
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1InitPIN
(JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf, jdhbrArrby jPin)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_CHAR_PTR dkpPin = NULL_PTR;
    CK_ULONG dkPinLfngth;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);
    jChbrArrbyToCKChbrArrby(fnv, jPin, &dkpPin, &dkPinLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) { rfturn; }

    rv = (*dkpFundtions->C_InitPIN)(dkSfssionHbndlf, dkpPin, dkPinLfngth);

    frff(dkpPin);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

#ifdff P11_ENABLE_C_SETPIN
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_SftPIN
 * Signbturf: (J[C[C)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 * @pbrbm   jdhbrArrby jOldPin          CK_CHAR_PTR pOldPin
 *                                      CK_ULONG ulOldLfn
 * @pbrbm   jdhbrArrby jNfwPin          CK_CHAR_PTR pNfwPin
 *                                      CK_ULONG ulNfwLfn
 */
JNIEXPORT void JNICALL
Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1SftPIN
(JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf, jdhbrArrby jOldPin,
jdhbrArrby jNfwPin)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_CHAR_PTR dkpOldPin = NULL_PTR;
    CK_CHAR_PTR dkpNfwPin = NULL_PTR;
    CK_ULONG dkOldPinLfngth;
    CK_ULONG dkNfwPinLfngth;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);
    jChbrArrbyToCKChbrArrby(fnv, jOldPin, &dkpOldPin, &dkOldPinLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) { rfturn; }
    jChbrArrbyToCKChbrArrby(fnv, jNfwPin, &dkpNfwPin, &dkNfwPinLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) {
        frff(dkpOldPin);
        rfturn;
    }

    rv = (*dkpFundtions->C_SftPIN)(dkSfssionHbndlf, dkpOldPin, dkOldPinLfngth,
                                   dkpNfwPin, dkNfwPinLfngth);

    frff(dkpOldPin);
    frff(dkpNfwPin);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif
