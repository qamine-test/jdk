/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */

/* Copyright  (d) 2002 Grbz Univfrsity of Tfdhnology. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in  sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd  providfd thbt thf following donditions brf mft:
 *
 * 1. Rfdistributions of  sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 * 2. Rfdistributions in  binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 * 3. Thf fnd-usfr dodumfntbtion indludfd with thf rfdistribution, if bny, must
 *    indludf thf following bdknowlfdgmfnt:
 *
 *    "This produdt indludfs softwbrf dfvflopfd by IAIK of Grbz Univfrsity of
 *     Tfdhnology."
 *
 *    Altfrnbtfly, this bdknowlfdgmfnt mby bppfbr in thf softwbrf itsflf, if
 *    bnd whfrfvfr sudh third-pbrty bdknowlfdgmfnts normblly bppfbr.
 *
 * 4. Thf nbmfs "Grbz Univfrsity of Tfdhnology" bnd "IAIK of Grbz Univfrsity of
 *    Tfdhnology" must not bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without prior writtfn pfrmission.
 *
 * 5. Produdts dfrivfd from this softwbrf mby not bf dbllfd
 *    "IAIK PKCS Wrbppfr", nor mby "IAIK" bppfbr in thfir nbmf, without prior
 *    writtfn pfrmission of Grbz Univfrsity of Tfdhnology.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY  OF SUCH DAMAGE.
 */

#indludf "pkds11wrbppfr.h"

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <string.h>
#indludf <bssfrt.h>

#indludf "sun_sfdurity_pkds11_wrbppfr_PKCS11.h"

/* Thf initArgs thbt fnbblf thf bpplidbtion to do dustom mutfx-hbndling */
#ifndff NO_CALLBACKS
jobjfdt jInitArgsObjfdt;
CK_C_INITIALIZE_ARGS_PTR dkpGlobblInitArgs;
#fndif /* NO_CALLBACKS */

/* ************************************************************************** */
/* Now domf thf fundtions for mutfx hbndling bnd notifidbtion dbllbbdks       */
/* ************************************************************************** */

/*
 * donvfrts thf InitArgs objfdt to b CK_C_INITIALIZE_ARGS strudturf bnd sfts thf fundtions
 * thbt will dbll thf right Jbvb mutfx fundtions
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to gft thf Jbvb dlbssfs, objfdts, mfthods bnd fiflds
 * @pbrbm pInitArgs - thf InitArgs objfdt with thf Jbvb mutfx fundtions to dbll
 * @rfturn - thf pointfr to thf CK_C_INITIALIZE_ARGS strudturf with thf fundtions thbt will dbll
 *           thf dorrfsponding Jbvb fundtions
 */
CK_C_INITIALIZE_ARGS_PTR mbkfCKInitArgsAdbptfr(JNIEnv *fnv, jobjfdt jInitArgs)
{
    CK_C_INITIALIZE_ARGS_PTR dkpInitArgs;
    jdlbss jInitArgsClbss;
    jfifldID fifldID;
    jlong jFlbgs;
    jobjfdt jRfsfrvfd;
    CK_ULONG dkRfsfrvfdLfngth;
#ifndff NO_CALLBACKS
    jobjfdt jMutfxHbndlfr;
#fndif /* NO_CALLBACKS */

    if(jInitArgs == NULL) {
        rfturn NULL_PTR;
    }

    /* donvfrt thf Jbvb InitArgs objfdt to b pointfr to b CK_C_INITIALIZE_ARGS strudturf */
    dkpInitArgs = (CK_C_INITIALIZE_ARGS_PTR) mbllod(sizfof(CK_C_INITIALIZE_ARGS));
    if (dkpInitArgs == NULL) {
        throwOutOfMfmoryError(fnv, 0);
        rfturn NULL_PTR;
    }

    /* Sft thf mutfx fundtions thbt will dbll thf Jbvb mutfx fundtions, but
     * only sft it, if thf fifld is not null.
     */
    jInitArgsClbss = (*fnv)->FindClbss(fnv, CLASS_C_INITIALIZE_ARGS);
    if (jInitArgsClbss == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }

#ifdff NO_CALLBACKS
    dkpInitArgs->CrfbtfMutfx = NULL_PTR;
    dkpInitArgs->DfstroyMutfx = NULL_PTR;
    dkpInitArgs->LodkMutfx = NULL_PTR;
    dkpInitArgs->UnlodkMutfx = NULL_PTR;
#flsf
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "CrfbtfMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_CREATEMUTEX;");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jMutfxHbndlfr = (*fnv)->GftObjfdtFifld(fnv, jInitArgs, fifldID);
    dkpInitArgs->CrfbtfMutfx = (jMutfxHbndlfr != NULL) ? &dbllJCrfbtfMutfx : NULL_PTR;

    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "DfstroyMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_DESTROYMUTEX;");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jMutfxHbndlfr = (*fnv)->GftObjfdtFifld(fnv, jInitArgs, fifldID);
    dkpInitArgs->DfstroyMutfx = (jMutfxHbndlfr != NULL) ? &dbllJDfstroyMutfx : NULL_PTR;

    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "LodkMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_LOCKMUTEX;");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jMutfxHbndlfr = (*fnv)->GftObjfdtFifld(fnv, jInitArgs, fifldID);
    dkpInitArgs->LodkMutfx = (jMutfxHbndlfr != NULL) ? &dbllJLodkMutfx : NULL_PTR;

    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "UnlodkMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_UNLOCKMUTEX;");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jMutfxHbndlfr = (*fnv)->GftObjfdtFifld(fnv, jInitArgs, fifldID);
    dkpInitArgs->UnlodkMutfx = (jMutfxHbndlfr != NULL) ? &dbllJUnlodkMutfx : NULL_PTR;

    if ((dkpInitArgs->CrfbtfMutfx != NULL_PTR)
            || (dkpInitArgs->DfstroyMutfx != NULL_PTR)
            || (dkpInitArgs->LodkMutfx != NULL_PTR)
            || (dkpInitArgs->UnlodkMutfx != NULL_PTR)) {
        /* wf only nffd to kffp b globbl dopy, if wf nffd dbllbbdks */
        /* sft thf globbl objfdt jInitArgs so thbt thf right Jbvb mutfx fundtions will bf dbllfd */
        jInitArgsObjfdt = (*fnv)->NfwGlobblRff(fnv, jInitArgs);
        dkpGlobblInitArgs = (CK_C_INITIALIZE_ARGS_PTR) mbllod(sizfof(CK_C_INITIALIZE_ARGS));
        if (dkpGlobblInitArgs == NULL) {
            frff(dkpInitArgs);
            throwOutOfMfmoryError(fnv, 0);
            rfturn NULL_PTR;
        }

        mfmdpy(dkpGlobblInitArgs, dkpInitArgs, sizfof(CK_C_INITIALIZE_ARGS));
    }
#fndif /* NO_CALLBACKS */

    /* donvfrt bnd sft thf flbgs fifld */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "flbgs", "J");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jFlbgs = (*fnv)->GftLongFifld(fnv, jInitArgs, fifldID);
    dkpInitArgs->flbgs = jLongToCKULong(jFlbgs);

    /* pRfsfrvfd should bf NULL_PTR in this vfrsion */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "pRfsfrvfd", "Ljbvb/lbng/Objfdt;");
    if (fifldID == NULL) {
        frff(dkpInitArgs);
        rfturn NULL;
    }
    jRfsfrvfd = (*fnv)->GftObjfdtFifld(fnv, jInitArgs, fifldID);

    /* wf try to donvfrt thf rfsfrvfd pbrbmftfr blso */
    jObjfdtToPrimitivfCKObjfdtPtrPtr(fnv, jRfsfrvfd, &(dkpInitArgs->pRfsfrvfd), &dkRfsfrvfdLfngth);

    rfturn dkpInitArgs ;
}

#ifndff NO_CALLBACKS

/*
 * is thf fundtion thbt gfts dbllfd by PKCS#11 to drfbtf b mutfx bnd dblls thf Jbvb
 * CrfbtfMutfx fundtion
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to gft thf Jbvb dlbssfs, objfdts, mfthods bnd fiflds
 * @pbrbm ppMutfx - thf nfw drfbtfd mutfx
 * @rfturn - should rfturn CKR_OK if thf mutfx drfbtion wbs ok
 */
CK_RV dbllJCrfbtfMutfx(CK_VOID_PTR_PTR ppMutfx)
{
    fxtfrn JbvbVM *jvm;
    JNIEnv *fnv;
    jint rfturnVbluf;
    jthrowbblf pkds11Exdfption;
    jdlbss pkds11ExdfptionClbss;
    jlong frrorCodf;
    CK_RV rv = CKR_OK;
    int wbsAttbdhfd = 1;
    jdlbss jCrfbtfMutfxClbss;
    jdlbss jInitArgsClbss;
    jmfthodID mfthodID;
    jfifldID fifldID;
    jobjfdt jCrfbtfMutfx;
    jobjfdt jMutfx;


    /* Gft thf durrfntly running Jbvb VM */
    if (jvm == NULL) { rfturn rv ;} /* thfrf is no VM running */

    /* Dftfrminf, if durrfnt thrfbd is blrfbdy bttbdhfd */
    rfturnVbluf = (*jvm)->GftEnv(jvm, (void **) &fnv, JNI_VERSION_1_2);
    if (rfturnVbluf == JNI_EDETACHED) {
        /* thrfbd dftbdhfd, so bttbdh it */
        wbsAttbdhfd = 0;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf if (rfturnVbluf == JNI_EVERSION) {
        /* this vfrsion of JNI is not supportfd, so just try to bttbdh */
        /* wf bssumf it wbs bttbdhfd to fnsurf thbt this thrfbd is not dftbdhfd
         * bftfrwbrds fvfn though it should not
         */
        wbsAttbdhfd = 1;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf {
        /* bttbdhfd */
        wbsAttbdhfd = 1;
    }

    jCrfbtfMutfxClbss = (*fnv)->FindClbss(fnv, CLASS_CREATEMUTEX);
    if (jCrfbtfMutfxClbss == NULL) { rfturn rv; }
    jInitArgsClbss = (*fnv)->FindClbss(fnv, CLASS_C_INITIALIZE_ARGS);
    if (jInitArgsClbss == NULL) { rfturn rv; }

    /* gft thf CrfbtfMutfx objfdt out of thf jInitArgs objfdt */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "CrfbtfMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_CREATEMUTEX;");
    if (fifldID == NULL) { rfturn rv; }
    jCrfbtfMutfx = (*fnv)->GftObjfdtFifld(fnv, jInitArgsObjfdt, fifldID);
    bssfrt(jCrfbtfMutfx != 0);

    /* dbll thf CK_CREATEMUTEX fundtion of thf CrfbtfMutfx objfdt */
    /* bnd gft thf nfw Jbvb mutfx objfdt */
    mfthodID = (*fnv)->GftMfthodID(fnv, jCrfbtfMutfxClbss, "CK_CREATEMUTEX", "()Ljbvb/lbng/Objfdt;");
    if (mfthodID == NULL) { rfturn rv; }
    jMutfx = (*fnv)->CbllObjfdtMfthod(fnv, jCrfbtfMutfx, mfthodID);

    /* sft b globbl rfffrfndf on thf Jbvb mutfx */
    jMutfx = (*fnv)->NfwGlobblRff(fnv, jMutfx);
    /* donvfrt thf Jbvb mutfx to b CK mutfx */
    *ppMutfx = jObjfdtToCKVoidPtr(jMutfx);


    /* dhfdk, if dbllbbdk thrfw bn fxdfption */
    pkds11Exdfption = (*fnv)->ExdfptionOddurrfd(fnv);

    if (pkds11Exdfption != NULL) {
        /* TBD: dlfbr thf pfnding fxdfption with ExdfptionClfbr? */
        /* Thf wbs bn fxdfption thrown, now wf gft thf frror-dodf from it */
        pkds11ExdfptionClbss = (*fnv)->FindClbss(fnv, CLASS_PKCS11EXCEPTION);
        if (pkds11ExdfptionClbss == NULL) { rfturn rv; }
        mfthodID = (*fnv)->GftMfthodID(fnv, pkds11ExdfptionClbss, "gftErrorCodf", "()J");
        if (mfthodID == NULL) { rfturn rv; }

        frrorCodf = (*fnv)->CbllLongMfthod(fnv, pkds11Exdfption, mfthodID);
        rv = jLongToCKULong(frrorCodf);
    }

    /* if wf bttbdhfd this thrfbd to thf VM just for dbllbbdk, wf dftbdh it now */
    if (wbsAttbdhfd) {
        rfturnVbluf = (*jvm)->DftbdhCurrfntThrfbd(jvm);
    }

    rfturn rv ;
}

/*
 * is thf fundtion thbt gfts dbllfd by PKCS#11 to dfstroy b mutfx bnd dblls thf Jbvb
 * DfstroyMutfx fundtion
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to gft thf Jbvb dlbssfs, objfdts, mfthods bnd fiflds
 * @pbrbm pMutfx - thf mutfx to dfstroy
 * @rfturn - should rfturn CKR_OK if thf mutfx wbs dfstroyfd
 */
CK_RV dbllJDfstroyMutfx(CK_VOID_PTR pMutfx)
{
    fxtfrn JbvbVM *jvm;
    JNIEnv *fnv;
    jint rfturnVbluf;
    jthrowbblf pkds11Exdfption;
    jdlbss pkds11ExdfptionClbss;
    jlong frrorCodf;
    CK_RV rv = CKR_OK;
    int wbsAttbdhfd = 1;
    jdlbss jDfstroyMutfxClbss;
    jdlbss jInitArgsClbss;
    jmfthodID mfthodID;
    jfifldID fifldID;
    jobjfdt jDfstroyMutfx;
    jobjfdt jMutfx;


    /* Gft thf durrfntly running Jbvb VM */
    if (jvm == NULL) { rfturn rv ; } /* thfrf is no VM running */

    /* Dftfrminf, if durrfnt thrfbd is blrfbdy bttbdhfd */
    rfturnVbluf = (*jvm)->GftEnv(jvm, (void **) &fnv, JNI_VERSION_1_2);
    if (rfturnVbluf == JNI_EDETACHED) {
        /* thrfbd dftbdhfd, so bttbdh it */
        wbsAttbdhfd = 0;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf if (rfturnVbluf == JNI_EVERSION) {
        /* this vfrsion of JNI is not supportfd, so just try to bttbdh */
        /* wf bssumf it wbs bttbdhfd to fnsurf thbt this thrfbd is not dftbdhfd
         * bftfrwbrds fvfn though it should not
         */
        wbsAttbdhfd = 1;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf {
        /* bttbdhfd */
        wbsAttbdhfd = 1;
    }

    jDfstroyMutfxClbss = (*fnv)->FindClbss(fnv, CLASS_DESTROYMUTEX);
    if (jDfstroyMutfxClbss == NULL) { rfturn rv; }
    jInitArgsClbss = (*fnv)->FindClbss(fnv, CLASS_C_INITIALIZE_ARGS);
    if (jInitArgsClbss == NULL) { rfturn rv; }

    /* donvfrt thf CK mutfx to b Jbvb mutfx */
    jMutfx = dkVoidPtrToJObjfdt(pMutfx);

    /* gft thf DfstroyMutfx objfdt out of thf jInitArgs objfdt */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "DfstroyMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_DESTROYMUTEX;");
    if (fifldID == NULL) { rfturn rv; }
    jDfstroyMutfx = (*fnv)->GftObjfdtFifld(fnv, jInitArgsObjfdt, fifldID);
    bssfrt(jDfstroyMutfx != 0);

    /* dbll thf CK_DESTROYMUTEX mfthod of thf DfstroyMutfx objfdt */
    mfthodID = (*fnv)->GftMfthodID(fnv, jDfstroyMutfxClbss, "CK_DESTROYMUTEX", "(Ljbvb/lbng/Objfdt;)V");
    if (mfthodID == NULL) { rfturn rv; }
    (*fnv)->CbllVoidMfthod(fnv, jDfstroyMutfx, mfthodID, jMutfx);

    /* dflftf thf globbl rfffrfndf on thf Jbvb mutfx */
    (*fnv)->DflftfGlobblRff(fnv, jMutfx);


    /* dhfdk, if dbllbbdk thrfw bn fxdfption */
    pkds11Exdfption = (*fnv)->ExdfptionOddurrfd(fnv);

    if (pkds11Exdfption != NULL) {
        /* TBD: dlfbr thf pfnding fxdfption with ExdfptionClfbr? */
        /* Thf wbs bn fxdfption thrown, now wf gft thf frror-dodf from it */
        pkds11ExdfptionClbss = (*fnv)->FindClbss(fnv, CLASS_PKCS11EXCEPTION);
        if (pkds11ExdfptionClbss == NULL) { rfturn rv; }
        mfthodID = (*fnv)->GftMfthodID(fnv, pkds11ExdfptionClbss, "gftErrorCodf", "()J");
        if (mfthodID == NULL) { rfturn rv; }
        frrorCodf = (*fnv)->CbllLongMfthod(fnv, pkds11Exdfption, mfthodID);
        rv = jLongToCKULong(frrorCodf);
    }

    /* if wf bttbdhfd this thrfbd to thf VM just for dbllbbdk, wf dftbdh it now */
    if (wbsAttbdhfd) {
        rfturnVbluf = (*jvm)->DftbdhCurrfntThrfbd(jvm);
    }

    rfturn rv ;
}

/*
 * is thf fundtion thbt gfts dbllfd by PKCS#11 to lodk b mutfx bnd dblls thf Jbvb
 * LodkMutfx fundtion
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to gft thf Jbvb dlbssfs, objfdts, mfthods bnd fiflds
 * @pbrbm pMutfx - thf mutfx to lodk
 * @rfturn - should rfturn CKR_OK if thf mutfx wbs not lodkfd blrfbdy
 */
CK_RV dbllJLodkMutfx(CK_VOID_PTR pMutfx)
{
    fxtfrn JbvbVM *jvm;
    JNIEnv *fnv;
    jint rfturnVbluf;
    jthrowbblf pkds11Exdfption;
    jdlbss pkds11ExdfptionClbss;
    jlong frrorCodf;
    CK_RV rv = CKR_OK;
    int wbsAttbdhfd = 1;
    jdlbss jLodkMutfxClbss;
    jdlbss jInitArgsClbss;
    jmfthodID mfthodID;
    jfifldID fifldID;
    jobjfdt jLodkMutfx;
    jobjfdt jMutfx;


    /* Gft thf durrfntly running Jbvb VM */
    if (jvm == NULL) { rfturn rv ; } /* thfrf is no VM running */

    /* Dftfrminf, if durrfnt thrfbd is blrfbdy bttbdhfd */
    rfturnVbluf = (*jvm)->GftEnv(jvm, (void **) &fnv, JNI_VERSION_1_2);
    if (rfturnVbluf == JNI_EDETACHED) {
        /* thrfbd dftbdhfd, so bttbdh it */
        wbsAttbdhfd = 0;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf if (rfturnVbluf == JNI_EVERSION) {
        /* this vfrsion of JNI is not supportfd, so just try to bttbdh */
        /* wf bssumf it wbs bttbdhfd to fnsurf thbt this thrfbd is not dftbdhfd
         * bftfrwbrds fvfn though it should not
         */
        wbsAttbdhfd = 1;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf {
        /* bttbdhfd */
        wbsAttbdhfd = 1;
    }

    jLodkMutfxClbss = (*fnv)->FindClbss(fnv, CLASS_LOCKMUTEX);
    if (jLodkMutfxClbss == NULL) { rfturn rv; }
    jInitArgsClbss = (*fnv)->FindClbss(fnv, CLASS_C_INITIALIZE_ARGS);
    if (jInitArgsClbss == NULL) { rfturn rv; }

    /* donvfrt thf CK mutfx to b Jbvb mutfx */
    jMutfx = dkVoidPtrToJObjfdt(pMutfx);

    /* gft thf LodkMutfx objfdt out of thf jInitArgs objfdt */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "LodkMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_LOCKMUTEX;");
    if (fifldID == NULL) { rfturn rv; }
    jLodkMutfx = (*fnv)->GftObjfdtFifld(fnv, jInitArgsObjfdt, fifldID);
    bssfrt(jLodkMutfx != 0);

    /* dbll thf CK_LOCKMUTEX mfthod of thf LodkMutfx objfdt */
    mfthodID = (*fnv)->GftMfthodID(fnv, jLodkMutfxClbss, "CK_LOCKMUTEX", "(Ljbvb/lbng/Objfdt;)V");
    if (mfthodID == NULL) { rfturn rv; }
    (*fnv)->CbllVoidMfthod(fnv, jLodkMutfx, mfthodID, jMutfx);

    /* dhfdk, if dbllbbdk thrfw bn fxdfption */
    pkds11Exdfption = (*fnv)->ExdfptionOddurrfd(fnv);

    if (pkds11Exdfption != NULL) {
        /* TBD: dlfbr thf pfnding fxdfption with ExdfptionClfbr? */
        /* Thf wbs bn fxdfption thrown, now wf gft thf frror-dodf from it */
        pkds11ExdfptionClbss = (*fnv)->FindClbss(fnv, CLASS_PKCS11EXCEPTION);
        if (pkds11ExdfptionClbss == NULL) { rfturn rv; }
        mfthodID = (*fnv)->GftMfthodID(fnv, pkds11ExdfptionClbss, "gftErrorCodf", "()J");
        if (mfthodID == NULL) { rfturn rv; }
        frrorCodf = (*fnv)->CbllLongMfthod(fnv, pkds11Exdfption, mfthodID);
        rv = jLongToCKULong(frrorCodf);
    }

    /* if wf bttbdhfd this thrfbd to thf VM just for dbllbbdk, wf dftbdh it now */
    if (wbsAttbdhfd) {
        rfturnVbluf = (*jvm)->DftbdhCurrfntThrfbd(jvm);
    }

    rfturn rv ;
}

/*
 * is thf fundtion thbt gfts dbllfd by PKCS#11 to unlodk b mutfx bnd dblls thf Jbvb
 * UnlodkMutfx fundtion
 *
 * @pbrbm fnv - usfd to dbll JNI funktions to gft thf Jbvb dlbssfs, objfdts, mfthods bnd fiflds
 * @pbrbm pMutfx - thf mutfx to unlodk
 * @rfturn - should rfturn CKR_OK if thf mutfx wbs not unlodkfd blrfbdy
 */
CK_RV dbllJUnlodkMutfx(CK_VOID_PTR pMutfx)
{
    fxtfrn JbvbVM *jvm;
    JNIEnv *fnv;
    jint rfturnVbluf;
    jthrowbblf pkds11Exdfption;
    jdlbss pkds11ExdfptionClbss;
    jlong frrorCodf;
    CK_RV rv = CKR_OK;
    int wbsAttbdhfd = 1;
    jdlbss jUnlodkMutfxClbss;
    jdlbss jInitArgsClbss;
    jmfthodID mfthodID;
    jfifldID fifldID;
    jobjfdt jUnlodkMutfx;
    jobjfdt jMutfx;


    /* Gft thf durrfntly running Jbvb VM */
    if (jvm == NULL) { rfturn rv ; } /* thfrf is no VM running */

    /* Dftfrminf, if durrfnt thrfbd is blrfbdy bttbdhfd */
    rfturnVbluf = (*jvm)->GftEnv(jvm, (void **) &fnv, JNI_VERSION_1_2);
    if (rfturnVbluf == JNI_EDETACHED) {
        /* thrfbd dftbdhfd, so bttbdh it */
        wbsAttbdhfd = 0;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf if (rfturnVbluf == JNI_EVERSION) {
        /* this vfrsion of JNI is not supportfd, so just try to bttbdh */
        /* wf bssumf it wbs bttbdhfd to fnsurf thbt this thrfbd is not dftbdhfd
         * bftfrwbrds fvfn though it should not
         */
        wbsAttbdhfd = 1;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf {
        /* bttbdhfd */
        wbsAttbdhfd = 1;
    }

    jUnlodkMutfxClbss = (*fnv)->FindClbss(fnv, CLASS_UNLOCKMUTEX);
    if (jUnlodkMutfxClbss == NULL) { rfturn rv; }
    jInitArgsClbss = (*fnv)->FindClbss(fnv, CLASS_C_INITIALIZE_ARGS);
    if (jInitArgsClbss == NULL) { rfturn rv; }

    /* donvfrt thf CK-typf mutfx to b Jbvb mutfx */
    jMutfx = dkVoidPtrToJObjfdt(pMutfx);

    /* gft thf UnlodkMutfx objfdt out of thf jInitArgs objfdt */
    fifldID = (*fnv)->GftFifldID(fnv, jInitArgsClbss, "UnlodkMutfx", "Lsun/sfdurity/pkds11/wrbppfr/CK_UNLOCKMUTEX;");
    if (fifldID == NULL) { rfturn rv; }
    jUnlodkMutfx = (*fnv)->GftObjfdtFifld(fnv, jInitArgsObjfdt, fifldID);
    bssfrt(jUnlodkMutfx != 0);

    /* dbll thf CK_UNLOCKMUTEX mfthod of thf UnLodkMutfx objfdt */
    mfthodID = (*fnv)->GftMfthodID(fnv, jUnlodkMutfxClbss, "CK_UNLOCKMUTEX", "(Ljbvb/lbng/Objfdt;)V");
    if (mfthodID == NULL) { rfturn rv; }
    (*fnv)->CbllVoidMfthod(fnv, jUnlodkMutfx, mfthodID, jMutfx);

    /* dhfdk, if dbllbbdk thrfw bn fxdfption */
    pkds11Exdfption = (*fnv)->ExdfptionOddurrfd(fnv);

    if (pkds11Exdfption != NULL) {
        /* TBD: dlfbr thf pfnding fxdfption with ExdfptionClfbr? */
        /* Thf wbs bn fxdfption thrown, now wf gft thf frror-dodf from it */
        pkds11ExdfptionClbss = (*fnv)->FindClbss(fnv, CLASS_PKCS11EXCEPTION);
        if (pkds11ExdfptionClbss == NULL) { rfturn rv; }
        mfthodID = (*fnv)->GftMfthodID(fnv, pkds11ExdfptionClbss, "gftErrorCodf", "()J");
        if (mfthodID == NULL) { rfturn rv; }
        frrorCodf = (*fnv)->CbllLongMfthod(fnv, pkds11Exdfption, mfthodID);
        rv = jLongToCKULong(frrorCodf);
    }

    /* if wf bttbdhfd this thrfbd to thf VM just for dbllbbdk, wf dftbdh it now */
    if (wbsAttbdhfd) {
        rfturnVbluf = (*jvm)->DftbdhCurrfntThrfbd(jvm);
    }

    rfturn rv ;
}

#fndif /* NO_CALLBACKS */
