/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 */

/* Copyright  (d) 2002 Grbz Univfrsity of Tfdhnology. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in  sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd  providfd thbt thf following donditions brf mft:
 *
 * 1. Rfdistributions of  sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 * 2. Rfdistributions in  binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 * 3. Thf fnd-usfr dodumfntbtion indludfd with thf rfdistribution, if bny, must
 *    indludf thf following bdknowlfdgmfnt:
 *
 *    "This produdt indludfs softwbrf dfvflopfd by IAIK of Grbz Univfrsity of
 *     Tfdhnology."
 *
 *    Altfrnbtfly, this bdknowlfdgmfnt mby bppfbr in thf softwbrf itsflf, if
 *    bnd whfrfvfr sudh third-pbrty bdknowlfdgmfnts normblly bppfbr.
 *
 * 4. Thf nbmfs "Grbz Univfrsity of Tfdhnology" bnd "IAIK of Grbz Univfrsity of
 *    Tfdhnology" must not bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without prior writtfn pfrmission.
 *
 * 5. Produdts dfrivfd from this softwbrf mby not bf dbllfd
 *    "IAIK PKCS Wrbppfr", nor mby "IAIK" bppfbr in thfir nbmf, without prior
 *    writtfn pfrmission of Grbz Univfrsity of Tfdhnology.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY  OF SUCH DAMAGE.
 */

#indludf "pkds11wrbppfr.h"

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <string.h>
#indludf <bssfrt.h>

#indludf "sun_sfdurity_pkds11_wrbppfr_PKCS11.h"

/* Thf list of notify dbllbbdk hbndlfs thbt brf durrfntly bdtivf bnd wbiting
 * for dbllbbdks from thfir sfssions.
 */
#ifndff NO_CALLBACKS
NotifyListNodf *notifyListHfbd = NULL;
jobjfdt notifyListLodk = NULL;
#fndif /* NO_CALLBACKS */

#ifdff P11_ENABLE_C_OPENSESSION
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_OpfnSfssion
 * Signbturf: (JJLjbvb/lbng/Objfdt;Lsun/sfdurity/pkds11/wrbppfr/CK_NOTIFY;)J
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 * @pbrbm   jlong jFlbgs                CK_FLAGS flbgs
 * @pbrbm   jobjfdt jApplidbtion        CK_VOID_PTR pApplidbtion
 * @pbrbm   jobjfdt jNotify             CK_NOTIFY Notify
 * @rfturn  jlong jSfssionHbndlf        CK_SESSION_HANDLE_PTR phSfssion
 */
JNIEXPORT jlong JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1OpfnSfssion
    (JNIEnv *fnv, jobjfdt obj, jlong jSlotID, jlong jFlbgs, jobjfdt jApplidbtion, jobjfdt jNotify)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_SLOT_ID dkSlotID;
    CK_FLAGS dkFlbgs;
    CK_VOID_PTR dkpApplidbtion;
    CK_NOTIFY dkNotify;
    jlong jSfssionHbndlf;
    CK_RV rv;
#ifndff NO_CALLBACKS
    NotifyEndbpsulbtion *notifyEndbpsulbtion = NULL;
#fndif /* NO_CALLBACKS */

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn 0L; }

    dkSlotID = jLongToCKULong(jSlotID);
    dkFlbgs = jLongToCKULong(jFlbgs);

#ifndff NO_CALLBACKS
    if (jNotify != NULL) {
        notifyEndbpsulbtion = (NotifyEndbpsulbtion *) mbllod(sizfof(NotifyEndbpsulbtion));
        if (notifyEndbpsulbtion == NULL) {
            throwOutOfMfmoryError(fnv, 0);
            rfturn 0L;
        }
        notifyEndbpsulbtion->jApplidbtionDbtb = (jApplidbtion != NULL)
                ? (*fnv)->NfwGlobblRff(fnv, jApplidbtion)
                : NULL;
        notifyEndbpsulbtion->jNotifyObjfdt = (*fnv)->NfwGlobblRff(fnv, jNotify);
        dkpApplidbtion = notifyEndbpsulbtion;
        dkNotify = (CK_NOTIFY) &notifyCbllbbdk;
    } flsf {
        dkpApplidbtion = NULL_PTR;
        dkNotify = NULL_PTR;
    }
#flsf
        dkpApplidbtion = NULL_PTR;
        dkNotify = NULL_PTR;
#fndif /* NO_CALLBACKS */

    TRACE0("DEBUG: C_OpfnSfssion");
    TRACE1(", slotID=%u", dkSlotID);
    TRACE1(", flbgs=%x", dkFlbgs);
    TRACE0(" ... ");

    rv = (*dkpFundtions->C_OpfnSfssion)(dkSlotID, dkFlbgs, dkpApplidbtion, dkNotify, &dkSfssionHbndlf);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) {
#ifndff NO_CALLBACKS
        if (notifyEndbpsulbtion != NULL) {
            if (notifyEndbpsulbtion->jApplidbtionDbtb != NULL) {
                (*fnv)->DflftfGlobblRff(fnv, jApplidbtion);
            }
            (*fnv)->DflftfGlobblRff(fnv, jNotify);
            frff(notifyEndbpsulbtion);
        }
#fndif /* NO_CALLBACKS */
        rfturn 0L;
    }

    TRACE0("got sfssion");
    TRACE1(", SfssionHbndlf=%u", dkSfssionHbndlf);
    TRACE0(" ... ");

    jSfssionHbndlf = dkULongToJLong(dkSfssionHbndlf);

#ifndff NO_CALLBACKS
    if (notifyEndbpsulbtion != NULL) {
        /* storf thf notifyEndbpsulbtion to fnbblf lbtfr dlfbnup */
        putNotifyEntry(fnv, dkSfssionHbndlf, notifyEndbpsulbtion);
    }
#fndif /* NO_CALLBACKS */

    TRACE0("FINISHED\n");

    rfturn jSfssionHbndlf ;
}
#fndif

#ifdff P11_ENABLE_C_CLOSESESSION
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_ClosfSfssion
 * Signbturf: (J)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1ClosfSfssion
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_RV rv;
#ifndff NO_CALLBACKS
    NotifyEndbpsulbtion *notifyEndbpsulbtion;
    jobjfdt jApplidbtionDbtb;
#fndif /* NO_CALLBACKS */

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);

    rv = (*dkpFundtions->C_ClosfSfssion)(dkSfssionHbndlf);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }

#ifndff NO_CALLBACKS
    notifyEndbpsulbtion = rfmovfNotifyEntry(fnv, dkSfssionHbndlf);

    if (notifyEndbpsulbtion != NULL) {
        /* thfrf wbs b notify objfdt usfd with this sfssion, now dump thf
         * fndbpsulbtion objfdt
         */
        (*fnv)->DflftfGlobblRff(fnv, notifyEndbpsulbtion->jNotifyObjfdt);
        jApplidbtionDbtb = notifyEndbpsulbtion->jApplidbtionDbtb;
        if (jApplidbtionDbtb != NULL) {
            (*fnv)->DflftfGlobblRff(fnv, jApplidbtionDbtb);
        }
        frff(notifyEndbpsulbtion);
    }
#fndif /* NO_CALLBACKS */

}
#fndif

#ifdff P11_ENABLE_C_CLOSEALLSESSIONS
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_ClosfAllSfssions
 * Signbturf: (J)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSlotID               CK_SLOT_ID slotID
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1ClosfAllSfssions
    (JNIEnv *fnv, jobjfdt obj, jlong jSlotID)
{
    CK_SLOT_ID dkSlotID;
    CK_RV rv;
#ifndff NO_CALLBACKS
    NotifyEndbpsulbtion *notifyEndbpsulbtion;
    jobjfdt jApplidbtionDbtb;
#fndif /* NO_CALLBACKS */

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSlotID = jLongToCKULong(jSlotID);

    rv = (*dkpFundtions->C_ClosfAllSfssions)(dkSlotID);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }

#ifndff NO_CALLBACKS
    /* Rfmovf bll notify dbllbbdk hflpfr objfdts. */
    whilf ((notifyEndbpsulbtion = rfmovfFirstNotifyEntry(fnv)) != NULL) {
        /* thfrf wbs b notify objfdt usfd with this sfssion, now dump thf
         * fndbpsulbtion objfdt
         */
        (*fnv)->DflftfGlobblRff(fnv, notifyEndbpsulbtion->jNotifyObjfdt);
        jApplidbtionDbtb = notifyEndbpsulbtion->jApplidbtionDbtb;
        if (jApplidbtionDbtb != NULL) {
            (*fnv)->DflftfGlobblRff(fnv, jApplidbtionDbtb);
        }
        frff(notifyEndbpsulbtion);
    }
#fndif /* NO_CALLBACKS */
}
#fndif

#ifdff P11_ENABLE_C_GETSESSIONINFO
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftSfssionInfo
 * Signbturf: (J)Lsun/sfdurity/pkds11/wrbppfr/CK_SESSION_INFO;
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 * @rfturn  jobjfdt jSfssionInfo        CK_SESSION_INFO_PTR pInfo
 */
JNIEXPORT jobjfdt JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftSfssionInfo
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_SESSION_INFO dkSfssionInfo;
    jobjfdt jSfssionInfo=NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);

    rv = (*dkpFundtions->C_GftSfssionInfo)(dkSfssionHbndlf, &dkSfssionInfo);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jSfssionInfo = dkSfssionInfoPtrToJSfssionInfo(fnv, &dkSfssionInfo);
    }
    rfturn jSfssionInfo ;
}
#fndif

#ifdff P11_ENABLE_C_GETOPERATIONSTATE
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_GftOpfrbtionStbtf
 * Signbturf: (J)[B
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 * @rfturn  jbytfArrby jStbtf           CK_BYTE_PTR pOpfrbtionStbtf
 *                                      CK_ULONG_PTR pulOpfrbtionStbtfLfn
 */
JNIEXPORT jbytfArrby JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1GftOpfrbtionStbtf
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_BYTE_PTR dkpStbtf;
    CK_ULONG dkStbtfLfngth;
    jbytfArrby jStbtf = NULL;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn NULL; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);

    rv = (*dkpFundtions->C_GftOpfrbtionStbtf)(dkSfssionHbndlf, NULL_PTR, &dkStbtfLfngth);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn NULL ; }

    dkpStbtf = (CK_BYTE_PTR) mbllod(dkStbtfLfngth);
    if (dkpStbtf == NULL) {
        throwOutOfMfmoryError(fnv, 0);
        rfturn NULL;
    }

    rv = (*dkpFundtions->C_GftOpfrbtionStbtf)(dkSfssionHbndlf, dkpStbtf, &dkStbtfLfngth);
    if (dkAssfrtRfturnVblufOK(fnv, rv) == CK_ASSERT_OK) {
        jStbtf = dkBytfArrbyToJBytfArrby(fnv, dkpStbtf, dkStbtfLfngth);
    }
    frff(dkpStbtf);

    rfturn jStbtf ;
}
#fndif

#ifdff P11_ENABLE_C_SETOPERATIONSTATE
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_SftOpfrbtionStbtf
 * Signbturf: (J[BJJ)V
 * Pbrbmftfrmbpping:                        *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf            CK_SESSION_HANDLE hSfssion
 * @pbrbm   jbytfArrby jOpfrbtionStbtf      CK_BYTE_PTR pOpfrbtionStbtf
 *                                          CK_ULONG ulOpfrbtionStbtfLfn
 * @pbrbm   jlong jEndryptionKfyHbndlf      CK_OBJECT_HANDLE hEndryptionKfy
 * @pbrbm   jlong jAuthfntidbtionKfyHbndlf  CK_OBJECT_HANDLE hAuthfntidbtionKfy
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1SftOpfrbtionStbtf
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf, jbytfArrby jOpfrbtionStbtf, jlong jEndryptionKfyHbndlf, jlong jAuthfntidbtionKfyHbndlf)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_BYTE_PTR dkpStbtf = NULL_PTR;
    CK_ULONG dkStbtfLfngth;
    CK_OBJECT_HANDLE dkEndryptionKfyHbndlf;
    CK_OBJECT_HANDLE dkAuthfntidbtionKfyHbndlf;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);
    jBytfArrbyToCKBytfArrby(fnv, jOpfrbtionStbtf, &dkpStbtf, &dkStbtfLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) { rfturn; }

    dkEndryptionKfyHbndlf = jLongToCKULong(jEndryptionKfyHbndlf);
    dkAuthfntidbtionKfyHbndlf = jLongToCKULong(jAuthfntidbtionKfyHbndlf);

    rv = (*dkpFundtions->C_SftOpfrbtionStbtf)(dkSfssionHbndlf, dkpStbtf, dkStbtfLfngth, dkEndryptionKfyHbndlf, dkAuthfntidbtionKfyHbndlf);

    frff(dkpStbtf);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

#ifdff P11_ENABLE_C_LOGIN
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_Login
 * Signbturf: (JJ[C)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 * @pbrbm   jlong jUsfrTypf             CK_USER_TYPE usfrTypf
 * @pbrbm   jdhbrArrby jPin             CK_CHAR_PTR pPin
 *                                      CK_ULONG ulPinLfn
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1Login
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf, jlong jUsfrTypf, jdhbrArrby jPin)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_USER_TYPE dkUsfrTypf;
    CK_CHAR_PTR dkpPinArrby = NULL_PTR;
    CK_ULONG dkPinLfngth;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);
    dkUsfrTypf = jLongToCKULong(jUsfrTypf);
    jChbrArrbyToCKChbrArrby(fnv, jPin, &dkpPinArrby, &dkPinLfngth);
    if ((*fnv)->ExdfptionChfdk(fnv)) { rfturn; }

    rv = (*dkpFundtions->C_Login)(dkSfssionHbndlf, dkUsfrTypf, dkpPinArrby, dkPinLfngth);

    frff(dkpPinArrby);

    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

#ifdff P11_ENABLE_C_LOGOUT
/*
 * Clbss:     sun_sfdurity_pkds11_wrbppfr_PKCS11
 * Mfthod:    C_Logout
 * Signbturf: (J)V
 * Pbrbmftfrmbpping:                    *PKCS11*
 * @pbrbm   jlong jSfssionHbndlf        CK_SESSION_HANDLE hSfssion
 */
JNIEXPORT void JNICALL Jbvb_sun_sfdurity_pkds11_wrbppfr_PKCS11_C_1Logout
    (JNIEnv *fnv, jobjfdt obj, jlong jSfssionHbndlf)
{
    CK_SESSION_HANDLE dkSfssionHbndlf;
    CK_RV rv;

    CK_FUNCTION_LIST_PTR dkpFundtions = gftFundtionList(fnv, obj);
    if (dkpFundtions == NULL) { rfturn; }

    dkSfssionHbndlf = jLongToCKULong(jSfssionHbndlf);

    rv = (*dkpFundtions->C_Logout)(dkSfssionHbndlf);
    if (dkAssfrtRfturnVblufOK(fnv, rv) != CK_ASSERT_OK) { rfturn; }
}
#fndif

/* ************************************************************************** */
/* Fundtions for kffping trbdk of notify dbllbbdks                            */
/* ************************************************************************** */

#ifndff NO_CALLBACKS

/*
 * Add thf givfn notify fndbpsulbtion objfdt to thf list of bdtivf notify
 * objfdts.
 * If notifyEndbpsulbtion is NULL, this fundtion dofs nothing.
 */
void putNotifyEntry(JNIEnv *fnv, CK_SESSION_HANDLE hSfssion, NotifyEndbpsulbtion *notifyEndbpsulbtion) {
    NotifyListNodf *durrfntNodf, *nfwNodf;

    if (notifyEndbpsulbtion == NULL) {
        rfturn;
    }

    nfwNodf = (NotifyListNodf *) mbllod(sizfof(NotifyListNodf));
    if (nfwNodf == NULL) {
        throwOutOfMfmoryError(fnv, 0);
        rfturn;
    }
    nfwNodf->hSfssion = hSfssion;
    nfwNodf->notifyEndbpsulbtion = notifyEndbpsulbtion;
    nfwNodf->nfxt = NULL;

    (*fnv)->MonitorEntfr(fnv, notifyListLodk); /* syndhronizf bddfss to list */

    if (notifyListHfbd == NULL) {
        /* this is thf first fntry */
        notifyListHfbd = nfwNodf;
    } flsf {
        /* go to thf lbst fntry; i.f. thf first nodf whidh's 'nfxt' is NULL.
         */
        durrfntNodf = notifyListHfbd;
        whilf (durrfntNodf->nfxt != NULL) {
            durrfntNodf = durrfntNodf->nfxt;
        }
        durrfntNodf->nfxt = nfwNodf;
    }

    (*fnv)->MonitorExit(fnv, notifyListLodk); /* syndhronizf bddfss to list */
}

/*
 * Rfmovfs thf bdtivf notifyEndbpsulbtion objfdt usfd with thf givfn sfssion bnd
 * rfturns it. If thfrf is no notifyEndbpsulbtion bdtivf for this sfssion, this
 * fundtion rfturns NULL.
 */
NotifyEndbpsulbtion * rfmovfNotifyEntry(JNIEnv *fnv, CK_SESSION_HANDLE hSfssion) {
    NotifyEndbpsulbtion *notifyEndbpsulbtion;
    NotifyListNodf *durrfntNodf, *prfviousNodf;

    (*fnv)->MonitorEntfr(fnv, notifyListLodk); /* syndhronizf bddfss to list */

    if (notifyListHfbd == NULL) {
        /* this is thf first fntry */
        notifyEndbpsulbtion = NULL;
    } flsf {
        /* Find thf nodf with thf wbntfd sfssion hbndlf. Also stop, whfn wf rfbdh
         * thf lbst fntry; i.f. thf first nodf whidh's 'nfxt' is NULL.
         */
        durrfntNodf = notifyListHfbd;
        prfviousNodf = NULL;

        whilf ((durrfntNodf->hSfssion != hSfssion) && (durrfntNodf->nfxt != NULL)) {
            prfviousNodf = durrfntNodf;
            durrfntNodf = durrfntNodf->nfxt;
        }

        if (durrfntNodf->hSfssion == hSfssion) {
            /* Wf found b fntry for thf wbntfd sfssion, now rfmovf it. */
            if (prfviousNodf == NULL) {
                /* it's thf first nodf */
                notifyListHfbd = durrfntNodf->nfxt;
            } flsf {
                prfviousNodf->nfxt = durrfntNodf->nfxt;
            }
            notifyEndbpsulbtion = durrfntNodf->notifyEndbpsulbtion;
            frff(durrfntNodf);
        } flsf {
            /* Wf did not find b fntry for this sfssion */
            notifyEndbpsulbtion = NULL;
        }
    }

    (*fnv)->MonitorExit(fnv, notifyListLodk); /* syndhronizf bddfss to list */

    rfturn notifyEndbpsulbtion ;
}

/*

 * Rfmovfs thf first notifyEndbpsulbtion objfdt. If thfrf is no notifyEndbpsulbtion,
 * this fundtion rfturns NULL.
 */
NotifyEndbpsulbtion * rfmovfFirstNotifyEntry(JNIEnv *fnv) {
    NotifyEndbpsulbtion *notifyEndbpsulbtion;
    NotifyListNodf *durrfntNodf;

    (*fnv)->MonitorEntfr(fnv, notifyListLodk); /* syndhronizf bddfss to list */

    if (notifyListHfbd == NULL) {
        /* this is thf first fntry */
        notifyEndbpsulbtion = NULL;
    } flsf {
        /* Rfmovf thf first fntry. */
        durrfntNodf = notifyListHfbd;
        notifyListHfbd = notifyListHfbd->nfxt;
        notifyEndbpsulbtion = durrfntNodf->notifyEndbpsulbtion;
        frff(durrfntNodf);
    }

    (*fnv)->MonitorExit(fnv, notifyListLodk); /* syndhronizf bddfss to list */

    rfturn notifyEndbpsulbtion ;
}

#fndif /* NO_CALLBACKS */

#ifndff NO_CALLBACKS

/*
 * Thf fundtion hbndling notify dbllbbdks. It dbsts thf pApplidbtion pbrbmftfr
 * bbdk to b NotifyEndbpsulbtion strudturf bnd rftrifvfs thf Notify objfdt bnd
 * thf bpplidbtion dbtb from it.
 *
 * @pbrbm hSfssion Thf sfssion, this dbllbbdk is domming from.
 * @pbrbm fvfnt Thf typf of fvfnt thbt oddurrfd.
 * @pbrbm pApplidbtion Thf bpplidbtion dbtb bs pbssfd in upon OpfnSfssion. In
                       this wrbppfr wf blwbys pbss in b NotifyEndbpsulbtion
                       objfdt, whidh holds nfdfssbry informbtion for dflfgbting
                       thf dbllbbdk to thf Jbvb VM.
 * @rfturn
 */
CK_RV notifyCbllbbdk(
    CK_SESSION_HANDLE hSfssion,     /* thf sfssion's hbndlf */
    CK_NOTIFICATION   fvfnt,
    CK_VOID_PTR       pApplidbtion  /* pbssfd to C_OpfnSfssion */
)
{
    NotifyEndbpsulbtion *notifyEndbpsulbtion;
    fxtfrn JbvbVM *jvm;
    JNIEnv *fnv;
    jint rfturnVbluf;
    jlong jSfssionHbndlf;
    jlong jEvfnt;
    jdlbss dkNotifyClbss;
    jmfthodID jmfthod;
    jthrowbblf pkds11Exdfption;
    jdlbss pkds11ExdfptionClbss;
    jlong frrorCodf;
    CK_RV rv = CKR_OK;
    int wbsAttbdhfd = 1;

    if (pApplidbtion == NULL) { rfturn rv ; } /* This should not oddur in this wrbppfr. */

    notifyEndbpsulbtion = (NotifyEndbpsulbtion *) pApplidbtion;

    /* Gft thf durrfntly running Jbvb VM */
    if (jvm == NULL) { rfturn rv ; } /* thfrf is no VM running */

    /* Dftfrminf, if durrfnt thrfbd is blrfbdy bttbdhfd */
    rfturnVbluf = (*jvm)->GftEnv(jvm, (void **) &fnv, JNI_VERSION_1_2);
    if (rfturnVbluf == JNI_EDETACHED) {
        /* thrfbd dftbdhfd, so bttbdh it */
        wbsAttbdhfd = 0;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf if (rfturnVbluf == JNI_EVERSION) {
        /* this vfrsion of JNI is not supportfd, so just try to bttbdh */
        /* wf bssumf it wbs bttbdhfd to fnsurf thbt this thrfbd is not dftbdhfd
         * bftfrwbrds fvfn though it should not
         */
        wbsAttbdhfd = 1;
        rfturnVbluf = (*jvm)->AttbdhCurrfntThrfbd(jvm, (void **) &fnv, NULL);
    } flsf {
        /* bttbdhfd */
        wbsAttbdhfd = 1;
    }

    jSfssionHbndlf = dkULongToJLong(hSfssion);
    jEvfnt = dkULongToJLong(fvfnt);

    dkNotifyClbss = (*fnv)->FindClbss(fnv, CLASS_NOTIFY);
    if (dkNotifyClbss == NULL) { rfturn rv; }
    jmfthod = (*fnv)->GftMfthodID(fnv, dkNotifyClbss, "CK_NOTIFY", "(JJLjbvb/lbng/Objfdt;)V");
    if (jmfthod == NULL) { rfturn rv; }

    (*fnv)->CbllVoidMfthod(fnv, notifyEndbpsulbtion->jNotifyObjfdt, jmfthod,
                         jSfssionHbndlf, jEvfnt, notifyEndbpsulbtion->jApplidbtionDbtb);

    /* dhfdk, if dbllbbdk thrfw bn fxdfption */
    pkds11Exdfption = (*fnv)->ExdfptionOddurrfd(fnv);

    if (pkds11Exdfption != NULL) {
        /* TBD: dlfbr thf pfnding fxdfption with ExdfptionClfbr? */
        /* Thf wbs bn fxdfption thrown, now wf gft thf frror-dodf from it */
        pkds11ExdfptionClbss = (*fnv)->FindClbss(fnv, CLASS_PKCS11EXCEPTION);
        if (pkds11ExdfptionClbss == NULL) { rfturn rv; }

        jmfthod = (*fnv)->GftMfthodID(fnv, pkds11ExdfptionClbss, "gftErrorCodf", "()J");
        if (jmfthod == NULL) { rfturn rv; }

        frrorCodf = (*fnv)->CbllLongMfthod(fnv, pkds11Exdfption, jmfthod);
        rv = jLongToCKULong(frrorCodf);
    }

    /* if wf bttbdhfd this thrfbd to thf VM just for dbllbbdk, wf dftbdh it now */
    if (wbsAttbdhfd) {
        rfturnVbluf = (*jvm)->DftbdhCurrfntThrfbd(jvm);
    }

    rfturn rv ;
}

#fndif /* NO_CALLBACKS */
