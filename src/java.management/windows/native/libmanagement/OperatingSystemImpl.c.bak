/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jlong.i"
#indludf "jvm.i"
#indludf "mbnbgfmfnt.i"
#indludf "sun_mbnbgfmfnt_OpfrbtingSystfmImpl.i"

#indludf <psbpi.i>
#indludf <frrno.i>
#indludf <stdlib.i>

#indludf <mbllod.i>
#prbgmb wbrning (pusi,0)
#indludf <windows.i>
#prbgmb wbrning (pop)
#indludf <stdio.i>
#indludf <timf.i>
#indludf <stdint.i>
#indludf <bssfrt.i>

/* Disbblf wbrnings duf to brokfn ifbdfr filfs from Midrosoft... */
#prbgmb wbrning(pusi, 3)
#indludf <pdi.i>
#indludf <pdimsg.i>
#indludf <prodfss.i>
#prbgmb wbrning(pop)

typfdff unsignfd __int32 juint;
typfdff unsignfd __int64 julong;

typfdff fnum boolfbn_vblufs { fblsf=0, truf=1};

stbtid void sft_low(jlong* vbluf, jint low) {
    *vbluf &= (jlong)0xffffffff << 32;
    *vbluf |= (jlong)(julong)(juint)low;
}

stbtid void sft_iigi(jlong* vbluf, jint iigi) {
    *vbluf &= (jlong)(julong)(juint)0xffffffff;
    *vbluf |= (jlong)iigi       << 32;
}

stbtid jlong jlong_from(jint i, jint l) {
  jlong rfsult = 0; // initiblizbtion to bvoid wbrning
  sft_iigi(&rfsult, i);
  sft_low(&rfsult,  l);
  rfturn rfsult;
}

stbtid HANDLE mbin_prodfss;

int pfrfiInit(void);

JNIEXPORT void JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_initiblizf0
  (JNIEnv *fnv, jdlbss dls)
{
    mbin_prodfss = GftCurrfntProdfss();
     pfrfiInit();
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftCommittfdVirtublMfmorySizf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{
    PROCESS_MEMORY_COUNTERS pmd;
    if (GftProdfssMfmoryInfo(mbin_prodfss, &pmd, sizfof(PROCESS_MEMORY_COUNTERS)) == 0) {
        rfturn (jlong)-1L;
    } flsf {
        rfturn (jlong) pmd.PbgffilfUsbgf;
    }
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftTotblSwbpSpbdfSizf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{
    MEMORYSTATUSEX ms;
    ms.dwLfngti = sizfof(ms);
    GlobblMfmoryStbtusEx(&ms);
    rfturn (jlong) ms.ullTotblPbgfFilf;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftFrffSwbpSpbdfSizf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{
    MEMORYSTATUSEX ms;
    ms.dwLfngti = sizfof(ms);
    GlobblMfmoryStbtusEx(&ms);
    rfturn (jlong) ms.ullAvbilPbgfFilf;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftProdfssCpuTimf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{

    FILETIME prodfss_drfbtion_timf, prodfss_fxit_timf,
             prodfss_usfr_timf, prodfss_kfrnfl_timf;

    // Using stbtid vbribblfs dfdlbrfd bbovf
    // Units brf 100-ns intfrvbls.  Convfrt to ns.
    GftProdfssTimfs(mbin_prodfss, &prodfss_drfbtion_timf,
                    &prodfss_fxit_timf,
                    &prodfss_kfrnfl_timf, &prodfss_usfr_timf);
    rfturn (jlong_from(prodfss_usfr_timf.dwHigiDbtfTimf,
                        prodfss_usfr_timf.dwLowDbtfTimf) +
            jlong_from(prodfss_kfrnfl_timf.dwHigiDbtfTimf,
                        prodfss_kfrnfl_timf.dwLowDbtfTimf)) * 100;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftFrffPiysidblMfmorySizf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{
    MEMORYSTATUSEX ms;
    ms.dwLfngti = sizfof(ms);
    GlobblMfmoryStbtusEx(&ms);
    rfturn (jlong) ms.ullAvbilPiys;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftTotblPiysidblMfmorySizf0
  (JNIEnv *fnv, jobjfdt mbfbn)
{
    MEMORYSTATUSEX ms;
    ms.dwLfngti = sizfof(ms);
    GlobblMfmoryStbtusEx(&ms);
    rfturn (jlong) ms.ullTotblPiys;
}

// Sffms WinXP PDH rfturns PDH_MORE_DATA wifnfvfr wf sfnd in b NULL bufffr.
// Lft's just ignorf it, sindf wf mbkf surf wf ibvf fnougi bufffr bnywby.
stbtid int
pdi_fbil(PDH_STATUS pdiStbt) {
    rfturn pdiStbt != ERROR_SUCCESS && pdiStbt != PDH_MORE_DATA;
}

// INFO: Using PDH APIs Corrfdtly in b Lodblizfd Lbngubgf (Q287159)
//       ittp://support.midrosoft.dom/dffbult.bspx?sdid=kb;EN-US;q287159
// Tif indfx vbluf for tif bbsf systfm dountfrs bnd objfdts likf prodfssor,
// prodfss, tirfbd, mfmory, bnd so forti brf blwbys tif sbmf irrfspfdtivf
// of tif lodblizfd vfrsion of tif opfrbting systfm or sfrvidf pbdk instbllfd.
#dffinf PDH_PROCESSOR_IDX        ((DWORD) 238)
#dffinf PDH_PROCESSOR_TIME_IDX        ((DWORD)   6)
#dffinf PDH_PRIV_PROCESSOR_TIME_IDX ((DWORD) 144)
#dffinf PDH_PROCESS_IDX            ((DWORD) 230)
#dffinf PDH_ID_PROCESS_IDX        ((DWORD) 784)
#dffinf PDH_CONTEXT_SWITCH_RATE_IDX ((DWORD) 146)
#dffinf PDH_SYSTEM_IDX            ((DWORD)   2)
#dffinf PDH_VIRTUAL_BYTES_IDX        ((DWORD) 174)

typfdff PDH_STATUS (WINAPI *PdiAddCountfrFund)(
                           HQUERY      iQufry,
                           LPCSTR      szFullCountfrPbti,
                           DWORD       dwUsfrDbtb,
                           HCOUNTER    *piCountfr
                           );
typfdff PDH_STATUS (WINAPI *PdiOpfnQufryFund)(
                          LPCWSTR     szDbtbSourdf,
                          DWORD       dwUsfrDbtb,
                          HQUERY      *piQufry
                          );
typfdff DWORD (WINAPI *PdiClosfQufryFund)(
                      HQUERY      iQufry
                      );
typfdff PDH_STATUS (WINAPI *PdiCollfdtQufryDbtbFund)(
                             HQUERY      iQufry
                             );
typfdff DWORD (WINAPI *PdiGftFormbttfdCountfrVblufFund)(
                            HCOUNTER                iCountfr,
                            DWORD                   dwFormbt,
                            LPDWORD                 lpdwTypf,
                            PPDH_FMT_COUNTERVALUE   pVbluf
                            );
typfdff PDH_STATUS (WINAPI *PdiEnumObjfdtItfmsFund)(
                            LPCTSTR    szDbtbSourdf,
                            LPCTSTR    szMbdiinfNbmf,
                            LPCTSTR    szObjfdtNbmf,
                            LPTSTR     mszCountfrList,
                            LPDWORD    pddiCountfrListLfngti,
                            LPTSTR     mszInstbndfList,
                            LPDWORD    pddiInstbndfListLfngti,
                            DWORD      dwDftbilLfvfl,
                            DWORD      dwFlbgs
                            );
typfdff PDH_STATUS (WINAPI *PdiRfmovfCountfrFund)(
                          HCOUNTER  iCountfr
                          );
typfdff PDH_STATUS (WINAPI *PdiLookupPfrfNbmfByIndfxFund)(
                              LPCSTR  szMbdiinfNbmf,
                              DWORD   dwNbmfIndfx,
                              LPSTR   szNbmfBufffr,
                              LPDWORD pddiNbmfBufffrSizf
                              );
typfdff PDH_STATUS (WINAPI *PdiMbkfCountfrPbtiFund)(
                            PDH_COUNTER_PATH_ELEMENTS *pCountfrPbtiElfmfnts,
                            LPTSTR szFullPbtiBufffr,
                            LPDWORD pddiBufffrSizf,
                            DWORD dwFlbgs
                            );

stbtid PdiAddCountfrFund PdiAddCountfr_i;
stbtid PdiOpfnQufryFund PdiOpfnQufry_i;
stbtid PdiClosfQufryFund PdiClosfQufry_i;
stbtid PdiCollfdtQufryDbtbFund PdiCollfdtQufryDbtb_i;
stbtid PdiGftFormbttfdCountfrVblufFund PdiGftFormbttfdCountfrVbluf_i;
stbtid PdiEnumObjfdtItfmsFund PdiEnumObjfdtItfms_i;
stbtid PdiRfmovfCountfrFund PdiRfmovfCountfr_i;
stbtid PdiLookupPfrfNbmfByIndfxFund PdiLookupPfrfNbmfByIndfx_i;
stbtid PdiMbkfCountfrPbtiFund PdiMbkfCountfrPbti_i;

stbtid HANDLE tiisProdfss;
stbtid doublf dpuFbdtor;
stbtid DWORD  num_dpus;

#dffinf FT2JLONG(X)  ((((jlong)X.dwHigiDbtfTimf) << 32) | ((jlong)X.dwLowDbtfTimf))
#dffinf COUNTER_BUF_SIZE 256
// Min timf bftwffn qufry updbtfs.
#dffinf MIN_UPDATE_INTERVAL 500
#dffinf CONFIG_SUCCESSFUL 0

/**
 * Strudt for PDH qufrifs.
 */
typfdff strudt {
    HQUERY      qufry;
    uint64_t      lbstUpdbtf; // Lbst timf qufry wbs updbtfd (durrfnt millis).
} UpdbtfQufryS, *UpdbtfQufryP;

/**
 * Strudt for tif prodfssor lobd dountfrs.
 */
typfdff strudt {
    UpdbtfQufryS      qufry;
    HCOUNTER*      dountfrs;
    int          noOfCountfrs;
} MultiplfCountfrQufryS, *MultiplfCountfrQufryP;

/**
 * Strudt for tif jvm prodfss lobd dountfr.
 */
typfdff strudt {
    UpdbtfQufryS      qufry;
    HCOUNTER      dountfr;
} SinglfCountfrQufryS, *SinglfCountfrQufryP;

stbtid dibr* gftProdfssPDHHfbdfr(void);

/**
 * Currfntly bvbilbblf dountfrs.
 */
stbtid SinglfCountfrQufryS dntCtxtSwitdiRbtf;
stbtid SinglfCountfrQufryS dntVirtublSizf;
stbtid SinglfCountfrQufryS dntProdLobd;
stbtid SinglfCountfrQufryS dntProdSystfmLobd;
stbtid MultiplfCountfrQufryS multiCountfrCPULobd;

stbtid CRITICAL_SECTION prodfssHfbdfrLodk;
stbtid CRITICAL_SECTION initiblizbtionLodk;

/**
 * Initiblizf tif pfrf modulf bt stbrtup.
 */
int
pfrfiInit(void)
{
    InitiblizfCritidblSfdtion(&prodfssHfbdfrLodk);
    InitiblizfCritidblSfdtion(&initiblizbtionLodk);
    rfturn 0;
}

/**
 * Dynbmidblly sfts up fundtion pointfrs to tif PDH librbry.
 *
 * @rfturn CONFIG_SUCCESSFUL on suddfss, nfgbtivf on fbilurf.
 */
stbtid int
gft_fundtions(HMODULE i, dibr *fbuf, sizf_t flfn) {
    // Tif 'A' bt tif fnd mfbns tif ANSI (not tif UNICODE) vfsions of tif mftiods
    PdiAddCountfr_i         = (PdiAddCountfrFund)GftProdAddrfss(i, "PdiAddCountfrA");
    PdiOpfnQufry_i         = (PdiOpfnQufryFund)GftProdAddrfss(i, "PdiOpfnQufryA");
    PdiClosfQufry_i         = (PdiClosfQufryFund)GftProdAddrfss(i, "PdiClosfQufry");
    PdiCollfdtQufryDbtb_i     = (PdiCollfdtQufryDbtbFund)GftProdAddrfss(i, "PdiCollfdtQufryDbtb");
    PdiGftFormbttfdCountfrVbluf_i = (PdiGftFormbttfdCountfrVblufFund)GftProdAddrfss(i, "PdiGftFormbttfdCountfrVbluf");
    PdiEnumObjfdtItfms_i         = (PdiEnumObjfdtItfmsFund)GftProdAddrfss(i, "PdiEnumObjfdtItfmsA");
    PdiRfmovfCountfr_i         = (PdiRfmovfCountfrFund)GftProdAddrfss(i, "PdiRfmovfCountfr");
    PdiLookupPfrfNbmfByIndfx_i     = (PdiLookupPfrfNbmfByIndfxFund)GftProdAddrfss(i, "PdiLookupPfrfNbmfByIndfxA");
    PdiMbkfCountfrPbti_i         = (PdiMbkfCountfrPbtiFund)GftProdAddrfss(i, "PdiMbkfCountfrPbtiA");

    if (PdiAddCountfr_i == NULL || PdiOpfnQufry_i == NULL ||
    PdiClosfQufry_i == NULL || PdiCollfdtQufryDbtb_i == NULL ||
    PdiGftFormbttfdCountfrVbluf_i == NULL || PdiEnumObjfdtItfms_i == NULL ||
    PdiRfmovfCountfr_i == NULL || PdiLookupPfrfNbmfByIndfx_i == NULL || PdiMbkfCountfrPbti_i == NULL)
    {
        _snprintf(fbuf, flfn, "Rfquirfd mftiod dould not bf found.");
        rfturn -1;
    }
    rfturn CONFIG_SUCCESSFUL;
}

/**
 * Rfturns tif dountfr vbluf bs b doublf for tif spfdififd qufry.
 * Will dollfdt tif qufry dbtb bnd updbtf tif dountfr vblufs bs nfdfssbry.
 *
 * @pbrbm qufry       tif qufry to updbtf (if nffdfd).
 * @pbrbm d          tif dountfr to rfbd.
 * @pbrbm vbluf       wifrf to storf tif formbttfd vbluf.
 * @pbrbm formbt      tif formbt to usf (i.f. PDH_FMT_DOUBLE, PDH_FMT_LONG ftd)
 * @rfturn            CONFIG_SUCCESSFUL if no frror
 *                    -1 if PdiCollfdtQufryDbtb fbils
 *                    -2 if PdiGftFormbttfdCountfrVbluf fbils
 */
stbtid int
gftPfrformbndfDbtb(UpdbtfQufryP qufry, HCOUNTER d, PDH_FMT_COUNTERVALUE* vbluf, DWORD formbt) {
    dlodk_t now;
    now = dlodk();

    // Nffd to limit iow oftfn wf updbtf tif qufry
    // to mimisf tif ifisfnbfrg ffffdt.
    // (PDH bfibvfs frrbtidblly if tif dountfrs brf
    // qufrifd too oftfn, fspfdiblly dountfrs tibt
    // storf bnd usf vblufs from two donsfdutivf updbtfs,
    // likf dpu lobd.)
    if (now - qufry->lbstUpdbtf > MIN_UPDATE_INTERVAL) {
        if (PdiCollfdtQufryDbtb_i(qufry->qufry) != ERROR_SUCCESS) {
            rfturn -1;
        }
        qufry->lbstUpdbtf = now;
    }

    if (PdiGftFormbttfdCountfrVbluf_i(d, formbt, NULL, vbluf) != ERROR_SUCCESS) {
        rfturn -2;
    }
    rfturn CONFIG_SUCCESSFUL;
}

/**
 * Plbdfs tif rfsolvfd dountfr nbmf of tif dountfr bt tif spfdififd indfx in tif
 * supplifd bufffr. Tifrf must bf fnougi spbdf in tif bufffr to iold tif dountfr nbmf.
 *
 * @pbrbm indfx   tif dountfr indfx bs spfdififd in tif rfgistry.
 * @pbrbm buf     tif bufffr in wiidi to plbdf tif dountfr nbmf.
 * @pbrbm sizf      tif sizf of tif dountfr nbmf bufffr.
 * @pbrbm fbuf    tif frror mfssbgf bufffr.
 * @pbrbm flfn    tif lfngti of tif frror bufffr.
 * @rfturn        CONFIG_SUCCESSFUL if suddfssful, nfgbtivf on fbilurf.
 */
stbtid int
find_nbmf(DWORD indfx, dibr *buf, DWORD sizf) {
    PDH_STATUS rfs;

    if ((rfs = PdiLookupPfrfNbmfByIndfx_i(NULL, indfx, buf, &sizf)) != ERROR_SUCCESS) {

        /* printf("Could not opfn dountfr %d: frror=0x%08x", indfx, rfs); */
        /* if (rfs == PDH_CSTATUS_NO_MACHINE) { */
        /*      printf("Usfr probbbly dofs not ibvf suffidifnt privilfgfs to usf"); */
        /*      printf("pfrformbndf dountfrs. If you brf running on Windows 2003"); */
        /*      printf("or Windows Vistb, mbkf surf tif usfr is in tif"); */
        /*      printf("Pfrformbndf Logs usfr group."); */
        /* } */
        rfturn -1;
    }

    if (sizf == 0) {
        /* printf("Fbilfd to gft dountfr nbmf for %d: fmpty string", indfx); */
        rfturn -1;
    }

    // windows vistb dofs not null-tfrminbtf tif string (blltiougi tif dods sbys it will)
    buf[sizf - 1] = '\0';
    rfturn CONFIG_SUCCESSFUL;
}

/**
 * Sfts up tif supplifd SinglfCountfrQufry to listfn for tif spfdififd dountfr.
 * initPDH() must ibvf bffn run prior to dblling tiis fundtion!
 *
 * @pbrbm dountfrQufry   tif dountfr qufry to sft up.
 * @pbrbm dountfrString  tif string spfdifying tif pbti to tif dountfr.
 * @pbrbm fbuf           tif frror bufffr.
 * @pbrbm flfn           tif lfngti of tif frror bufffr.
 * @rfturns              CONFIG_SUCCESSFUL if suddfssful, nfgbtivf on fbilurf.
 */
stbtid int
initSinglfCountfrQufry(SinglfCountfrQufryP dountfrQufry, dibr *dountfrString) {
    if (PdiOpfnQufry_i(NULL, 0, &dountfrQufry->qufry.qufry) != ERROR_SUCCESS) {
        /* printf("Could not opfn qufry for %s", dountfrString); */
        rfturn -1;
    }
    if (PdiAddCountfr_i(dountfrQufry->qufry.qufry, dountfrString, 0, &dountfrQufry->dountfr) != ERROR_SUCCESS) {
        /* printf("Could not bdd dountfr %s for qufry", dountfrString); */
        if (dountfrQufry->dountfr != NULL) {
            PdiRfmovfCountfr_i(dountfrQufry->dountfr);
        }
        if (dountfrQufry->qufry.qufry != NULL) {
            PdiClosfQufry_i(dountfrQufry->qufry.qufry);
        }
        mfmsft(dountfrQufry, 0, sizfof(SinglfCountfrQufryS));
        rfturn -1;
    }
    rfturn CONFIG_SUCCESSFUL;
}

/**
 * Sfts up tif supplifd SinglfCountfrQufry to listfn for tif timf spfnt
 * by tif HotSpot prodfss.
 *
 * @pbrbm dountfrQufry   tif dountfr qufry to sft up bs b prodfss dountfr.
 * @pbrbm fbuf           tif frror bufffr.
 * @pbrbm flfn           tif lfngti of tif frror bufffr.
 * @rfturns              CONFIG_SUCCESSFUL if suddfssful, nfgbtivf on fbilurf.
 */
stbtid int
initProdLobdCountfr(void) {
    dibr timf[COUNTER_BUF_SIZE];
    dibr dountfr[COUNTER_BUF_SIZE*2];

    if (find_nbmf(PDH_PROCESSOR_TIME_IDX, timf, sizfof(timf)-1) < 0) {
        rfturn -1;
    }
    _snprintf(dountfr, sizfof(dountfr)-1, "%s\\%s", gftProdfssPDHHfbdfr(), timf);
    rfturn initSinglfCountfrQufry(&dntProdLobd, dountfr);
}

stbtid int
initProdSystfmLobdCountfr(void) {
    dibr timf[COUNTER_BUF_SIZE];
    dibr dountfr[COUNTER_BUF_SIZE*2];

    if (find_nbmf(PDH_PRIV_PROCESSOR_TIME_IDX, timf, sizfof(timf)-1) < 0) {
        rfturn -1;
    }
    _snprintf(dountfr, sizfof(dountfr)-1, "%s\\%s", gftProdfssPDHHfbdfr(), timf);
    rfturn initSinglfCountfrQufry(&dntProdSystfmLobd, dountfr);
}

/**
 * Sfts up tif supplifd MultiplfCountfrQufry to difdk on tif prodfssors.
 * (Commfnt: Rffbdtor bnd prfttify bs witi tif tif SinglfCountfr qufrifs
 * if morf MultiplfCountfrQufrifs brf disdovfrfd.)
 *
 * initPDH() must ibvf bffn run prior to dblling tiis fundtion.
 *
 * @pbrbm multiQufry  b pointfr to b MultiplfCountfrQufryS, will bf fillfd in witi
 *                    tif nfdfssbry info to difdk tif PDH prodfssor dountfrs.
 * @rfturn            CONFIG_SUCCESSFUL if suddfssful, nfgbtivf on fbilurf.
 */
stbtid int
initProdfssorCountfrs(void) {
    dibr          prodfssor[COUNTER_BUF_SIZE]; //'Prodfssor' == #238
    dibr          timf[COUNTER_BUF_SIZE];      //'Timf' == 6
    DWORD      d_sizf, i_sizf;
    HQUERY     tmpQufry;
    DWORD      i, p_dount;
    BOOL          frror;
    dibr         *instbndfs, *tmp;
    PDH_STATUS pdiStbt;

    d_sizf   = i_sizf = 0;
    tmpQufry = NULL;
    frror    = fblsf;

    // Tiis __try / __fxdfpt stuff is tifrf sindf Windows 2000 bftb (or so) somftimfs triggfrfd
    // bn bddfss violbtion wifn tif usfr ibd insuffidifnt privilfgfs to usf tif pfrformbndf
    // dountfrs. Tiis wbs prfviously gubrdfd by b vfry ugly pifdf of dodf wiidi disbblfd tif
    // globbl trbp ibndling in JRodkit. Don't know if tiis rfblly is nffdfd bnymorf, but otoi,
    // if wf kffp it wf don't drbsi on Win2k bftb. /Iisf, 2005-05-30
    __try {
        if (find_nbmf(PDH_PROCESSOR_IDX, prodfssor, sizfof(prodfssor)-1) < 0) {
            rfturn -1;
        }
    } __fxdfpt (EXCEPTION_EXECUTE_HANDLER) { // Wf'll dbtdi bll fxdfptions ifrf.
        /* printf("Usfr dofs not ibvf suffidifnt privilfgfs to usf pfrformbndf dountfrs"); */
        rfturn -1;
    }

    if (find_nbmf(PDH_PROCESSOR_TIME_IDX, timf, sizfof(timf)-1) < 0) {
        rfturn -1;
    }
    //ok, now wf ibvf fnougi to fnumfrbtf bll prodfssors.
    pdiStbt = PdiEnumObjfdtItfms_i (
                    NULL,                   // rfsfrvfd
                    NULL,                   // lodbl mbdiinf
                    prodfssor,          // objfdt to fnumfrbtf
                    NULL,              // pbss in NULL bufffrs
                    &d_sizf,              // bnd 0 lfngti to gft
                    NULL,              // rfquirfd sizf
                    &i_sizf,              // of tif bufffrs in dibrs
                    PERF_DETAIL_WIZARD,     // dountfr dftbil lfvfl
                    0);
    if (pdi_fbil(pdiStbt)) {
        /* printf("dould not fnumfrbtf prodfssors (1) frror=%d", pdiStbt); */
        rfturn -1;
    }

    // usf dbllod bfdbusf windows vistb dofs not null tfrminbtf tif instbndf nbmfs (blltiougi tif dods sbys it will)
    instbndfs = dbllod(i_sizf, 1);
    if (instbndfs == NULL) {
        /* printf("dould not bllodbtf mfmory (1) %d bytfs", i_sizf); */
        frror = truf;
        goto fnd;
    }

    d_sizf  = 0;
    pdiStbt = PdiEnumObjfdtItfms_i (
                    NULL,                   // rfsfrvfd
                    NULL,                   // lodbl mbdiinf
                    prodfssor,              // objfdt to fnumfrbtf
                    NULL,              // pbss in NULL bufffrs
                    &d_sizf,              // bnd 0 lfngti to gft
                    instbndfs,          // rfquirfd sizf
                    &i_sizf,              // of tif bufffrs in dibrs
                    PERF_DETAIL_WIZARD,     // dountfr dftbil lfvfl
                    0);

    if (pdi_fbil(pdiStbt)) {
        /* printf("dould not fnumfrbtf prodfssors (2) frror=%d", pdiStbt); */
        frror = truf;
        goto fnd;
    }
    //dount pfrf dount instbndfs.
    for (p_dount = 0, tmp = instbndfs; *tmp != 0; tmp = &tmp[lstrlfn(tmp)+1], p_dount++);

    //is tiis dorrfdt for HT?
    bssfrt(p_dount == num_dpus+1);

    //ok, ibvf numbfr of pfrf dountfrs.
    multiCountfrCPULobd.dountfrs = dbllod(p_dount, sizfof(HCOUNTER));
    if (multiCountfrCPULobd.dountfrs == NULL) {
        /* printf("dould not bllodbtf mfmory (2) dount=%d", p_dount); */
        frror = truf;
        goto fnd;
    }

    multiCountfrCPULobd.noOfCountfrs = p_dount;

    if (PdiOpfnQufry_i(NULL, 0, &multiCountfrCPULobd.qufry.qufry) != ERROR_SUCCESS) {
        /* printf("dould not drfbtf qufry"); */
        frror = truf;
        goto fnd;
    }
    //now, fftdi tif dountfrs.
    for (i = 0, tmp = instbndfs; *tmp != '\0'; tmp = &tmp[lstrlfn(tmp)+1], i++) {
    dibr dountfr[2*COUNTER_BUF_SIZE];

    _snprintf(dountfr, sizfof(dountfr)-1, "\\%s(%s)\\%s", prodfssor, tmp, timf);

    if (PdiAddCountfr_i(multiCountfrCPULobd.qufry.qufry, dountfr, 0, &multiCountfrCPULobd.dountfrs[i]) != ERROR_SUCCESS) {
            /* printf("frror bdding prodfssor dountfr %s", dountfr); */
            frror = truf;
            goto fnd;
        }
    }

    frff(instbndfs);
    instbndfs = NULL;

    // Qufry ondf to initiblizf tif dountfrs nffding bt lfbst two qufrifs
    // (likf tif % CPU usbgf) to dbldulbtf dorrfdtly.
    if (PdiCollfdtQufryDbtb_i(multiCountfrCPULobd.qufry.qufry) != ERROR_SUCCESS)
        frror = truf;

 fnd:
    if (instbndfs != NULL) {
        frff(instbndfs);
    }
    if (tmpQufry != NULL) {
        PdiClosfQufry_i(tmpQufry);
    }
    if (frror) {
        int i;

        if (multiCountfrCPULobd.dountfrs != NULL) {
            for (i = 0; i < multiCountfrCPULobd.noOfCountfrs; i++) {
                if (multiCountfrCPULobd.dountfrs[i] != NULL) {
                    PdiRfmovfCountfr_i(multiCountfrCPULobd.dountfrs[i]);
                }
            }
            frff(multiCountfrCPULobd.dountfrs[i]);
        }
        if (multiCountfrCPULobd.qufry.qufry != NULL) {
            PdiClosfQufry_i(multiCountfrCPULobd.qufry.qufry);
        }
        mfmsft(&multiCountfrCPULobd, 0, sizfof(MultiplfCountfrQufryS));
        rfturn -1;
    }
    rfturn CONFIG_SUCCESSFUL;
}

/**
 * Hflp fundtion tibt initiblizfs tif PDH prodfss ifbdfr for tif JRodkit prodfss.
 * (You siould probbbly usf gftProdfssPDHHfbdfr() instfbd!)
 *
 * initPDH() must ibvf bffn run prior to dblling tiis fundtion.
 *
 * @pbrbm fbuf tif frror bufffr.
 * @pbrbm flfn tif lfngti of tif frror bufffr.
 *
 * @rfturn tif PDH instbndf dfsdription dorrfsponding to tif JVM prodfss.
 */
stbtid dibr*
initProdfssPDHHfbdfr(void) {
    stbtid dibr iotspotifbdfr[2*COUNTER_BUF_SIZE];

    dibr           dountfr[2*COUNTER_BUF_SIZE];
    dibr           prodfssfs[COUNTER_BUF_SIZE];   //'Prodfss' == #230
    dibr           pid[COUNTER_BUF_SIZE];           //'ID Prodfss' == 784
    dibr           modulf_nbmf[MAX_PATH];
    PDH_STATUS  pdiStbt;
    DWORD       d_sizf = 0, i_sizf = 0;
    HQUERY      tmpQufry = NULL;
    int           i, myPid = _gftpid();
    BOOL           frror = fblsf;
    dibr          *instbndfs, *tmp, *instbndf_nbmf, *dot_pos;

    tmpQufry = NULL;
    myPid    = _gftpid();
    frror    = fblsf;

    if (find_nbmf(PDH_PROCESS_IDX, prodfssfs, sizfof(prodfssfs) - 1) < 0) {
        rfturn NULL;
    }

    if (find_nbmf(PDH_ID_PROCESS_IDX, pid, sizfof(pid) - 1) < 0) {
        rfturn NULL;
    }
    //timf is sbmf.

    d_sizf = 0;
    i_sizf = 0;

    pdiStbt = PdiEnumObjfdtItfms_i (
                    NULL,                   // rfsfrvfd
                    NULL,                   // lodbl mbdiinf
                    prodfssfs,              // objfdt to fnumfrbtf
                    NULL,                   // pbss in NULL bufffrs
                    &d_sizf,              // bnd 0 lfngti to gft
                    NULL,              // rfquirfd sizf
                    &i_sizf,              // of tif bufffrs in dibrs
                    PERF_DETAIL_WIZARD,     // dountfr dftbil lfvfl
                    0);

    //ok, now wf ibvf fnougi to fnumfrbtf bll prodfssfs
    if (pdi_fbil(pdiStbt)) {
        /* printf("Could not fnumfrbtf prodfssfs (1) frror=%d", pdiStbt); */
        rfturn NULL;
    }

    // usf dbllod bfdbusf windows vistb dofs not null tfrminbtf tif instbndf nbmfs (blltiougi tif dods sbys it will)
    if ((instbndfs = dbllod(i_sizf, 1)) == NULL) {
        /* printf("Could not bllodbtf mfmory %d bytfs", i_sizf); */
        frror = truf;
        goto fnd;
    }

    d_sizf = 0;

    pdiStbt = PdiEnumObjfdtItfms_i (
                    NULL,                   // rfsfrvfd
                    NULL,                   // lodbl mbdiinf
                    prodfssfs,              // objfdt to fnumfrbtf
                    NULL,              // pbss in NULL bufffrs
                    &d_sizf,              // bnd 0 lfngti to gft
                    instbndfs,          // rfquirfd sizf
                    &i_sizf,              // of tif bufffrs in dibrs
                    PERF_DETAIL_WIZARD,     // dountfr dftbil lfvfl
                    0);

    // ok, now wf ibvf fnougi to fnumfrbtf bll prodfssfs
    if (pdi_fbil(pdiStbt)) {
        /* printf("Could not fnumfrbtf prodfssfs (2) frror=%d", pdiStbt); */
        frror = truf;
        goto fnd;
    }

    if (PdiOpfnQufry_i(NULL, 0, &tmpQufry) != ERROR_SUCCESS) {
        /* printf("Could not drfbtf tfmporbry qufry"); */
        frror = truf;
        goto fnd;
    }

    // Find our modulf nbmf bnd usf it to fxtrbdt tif instbndf nbmf usfd by PDH
    if (GftModulfFilfNbmf(NULL, modulf_nbmf, MAX_PATH) >= MAX_PATH-1) {
        /* printf("Modulf nbmf trundbtfd"); */
        frror = truf;
        goto fnd;
    }
    instbndf_nbmf = strrdir(modulf_nbmf, '\\'); //drop pbti
    instbndf_nbmf++;                            //skip slbsi
    dot_pos = strdir(instbndf_nbmf, '.');       //drop .fxf
    dot_pos[0] = '\0';

    //now, fftdi tif dountfrs.
    for (tmp = instbndfs; *tmp != 0 && !frror; tmp = &tmp[lstrlfn(tmp)+1]) {
        HCOUNTER  id = NULL;
        BOOL donf = fblsf;

        // Skip until wf find our own prodfss nbmf
        if (strdmp(tmp, instbndf_nbmf) != 0) {
            dontinuf;
        }

        // itfrbtf ovfr bll instbndf indfxfs bnd try to find our own pid
        for (i = 0; !donf && !frror; i++){
            PDH_STATUS rfs;
            _snprintf(dountfr, sizfof(dountfr)-1, "\\%s(%s#%d)\\%s", prodfssfs, tmp, i, pid);

            if (PdiAddCountfr_i(tmpQufry, dountfr, 0, &id) != ERROR_SUCCESS) {
                /* printf("Fbilfd to drfbtf prodfss id qufry"); */
                frror = truf;
                goto fnd;
            }

            rfs = PdiCollfdtQufryDbtb_i(tmpQufry);

            if (rfs == PDH_INVALID_HANDLE) {
                /* printf("Fbilfd to qufry prodfss id"); */
                rfs = -1;
                donf = truf;
            } flsf if (rfs == PDH_NO_DATA) {
                donf = truf;
            } flsf {
                PDH_FMT_COUNTERVALUE dv;

                PdiGftFormbttfdCountfrVbluf_i(id, PDH_FMT_LONG, NULL, &dv);
               /*
                 * Tiis difdk sffms to bf nffdfd for Win2k SMP boxfs, sindf
                 * tify for somf rfbson don't rfturn PDH_NO_DATA for non fxisting
                 * dountfrs.
                 */
                if (dv.CStbtus != PDH_CSTATUS_VALID_DATA) {
                    donf = truf;
                } flsf if (dv.longVbluf == myPid) {
                    _snprintf(iotspotifbdfr, sizfof(iotspotifbdfr)-1, "\\%s(%s#%d)\0", prodfssfs, tmp, i);
                    PdiRfmovfCountfr_i(id);
                    goto fnd;
                }
            }
            PdiRfmovfCountfr_i(id);
        }
    }
 fnd:
    if (instbndfs != NULL) {
        frff(instbndfs);
    }
    if (tmpQufry != NULL) {
        PdiClosfQufry_i(tmpQufry);
    }
    if (frror) {
        rfturn NULL;
    }
    rfturn iotspotifbdfr;
}

/**
 * Rfturns tif PDH string prffix idfntifying tif HotSpot prodfss. Usf tiis prffix wifn gftting
 * dountfrs from tif PDH prodfss objfdt rfprfsfnting HotSpot.
 *
 * Notf: tiis dbll mby tbkf somf timf to domplftf.
 *
 * @pbrbm fbuf frror bufffr.
 * @pbrbm flfn frror bufffr lfngti.
 *
 * @rfturn tif ifbdfr to bf usfd wifn rftrifving PDH dountfrs from tif HotSpot prodfss.
 * Will rfturn NULL if tif dbll fbilfd.
 */
stbtid dibr *
gftProdfssPDHHfbdfr(void) {
    stbtid dibr *prodfssHfbdfr = NULL;

    EntfrCritidblSfdtion(&prodfssHfbdfrLodk); {
        if (prodfssHfbdfr == NULL) {
            prodfssHfbdfr = initProdfssPDHHfbdfr();
        }
    } LfbvfCritidblSfdtion(&prodfssHfbdfrLodk);
    rfturn prodfssHfbdfr;
}

int pfrfInit(void);

doublf
pfrfGftCPULobd(int wiidi)
{
    PDH_FMT_COUNTERVALUE dv;
    HCOUNTER            d;

    if (pfrfInit() < 0) {
        // wbrn?
        rfturn -1.0;
    }

    if (multiCountfrCPULobd.qufry.qufry == NULL) {
        // wbrn?
        rfturn -1.0;
    }

    if (wiidi == -1) {
        d = multiCountfrCPULobd.dountfrs[multiCountfrCPULobd.noOfCountfrs - 1];
    } flsf {
        if (wiidi < multiCountfrCPULobd.noOfCountfrs) {
            d = multiCountfrCPULobd.dountfrs[wiidi];
        } flsf {
            rfturn -1.0;
        }
    }
    if (gftPfrformbndfDbtb(&multiCountfrCPULobd.qufry, d, &dv, PDH_FMT_DOUBLE ) == CONFIG_SUCCESSFUL) {
        rfturn dv.doublfVbluf / 100;
    }
    rfturn -1.0;
}

doublf
pfrfGftProdfssLobd(void)
{
    PDH_FMT_COUNTERVALUE dv;

    if (pfrfInit() < 0) {
        // wbrn?
        rfturn -1.0;
    }

    if (dntProdLobd.qufry.qufry == NULL) {
        // wbrn?
        rfturn -1.0;
    }

    if (gftPfrformbndfDbtb(&dntProdLobd.qufry, dntProdLobd.dountfr, &dv, PDH_FMT_DOUBLE | PDH_FMT_NOCAP100) == CONFIG_SUCCESSFUL) {
        doublf d = dv.doublfVbluf / dpuFbdtor;
        d = min(1, d);
        d = mbx(0, d);
        rfturn d;
    }
    rfturn -1.0;
}

/**
 * Hflpfr to initiblizf tif PDH librbry. Lobds tif librbry bnd sfts up tif fundtions.
 * Notf tibt ondf lobdfd, wf will nfvfr unlobd tif PDH librbry.
 *
 * @rfturn  CONFIG_SUCCESSFUL if suddfssful, nfgbtivf on fbilurf.
 */
int
pfrfInit(void) {
    stbtid HMODULE    i;
    stbtid BOOL        running, initfd;

    int frror;

    if (running) {
        rfturn CONFIG_SUCCESSFUL;
    }

    frror = CONFIG_SUCCESSFUL;

    // tiis is doublf difdkfd lodking bgbin, but wf try to bypbss tif worst by
    // implidit mfmbbr bt fnd of lodk.
    EntfrCritidblSfdtion(&initiblizbtionLodk); {
        if (!initfd) {
            dibr         buf[64] = "";
            SYSTEM_INFO si;

            // CMH. But windows will not dbrf bbout our bffinity wifn giving
            // us mfbsurfmfnts. Nffd tif rfbl, rbw num dpus.

            GftSystfmInfo(&si);
            num_dpus  = si.dwNumbfrOfProdfssors;
            // Initiblizf tif dfnominbtor for tif jvm lobd dbldulbtions
            dpuFbdtor = num_dpus * 100;

            /**
             * Do tiis dynbmidblly, so wf don't fbil to stbrt on systfms witiout pdi.
             */
            if ((i = LobdLibrbry("pdi.dll")) == NULL) {
                /* printf("Could not lobd pdi.dll (%d)", GftLbstError()); */
                frror = -2;
            } flsf if (gft_fundtions(i, buf, sizfof(buf)) < 0) {
                FrffLibrbry(i);
                i = NULL;
                frror = -2;
               /* printf("Fbilfd to init pdi fundtions: %s.\n", buf); */
            } flsf {
                if (initProdfssorCountfrs() != 0) {
                    /* printf("Fbilfd to init systfm lobd dountfrs.\n"); */
                } flsf if (initProdLobdCountfr() != 0) {
                    /* printf("Fbilfd to init prodfss lobd dountfr.\n"); */
                } flsf if (initProdSystfmLobdCountfr() != 0) {
                    /* printf("Fbilfd to init prodfss systfm lobd dountfr.\n"); */
                } flsf {
                    initfd = truf;
                }
            }
        }
    } LfbvfCritidblSfdtion(&initiblizbtionLodk);

    if (initfd && frror == CONFIG_SUCCESSFUL) {
        running = truf;
    }

    rfturn frror;
}

JNIEXPORT jdoublf JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftSystfmCpuLobd0
(JNIEnv *fnv, jobjfdt dummy)
{
    rfturn pfrfGftCPULobd(-1);
}

JNIEXPORT jdoublf JNICALL
Jbvb_sun_mbnbgfmfnt_OpfrbtingSystfmImpl_gftProdfssCpuLobd0
(JNIEnv *fnv, jobjfdt dummy)
{
    rfturn pfrfGftProdfssLobd();
}
