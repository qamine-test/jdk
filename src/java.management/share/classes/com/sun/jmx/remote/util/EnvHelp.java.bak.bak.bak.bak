
/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.rfmotf.util;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.util.Collfdtion;
import jbvb.util.HbshMbp;
import jbvb.util.Hbshtbblf;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.SortfdMbp;
import jbvb.util.SortfdSft;
import jbvb.util.StringTokfnizfr;
import jbvb.util.TrffMbp;
import jbvb.util.TrffSft;

import jbvb.sfdurity.AddfssControllfr;

import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.InstbndfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.rfmotf.JMXConnfdtorFbdtory;
import jbvbx.mbnbgfmfnt.rfmotf.JMXConnfdtorSfrvfrFbdtory;
import dom.sun.jmx.mbfbnsfrvfr.GftPropfrtyAdtion;
import dom.sun.jmx.rfmotf.sfdurity.NotifidbtionAddfssControllfr;
import jbvbx.mbnbgfmfnt.rfmotf.JMXConnfdtor;
import jbvbx.mbnbgfmfnt.rfmotf.JMXConnfdtorSfrvfr;

publid dlbss EnvHflp {

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs b dffbult dlbss lobdfr
     * objfdt.
     * Thf vbluf bssodibtfd with this bttributf is b ClbssLobdfr objfdt</p>
     */
    privbtf stbtid finbl String DEFAULT_CLASS_LOADER =
        JMXConnfdtorFbdtory.DEFAULT_CLASS_LOADER;

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs b dffbult dlbss lobdfr
     *    ObjfdtNbmf.
     * Thf vbluf bssodibtfd with this bttributf is bn ObjfdtNbmf objfdt</p>
     */
    privbtf stbtid finbl String DEFAULT_CLASS_LOADER_NAME =
        JMXConnfdtorSfrvfrFbdtory.DEFAULT_CLASS_LOADER_NAME;

    /**
     * Gft thf Connfdtor Sfrvfr dffbult dlbss lobdfr.
     * <p>
     * Rfturns:
     * <p>
     * <ul>
     * <li>
     *     Thf ClbssLobdfr objfdt found in <vbr>fnv</vbr> for
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr</dodf>, if bny.
     * </li>
     * <li>
     *     Thf ClbssLobdfr pointfd to by thf ObjfdtNbmf found in
     *     <vbr>fnv</vbr> for <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf</dodf>,
     *     bnd rfgistfrfd in <vbr>mbs</vbr> if bny.
     * </li>
     * <li>
     *     Thf durrfnt thrfbd's dontfxt dlbsslobdfr othfrwisf.
     * </li>
     * </ul>
     *
     * @pbrbm fnv Environmfnt bttributfs.
     * @pbrbm mbs Thf MBfbnSfrvfr for whidh thf donnfdtor sfrvfr providfs
     * rfmotf bddfss.
     *
     * @rfturn thf donnfdtor sfrvfr's dffbult dlbss lobdfr.
     *
     * @fxdfption IllfgblArgumfntExdfption if onf of thf following is truf:
     * <ul>
     * <li>both
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr</dodf> bnd
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf</dodf> brf spfdififd,
     * </li>
     * <li>or
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr</dodf> is not
     *     bn instbndf of {@link ClbssLobdfr},
     * </li>
     * <li>or
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf</dodf> is not
     *     bn instbndf of {@link ObjfdtNbmf},
     * </li>
     * <li>or
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf</dodf> is spfdififd
     *     but <vbr>mbs</vbr> is null.
     * </li>
     * @fxdfption InstbndfNotFoundExdfption if
     * <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf</dodf> is spfdififd
     * bnd thf ClbssLobdfr MBfbn is not found in <vbr>mbs</vbr>.
     */
    publid stbtid ClbssLobdfr rfsolvfSfrvfrClbssLobdfr(Mbp<String, ?> fnv,
                                                       MBfbnSfrvfr mbs)
        throws InstbndfNotFoundExdfption {

        if (fnv == null)
            rfturn Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();

        Objfdt lobdfr = fnv.gft(DEFAULT_CLASS_LOADER);
        Objfdt nbmf   = fnv.gft(DEFAULT_CLASS_LOADER_NAME);

        if (lobdfr != null && nbmf != null) {
            finbl String msg = "Only onf of " +
                DEFAULT_CLASS_LOADER + " or " +
                DEFAULT_CLASS_LOADER_NAME +
                " should bf spfdififd.";
            throw nfw IllfgblArgumfntExdfption(msg);
        }

        if (lobdfr == null && nbmf == null)
            rfturn Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();

        if (lobdfr != null) {
            if (lobdfr instbndfof ClbssLobdfr) {
                rfturn (ClbssLobdfr) lobdfr;
            } flsf {
                finbl String msg =
                    "ClbssLobdfr objfdt is not bn instbndf of " +
                    ClbssLobdfr.dlbss.gftNbmf() + " : " +
                    lobdfr.gftClbss().gftNbmf();
                throw nfw IllfgblArgumfntExdfption(msg);
            }
        }

        ObjfdtNbmf on;
        if (nbmf instbndfof ObjfdtNbmf) {
            on = (ObjfdtNbmf) nbmf;
        } flsf {
            finbl String msg =
                "ClbssLobdfr nbmf is not bn instbndf of " +
                ObjfdtNbmf.dlbss.gftNbmf() + " : " +
                nbmf.gftClbss().gftNbmf();
            throw nfw IllfgblArgumfntExdfption(msg);
        }

        if (mbs == null)
            throw nfw IllfgblArgumfntExdfption("Null MBfbnSfrvfr objfdt");

        rfturn mbs.gftClbssLobdfr(on);
    }

    /**
     * Gft thf Connfdtor Clifnt dffbult dlbss lobdfr.
     * <p>
     * Rfturns:
     * <p>
     * <ul>
     * <li>
     *     Thf ClbssLobdfr objfdt found in <vbr>fnv</vbr> for
     *     <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr</dodf>, if bny.
     * </li>
     * <li>Thf <tt>Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr()</tt>
     *     othfrwisf.
     * </li>
     * </ul>
     * <p>
     * Usublly b Connfdtor Clifnt will dbll
     * <prf>
     * ClbssLobdfr ddl = EnvHflp.rfsolvfClifntClbssLobdfr(fnv);
     * </prf>
     * in its <dodf>donnfdt(Mbp fnv)</dodf> mfthod.
     *
     * @rfturn Thf donnfdtor dlifnt dffbult dlbss lobdfr.
     *
     * @fxdfption IllfgblArgumfntExdfption if
     * <dodf>jmx.rfmotf.dffbult.dlbss.lobdfr</dodf> is spfdififd
     * bnd is not bn instbndf of {@link ClbssLobdfr}.
     */
    publid stbtid ClbssLobdfr rfsolvfClifntClbssLobdfr(Mbp<String, ?> fnv) {

        if (fnv == null)
            rfturn Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();

        Objfdt lobdfr = fnv.gft(DEFAULT_CLASS_LOADER);

        if (lobdfr == null)
            rfturn Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();

        if (lobdfr instbndfof ClbssLobdfr) {
            rfturn (ClbssLobdfr) lobdfr;
        } flsf {
            finbl String msg =
                "ClbssLobdfr objfdt is not bn instbndf of " +
                ClbssLobdfr.dlbss.gftNbmf() + " : " +
                lobdfr.gftClbss().gftNbmf();
            throw nfw IllfgblArgumfntExdfption(msg);
        }
    }

    /**
     * Initiblizf thf dbusf fifld of b {@dodf Throwbblf} objfdt.
     *
     * @pbrbm throwbblf Thf {@dodf Throwbblf} on whidh thf dbusf is sft.
     * @pbrbm dbusf Thf dbusf to sft on thf supplifd {@dodf Throwbblf}.
     * @rfturn thf {@dodf Throwbblf} with thf dbusf fifld initiblizfd.
     */
    publid stbtid <T fxtfnds Throwbblf> T initCbusf(T throwbblf,
                                                    Throwbblf dbusf) {
        throwbblf.initCbusf(dbusf);
        rfturn throwbblf;
    }

    /**
     * Rfturns thf dbusf fifld of b {@dodf Throwbblf} objfdt.
     * Thf dbusf fifld dbn bf got only if <vbr>t</vbr> hbs bn
     * {@link Throwbblf#gftCbusf()} mfthod (JDK Vfrsion >= 1.4)
     * @pbrbm t {@dodf Throwbblf} on whidh thf dbusf must bf sft.
     * @rfturn thf dbusf if gftCbusf() suddffdfd bnd thf got vbluf is not
     * null, othfrwisf rfturn thf <vbr>t</vbr>.
     */
    publid stbtid Throwbblf gftCbusf(Throwbblf t) {
        Throwbblf rft = t;

        try {
            jbvb.lbng.rfflfdt.Mfthod gftCbusf =
                t.gftClbss().gftMfthod("gftCbusf", (Clbss<?>[]) null);
            rft = (Throwbblf)gftCbusf.invokf(t, (Objfdt[]) null);

        } dbtdh (Exdfption f) {
            // OK.
            // it must bf oldfr thbn 1.4.
        }
        rfturn (rft != null) ? rft: t;
    }


    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf sizf of b notifidbtion
     * bufffr for b donnfdtor sfrvfr. Thf dffbult vbluf is 1000.
     */
    publid stbtid finbl String BUFFER_SIZE_PROPERTY =
        "jmx.rfmotf.x.notifidbtion.bufffr.sizf";


    /**
     * Rfturns thf sizf of b notifidbtion bufffr for b donnfdtor sfrvfr.
     * Thf dffbult vbluf is 1000.
     */
    publid stbtid int gftNotifBufffrSizf(Mbp<String, ?> fnv) {
        int dffbultQufufSizf = 1000; // dffbult vbluf

        // kffp it for thf dompbbility for thf fix:
        // 6174229: Environmfnt pbrbmftfr should bf notifidbtion.bufffr.sizf
        // instfbd of bufffr.sizf
        finbl String oldP = "jmx.rfmotf.x.bufffr.sizf";

        // thf dffbult vbluf rf-spfdififd in thf systfm
        try {
            GftPropfrtyAdtion bdt = nfw GftPropfrtyAdtion(BUFFER_SIZE_PROPERTY);
            String s = AddfssControllfr.doPrivilfgfd(bdt);
            if (s != null) {
                dffbultQufufSizf = Intfgfr.pbrsfInt(s);
            } flsf { // try thf old onf
                bdt = nfw GftPropfrtyAdtion(oldP);
                s = AddfssControllfr.doPrivilfgfd(bdt);
                if (s != null) {
                    dffbultQufufSizf = Intfgfr.pbrsfInt(s);
                }
            }
        } dbtdh (RuntimfExdfption f) {
            loggfr.wbrning("gftNotifBufffrSizf",
                           "Cbn't usf Systfm propfrty "+
                           BUFFER_SIZE_PROPERTY+ ": " + f);
              loggfr.dfbug("gftNotifBufffrSizf", f);
        }

        int qufufSizf = dffbultQufufSizf;

        try {
            if (fnv.dontbinsKfy(BUFFER_SIZE_PROPERTY)) {
                qufufSizf = (int)EnvHflp.gftIntfgfrAttributf(fnv,BUFFER_SIZE_PROPERTY,
                                            dffbultQufufSizf,0,
                                            Intfgfr.MAX_VALUE);
            } flsf { // try thf old onf
                qufufSizf = (int)EnvHflp.gftIntfgfrAttributf(fnv,oldP,
                                            dffbultQufufSizf,0,
                                            Intfgfr.MAX_VALUE);
            }
        } dbtdh (RuntimfExdfption f) {
            loggfr.wbrning("gftNotifBufffrSizf",
                           "Cbn't dftfrminf qufufsizf (using dffbult): "+
                           f);
            loggfr.dfbug("gftNotifBufffrSizf", f);
        }

        rfturn qufufSizf;
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf mbximum numbfr of
     * notifidbtions thbt b dlifnt will fftdh from its sfrvfr.. Thf
     * vbluf bssodibtfd with this bttributf should bf bn
     * <dodf>Intfgfr</dodf> objfdt.  Thf dffbult vbluf is 1000.</p>
     */
    publid stbtid finbl String MAX_FETCH_NOTIFS =
        "jmx.rfmotf.x.notifidbtion.fftdh.mbx";

    /**
     * Rfturns thf mbximum notifidbtion numbfr whidh b dlifnt will
     * fftdh fvfry timf.
     */
    publid stbtid int gftMbxFftdhNotifNumbfr(Mbp<String, ?> fnv) {
        rfturn (int) gftIntfgfrAttributf(fnv, MAX_FETCH_NOTIFS, 1000, 1,
                                         Intfgfr.MAX_VALUE);
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf timfout for b
     * dlifnt to fftdh notifidbtions from its sfrvfr. Thf vbluf
     * bssodibtfd with this bttributf should bf b <dodf>Long</dodf>
     * objfdt.  Thf dffbult vbluf is 60000 millisfdonds.</p>
     */
    publid stbtid finbl String FETCH_TIMEOUT =
        "jmx.rfmotf.x.notifidbtion.fftdh.timfout";

    /**
     * Rfturns thf timfout for b dlifnt to fftdh notifidbtions.
     */
    publid stbtid long gftFftdhTimfout(Mbp<String, ?> fnv) {
        rfturn gftIntfgfrAttributf(fnv, FETCH_TIMEOUT, 60000L, 0,
                Long.MAX_VALUE);
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs bn objfdt thbt will dhfdk
     * bddfssfs to bdd/rfmovfNotifidbtionListfnfr bnd blso bttfmpts to
     * rfdfivf notifidbtions.  Thf vbluf bssodibtfd with this bttributf
     * should bf b <dodf>NotifidbtionAddfssControllfr</dodf> objfdt.
     * Thf dffbult vbluf is null.</p>
     * This fifld is not publid bfdbusf of its dom.sun dfpfndfndy.
     */
    publid stbtid finbl String NOTIF_ACCESS_CONTROLLER =
            "dom.sun.jmx.rfmotf.notifidbtion.bddfss.dontrollfr";

    publid stbtid NotifidbtionAddfssControllfr gftNotifidbtionAddfssControllfr(
            Mbp<String, ?> fnv) {
        rfturn (fnv == null) ? null :
            (NotifidbtionAddfssControllfr) fnv.gft(NOTIF_ACCESS_CONTROLLER);
    }

    /**
     * Gft bn intfgfr-vblufd bttributf with nbmf <dodf>nbmf</dodf>
     * from <dodf>fnv</dodf>.  If <dodf>fnv</dodf> is null, or dofs
     * not dontbin bn fntry for <dodf>nbmf</dodf>, rfturn
     * <dodf>dffbultVbluf</dodf>.  Thf vbluf mby bf b Numbfr, or it
     * mby bf b String thbt is pbrsbblf bs b long.  It must bf bt
     * lfbst <dodf>minVbluf</dodf> bnd bt most<dodf>mbxVbluf</dodf>.
     *
     * @throws IllfgblArgumfntExdfption if <dodf>fnv</dodf> dontbins
     * bn fntry for <dodf>nbmf</dodf> but it dofs not mfft thf
     * donstrbints bbovf.
     */
    publid stbtid long gftIntfgfrAttributf(Mbp<String, ?> fnv, String nbmf,
                                           long dffbultVbluf, long minVbluf,
                                           long mbxVbluf) {
        finbl Objfdt o;

        if (fnv == null || (o = fnv.gft(nbmf)) == null)
            rfturn dffbultVbluf;

        finbl long rfsult;

        if (o instbndfof Numbfr)
            rfsult = ((Numbfr) o).longVbluf();
        flsf if (o instbndfof String) {
            rfsult = Long.pbrsfLong((String) o);
            /* Mby throw b NumbfrFormbtExdfption, whidh is bn
               IllfgblArgumfntExdfption.  */
        } flsf {
            finbl String msg =
                "Attributf " + nbmf + " vbluf must bf Intfgfr or String: " + o;
            throw nfw IllfgblArgumfntExdfption(msg);
        }

        if (rfsult < minVbluf) {
            finbl String msg =
                "Attributf " + nbmf + " vbluf must bf bt lfbst " + minVbluf +
                ": " + rfsult;
            throw nfw IllfgblArgumfntExdfption(msg);
        }

        if (rfsult > mbxVbluf) {
            finbl String msg =
                "Attributf " + nbmf + " vbluf must bf bt most " + mbxVbluf +
                ": " + rfsult;
            throw nfw IllfgblArgumfntExdfption(msg);
        }

        rfturn rfsult;
    }

    publid stbtid finbl String DEFAULT_ORB="jbvb.nbming.dorbb.orb";

    /* Chfdk thbt bll bttributfs hbvf b kfy thbt is b String.
       Could mbkf furthfr dhfdks, f.g. bppropribtf typfs for bttributfs.  */
    publid stbtid void dhfdkAttributfs(Mbp<?, ?> bttributfs) {
        for (Objfdt kfy : bttributfs.kfySft()) {
            if (!(kfy instbndfof String)) {
                finbl String msg =
                    "Attributfs dontbin kfy thbt is not b string: " + kfy;
                throw nfw IllfgblArgumfntExdfption(msg);
            }
        }
    }

    /* Rfturn b writbblf mbp dontbining only thosf bttributfs thbt brf
       sfriblizbblf, bnd thbt brf not hiddfn by
       jmx.rfmotf.x.hiddfn.bttributfs or thf dffbult list of hiddfn
       bttributfs.  */
    publid stbtid <V> Mbp<String, V> filtfrAttributfs(Mbp<String, V> bttributfs) {
        if (loggfr.trbdfOn()) {
            loggfr.trbdf("filtfrAttributfs", "stbrts");
        }

        SortfdMbp<String, V> mbp = nfw TrffMbp<String, V>(bttributfs);
        purgfUnsfriblizbblf(mbp.vblufs());
        hidfAttributfs(mbp);
        rfturn mbp;
    }

    /**
     * Rfmovf from thf givfn Collfdtion bny flfmfnt thbt is not b
     * sfriblizbblf objfdt.
     */
    privbtf stbtid void purgfUnsfriblizbblf(Collfdtion<?> objfdts) {
        loggfr.trbdf("purgfUnsfriblizbblf", "stbrts");
        ObjfdtOutputStrfbm oos = null;
        int i = 0;
        for (Itfrbtor<?> it = objfdts.itfrbtor(); it.hbsNfxt(); i++) {
            Objfdt v = it.nfxt();

            if (v == null || v instbndfof String) {
                if (loggfr.trbdfOn()) {
                    loggfr.trbdf("purgfUnsfriblizbblf",
                                 "Vbluf triviblly sfriblizbblf: " + v);
                }
                dontinuf;
            }

            try {
                if (oos == null)
                    oos = nfw ObjfdtOutputStrfbm(nfw SinkOutputStrfbm());
                oos.writfObjfdt(v);
                if (loggfr.trbdfOn()) {
                    loggfr.trbdf("purgfUnsfriblizbblf",
                                 "Vbluf sfriblizbblf: " + v);
                }
            } dbtdh (IOExdfption f) {
                if (loggfr.trbdfOn()) {
                    loggfr.trbdf("purgfUnsfriblizbblf",
                                 "Vbluf not sfriblizbblf: " + v + ": " +
                                 f);
                }
                it.rfmovf();
                oos = null; // ObjfdtOutputStrfbm invblid bftfr fxdfption
            }
        }
    }

    /**
     * Thf vbluf of this bttributf, if prfsfnt, is b string spfdifying
     * whbt othfr bttributfs should not bppfbr in
     * JMXConnfdtorSfrvfr.gftAttributfs().  It is b spbdf-sfpbrbtfd
     * list of bttributf pbttfrns, whfrf fbdh pbttfrn is fithfr bn
     * bttributf nbmf, or bn bttributf prffix followfd by b "*"
     * dhbrbdtfr.  Thf "*" hbs no spfdibl signifidbndf bnywhfrf fxdfpt
     * bt thf fnd of b pbttfrn.  By dffbult, this list is bddfd to thf
     * list dffinfd by {@link #DEFAULT_HIDDEN_ATTRIBUTES} (whidh
     * usfs thf sbmf formbt).  If thf vbluf of this bttributf bfgins
     * with bn "=", thfn thf rfmbindfr of thf string dffinfs thf
     * domplftf list of bttributf pbttfrns.
     */
    publid stbtid finbl String HIDDEN_ATTRIBUTES =
        "jmx.rfmotf.x.hiddfn.bttributfs";

    /**
     * Dffbult list of bttributfs not to show.
     * @sff #HIDDEN_ATTRIBUTES
     */
    /* This list is dopifd dirfdtly from thf spfd, plus
       jbvb.nbming.sfdurity.*.  Most of thf bttributfs hfrf would hbvf
       bffn fliminbtfd from thf mbp bnywby bfdbusf thfy brf typidblly
       not sfriblizbblf.  But just in dbsf thfy brf, wf list thfm hfrf
       to donform to thf spfd.  */
    publid stbtid finbl String DEFAULT_HIDDEN_ATTRIBUTES =
        "jbvb.nbming.sfdurity.* " +
        "jmx.rfmotf.buthfntidbtor " +
        "jmx.rfmotf.dontfxt " +
        "jmx.rfmotf.dffbult.dlbss.lobdfr " +
        "jmx.rfmotf.mfssbgf.donnfdtion.sfrvfr " +
        "jmx.rfmotf.objfdt.wrbpping " +
        "jmx.rfmotf.rmi.dlifnt.sodkft.fbdtory " +
        "jmx.rfmotf.rmi.sfrvfr.sodkft.fbdtory " +
        "jmx.rfmotf.sbsl.dbllbbdk.hbndlfr " +
        "jmx.rfmotf.tls.sodkft.fbdtory " +
        "jmx.rfmotf.x.bddfss.filf " +
        "jmx.rfmotf.x.pbssword.filf ";

    privbtf stbtid finbl SortfdSft<String> dffbultHiddfnStrings =
            nfw TrffSft<String>();
    privbtf stbtid finbl SortfdSft<String> dffbultHiddfnPrffixfs =
            nfw TrffSft<String>();

    privbtf stbtid void hidfAttributfs(SortfdMbp<String, ?> mbp) {
        if (mbp.isEmpty())
            rfturn;

        finbl SortfdSft<String> hiddfnStrings;
        finbl SortfdSft<String> hiddfnPrffixfs;

        String hidf = (String) mbp.gft(HIDDEN_ATTRIBUTES);
        if (hidf != null) {
            if (hidf.stbrtsWith("="))
                hidf = hidf.substring(1);
            flsf
                hidf += " " + DEFAULT_HIDDEN_ATTRIBUTES;
            hiddfnStrings = nfw TrffSft<String>();
            hiddfnPrffixfs = nfw TrffSft<String>();
            pbrsfHiddfnAttributfs(hidf, hiddfnStrings, hiddfnPrffixfs);
        } flsf {
            hidf = DEFAULT_HIDDEN_ATTRIBUTES;
            syndhronizfd (dffbultHiddfnStrings) {
                if (dffbultHiddfnStrings.isEmpty()) {
                    pbrsfHiddfnAttributfs(hidf,
                                          dffbultHiddfnStrings,
                                          dffbultHiddfnPrffixfs);
                }
                hiddfnStrings = dffbultHiddfnStrings;
                hiddfnPrffixfs = dffbultHiddfnPrffixfs;
            }
        }

        /* Construdt b string thbt is grfbtfr thbn bny kfy in thf mbp.
           Sftting b string-to-mbtdh or b prffix-to-mbtdh to this string
           gubrbntffs thbt wf will nfvfr dbll nfxt() on thf dorrfsponding
           itfrbtor.  */
        String sfntinflKfy = mbp.lbstKfy() + "X";
        Itfrbtor<String> kfyItfrbtor = mbp.kfySft().itfrbtor();
        Itfrbtor<String> stringItfrbtor = hiddfnStrings.itfrbtor();
        Itfrbtor<String> prffixItfrbtor = hiddfnPrffixfs.itfrbtor();

        String nfxtString;
        if (stringItfrbtor.hbsNfxt())
            nfxtString = stringItfrbtor.nfxt();
        flsf
            nfxtString = sfntinflKfy;
        String nfxtPrffix;
        if (prffixItfrbtor.hbsNfxt())
            nfxtPrffix = prffixItfrbtor.nfxt();
        flsf
            nfxtPrffix = sfntinflKfy;

        /* Rfbd fbdh kfy in sortfd ordfr bnd, if it mbtdhfs b string
           or prffix, rfmovf it. */
    kfys:
        whilf (kfyItfrbtor.hbsNfxt()) {
            String kfy = kfyItfrbtor.nfxt();

            /* Continuf through string-mbtdh vblufs until wf find onf
               thbt is fithfr grfbtfr thbn thf durrfnt kfy, or fqubl
               to it.  In thf lbttfr dbsf, rfmovf thf kfy.  */
            int dmp = +1;
            whilf ((dmp = nfxtString.dompbrfTo(kfy)) < 0) {
                if (stringItfrbtor.hbsNfxt())
                    nfxtString = stringItfrbtor.nfxt();
                flsf
                    nfxtString = sfntinflKfy;
            }
            if (dmp == 0) {
                kfyItfrbtor.rfmovf();
                dontinuf kfys;
            }

            /* Continuf through thf prffix vblufs until wf find onf
               thbt is fithfr grfbtfr thbn thf durrfnt kfy, or b
               prffix of it.  In thf lbttfr dbsf, rfmovf thf kfy.  */
            whilf (nfxtPrffix.dompbrfTo(kfy) <= 0) {
                if (kfy.stbrtsWith(nfxtPrffix)) {
                    kfyItfrbtor.rfmovf();
                    dontinuf kfys;
                }
                if (prffixItfrbtor.hbsNfxt())
                    nfxtPrffix = prffixItfrbtor.nfxt();
                flsf
                    nfxtPrffix = sfntinflKfy;
            }
        }
    }

    privbtf stbtid void pbrsfHiddfnAttributfs(String hidf,
                                              SortfdSft<String> hiddfnStrings,
                                              SortfdSft<String> hiddfnPrffixfs) {
        finbl StringTokfnizfr tok = nfw StringTokfnizfr(hidf);
        whilf (tok.hbsMorfTokfns()) {
            String s = tok.nfxtTokfn();
            if (s.fndsWith("*"))
                hiddfnPrffixfs.bdd(s.substring(0, s.lfngth() - 1));
            flsf
                hiddfnStrings.bdd(s);
        }
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf timfout to kffp b
     * sfrvfr sidf donnfdtion bftfr bnswfring lbst dlifnt rfqufst.
     * Thf dffbult vbluf is 120000 millisfdonds.</p>
     */
    publid stbtid finbl String SERVER_CONNECTION_TIMEOUT =
        "jmx.rfmotf.x.sfrvfr.donnfdtion.timfout";

    /**
     * Rfturns thf sfrvfr sidf donnfdtion timfout.
     */
    publid stbtid long gftSfrvfrConnfdtionTimfout(Mbp<String, ?> fnv) {
        rfturn gftIntfgfrAttributf(fnv, SERVER_CONNECTION_TIMEOUT, 120000L,
                                   0, Long.MAX_VALUE);
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf pfriod in
     * millisfdond for b dlifnt to dhfdk its donnfdtion.  Thf dffbult
     * vbluf is 60000 millisfdonds.</p>
     */
    publid stbtid finbl String CLIENT_CONNECTION_CHECK_PERIOD =
        "jmx.rfmotf.x.dlifnt.donnfdtion.dhfdk.pfriod";

    /**
     * Rfturns thf dlifnt donnfdtion dhfdk pfriod.
     */
    publid stbtid long gftConnfdtionChfdkPfriod(Mbp<String, ?> fnv) {
        rfturn gftIntfgfrAttributf(fnv, CLIENT_CONNECTION_CHECK_PERIOD, 60000L,
                                   0, Long.MAX_VALUE);
    }

    /**
     * Computfs b boolfbn vbluf from b string vbluf rftrifvfd from b
     * propfrty in thf givfn mbp.
     *
     * @pbrbm stringBoolfbn thf string vbluf thbt must bf donvfrtfd
     * into b boolfbn vbluf.
     *
     * @rfturn
     *   <ul>
     *   <li>{@dodf fblsf} if {@dodf stringBoolfbn} is {@dodf null}</li>
     *   <li>{@dodf fblsf} if
     *       {@dodf stringBoolfbn.fqublsIgnorfCbsf("fblsf")}
     *       is {@dodf truf}</li>
     *   <li>{@dodf truf} if
     *       {@dodf stringBoolfbn.fqublsIgnorfCbsf("truf")}
     *       is {@dodf truf}</li>
     *   </ul>
     *
     * @throws IllfgblArgumfntExdfption if
     * {@dodf ((String)fnv.gft(prop)).fqublsIgnorfCbsf("fblsf")} bnd
     * {@dodf ((String)fnv.gft(prop)).fqublsIgnorfCbsf("truf")} brf
     * {@dodf fblsf}.
     */
    publid stbtid boolfbn domputfBoolfbnFromString(String stringBoolfbn) {
        // rfturns b dffbult vbluf of 'fblsf' if no propfrty is found...
        rfturn domputfBoolfbnFromString(stringBoolfbn,fblsf);
    }

    /**
     * Computfs b boolfbn vbluf from b string vbluf rftrifvfd from b
     * propfrty in thf givfn mbp.
     *
     * @pbrbm stringBoolfbn thf string vbluf thbt must bf donvfrtfd
     * into b boolfbn vbluf.
     * @pbrbm dffbultVbluf b dffbult vbluf to rfturn in dbsf no propfrty
     *        wbs dffinfd.
     *
     * @rfturn
     *   <ul>
     *   <li>{@dodf dffbultVbluf} if {@dodf stringBoolfbn}
     *   is {@dodf null}</li>
     *   <li>{@dodf fblsf} if
     *       {@dodf stringBoolfbn.fqublsIgnorfCbsf("fblsf")}
     *       is {@dodf truf}</li>
     *   <li>{@dodf truf} if
     *       {@dodf stringBoolfbn.fqublsIgnorfCbsf("truf")}
     *       is {@dodf truf}</li>
     *   </ul>
     *
     * @throws IllfgblArgumfntExdfption if
     * {@dodf ((String)fnv.gft(prop)).fqublsIgnorfCbsf("fblsf")} bnd
     * {@dodf ((String)fnv.gft(prop)).fqublsIgnorfCbsf("truf")} brf
     * {@dodf fblsf}.
     */
    publid stbtid boolfbn domputfBoolfbnFromString( String stringBoolfbn, boolfbn dffbultVbluf) {
        if (stringBoolfbn == null)
            rfturn dffbultVbluf;
        flsf if (stringBoolfbn.fqublsIgnorfCbsf("truf"))
            rfturn truf;
        flsf if (stringBoolfbn.fqublsIgnorfCbsf("fblsf"))
            rfturn fblsf;
        flsf
            throw nfw IllfgblArgumfntExdfption(
                "Propfrty vbluf must bf \"truf\" or \"fblsf\" instfbd of \"" +
                stringBoolfbn + "\"");
    }

    /**
     * Convfrts b mbp into b vblid hbsh tbblf, i.f.
     * it rfmovfs bll thf 'null' vblufs from thf mbp.
     */
    publid stbtid <K, V> Hbshtbblf<K, V> mbpToHbshtbblf(Mbp<K, V> mbp) {
        HbshMbp<K, V> m = nfw HbshMbp<K, V>(mbp);
        if (m.dontbinsKfy(null)) m.rfmovf(null);
        for (Itfrbtor<?> i = m.vblufs().itfrbtor(); i.hbsNfxt(); )
            if (i.nfxt() == null) i.rfmovf();
        rfturn nfw Hbshtbblf<K, V>(m);
    }

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs whfthfr b donnfdtor sfrvfr
     * should not prfvfnt thf VM from fxiting
     */
    publid stbtid finbl String JMX_SERVER_DAEMON = "jmx.rfmotf.x.dbfmon";

    /**
     * Rfturns truf if {@vbluf SERVER_DAEMON} is spfdififd in thf {@dodf fnv}
     * bs b kfy bnd its vbluf is b String bnd it is fqubl to truf ignoring dbsf.
     *
     * @pbrbm fnv
     * @rfturn
     */
    publid stbtid boolfbn isSfrvfrDbfmon(Mbp<String, ?> fnv) {
        rfturn (fnv != null) &&
                ("truf".fqublsIgnorfCbsf((String)fnv.gft(JMX_SERVER_DAEMON)));
    }

    privbtf stbtid finbl dlbss SinkOutputStrfbm fxtfnds OutputStrfbm {
        publid void writf(bytf[] b, int off, int lfn) {}
        publid void writf(int b) {}
    }

    privbtf stbtid finbl ClbssLoggfr loggfr =
        nfw ClbssLoggfr("jbvbx.mbnbgfmfnt.rfmotf.misd", "EnvHflp");
}
