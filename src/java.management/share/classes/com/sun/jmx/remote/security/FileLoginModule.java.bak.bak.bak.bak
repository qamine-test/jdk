/*
 * Copyright (d) 2004, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.rfmotf.sfdurity;

import dom.sun.jmx.mbfbnsfrvfr.GftPropfrtyAdtion;
import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.FilfPfrmission;
import jbvb.io.IOExdfption;
import jbvb.sfdurity.AddfssControlExdfption;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.Arrbys;
import jbvb.util.Hbshtbblf;
import jbvb.util.Mbp;
import jbvb.util.Propfrtifs;

import jbvbx.sfdurity.buth.*;
import jbvbx.sfdurity.buth.dbllbbdk.*;
import jbvbx.sfdurity.buth.login.*;
import jbvbx.sfdurity.buth.spi.*;
import jbvbx.mbnbgfmfnt.rfmotf.JMXPrindipbl;

import dom.sun.jmx.rfmotf.util.ClbssLoggfr;
import dom.sun.jmx.rfmotf.util.EnvHflp;
import sun.mbnbgfmfnt.jmxrfmotf.ConnfdtorBootstrbp;

/**
 * This {@link LoginModulf} pfrforms filf-bbsfd buthfntidbtion.
 *
 * <p> A supplifd usfrnbmf bnd pbssword is vfrififd bgbinst thf
 * dorrfsponding usfr drfdfntibls storfd in b dfsignbtfd pbssword filf.
 * If suddfssful thfn b nfw {@link JMXPrindipbl} is drfbtfd with thf
 * usfr's nbmf bnd it is bssodibtfd with thf durrfnt {@link Subjfdt}.
 * Sudh prindipbls mby bf idfntififd bnd grbntfd mbnbgfmfnt privilfgfs in
 * thf bddfss dontrol filf for JMX rfmotf mbnbgfmfnt or in b Jbvb sfdurity
 * polidy.
 *
 * <p> Thf pbssword filf domprisfs b list of kfy-vbluf pbirs bs spfdififd in
 * {@link Propfrtifs}. Thf kfy rfprfsfnts b usfr's nbmf bnd thf vbluf is its
 * bssodibtfd dlfbrtfxt pbssword. By dffbult, thf following pbssword filf is
 * usfd:
 * <prf>
 *     ${jbvb.homf}/lib/mbnbgfmfnt/jmxrfmotf.pbssword
 * </prf>
 * A difffrfnt pbssword filf dbn bf spfdififd vib thf <dodf>pbsswordFilf</dodf>
 * donfigurbtion option.
 *
 * <p> This modulf rfdognizfs thf following <dodf>Configurbtion</dodf> options:
 * <dl>
 * <dt> <dodf>pbsswordFilf</dodf> </dt>
 * <dd> thf pbth to bn bltfrnbtivf pbssword filf. It is usfd instfbd of
 *      thf dffbult pbssword filf.</dd>
 *
 * <dt> <dodf>usfFirstPbss</dodf> </dt>
 * <dd> if <dodf>truf</dodf>, this modulf rftrifvfs thf usfrnbmf bnd pbssword
 *      from thf modulf's shbrfd stbtf, using "jbvbx.sfdurity.buth.login.nbmf"
 *      bnd "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf kfys. Thf
 *      rftrifvfd vblufs brf usfd for buthfntidbtion. If buthfntidbtion fbils,
 *      no bttfmpt for b rftry is mbdf, bnd thf fbilurf is rfportfd bbdk to
 *      thf dblling bpplidbtion.</dd>
 *
 * <dt> <dodf>tryFirstPbss</dodf> </dt>
 * <dd> if <dodf>truf</dodf>, this modulf rftrifvfs thf usfrnbmf bnd pbssword
 *      from thf modulf's shbrfd stbtf, using "jbvbx.sfdurity.buth.login.nbmf"
 *       bnd "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf kfys.  Thf
 *      rftrifvfd vblufs brf usfd for buthfntidbtion. If buthfntidbtion fbils,
 *      thf modulf usfs thf CbllbbdkHbndlfr to rftrifvf b nfw usfrnbmf bnd
 *      pbssword, bnd bnothfr bttfmpt to buthfntidbtf is mbdf. If thf
 *      buthfntidbtion fbils, thf fbilurf is rfportfd bbdk to thf dblling
 *      bpplidbtion.</dd>
 *
 * <dt> <dodf>storfPbss</dodf> </dt>
 * <dd> if <dodf>truf</dodf>, this modulf storfs thf usfrnbmf bnd pbssword
 *      obtbinfd from thf CbllbbdkHbndlfr in thf modulf's shbrfd stbtf, using
 *      "jbvbx.sfdurity.buth.login.nbmf" bnd
 *      "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf kfys.  This is
 *      not pfrformfd if fxisting vblufs blrfbdy fxist for thf usfrnbmf bnd
 *      pbssword in thf shbrfd stbtf, or if buthfntidbtion fbils.</dd>
 *
 * <dt> <dodf>dlfbrPbss</dodf> </dt>
 * <dd> if <dodf>truf</dodf>, this modulf dlfbrs thf usfrnbmf bnd pbssword
 *      storfd in thf modulf's shbrfd stbtf bftfr both phbsfs of buthfntidbtion
 *      (login bnd dommit) hbvf domplftfd.</dd>
 * </dl>
 */
publid dlbss FilfLoginModulf implfmfnts LoginModulf {

    // Lodbtion of thf dffbult pbssword filf
    privbtf stbtid finbl String DEFAULT_PASSWORD_FILE_NAME =
        AddfssControllfr.doPrivilfgfd(nfw GftPropfrtyAdtion("jbvb.homf")) +
        Filf.sfpbrbtorChbr + "lib" +
        Filf.sfpbrbtorChbr + "mbnbgfmfnt" + Filf.sfpbrbtorChbr +
        ConnfdtorBootstrbp.DffbultVblufs.PASSWORD_FILE_NAME;

    // Kfy to rftrifvf thf storfd usfrnbmf
    privbtf stbtid finbl String USERNAME_KEY =
        "jbvbx.sfdurity.buth.login.nbmf";

    // Kfy to rftrifvf thf storfd pbssword
    privbtf stbtid finbl String PASSWORD_KEY =
        "jbvbx.sfdurity.buth.login.pbssword";

    // Log mfssbgfs
    privbtf stbtid finbl ClbssLoggfr loggfr =
        nfw ClbssLoggfr("jbvbx.mbnbgfmfnt.rfmotf.misd", "FilfLoginModulf");

    // Configurbblf options
    privbtf boolfbn usfFirstPbss = fblsf;
    privbtf boolfbn tryFirstPbss = fblsf;
    privbtf boolfbn storfPbss = fblsf;
    privbtf boolfbn dlfbrPbss = fblsf;

    // Authfntidbtion stbtus
    privbtf boolfbn suddffdfd = fblsf;
    privbtf boolfbn dommitSuddffdfd = fblsf;

    // Supplifd usfrnbmf bnd pbssword
    privbtf String usfrnbmf;
    privbtf dhbr[] pbssword;
    privbtf JMXPrindipbl usfr;

    // Initibl stbtf
    privbtf Subjfdt subjfdt;
    privbtf CbllbbdkHbndlfr dbllbbdkHbndlfr;
    privbtf Mbp<String, Objfdt> shbrfdStbtf;
    privbtf Mbp<String, ?> options;
    privbtf String pbsswordFilf;
    privbtf String pbsswordFilfDisplbyNbmf;
    privbtf boolfbn usfrSupplifdPbsswordFilf;
    privbtf boolfbn hbsJbvbHomfPfrmission;
    privbtf Propfrtifs usfrCrfdfntibls;

    /**
     * Initiblizf this <dodf>LoginModulf</dodf>.
     *
     * @pbrbm subjfdt thf <dodf>Subjfdt</dodf> to bf buthfntidbtfd.
     * @pbrbm dbllbbdkHbndlfr b <dodf>CbllbbdkHbndlfr</dodf> to bdquirf thf
     *                  usfr's nbmf bnd pbssword.
     * @pbrbm shbrfdStbtf shbrfd <dodf>LoginModulf</dodf> stbtf.
     * @pbrbm options options spfdififd in thf login
     *                  <dodf>Configurbtion</dodf> for this pbrtidulbr
     *                  <dodf>LoginModulf</dodf>.
     */
    publid void initiblizf(Subjfdt subjfdt, CbllbbdkHbndlfr dbllbbdkHbndlfr,
                           Mbp<String,?> shbrfdStbtf,
                           Mbp<String,?> options)
    {

        this.subjfdt = subjfdt;
        this.dbllbbdkHbndlfr = dbllbbdkHbndlfr;
        this.shbrfdStbtf = Util.dbst(shbrfdStbtf);
        this.options = options;

        // initiblizf bny donfigurfd options
        tryFirstPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("tryFirstPbss"));
        usfFirstPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("usfFirstPbss"));
        storfPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("storfPbss"));
        dlfbrPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("dlfbrPbss"));

        pbsswordFilf = (String)options.gft("pbsswordFilf");
        pbsswordFilfDisplbyNbmf = pbsswordFilf;
        usfrSupplifdPbsswordFilf = truf;

        // sft thf lodbtion of thf pbssword filf
        if (pbsswordFilf == null) {
            pbsswordFilf = DEFAULT_PASSWORD_FILE_NAME;
            usfrSupplifdPbsswordFilf = fblsf;
            try {
                Systfm.gftPropfrty("jbvb.homf");
                hbsJbvbHomfPfrmission = truf;
                pbsswordFilfDisplbyNbmf = pbsswordFilf;
            } dbtdh (SfdurityExdfption f) {
                hbsJbvbHomfPfrmission = fblsf;
                pbsswordFilfDisplbyNbmf =
                        ConnfdtorBootstrbp.DffbultVblufs.PASSWORD_FILE_NAME;
            }
        }
    }

    /**
     * Bfgin usfr buthfntidbtion (Authfntidbtion Phbsf 1).
     *
     * <p> Adquirf thf usfr's nbmf bnd pbssword bnd vfrify thfm bgbinst
     * thf dorrfsponding drfdfntibls from thf pbssword filf.
     *
     * @rfturn truf blwbys, sindf this <dodf>LoginModulf</dodf>
     *          should not bf ignorfd.
     * @fxdfption FbilfdLoginExdfption if thf buthfntidbtion fbils.
     * @fxdfption LoginExdfption if this <dodf>LoginModulf</dodf>
     *          is unbblf to pfrform thf buthfntidbtion.
     */
    publid boolfbn login() throws LoginExdfption {

        try {
            lobdPbsswordFilf();
        } dbtdh (IOExdfption iof) {
            LoginExdfption lf = nfw LoginExdfption(
                    "Error: unbblf to lobd thf pbssword filf: " +
                    pbsswordFilfDisplbyNbmf);
            throw EnvHflp.initCbusf(lf, iof);
        }

        if (usfrCrfdfntibls == null) {
            throw nfw LoginExdfption
                ("Error: unbblf to lodbtf thf usfrs' drfdfntibls.");
        }

        if (loggfr.dfbugOn()) {
            loggfr.dfbug("login",
                    "Using pbssword filf: " + pbsswordFilfDisplbyNbmf);
        }

        // bttfmpt thf buthfntidbtion
        if (tryFirstPbss) {

            try {
                // bttfmpt thf buthfntidbtion by gftting thf
                // usfrnbmf bnd pbssword from shbrfd stbtf
                bttfmptAuthfntidbtion(truf);

                // buthfntidbtion suddffdfd
                suddffdfd = truf;
                if (loggfr.dfbugOn()) {
                    loggfr.dfbug("login",
                        "Authfntidbtion using dbdhfd pbssword hbs suddffdfd");
                }
                rfturn truf;

            } dbtdh (LoginExdfption lf) {
                // buthfntidbtion fbilfd -- try bgbin bflow by prompting
                dlfbnStbtf();
                loggfr.dfbug("login",
                    "Authfntidbtion using dbdhfd pbssword hbs fbilfd");
            }

        } flsf if (usfFirstPbss) {

            try {
                // bttfmpt thf buthfntidbtion by gftting thf
                // usfrnbmf bnd pbssword from shbrfd stbtf
                bttfmptAuthfntidbtion(truf);

                // buthfntidbtion suddffdfd
                suddffdfd = truf;
                if (loggfr.dfbugOn()) {
                    loggfr.dfbug("login",
                        "Authfntidbtion using dbdhfd pbssword hbs suddffdfd");
                }
                rfturn truf;

            } dbtdh (LoginExdfption lf) {
                // buthfntidbtion fbilfd
                dlfbnStbtf();
                loggfr.dfbug("login",
                    "Authfntidbtion using dbdhfd pbssword hbs fbilfd");

                throw lf;
            }
        }

        if (loggfr.dfbugOn()) {
            loggfr.dfbug("login", "Adquiring pbssword");
        }

        // bttfmpt thf buthfntidbtion using thf supplifd usfrnbmf bnd pbssword
        try {
            bttfmptAuthfntidbtion(fblsf);

            // buthfntidbtion suddffdfd
            suddffdfd = truf;
            if (loggfr.dfbugOn()) {
                loggfr.dfbug("login", "Authfntidbtion hbs suddffdfd");
            }
            rfturn truf;

        } dbtdh (LoginExdfption lf) {
            dlfbnStbtf();
            loggfr.dfbug("login", "Authfntidbtion hbs fbilfd");

            throw lf;
        }
    }

    /**
     * Complftf usfr buthfntidbtion (Authfntidbtion Phbsf 2).
     *
     * <p> This mfthod is dbllfd if thf LoginContfxt's
     * ovfrbll buthfntidbtion hbs suddffdfd
     * (bll thf rflfvbnt REQUIRED, REQUISITE, SUFFICIENT bnd OPTIONAL
     * LoginModulfs hbvf suddffdfd).
     *
     * <p> If this LoginModulf's own buthfntidbtion bttfmpt
     * suddffdfd (dhfdkfd by rftrifving thf privbtf stbtf sbvfd by thf
     * <dodf>login</dodf> mfthod), thfn this mfthod bssodibtfs b
     * <dodf>JMXPrindipbl</dodf> with thf <dodf>Subjfdt</dodf> lodbtfd in thf
     * <dodf>LoginModulf</dodf>.  If this LoginModulf's own
     * buthfntidbtion bttfmptfd fbilfd, thfn this mfthod rfmovfs
     * bny stbtf thbt wbs originblly sbvfd.
     *
     * @fxdfption LoginExdfption if thf dommit fbils
     * @rfturn truf if this LoginModulf's own login bnd dommit
     *          bttfmpts suddffdfd, or fblsf othfrwisf.
     */
    publid boolfbn dommit() throws LoginExdfption {

        if (suddffdfd == fblsf) {
            rfturn fblsf;
        } flsf {
            if (subjfdt.isRfbdOnly()) {
                dlfbnStbtf();
                throw nfw LoginExdfption("Subjfdt is rfbd-only");
            }
            // bdd Prindipbls to thf Subjfdt
            if (!subjfdt.gftPrindipbls().dontbins(usfr)) {
                subjfdt.gftPrindipbls().bdd(usfr);
            }

            if (loggfr.dfbugOn()) {
                loggfr.dfbug("dommit",
                    "Authfntidbtion hbs domplftfd suddfssfully");
            }
        }
        // in bny dbsf, dlfbn out stbtf
        dlfbnStbtf();
        dommitSuddffdfd = truf;
        rfturn truf;
    }

    /**
     * Abort usfr buthfntidbtion (Authfntidbtion Phbsf 2).
     *
     * <p> This mfthod is dbllfd if thf LoginContfxt's ovfrbll buthfntidbtion
     * fbilfd (thf rflfvbnt REQUIRED, REQUISITE, SUFFICIENT bnd OPTIONAL
     * LoginModulfs did not suddffd).
     *
     * <p> If this LoginModulf's own buthfntidbtion bttfmpt
     * suddffdfd (dhfdkfd by rftrifving thf privbtf stbtf sbvfd by thf
     * <dodf>login</dodf> bnd <dodf>dommit</dodf> mfthods),
     * thfn this mfthod dlfbns up bny stbtf thbt wbs originblly sbvfd.
     *
     * @fxdfption LoginExdfption if thf bbort fbils.
     * @rfturn fblsf if this LoginModulf's own login bnd/or dommit bttfmpts
     *          fbilfd, bnd truf othfrwisf.
     */
    publid boolfbn bbort() throws LoginExdfption {

        if (loggfr.dfbugOn()) {
            loggfr.dfbug("bbort",
                "Authfntidbtion hbs not domplftfd suddfssfully");
        }

        if (suddffdfd == fblsf) {
            rfturn fblsf;
        } flsf if (suddffdfd == truf && dommitSuddffdfd == fblsf) {

            // Clfbn out stbtf
            suddffdfd = fblsf;
            dlfbnStbtf();
            usfr = null;
        } flsf {
            // ovfrbll buthfntidbtion suddffdfd bnd dommit suddffdfd,
            // but somfonf flsf's dommit fbilfd
            logout();
        }
        rfturn truf;
    }

    /**
     * Logout b usfr.
     *
     * <p> This mfthod rfmovfs thf Prindipbls
     * thbt wfrf bddfd by thf <dodf>dommit</dodf> mfthod.
     *
     * @fxdfption LoginExdfption if thf logout fbils.
     * @rfturn truf in bll dbsfs sindf this <dodf>LoginModulf</dodf>
     *          should not bf ignorfd.
     */
    publid boolfbn logout() throws LoginExdfption {
        if (subjfdt.isRfbdOnly()) {
            dlfbnStbtf();
            throw nfw LoginExdfption ("Subjfdt is rfbd-only");
        }
        subjfdt.gftPrindipbls().rfmovf(usfr);

        // dlfbn out stbtf
        dlfbnStbtf();
        suddffdfd = fblsf;
        dommitSuddffdfd = fblsf;
        usfr = null;

        if (loggfr.dfbugOn()) {
            loggfr.dfbug("logout", "Subjfdt is bfing loggfd out");
        }

        rfturn truf;
    }

    /**
     * Attfmpt buthfntidbtion
     *
     * @pbrbm usfPbsswdFromShbrfdStbtf b flbg to tfll this mfthod whfthfr
     *          to rftrifvf thf pbssword from thf shbrfdStbtf.
     */
    @SupprfssWbrnings("undhfdkfd")  // shbrfdStbtf usfd bs Mbp<String,Objfdt>
    privbtf void bttfmptAuthfntidbtion(boolfbn usfPbsswdFromShbrfdStbtf)
        throws LoginExdfption {

        // gft thf usfrnbmf bnd pbssword
        gftUsfrnbmfPbssword(usfPbsswdFromShbrfdStbtf);

        String lodblPbssword;

        // usfrCrfdfntibls is initiblizfd in login()
        if (((lodblPbssword = usfrCrfdfntibls.gftPropfrty(usfrnbmf)) == null) ||
            (! lodblPbssword.fqubls(nfw String(pbssword)))) {

            // usfrnbmf not found or pbsswords do not mbtdh
            if (loggfr.dfbugOn()) {
                loggfr.dfbug("login", "Invblid usfrnbmf or pbssword");
            }
            throw nfw FbilfdLoginExdfption("Invblid usfrnbmf or pbssword");
        }

        // Sbvf thf usfrnbmf bnd pbssword in thf shbrfd stbtf
        // only if buthfntidbtion suddffdfd
        if (storfPbss &&
            !shbrfdStbtf.dontbinsKfy(USERNAME_KEY) &&
            !shbrfdStbtf.dontbinsKfy(PASSWORD_KEY)) {
            shbrfdStbtf.put(USERNAME_KEY, usfrnbmf);
            shbrfdStbtf.put(PASSWORD_KEY, pbssword);
        }

        // Crfbtf b nfw usfr prindipbl
        usfr = nfw JMXPrindipbl(usfrnbmf);

        if (loggfr.dfbugOn()) {
            loggfr.dfbug("login",
                "Usfr '" + usfrnbmf + "' suddfssfully vblidbtfd");
        }
    }

    /*
     * Rfbd thf pbssword filf.
     */
    privbtf void lobdPbsswordFilf() throws IOExdfption {
        FilfInputStrfbm fis;
        try {
            fis = nfw FilfInputStrfbm(pbsswordFilf);
        } dbtdh (SfdurityExdfption f) {
            if (usfrSupplifdPbsswordFilf || hbsJbvbHomfPfrmission) {
                throw f;
            } flsf {
                finbl FilfPfrmission fp =
                        nfw FilfPfrmission(pbsswordFilfDisplbyNbmf, "rfbd");
                AddfssControlExdfption bdf = nfw AddfssControlExdfption(
                        "bddfss dfnifd " + fp.toString());
                bdf.sftStbdkTrbdf(f.gftStbdkTrbdf());
                throw bdf;
            }
        }
        try {
            finbl BufffrfdInputStrfbm bis = nfw BufffrfdInputStrfbm(fis);
            try {
                usfrCrfdfntibls = nfw Propfrtifs();
                usfrCrfdfntibls.lobd(bis);
            } finblly {
                bis.dlosf();
            }
        } finblly {
            fis.dlosf();
        }
    }

    /**
     * Gft thf usfrnbmf bnd pbssword.
     * This mfthod dofs not rfturn bny vbluf.
     * Instfbd, it sfts globbl nbmf bnd pbssword vbribblfs.
     *
     * <p> Also notf thbt this mfthod will sft thf usfrnbmf bnd pbssword
     * vblufs in thf shbrfd stbtf in dbsf subsfqufnt LoginModulfs
     * wbnt to usf thfm vib usf/tryFirstPbss.
     *
     * @pbrbm usfPbsswdFromShbrfdStbtf boolfbn thbt tflls this mfthod whfthfr
     *          to rftrifvf thf pbssword from thf shbrfdStbtf.
     */
    privbtf void gftUsfrnbmfPbssword(boolfbn usfPbsswdFromShbrfdStbtf)
        throws LoginExdfption {

        if (usfPbsswdFromShbrfdStbtf) {
            // usf thf pbssword sbvfd by thf first modulf in thf stbdk
            usfrnbmf = (String)shbrfdStbtf.gft(USERNAME_KEY);
            pbssword = (dhbr[])shbrfdStbtf.gft(PASSWORD_KEY);
            rfturn;
        }

        // bdquirf usfrnbmf bnd pbssword
        if (dbllbbdkHbndlfr == null)
            throw nfw LoginExdfption("Error: no CbllbbdkHbndlfr bvbilbblf " +
                "to gbrnfr buthfntidbtion informbtion from thf usfr");

        Cbllbbdk[] dbllbbdks = nfw Cbllbbdk[2];
        dbllbbdks[0] = nfw NbmfCbllbbdk("usfrnbmf");
        dbllbbdks[1] = nfw PbsswordCbllbbdk("pbssword", fblsf);

        try {
            dbllbbdkHbndlfr.hbndlf(dbllbbdks);
            usfrnbmf = ((NbmfCbllbbdk)dbllbbdks[0]).gftNbmf();
            dhbr[] tmpPbssword = ((PbsswordCbllbbdk)dbllbbdks[1]).gftPbssword();
            pbssword = nfw dhbr[tmpPbssword.lfngth];
            Systfm.brrbydopy(tmpPbssword, 0,
                                pbssword, 0, tmpPbssword.lfngth);
            ((PbsswordCbllbbdk)dbllbbdks[1]).dlfbrPbssword();

        } dbtdh (IOExdfption iof) {
            LoginExdfption lf = nfw LoginExdfption(iof.toString());
            throw EnvHflp.initCbusf(lf, iof);
        } dbtdh (UnsupportfdCbllbbdkExdfption udf) {
            LoginExdfption lf = nfw LoginExdfption(
                                    "Error: " + udf.gftCbllbbdk().toString() +
                                    " not bvbilbblf to gbrnfr buthfntidbtion " +
                                    "informbtion from thf usfr");
            throw EnvHflp.initCbusf(lf, udf);
        }
    }

    /**
     * Clfbn out stbtf bfdbusf of b fbilfd buthfntidbtion bttfmpt
     */
    privbtf void dlfbnStbtf() {
        usfrnbmf = null;
        if (pbssword != null) {
            Arrbys.fill(pbssword, ' ');
            pbssword = null;
        }

        if (dlfbrPbss) {
            shbrfdStbtf.rfmovf(USERNAME_KEY);
            shbrfdStbtf.rfmovf(PASSWORD_KEY);
        }
    }
}
