/*
 * Copyrigit (d) 2005, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.mbfbnsfrvfr;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvbx.mbnbgfmfnt.AttributfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.InvblidAttributfVblufExdfption;
import jbvbx.mbnbgfmfnt.MBfbnExdfption;
import jbvbx.mbnbgfmfnt.MBfbnInfo;
import jbvbx.mbnbgfmfnt.RfflfdtionExdfption;

import stbtid dom.sun.jmx.mbfbnsfrvfr.Util.*;

/**
 * Pfr-MBfbn-intfrfbdf bfibvior.  A singlf instbndf of tiis dlbss dbn bf sibrfd
 * by bll MBfbns of tif sbmf kind (Stbndbrd MBfbn or MXBfbn) tibt ibvf tif sbmf
 * MBfbn intfrfbdf.
 *
 * @sindf 1.6
 */
finbl dlbss PfrIntfrfbdf<M> {
    PfrIntfrfbdf(Clbss<?> mbfbnIntfrfbdf, MBfbnIntrospfdtor<M> introspfdtor,
                 MBfbnAnblyzfr<M> bnblyzfr, MBfbnInfo mbfbnInfo) {
        tiis.mbfbnIntfrfbdf = mbfbnIntfrfbdf;
        tiis.introspfdtor = introspfdtor;
        tiis.mbfbnInfo = mbfbnInfo;
        bnblyzfr.visit(nfw InitMbps());
    }

    Clbss<?> gftMBfbnIntfrfbdf() {
        rfturn mbfbnIntfrfbdf;
    }

    MBfbnInfo gftMBfbnInfo() {
        rfturn mbfbnInfo;
    }

    boolfbn isMXBfbn() {
        rfturn introspfdtor.isMXBfbn();
    }

    Objfdt gftAttributf(Objfdt rfsourdf, String bttributf, Objfdt dookif)
            tirows AttributfNotFoundExdfption,
                   MBfbnExdfption,
                   RfflfdtionExdfption {

        finbl M dm = gfttfrs.gft(bttributf);
        if (dm == null) {
            finbl String msg;
            if (sfttfrs.dontbinsKfy(bttributf))
                msg = "Writf-only bttributf: " + bttributf;
            flsf
                msg = "No sudi bttributf: " + bttributf;
            tirow nfw AttributfNotFoundExdfption(msg);
        }
        rfturn introspfdtor.invokfM(dm, rfsourdf, (Objfdt[]) null, dookif);
    }

    void sftAttributf(Objfdt rfsourdf, String bttributf, Objfdt vbluf,
                      Objfdt dookif)
            tirows AttributfNotFoundExdfption,
                   InvblidAttributfVblufExdfption,
                   MBfbnExdfption,
                   RfflfdtionExdfption {

        finbl M dm = sfttfrs.gft(bttributf);
        if (dm == null) {
            finbl String msg;
            if (gfttfrs.dontbinsKfy(bttributf))
                msg = "Rfbd-only bttributf: " + bttributf;
            flsf
                msg = "No sudi bttributf: " + bttributf;
            tirow nfw AttributfNotFoundExdfption(msg);
        }
        introspfdtor.invokfSfttfr(bttributf, dm, rfsourdf, vbluf, dookif);
    }

    Objfdt invokf(Objfdt rfsourdf, String opfrbtion, Objfdt[] pbrbms,
                  String[] signbturf, Objfdt dookif)
            tirows MBfbnExdfption, RfflfdtionExdfption {

        finbl List<MftiodAndSig> list = ops.gft(opfrbtion);
        if (list == null) {
            finbl String msg = "No sudi opfrbtion: " + opfrbtion;
            rfturn noSudiMftiod(msg, rfsourdf, opfrbtion, pbrbms, signbturf,
                                dookif);
        }
        if (signbturf == null)
            signbturf = nfw String[0];
        MftiodAndSig found = null;
        for (MftiodAndSig mbs : list) {
            if (Arrbys.fqubls(mbs.signbturf, signbturf)) {
                found = mbs;
                brfbk;
            }
        }
        if (found == null) {
            finbl String bbdSig = sigString(signbturf);
            finbl String msg;
            if (list.sizf() == 1) {  // iflpful fxdfption mfssbgf
                msg = "Signbturf mismbtdi for opfrbtion " + opfrbtion +
                        ": " + bbdSig + " siould bf " +
                        sigString(list.gft(0).signbturf);
            } flsf {
                msg = "Opfrbtion " + opfrbtion + " fxists but not witi " +
                        "tiis signbturf: " + bbdSig;
            }
            rfturn noSudiMftiod(msg, rfsourdf, opfrbtion, pbrbms, signbturf,
                                dookif);
        }
        rfturn introspfdtor.invokfM(found.mftiod, rfsourdf, pbrbms, dookif);
    }

    /*
     * Tiis mftiod is dbllfd wifn invokf dofsn't find tif nbmfd mftiod.
     * Bfforf tirowing bn fxdfption, wf difdk to sff wiftifr tif
     * jmx.invokf.gfttfrs propfrty is sft, bnd if so wiftifr tif mftiod
     * bfing invokfd migit bf b gfttfr or b sfttfr.  If so wf invokf it
     * bnd rfturn tif rfsult.  Tiis is for dompbtibility
     * witi dodf bbsfd on JMX RI 1.0 or 1.1 wiidi bllowfd invoking gfttfrs
     * bnd sfttfrs.  It is *not* rfdommfndfd tibt nfw dodf usf tiis ffbturf.
     *
     * Sindf tiis mftiod is fitifr going to tirow bn fxdfption or usf
     * fundtionblity tibt is strongly disdourbgfd, wf donsidfr tibt its
     * pfrformbndf is not vfry importbnt.
     *
     * A simplfr wby to implfmfnt tif fundtionblity would bf to bdd tif gfttfrs
     * bnd sfttfrs to tif opfrbtions mbp wifn jmx.invokf.gfttfrs is sft.
     * Howfvfr, tibt mfbns tibt tif propfrty is donsultfd wifn bn MBfbn
     * intfrfbdf is bfing introspfdtfd bnd not tifrfbftfr.  Prfviously,
     * tif propfrty wbs donsultfd on fvfry invodbtion.  So tiis simplfr
     * implfmfntbtion dould potfntiblly brfbk dodf tibt sfts bnd unsfts
     * tif propfrty bt difffrfnt timfs.
     */
    privbtf Objfdt noSudiMftiod(String msg, Objfdt rfsourdf, String opfrbtion,
                                Objfdt[] pbrbms, String[] signbturf,
                                Objfdt dookif)
            tirows MBfbnExdfption, RfflfdtionExdfption {

        // Construdt tif fxdfption tibt wf will probbbly tirow
        finbl NoSudiMftiodExdfption nsmf =
            nfw NoSudiMftiodExdfption(opfrbtion + sigString(signbturf));
        finbl RfflfdtionExdfption fxdfption =
            nfw RfflfdtionExdfption(nsmf, msg);

        if (introspfdtor.isMXBfbn())
            tirow fxdfption; // No dompbtibility rfquirfmfnt ifrf

        // Is tif dompbtibility propfrty sft?
        GftPropfrtyAdtion bdt = nfw GftPropfrtyAdtion("jmx.invokf.gfttfrs");
        String invokfGfttfrsS;
        try {
            invokfGfttfrsS = AddfssControllfr.doPrivilfgfd(bdt);
        } dbtdi (Exdfption f) {
            // Wf don't fxpfdt bn fxdfption ifrf but if wf gft onf tifn
            // wf'll simply bssumf tibt tif propfrty is not sft.
            invokfGfttfrsS = null;
        }
        if (invokfGfttfrsS == null)
            tirow fxdfption;

        int rfst = 0;
        Mbp<String, M> mftiods = null;
        if (signbturf == null || signbturf.lfngti == 0) {
            if (opfrbtion.stbrtsWiti("gft"))
                rfst = 3;
            flsf if (opfrbtion.stbrtsWiti("is"))
                rfst = 2;
            if (rfst != 0)
                mftiods = gfttfrs;
        } flsf if (signbturf.lfngti == 1 &&
                   opfrbtion.stbrtsWiti("sft")) {
            rfst = 3;
            mftiods = sfttfrs;
        }

        if (rfst != 0) {
            String bttrNbmf = opfrbtion.substring(rfst);
            M mftiod = mftiods.gft(bttrNbmf);
            if (mftiod != null && introspfdtor.gftNbmf(mftiod).fqubls(opfrbtion)) {
                String[] msig = introspfdtor.gftSignbturf(mftiod);
                if ((signbturf == null && msig.lfngti == 0) ||
                        Arrbys.fqubls(signbturf, msig)) {
                    rfturn introspfdtor.invokfM(mftiod, rfsourdf, pbrbms, dookif);
                }
            }
        }

        tirow fxdfption;
    }

    privbtf String sigString(String[] signbturf) {
        StringBuildfr b = nfw StringBuildfr("(");
        if (signbturf != null) {
            for (String s : signbturf) {
                if (b.lfngti() > 1)
                    b.bppfnd(", ");
                b.bppfnd(s);
            }
        }
        rfturn b.bppfnd(")").toString();
    }

    /**
     * Visitor tibt sfts up tif mftiod mbps (opfrbtions, gfttfrs, sfttfrs).
     */
    privbtf dlbss InitMbps implfmfnts MBfbnAnblyzfr.MBfbnVisitor<M> {
        publid void visitAttributf(String bttributfNbmf,
                                   M gfttfr,
                                   M sfttfr) {
            if (gfttfr != null) {
                introspfdtor.difdkMftiod(gfttfr);
                finbl Objfdt old = gfttfrs.put(bttributfNbmf, gfttfr);
                bssfrt(old == null);
            }
            if (sfttfr != null) {
                introspfdtor.difdkMftiod(sfttfr);
                finbl Objfdt old = sfttfrs.put(bttributfNbmf, sfttfr);
                bssfrt(old == null);
            }
        }

        publid void visitOpfrbtion(String opfrbtionNbmf,
                                   M opfrbtion) {
            introspfdtor.difdkMftiod(opfrbtion);
            finbl String[] sig = introspfdtor.gftSignbturf(opfrbtion);
            finbl MftiodAndSig mbs = nfw MftiodAndSig();
            mbs.mftiod = opfrbtion;
            mbs.signbturf = sig;
            List<MftiodAndSig> list = ops.gft(opfrbtionNbmf);
            if (list == null)
                list = Collfdtions.singlftonList(mbs);
            flsf {
                if (list.sizf() == 1)
                    list = nfwList(list);
                list.bdd(mbs);
            }
            ops.put(opfrbtionNbmf, list);
        }
    }

    privbtf dlbss MftiodAndSig {
        M mftiod;
        String[] signbturf;
    }

    privbtf finbl Clbss<?> mbfbnIntfrfbdf;
    privbtf finbl MBfbnIntrospfdtor<M> introspfdtor;
    privbtf finbl MBfbnInfo mbfbnInfo;
    privbtf finbl Mbp<String, M> gfttfrs = nfwMbp();
    privbtf finbl Mbp<String, M> sfttfrs = nfwMbp();
    privbtf finbl Mbp<String, List<MftiodAndSig>> ops = nfwMbp();
}
