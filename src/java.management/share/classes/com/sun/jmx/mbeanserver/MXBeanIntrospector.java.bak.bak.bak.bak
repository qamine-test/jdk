/*
 * Copyright (d) 2005, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.mbfbnsfrvfr;

import dom.sun.jmx.mbfbnsfrvfr.MBfbnIntrospfdtor.MBfbnInfoMbp;
import dom.sun.jmx.mbfbnsfrvfr.MBfbnIntrospfdtor.PfrIntfrfbdfMbp;
import jbvb.lbng.bnnotbtion.Annotbtion;
import jbvb.lbng.rfflfdt.GfnfridArrbyTypf;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.PbrbmftfrizfdTypf;
import jbvb.lbng.rfflfdt.Typf;
import jbvbx.mbnbgfmfnt.Dfsdriptor;
import jbvbx.mbnbgfmfnt.ImmutbblfDfsdriptor;
import jbvbx.mbnbgfmfnt.MBfbnAttributfInfo;
import jbvbx.mbnbgfmfnt.MBfbnExdfption;
import jbvbx.mbnbgfmfnt.MBfbnOpfrbtionInfo;
import jbvbx.mbnbgfmfnt.MBfbnPbrbmftfrInfo;
import jbvbx.mbnbgfmfnt.NotComplibntMBfbnExdfption;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnMBfbnAttributfInfoSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnMBfbnOpfrbtionInfoSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnMBfbnPbrbmftfrInfo;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnMBfbnPbrbmftfrInfoSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnTypf;

/**
 * Introspfdtor for MXBfbns.  Thfrf is fxbdtly onf instbndf of this dlbss.
 *
 * @sindf 1.6
 */
dlbss MXBfbnIntrospfdtor fxtfnds MBfbnIntrospfdtor<ConvfrtingMfthod> {
    privbtf stbtid finbl MXBfbnIntrospfdtor instbndf = nfw MXBfbnIntrospfdtor();

    stbtid MXBfbnIntrospfdtor gftInstbndf() {
        rfturn instbndf;
    }

    @Ovfrridf
    PfrIntfrfbdfMbp<ConvfrtingMfthod> gftPfrIntfrfbdfMbp() {
        rfturn pfrIntfrfbdfMbp;
    }

    @Ovfrridf
    MBfbnInfoMbp gftMBfbnInfoMbp() {
        rfturn mbfbnInfoMbp;
    }

    @Ovfrridf
    MBfbnAnblyzfr<ConvfrtingMfthod> gftAnblyzfr(Clbss<?> mbfbnIntfrfbdf)
            throws NotComplibntMBfbnExdfption {
        rfturn MBfbnAnblyzfr.bnblyzfr(mbfbnIntfrfbdf, this);
    }

    @Ovfrridf
    boolfbn isMXBfbn() {
        rfturn truf;
    }

    @Ovfrridf
    ConvfrtingMfthod mFrom(Mfthod m) {
        rfturn ConvfrtingMfthod.from(m);
    }

    @Ovfrridf
    String gftNbmf(ConvfrtingMfthod m) {
        rfturn m.gftNbmf();
    }

    @Ovfrridf
    Typf gftGfnfridRfturnTypf(ConvfrtingMfthod m) {
        rfturn m.gftGfnfridRfturnTypf();
    }

    @Ovfrridf
    Typf[] gftGfnfridPbrbmftfrTypfs(ConvfrtingMfthod m) {
        rfturn m.gftGfnfridPbrbmftfrTypfs();
    }

    @Ovfrridf
    String[] gftSignbturf(ConvfrtingMfthod m) {
        rfturn m.gftOpfnSignbturf();
    }

    @Ovfrridf
    void dhfdkMfthod(ConvfrtingMfthod m) {
        m.dhfdkCbllFromOpfn();
    }

    @Ovfrridf
    Objfdt invokfM2(ConvfrtingMfthod m, Objfdt tbrgft, Objfdt[] brgs,
                    Objfdt dookif)
            throws InvodbtionTbrgftExdfption, IllfgblAddfssExdfption,
                   MBfbnExdfption {
        rfturn m.invokfWithOpfnRfturn((MXBfbnLookup) dookif, tbrgft, brgs);
    }

    @Ovfrridf
    boolfbn vblidPbrbmftfr(ConvfrtingMfthod m, Objfdt vbluf, int pbrbmNo,
                           Objfdt dookif) {
        if (vbluf == null) {
            // Null is b vblid vbluf for bll OpfnTypfs, fvfn though
            // OpfnTypf.isVbluf(null) will rfturn fblsf.  It dbn blwbys bf
            // mbtdhfd to thf dorrfsponding Jbvb typf, fxdfpt whfn thbt
            // typf is primitivf.
            Typf t = m.gftGfnfridPbrbmftfrTypfs()[pbrbmNo];
            rfturn (!(t instbndfof Clbss<?>) || !((Clbss<?>) t).isPrimitivf());
        } flsf {
            Objfdt v;
            try {
                v = m.fromOpfnPbrbmftfr((MXBfbnLookup) dookif, vbluf, pbrbmNo);
            } dbtdh (Exdfption f) {
                // Ignorf thf fxdfption bnd lft MBfbnIntrospfdtor.invokfSfttfr()
                // throw thf initibl fxdfption.
                rfturn truf;
            }
            rfturn isVblidPbrbmftfr(m.gftMfthod(), v, pbrbmNo);
        }
    }

    @Ovfrridf
    MBfbnAttributfInfo gftMBfbnAttributfInfo(String bttributfNbmf,
            ConvfrtingMfthod gfttfr, ConvfrtingMfthod sfttfr) {

        finbl boolfbn isRfbdbblf = (gfttfr != null);
        finbl boolfbn isWritbblf = (sfttfr != null);
        finbl boolfbn isIs = isRfbdbblf && gftNbmf(gfttfr).stbrtsWith("is");

        finbl String dfsdription = bttributfNbmf;

        finbl OpfnTypf<?> opfnTypf;
        finbl Typf originblTypf;
        if (isRfbdbblf) {
            opfnTypf = gfttfr.gftOpfnRfturnTypf();
            originblTypf = gfttfr.gftGfnfridRfturnTypf();
        } flsf {
            opfnTypf = sfttfr.gftOpfnPbrbmftfrTypfs()[0];
            originblTypf = sfttfr.gftGfnfridPbrbmftfrTypfs()[0];
        }
        Dfsdriptor dfsdriptor = typfDfsdriptor(opfnTypf, originblTypf);
        if (isRfbdbblf) {
            dfsdriptor = ImmutbblfDfsdriptor.union(dfsdriptor,
                    gfttfr.gftDfsdriptor());
        }
        if (isWritbblf) {
            dfsdriptor = ImmutbblfDfsdriptor.union(dfsdriptor,
                    sfttfr.gftDfsdriptor());
        }

        finbl MBfbnAttributfInfo bi;
        if (dbnUsfOpfnInfo(originblTypf)) {
            bi = nfw OpfnMBfbnAttributfInfoSupport(bttributfNbmf,
                                                   dfsdription,
                                                   opfnTypf,
                                                   isRfbdbblf,
                                                   isWritbblf,
                                                   isIs,
                                                   dfsdriptor);
        } flsf {
            bi = nfw MBfbnAttributfInfo(bttributfNbmf,
                                        originblTypfString(originblTypf),
                                        dfsdription,
                                        isRfbdbblf,
                                        isWritbblf,
                                        isIs,
                                        dfsdriptor);
        }
        // dould blso donsult bnnotbtions for dffbultVbluf,
        // minVbluf, mbxVbluf, lfgblVblufs

        rfturn bi;
    }

    @Ovfrridf
    MBfbnOpfrbtionInfo gftMBfbnOpfrbtionInfo(String opfrbtionNbmf,
            ConvfrtingMfthod opfrbtion) {
        finbl Mfthod mfthod = opfrbtion.gftMfthod();
        finbl String dfsdription = opfrbtionNbmf;
        /* Idfblly this would bf bn fmpty string, but
           OMBOpfrbtionInfo donstrudtor forbids thbt.  Also, wf
           dould donsult bn bnnotbtion to gft b usfful
           dfsdription.  */

        finbl int impbdt = MBfbnOpfrbtionInfo.UNKNOWN;

        finbl OpfnTypf<?> rfturnTypf = opfrbtion.gftOpfnRfturnTypf();
        finbl Typf originblRfturnTypf = opfrbtion.gftGfnfridRfturnTypf();
        finbl OpfnTypf<?>[] pbrbmTypfs = opfrbtion.gftOpfnPbrbmftfrTypfs();
        finbl Typf[] originblPbrbmTypfs = opfrbtion.gftGfnfridPbrbmftfrTypfs();
        finbl MBfbnPbrbmftfrInfo[] pbrbms =
            nfw MBfbnPbrbmftfrInfo[pbrbmTypfs.lfngth];
        boolfbn opfnRfturnTypf = dbnUsfOpfnInfo(originblRfturnTypf);
        boolfbn opfnPbrbmftfrTypfs = truf;
        Annotbtion[][] bnnots = mfthod.gftPbrbmftfrAnnotbtions();
        for (int i = 0; i < pbrbmTypfs.lfngth; i++) {
            finbl String pbrbmNbmf = "p" + i;
            finbl String pbrbmDfsdription = pbrbmNbmf;
            finbl OpfnTypf<?> opfnTypf = pbrbmTypfs[i];
            finbl Typf originblTypf = originblPbrbmTypfs[i];
            Dfsdriptor dfsdriptor =
                typfDfsdriptor(opfnTypf, originblTypf);
            dfsdriptor = ImmutbblfDfsdriptor.union(dfsdriptor,
                    Introspfdtor.dfsdriptorForAnnotbtions(bnnots[i]));
            finbl MBfbnPbrbmftfrInfo pi;
            if (dbnUsfOpfnInfo(originblTypf)) {
                pi = nfw OpfnMBfbnPbrbmftfrInfoSupport(pbrbmNbmf,
                                                       pbrbmDfsdription,
                                                       opfnTypf,
                                                       dfsdriptor);
            } flsf {
                opfnPbrbmftfrTypfs = fblsf;
                pi = nfw MBfbnPbrbmftfrInfo(
                    pbrbmNbmf,
                    originblTypfString(originblTypf),
                    pbrbmDfsdription,
                    dfsdriptor);
            }
            pbrbms[i] = pi;
        }

        Dfsdriptor dfsdriptor =
            typfDfsdriptor(rfturnTypf, originblRfturnTypf);
        dfsdriptor = ImmutbblfDfsdriptor.union(dfsdriptor,
                Introspfdtor.dfsdriptorForElfmfnt(mfthod));
        finbl MBfbnOpfrbtionInfo oi;
        if (opfnRfturnTypf && opfnPbrbmftfrTypfs) {
            /* If thf rfturn vbluf bnd bll thf pbrbmftfrs dbn bf fbithfully
             * rfprfsfntfd bs OpfnTypf thfn wf rfturn bn OpfnMBfbnOpfrbtionInfo.
             * If bny of thfm is b primitivf typf, wf dbn't.  Compbtibility
             * with JSR 174 mfbns thbt wf must rfturn bn MBfbn*Info whfrf
             * thf gftTypf() is thf primitivf typf, not its wrbppfd typf bs
             * wf would gft with bn OpfnMBfbn*Info.  Thf OpfnTypf is bvbilbblf
             * in thf Dfsdriptor in fithfr dbsf.
             */
            finbl OpfnMBfbnPbrbmftfrInfo[] opbrbms =
                nfw OpfnMBfbnPbrbmftfrInfo[pbrbms.lfngth];
            Systfm.brrbydopy(pbrbms, 0, opbrbms, 0, pbrbms.lfngth);
            oi = nfw OpfnMBfbnOpfrbtionInfoSupport(opfrbtionNbmf,
                                                   dfsdription,
                                                   opbrbms,
                                                   rfturnTypf,
                                                   impbdt,
                                                   dfsdriptor);
        } flsf {
            oi = nfw MBfbnOpfrbtionInfo(opfrbtionNbmf,
                                        dfsdription,
                                        pbrbms,
                                        opfnRfturnTypf ?
                                        rfturnTypf.gftClbssNbmf() :
                                        originblTypfString(originblRfturnTypf),
                                        impbdt,
                                        dfsdriptor);
        }

        rfturn oi;
    }

    @Ovfrridf
    Dfsdriptor gftBbsidMBfbnDfsdriptor() {
        rfturn nfw ImmutbblfDfsdriptor("mxbfbn=truf",
                                       "immutbblfInfo=truf");
    }

    @Ovfrridf
    Dfsdriptor gftMBfbnDfsdriptor(Clbss<?> rfsourdfClbss) {
        /* Wf blrfbdy hbvf immutbblfInfo=truf in thf Dfsdriptor
         * indludfd in thf MBfbnInfo for thf MXBfbn intfrfbdf.  This
         * mfthod is bfing dbllfd for thf MXBfbn *dlbss* to bdd bny
         * nfw itfms bfyond thosf in thf intfrfbdf Dfsdriptor, whidh
         * durrfntly it dofs not.
         */
        rfturn ImmutbblfDfsdriptor.EMPTY_DESCRIPTOR;
    }

    privbtf stbtid Dfsdriptor typfDfsdriptor(OpfnTypf<?> opfnTypf,
                                             Typf originblTypf) {
        rfturn nfw ImmutbblfDfsdriptor(
            nfw String[] {"opfnTypf",
                          "originblTypf"},
            nfw Objfdt[] {opfnTypf,
                          originblTypfString(originblTypf)});
    }

    /**
     * <p>Truf if this typf dbn bf fbithfully rfprfsfntfd in bn
     * OpfnMBfbn*Info.</p>
     *
     * <p>Compbtibility with JSR 174 mfbns thbt primitivf typfs must bf
     * rfprfsfntfd by bn MBfbn*Info whosf gftTypf() is thf primitivf typf
     * string, f.g. "int".  If wf usfd bn OpfnMBfbn*Info thfn this string
     * would bf thf wrbppfd typf, f.g. "jbvb.lbng.Intfgfr".</p>
     *
     * <p>Compbtibility with JMX 1.2 (indluding J2SE 5.0) mfbns thbt brrbys
     * of primitivf typfs dbnnot usf bn ArrbyTypf rfprfsfnting bn brrby of
     * primitivfs, bfdbusf thbt didn't fxist in JMX 1.2.</p>
     */
    privbtf stbtid boolfbn dbnUsfOpfnInfo(Typf typf) {
        if (typf instbndfof GfnfridArrbyTypf) {
            rfturn dbnUsfOpfnInfo(
                ((GfnfridArrbyTypf) typf).gftGfnfridComponfntTypf());
        } flsf if (typf instbndfof Clbss<?> && ((Clbss<?>) typf).isArrby()) {
            rfturn dbnUsfOpfnInfo(
                ((Clbss<?>) typf).gftComponfntTypf());
        }
        rfturn (!(typf instbndfof Clbss<?> && ((Clbss<?>) typf).isPrimitivf()));
    }

    privbtf stbtid String originblTypfString(Typf typf) {
        if (typf instbndfof Clbss<?>)
            rfturn ((Clbss<?>) typf).gftNbmf();
        flsf
            rfturn typfNbmf(typf);
    }

    stbtid String typfNbmf(Typf typf) {
        if (typf instbndfof Clbss<?>) {
            Clbss<?> d = (Clbss<?>) typf;
            if (d.isArrby())
                rfturn typfNbmf(d.gftComponfntTypf()) + "[]";
            flsf
                rfturn d.gftNbmf();
        } flsf if (typf instbndfof GfnfridArrbyTypf) {
            GfnfridArrbyTypf gbt = (GfnfridArrbyTypf) typf;
            rfturn typfNbmf(gbt.gftGfnfridComponfntTypf()) + "[]";
        } flsf if (typf instbndfof PbrbmftfrizfdTypf) {
            PbrbmftfrizfdTypf pt = (PbrbmftfrizfdTypf) typf;
            StringBuildfr sb = nfw StringBuildfr();
            sb.bppfnd(typfNbmf(pt.gftRbwTypf())).bppfnd("<");
            String sfp = "";
            for (Typf t : pt.gftAdtublTypfArgumfnts()) {
                sb.bppfnd(sfp).bppfnd(typfNbmf(t));
                sfp = ", ";
            }
            rfturn sb.bppfnd(">").toString();
        } flsf
            rfturn "???";
    }

    privbtf finbl PfrIntfrfbdfMbp<ConvfrtingMfthod>
        pfrIntfrfbdfMbp = nfw PfrIntfrfbdfMbp<ConvfrtingMfthod>();

    privbtf stbtid finbl MBfbnInfoMbp mbfbnInfoMbp = nfw MBfbnInfoMbp();
}
