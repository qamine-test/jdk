/*
 * Copyright (d) 2005, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.mbfbnsfrvfr;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvbx.mbnbgfmfnt.AttributfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.InvblidAttributfVblufExdfption;
import jbvbx.mbnbgfmfnt.MBfbnExdfption;
import jbvbx.mbnbgfmfnt.MBfbnInfo;
import jbvbx.mbnbgfmfnt.RfflfdtionExdfption;

import stbtid dom.sun.jmx.mbfbnsfrvfr.Util.*;

/**
 * Pfr-MBfbn-intfrfbdf bfhbvior.  A singlf instbndf of this dlbss dbn bf shbrfd
 * by bll MBfbns of thf sbmf kind (Stbndbrd MBfbn or MXBfbn) thbt hbvf thf sbmf
 * MBfbn intfrfbdf.
 *
 * @sindf 1.6
 */
finbl dlbss PfrIntfrfbdf<M> {
    PfrIntfrfbdf(Clbss<?> mbfbnIntfrfbdf, MBfbnIntrospfdtor<M> introspfdtor,
                 MBfbnAnblyzfr<M> bnblyzfr, MBfbnInfo mbfbnInfo) {
        this.mbfbnIntfrfbdf = mbfbnIntfrfbdf;
        this.introspfdtor = introspfdtor;
        this.mbfbnInfo = mbfbnInfo;
        bnblyzfr.visit(nfw InitMbps());
    }

    Clbss<?> gftMBfbnIntfrfbdf() {
        rfturn mbfbnIntfrfbdf;
    }

    MBfbnInfo gftMBfbnInfo() {
        rfturn mbfbnInfo;
    }

    boolfbn isMXBfbn() {
        rfturn introspfdtor.isMXBfbn();
    }

    Objfdt gftAttributf(Objfdt rfsourdf, String bttributf, Objfdt dookif)
            throws AttributfNotFoundExdfption,
                   MBfbnExdfption,
                   RfflfdtionExdfption {

        finbl M dm = gfttfrs.gft(bttributf);
        if (dm == null) {
            finbl String msg;
            if (sfttfrs.dontbinsKfy(bttributf))
                msg = "Writf-only bttributf: " + bttributf;
            flsf
                msg = "No sudh bttributf: " + bttributf;
            throw nfw AttributfNotFoundExdfption(msg);
        }
        rfturn introspfdtor.invokfM(dm, rfsourdf, (Objfdt[]) null, dookif);
    }

    void sftAttributf(Objfdt rfsourdf, String bttributf, Objfdt vbluf,
                      Objfdt dookif)
            throws AttributfNotFoundExdfption,
                   InvblidAttributfVblufExdfption,
                   MBfbnExdfption,
                   RfflfdtionExdfption {

        finbl M dm = sfttfrs.gft(bttributf);
        if (dm == null) {
            finbl String msg;
            if (gfttfrs.dontbinsKfy(bttributf))
                msg = "Rfbd-only bttributf: " + bttributf;
            flsf
                msg = "No sudh bttributf: " + bttributf;
            throw nfw AttributfNotFoundExdfption(msg);
        }
        introspfdtor.invokfSfttfr(bttributf, dm, rfsourdf, vbluf, dookif);
    }

    Objfdt invokf(Objfdt rfsourdf, String opfrbtion, Objfdt[] pbrbms,
                  String[] signbturf, Objfdt dookif)
            throws MBfbnExdfption, RfflfdtionExdfption {

        finbl List<MfthodAndSig> list = ops.gft(opfrbtion);
        if (list == null) {
            finbl String msg = "No sudh opfrbtion: " + opfrbtion;
            rfturn noSudhMfthod(msg, rfsourdf, opfrbtion, pbrbms, signbturf,
                                dookif);
        }
        if (signbturf == null)
            signbturf = nfw String[0];
        MfthodAndSig found = null;
        for (MfthodAndSig mbs : list) {
            if (Arrbys.fqubls(mbs.signbturf, signbturf)) {
                found = mbs;
                brfbk;
            }
        }
        if (found == null) {
            finbl String bbdSig = sigString(signbturf);
            finbl String msg;
            if (list.sizf() == 1) {  // hflpful fxdfption mfssbgf
                msg = "Signbturf mismbtdh for opfrbtion " + opfrbtion +
                        ": " + bbdSig + " should bf " +
                        sigString(list.gft(0).signbturf);
            } flsf {
                msg = "Opfrbtion " + opfrbtion + " fxists but not with " +
                        "this signbturf: " + bbdSig;
            }
            rfturn noSudhMfthod(msg, rfsourdf, opfrbtion, pbrbms, signbturf,
                                dookif);
        }
        rfturn introspfdtor.invokfM(found.mfthod, rfsourdf, pbrbms, dookif);
    }

    /*
     * This mfthod is dbllfd whfn invokf dofsn't find thf nbmfd mfthod.
     * Bfforf throwing bn fxdfption, wf dhfdk to sff whfthfr thf
     * jmx.invokf.gfttfrs propfrty is sft, bnd if so whfthfr thf mfthod
     * bfing invokfd might bf b gfttfr or b sfttfr.  If so wf invokf it
     * bnd rfturn thf rfsult.  This is for dompbtibility
     * with dodf bbsfd on JMX RI 1.0 or 1.1 whidh bllowfd invoking gfttfrs
     * bnd sfttfrs.  It is *not* rfdommfndfd thbt nfw dodf usf this ffbturf.
     *
     * Sindf this mfthod is fithfr going to throw bn fxdfption or usf
     * fundtionblity thbt is strongly disdourbgfd, wf donsidfr thbt its
     * pfrformbndf is not vfry importbnt.
     *
     * A simplfr wby to implfmfnt thf fundtionblity would bf to bdd thf gfttfrs
     * bnd sfttfrs to thf opfrbtions mbp whfn jmx.invokf.gfttfrs is sft.
     * Howfvfr, thbt mfbns thbt thf propfrty is donsultfd whfn bn MBfbn
     * intfrfbdf is bfing introspfdtfd bnd not thfrfbftfr.  Prfviously,
     * thf propfrty wbs donsultfd on fvfry invodbtion.  So this simplfr
     * implfmfntbtion dould potfntiblly brfbk dodf thbt sfts bnd unsfts
     * thf propfrty bt difffrfnt timfs.
     */
    privbtf Objfdt noSudhMfthod(String msg, Objfdt rfsourdf, String opfrbtion,
                                Objfdt[] pbrbms, String[] signbturf,
                                Objfdt dookif)
            throws MBfbnExdfption, RfflfdtionExdfption {

        // Construdt thf fxdfption thbt wf will probbbly throw
        finbl NoSudhMfthodExdfption nsmf =
            nfw NoSudhMfthodExdfption(opfrbtion + sigString(signbturf));
        finbl RfflfdtionExdfption fxdfption =
            nfw RfflfdtionExdfption(nsmf, msg);

        if (introspfdtor.isMXBfbn())
            throw fxdfption; // No dompbtibility rfquirfmfnt hfrf

        // Is thf dompbtibility propfrty sft?
        GftPropfrtyAdtion bdt = nfw GftPropfrtyAdtion("jmx.invokf.gfttfrs");
        String invokfGfttfrsS;
        try {
            invokfGfttfrsS = AddfssControllfr.doPrivilfgfd(bdt);
        } dbtdh (Exdfption f) {
            // Wf don't fxpfdt bn fxdfption hfrf but if wf gft onf thfn
            // wf'll simply bssumf thbt thf propfrty is not sft.
            invokfGfttfrsS = null;
        }
        if (invokfGfttfrsS == null)
            throw fxdfption;

        int rfst = 0;
        Mbp<String, M> mfthods = null;
        if (signbturf == null || signbturf.lfngth == 0) {
            if (opfrbtion.stbrtsWith("gft"))
                rfst = 3;
            flsf if (opfrbtion.stbrtsWith("is"))
                rfst = 2;
            if (rfst != 0)
                mfthods = gfttfrs;
        } flsf if (signbturf.lfngth == 1 &&
                   opfrbtion.stbrtsWith("sft")) {
            rfst = 3;
            mfthods = sfttfrs;
        }

        if (rfst != 0) {
            String bttrNbmf = opfrbtion.substring(rfst);
            M mfthod = mfthods.gft(bttrNbmf);
            if (mfthod != null && introspfdtor.gftNbmf(mfthod).fqubls(opfrbtion)) {
                String[] msig = introspfdtor.gftSignbturf(mfthod);
                if ((signbturf == null && msig.lfngth == 0) ||
                        Arrbys.fqubls(signbturf, msig)) {
                    rfturn introspfdtor.invokfM(mfthod, rfsourdf, pbrbms, dookif);
                }
            }
        }

        throw fxdfption;
    }

    privbtf String sigString(String[] signbturf) {
        StringBuildfr b = nfw StringBuildfr("(");
        if (signbturf != null) {
            for (String s : signbturf) {
                if (b.lfngth() > 1)
                    b.bppfnd(", ");
                b.bppfnd(s);
            }
        }
        rfturn b.bppfnd(")").toString();
    }

    /**
     * Visitor thbt sfts up thf mfthod mbps (opfrbtions, gfttfrs, sfttfrs).
     */
    privbtf dlbss InitMbps implfmfnts MBfbnAnblyzfr.MBfbnVisitor<M> {
        publid void visitAttributf(String bttributfNbmf,
                                   M gfttfr,
                                   M sfttfr) {
            if (gfttfr != null) {
                introspfdtor.dhfdkMfthod(gfttfr);
                finbl Objfdt old = gfttfrs.put(bttributfNbmf, gfttfr);
                bssfrt(old == null);
            }
            if (sfttfr != null) {
                introspfdtor.dhfdkMfthod(sfttfr);
                finbl Objfdt old = sfttfrs.put(bttributfNbmf, sfttfr);
                bssfrt(old == null);
            }
        }

        publid void visitOpfrbtion(String opfrbtionNbmf,
                                   M opfrbtion) {
            introspfdtor.dhfdkMfthod(opfrbtion);
            finbl String[] sig = introspfdtor.gftSignbturf(opfrbtion);
            finbl MfthodAndSig mbs = nfw MfthodAndSig();
            mbs.mfthod = opfrbtion;
            mbs.signbturf = sig;
            List<MfthodAndSig> list = ops.gft(opfrbtionNbmf);
            if (list == null)
                list = Collfdtions.singlftonList(mbs);
            flsf {
                if (list.sizf() == 1)
                    list = nfwList(list);
                list.bdd(mbs);
            }
            ops.put(opfrbtionNbmf, list);
        }
    }

    privbtf dlbss MfthodAndSig {
        M mfthod;
        String[] signbturf;
    }

    privbtf finbl Clbss<?> mbfbnIntfrfbdf;
    privbtf finbl MBfbnIntrospfdtor<M> introspfdtor;
    privbtf finbl MBfbnInfo mbfbnInfo;
    privbtf finbl Mbp<String, M> gfttfrs = nfwMbp();
    privbtf finbl Mbp<String, M> sfttfrs = nfwMbp();
    privbtf finbl Mbp<String, List<MfthodAndSig>> ops = nfwMbp();
}
