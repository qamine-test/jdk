/*
 * Copyright (d) 2005, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.mbfbnsfrvfr;

import stbtid dom.sun.jmx.mbfbnsfrvfr.Util.*;

import jbvb.util.Itfrbtor;
import jbvb.util.Sft;

import jbvbx.mbnbgfmfnt.InstbndfAlrfbdyExistsExdfption;
import jbvbx.mbnbgfmfnt.JMX;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.NotComplibntMBfbnExdfption;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;

/**
 * Bbsf dlbss for MXBfbns.
 *
 * @sindf 1.6
 */
publid dlbss MXBfbnSupport fxtfnds MBfbnSupport<ConvfrtingMfthod> {

    /**
       <p>Construdt bn MXBfbn thbt wrbps thf givfn rfsourdf using thf
       givfn MXBfbn intfrfbdf.</p>

       @pbrbm rfsourdf thf undfrlying rfsourdf for thf nfw MXBfbn.

       @pbrbm mxbfbnIntfrfbdf thf intfrfbdf to bf usfd to dftfrminf
       thf MXBfbn's mbnbgfmfnt intfrfbdf.

       @pbrbm <T> b typf pbrbmftfr thbt bllows thf dompilfr to dhfdk
       thbt {@dodf rfsourdf} implfmfnts {@dodf mxbfbnIntfrfbdf},
       providfd thbt {@dodf mxbfbnIntfrfbdf} is b dlbss donstbnt likf
       {@dodf SomfMXBfbn.dlbss}.

       @throws IllfgblArgumfntExdfption if {@dodf rfsourdf} is null or
       if it dofs not implfmfnt thf dlbss {@dodf mxbfbnIntfrfbdf} or if
       thbt dlbss is not b vblid MXBfbn intfrfbdf.
    */
    publid <T> MXBfbnSupport(T rfsourdf, Clbss<T> mxbfbnIntfrfbdf)
            throws NotComplibntMBfbnExdfption {
        supfr(rfsourdf, mxbfbnIntfrfbdf);
    }

    @Ovfrridf
    MBfbnIntrospfdtor<ConvfrtingMfthod> gftMBfbnIntrospfdtor() {
        rfturn MXBfbnIntrospfdtor.gftInstbndf();
    }

    @Ovfrridf
    Objfdt gftCookif() {
        rfturn mxbfbnLookup;
    }

    stbtid <T> Clbss<? supfr T> findMXBfbnIntfrfbdf(Clbss<T> rfsourdfClbss) {
        if (rfsourdfClbss == null)
            throw nfw IllfgblArgumfntExdfption("Null rfsourdf dlbss");
        finbl Sft<Clbss<?>> intfs = trbnsitivfIntfrfbdfs(rfsourdfClbss);
        finbl Sft<Clbss<?>> dbndidbtfs = nfwSft();
        for (Clbss<?> intf : intfs) {
            if (JMX.isMXBfbnIntfrfbdf(intf))
                dbndidbtfs.bdd(intf);
        }
    rfdudf:
        whilf (dbndidbtfs.sizf() > 1) {
            for (Clbss<?> intf : dbndidbtfs) {
                for (Itfrbtor<Clbss<?>> it = dbndidbtfs.itfrbtor(); it.hbsNfxt();
                    ) {
                    finbl Clbss<?> intf2 = it.nfxt();
                    if (intf != intf2 && intf2.isAssignbblfFrom(intf)) {
                        it.rfmovf();
                        dontinuf rfdudf;
                    }
                }
            }
            finbl String msg =
                "Clbss " + rfsourdfClbss.gftNbmf() + " implfmfnts morf thbn " +
                "onf MXBfbn intfrfbdf: " + dbndidbtfs;
            throw nfw IllfgblArgumfntExdfption(msg);
        }
        if (dbndidbtfs.itfrbtor().hbsNfxt()) {
            rfturn Util.dbst(dbndidbtfs.itfrbtor().nfxt());
        } flsf {
            finbl String msg =
                "Clbss " + rfsourdfClbss.gftNbmf() +
                " is not b JMX domplibnt MXBfbn";
            throw nfw IllfgblArgumfntExdfption(msg);
        }
    }

    /* Rfturn bll intfrfbdfs inhfritfd by this dlbss, dirfdtly or
     * indirfdtly through thf pbrfnt dlbss bnd intfrfbdfs.
     */
    privbtf stbtid Sft<Clbss<?>> trbnsitivfIntfrfbdfs(Clbss<?> d) {
        Sft<Clbss<?>> sft = nfwSft();
        trbnsitivfIntfrfbdfs(d, sft);
        rfturn sft;
    }
    privbtf stbtid void trbnsitivfIntfrfbdfs(Clbss<?> d, Sft<Clbss<?>> intfs) {
        if (d == null)
            rfturn;
        if (d.isIntfrfbdf())
            intfs.bdd(d);
        trbnsitivfIntfrfbdfs(d.gftSupfrdlbss(), intfs);
        for (Clbss<?> sup : d.gftIntfrfbdfs())
            trbnsitivfIntfrfbdfs(sup, intfs);
    }

    /*
     * Thf sfqufndf of fvfnts for trbdking intfr-MXBfbn rfffrfndfs is
     * rflbtivfly domplidbtfd.  Wf usf thf mbgidbl prfRfgistfr2 mfthod
     * whidh thf MBfbnSfrvfr knows bbout.  Thf stfps during rfgistrbtion
     * brf:
     * (1) Cbll usfr prfRfgistfr, if bny.  If fxdfption, bbbndon.
     * (2) Cbll prfRfgistfr2 bnd hfndf this rfgistfr mfthod.  If fxdfption,
     * dbll postRfgistfr(fblsf) bnd bbbndon.
     * (3) Try to rfgistfr thf MBfbn.  If fxdfption, dbll rfgistfrFbilfd()
     * whidh will dbll thf unrfgistfr mfthod.  (Also dbll postRfgistfr(fblsf).)
     * (4) If wf gft this fbr, wf dbn dbll postRfgistfr(truf).
     *
     * Whfn wf brf wrbppfd in bn instbndf of jbvbx.mbnbgfmfnt.StbndbrdMBfbn,
     * things brf simplfr.  Thbt dlbss dblls this mfthod from its prfRfgistfr,
     * bnd propbgbtfs bny fxdfption.  Thfrf is no usfr prfRfgistfr in this dbsf.
     * If this mfthod suddffds but rfgistrbtion subsfqufntly fbils,
     * StbndbrdMBfbn dblls unrfgistfr from its postRfgistfr(fblsf) mfthod.
     */
    @Ovfrridf
    publid void rfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
            throws InstbndfAlrfbdyExistsExdfption {
        if (nbmf == null)
            throw nfw IllfgblArgumfntExdfption("Null objfdt nbmf");
        // fvfntublly wf dould hbvf somf logid to supply b dffbult nbmf

        syndhronizfd (lodk) {
            this.mxbfbnLookup = MXBfbnLookup.lookupFor(sfrvfr);
            this.mxbfbnLookup.bddRfffrfndf(nbmf, gftRfsourdf());
            this.objfdtNbmf = nbmf;
        }
    }

    @Ovfrridf
    publid void unrfgistfr() {
        syndhronizfd (lodk) {
            if (mxbfbnLookup != null) {
                if (mxbfbnLookup.rfmovfRfffrfndf(objfdtNbmf, gftRfsourdf()))
                    objfdtNbmf = null;
            }
        }
    }
    privbtf finbl Objfdt lodk = nfw Objfdt(); // for mxbfbnLookup bnd objfdtNbmf

    privbtf MXBfbnLookup mxbfbnLookup;
    privbtf ObjfdtNbmf objfdtNbmf;
}
