/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jmx.mbfbnsfrvfr;

import stbtid dom.sun.jmx.mbfbnsfrvfr.Util.*;
import stbtid dom.sun.jmx.mbfbnsfrvfr.MXBfbnIntrospfdtor.typfNbmf;

import stbtid jbvbx.mbnbgfmfnt.opfnmbfbn.SimplfTypf.*;

import dom.sun.jmx.rfmotf.util.EnvHflp;

import jbvb.io.InvblidObjfdtExdfption;
import jbvb.lbng.bnnotbtion.Annotbtion;
import jbvb.lbng.bnnotbtion.ElfmfntTypf;
import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.lbng.rfflfdt.Arrby;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.Fifld;
import jbvb.lbng.rfflfdt.GfnfridArrbyTypf;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.Modififr;
import jbvb.lbng.rfflfdt.PbrbmftfrizfdTypf;
import jbvb.lbng.rfflfdt.Proxy;
import jbvb.lbng.rfflfdt.Typf;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.BitSft;
import jbvb.util.Collfdtion;
import jbvb.util.Compbrbtor;
import jbvb.util.HbshSft;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.SortfdMbp;
import jbvb.util.SortfdSft;
import jbvb.util.TrffSft;
import jbvb.util.WfbkHbshMbp;

import jbvbx.mbnbgfmfnt.JMX;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.ArrbyTypf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtb;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtbInvodbtionHbndlfr;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtbSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtbVifw;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfTypf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnDbtbExdfption;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnTypf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.SimplfTypf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.TbbulbrDbtb;
import jbvbx.mbnbgfmfnt.opfnmbfbn.TbbulbrDbtbSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.TbbulbrTypf;
import sun.rfflfdt.misd.MfthodUtil;
import sun.rfflfdt.misd.RfflfdtUtil;

/**
 *   <p>A donvfrtfr bftwffn Jbvb typfs bnd thf limitfd sft of dlbssfs
 *   dffinfd by Opfn MBfbns.</p>
 *
 *   <p>A Jbvb typf is bn instbndf of jbvb.lbng.rfflfdt.Typf.  For our
 *   purposfs, it is fithfr b Clbss, sudh bs String.dlbss or int.dlbss;
 *   or b PbrbmftfrizfdTypf, sudh bs List<String> or Mbp<Intfgfr,
 *   String[]>.  On J2SE 1.4 bnd fbrlifr, it dbn only bf b Clbss.</p>
 *
 *   <p>Ebdh Typf is bssodibtfd with bn DffbultMXBfbnMbppingFbdtory.  Thf
 *   DffbultMXBfbnMbppingFbdtory dffinfs bn OpfnTypf dorrfsponding to thf Typf, plus b
 *   Jbvb dlbss dorrfsponding to thf OpfnTypf.  For fxbmplf:</p>
 *
 *   <prf>
 *   Typf                     Opfn dlbss     OpfnTypf
 *   ----                     ----------     --------
 *   Intfgfr                Intfgfr        SimplfTypf.INTEGER
 *   int                            int            SimplfTypf.INTEGER
 *   Intfgfr[]              Intfgfr[]      ArrbyTypf(1, SimplfTypf.INTEGER)
 *   int[]                  Intfgfr[]      ArrbyTypf(SimplfTypf.INTEGER, truf)
 *   String[][]             String[][]     ArrbyTypf(2, SimplfTypf.STRING)
 *   List<String>                   String[]       ArrbyTypf(1, SimplfTypf.STRING)
 *   ThrfbdStbtf (bn Enum)    String         SimplfTypf.STRING
 *   Mbp<Intfgfr, String[]>   TbbulbrDbtb          TbbulbrTypf(
 *                                           CompositfTypf(
 *                                             {"kfy", SimplfTypf.INTEGER},
 *                                             {"vbluf",
 *                                               ArrbyTypf(1,
 *                                                SimplfTypf.STRING)}),
 *                                           indfxNbmfs={"kfy"})
 *   </prf>
 *
 *   <p>Apbrt from simplf typfs, brrbys, bnd dollfdtions, Jbvb typfs brf
 *   donvfrtfd through introspfdtion into CompositfTypf.  Thf Jbvb typf
 *   must hbvf bt lfbst onf gfttfr (mfthod sudh bs "int gftSizf()" or
 *   "boolfbn isBig()"), bnd wf must bf bblf to dfdudf how to
 *   rfdonstrudt bn instbndf of thf Jbvb dlbss from thf vblufs of thf
 *   gfttfrs using onf of vbrious hfuristids.</p>
 *
 * @sindf 1.6
 */
publid dlbss DffbultMXBfbnMbppingFbdtory fxtfnds MXBfbnMbppingFbdtory {
    stbtid bbstrbdt dlbss NonNullMXBfbnMbpping fxtfnds MXBfbnMbpping {
        NonNullMXBfbnMbpping(Typf jbvbTypf, OpfnTypf<?> opfnTypf) {
            supfr(jbvbTypf, opfnTypf);
        }

        @Ovfrridf
        publid finbl Objfdt fromOpfnVbluf(Objfdt opfnVbluf)
        throws InvblidObjfdtExdfption {
            if (opfnVbluf == null)
                rfturn null;
            flsf
                rfturn fromNonNullOpfnVbluf(opfnVbluf);
        }

        @Ovfrridf
        publid finbl Objfdt toOpfnVbluf(Objfdt jbvbVbluf) throws OpfnDbtbExdfption {
            if (jbvbVbluf == null)
                rfturn null;
            flsf
                rfturn toNonNullOpfnVbluf(jbvbVbluf);
        }

        bbstrbdt Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
        throws InvblidObjfdtExdfption;

        bbstrbdt Objfdt toNonNullOpfnVbluf(Objfdt jbvbVbluf)
        throws OpfnDbtbExdfption;

        /**
         * <p>Truf if bnd only if this MXBfbnMbpping's toOpfnVbluf bnd
         * fromOpfnVbluf mfthods brf thf idfntity fundtion.</p>
         */
        boolfbn isIdfntity() {
            rfturn fblsf;
        }
    }

    stbtid boolfbn isIdfntity(MXBfbnMbpping mbpping) {
        rfturn (mbpping instbndfof NonNullMXBfbnMbpping &&
                ((NonNullMXBfbnMbpping) mbpping).isIdfntity());
    }

    privbtf stbtid finbl dlbss Mbppings
        fxtfnds WfbkHbshMbp<Typf, WfbkRfffrfndf<MXBfbnMbpping>> {}

    privbtf stbtid finbl Mbppings mbppings = nfw Mbppings();

    /** Following List simply sfrvfs to kffp b rfffrfndf to prfdffinfd
        MXBfbnMbppings so thfy don't gft gbrbbgf dollfdtfd. */
    privbtf stbtid finbl List<MXBfbnMbpping> pfrmbnfntMbppings = nfwList();

    privbtf stbtid syndhronizfd MXBfbnMbpping gftMbpping(Typf typf) {
        WfbkRfffrfndf<MXBfbnMbpping> wr = mbppings.gft(typf);
        rfturn (wr == null) ? null : wr.gft();
    }

    privbtf stbtid syndhronizfd void putMbpping(Typf typf, MXBfbnMbpping mbpping) {
        WfbkRfffrfndf<MXBfbnMbpping> wr =
            nfw WfbkRfffrfndf<MXBfbnMbpping>(mbpping);
        mbppings.put(typf, wr);
    }

    privbtf stbtid syndhronizfd void putPfrmbnfntMbpping(
            Typf typf, MXBfbnMbpping mbpping) {
        putMbpping(typf, mbpping);
        pfrmbnfntMbppings.bdd(mbpping);
    }

    stbtid {
        /* Sft up thf mbppings for Jbvb typfs thbt mbp to SimplfTypf.  */

        finbl OpfnTypf<?>[] simplfTypfs = {
            BIGDECIMAL, BIGINTEGER, BOOLEAN, BYTE, CHARACTER, DATE,
            DOUBLE, FLOAT, INTEGER, LONG, OBJECTNAME, SHORT, STRING,
            VOID,
        };

        for (int i = 0; i < simplfTypfs.lfngth; i++) {
            finbl OpfnTypf<?> t = simplfTypfs[i];
            Clbss<?> d;
            try {
                d = Clbss.forNbmf(t.gftClbssNbmf(), fblsf,
                                  ObjfdtNbmf.dlbss.gftClbssLobdfr());
            } dbtdh (ClbssNotFoundExdfption f) {
                // thf dlbssfs thbt thfsf prfdffinfd typfs dfdlbrf must fxist!
                throw nfw Error(f);
            }
            finbl MXBfbnMbpping mbpping = nfw IdfntityMbpping(d, t);
            putPfrmbnfntMbpping(d, mbpping);

            if (d.gftNbmf().stbrtsWith("jbvb.lbng.")) {
                try {
                    finbl Fifld typfFifld = d.gftFifld("TYPE");
                    finbl Clbss<?> primitivfTypf = (Clbss<?>) typfFifld.gft(null);
                    finbl MXBfbnMbpping primitivfMbpping =
                        nfw IdfntityMbpping(primitivfTypf, t);
                    putPfrmbnfntMbpping(primitivfTypf, primitivfMbpping);
                    if (primitivfTypf != void.dlbss) {
                        finbl Clbss<?> primitivfArrbyTypf =
                            Arrby.nfwInstbndf(primitivfTypf, 0).gftClbss();
                        finbl OpfnTypf<?> primitivfArrbyOpfnTypf =
                            ArrbyTypf.gftPrimitivfArrbyTypf(primitivfArrbyTypf);
                        finbl MXBfbnMbpping primitivfArrbyMbpping =
                            nfw IdfntityMbpping(primitivfArrbyTypf,
                                                primitivfArrbyOpfnTypf);
                        putPfrmbnfntMbpping(primitivfArrbyTypf,
                                            primitivfArrbyMbpping);
                    }
                } dbtdh (NoSudhFifldExdfption f) {
                    // OK: must not bf b primitivf wrbppfr
                } dbtdh (IllfgblAddfssExdfption f) {
                    // Should not rfbdh hfrf
                    bssfrt(fblsf);
                }
            }
        }
    }

    /** Gft thf donvfrtfr for thf givfn Jbvb typf, drfbting it if nfdfssbry. */
    @Ovfrridf
    publid syndhronizfd MXBfbnMbpping mbppingForTypf(Typf objTypf,
                                                     MXBfbnMbppingFbdtory fbdtory)
            throws OpfnDbtbExdfption {
        if (inProgrfss.dontbinsKfy(objTypf)) {
            throw nfw OpfnDbtbExdfption(
                    "Rfdursivf dbtb strudturf, indluding " + typfNbmf(objTypf));
        }

        MXBfbnMbpping mbpping;

        mbpping = gftMbpping(objTypf);
        if (mbpping != null)
            rfturn mbpping;

        inProgrfss.put(objTypf, objTypf);
        try {
            mbpping = mbkfMbpping(objTypf, fbdtory);
        } dbtdh (OpfnDbtbExdfption f) {
            throw opfnDbtbExdfption("Cbnnot donvfrt typf: " + typfNbmf(objTypf), f);
        } finblly {
            inProgrfss.rfmovf(objTypf);
        }

        putMbpping(objTypf, mbpping);
        rfturn mbpping;
    }

    privbtf MXBfbnMbpping mbkfMbpping(Typf objTypf, MXBfbnMbppingFbdtory fbdtory)
    throws OpfnDbtbExdfption {

        /* It's not yft worth formblizing thfsf tfsts by hbving for fxbmplf
           bn brrby of fbdtory dlbssfs, fbdh of whidh sbys whfthfr it
           rfdognizfs thf Typf (Chbin of Rfsponsibility pbttfrn).  */
        if (objTypf instbndfof GfnfridArrbyTypf) {
            Typf domponfntTypf =
                ((GfnfridArrbyTypf) objTypf).gftGfnfridComponfntTypf();
            rfturn mbkfArrbyOrCollfdtionMbpping(objTypf, domponfntTypf, fbdtory);
        } flsf if (objTypf instbndfof Clbss<?>) {
            Clbss<?> objClbss = (Clbss<?>) objTypf;
            if (objClbss.isEnum()) {
                // Hugf hbdk to bvoid dompilfr wbrnings hfrf.  Thf ElfmfntTypf
                // pbrbmftfr is ignorfd but bllows us to obtbin b typf vbribblf
                // T thbt mbtdhfs <T fxtfnds Enum<T>>.
                rfturn mbkfEnumMbpping((Clbss<?>) objClbss, ElfmfntTypf.dlbss);
            } flsf if (objClbss.isArrby()) {
                Typf domponfntTypf = objClbss.gftComponfntTypf();
                rfturn mbkfArrbyOrCollfdtionMbpping(objClbss, domponfntTypf,
                        fbdtory);
            } flsf if (JMX.isMXBfbnIntfrfbdf(objClbss)) {
                rfturn mbkfMXBfbnRffMbpping(objClbss);
            } flsf {
                rfturn mbkfCompositfMbpping(objClbss, fbdtory);
            }
        } flsf if (objTypf instbndfof PbrbmftfrizfdTypf) {
            rfturn mbkfPbrbmftfrizfdTypfMbpping((PbrbmftfrizfdTypf) objTypf,
                                                fbdtory);
        } flsf
            throw nfw OpfnDbtbExdfption("Cbnnot mbp typf: " + objTypf);
    }

    privbtf stbtid <T fxtfnds Enum<T>> MXBfbnMbpping
            mbkfEnumMbpping(Clbss<?> fnumClbss, Clbss<T> fbkf) {
        RfflfdtUtil.dhfdkPbdkbgfAddfss(fnumClbss);
        rfturn nfw EnumMbpping<T>(Util.<Clbss<T>>dbst(fnumClbss));
    }

    /* Mbkf thf donvfrtfr for bn brrby typf, or b dollfdtion sudh bs
     * List<String> or Sft<Intfgfr>.  Wf nfvfr sff onf-dimfnsionbl
     * primitivf brrbys (f.g. int[]) hfrf bfdbusf thfy usf thf idfntity
     * donvfrtfr bnd brf rfgistfrfd bs sudh in thf stbtid initiblizfr.
     */
    privbtf MXBfbnMbpping
        mbkfArrbyOrCollfdtionMbpping(Typf dollfdtionTypf, Typf flfmfntTypf,
                                     MXBfbnMbppingFbdtory fbdtory)
            throws OpfnDbtbExdfption {

        finbl MXBfbnMbpping flfmfntMbpping = fbdtory.mbppingForTypf(flfmfntTypf, fbdtory);
        finbl OpfnTypf<?> flfmfntOpfnTypf = flfmfntMbpping.gftOpfnTypf();
        finbl ArrbyTypf<?> opfnTypf = ArrbyTypf.gftArrbyTypf(flfmfntOpfnTypf);
        finbl Clbss<?> flfmfntOpfnClbss = flfmfntMbpping.gftOpfnClbss();

        finbl Clbss<?> opfnArrbyClbss;
        finbl String opfnArrbyClbssNbmf;
        if (flfmfntOpfnClbss.isArrby())
            opfnArrbyClbssNbmf = "[" + flfmfntOpfnClbss.gftNbmf();
        flsf
            opfnArrbyClbssNbmf = "[L" + flfmfntOpfnClbss.gftNbmf() + ";";
        try {
            opfnArrbyClbss = Clbss.forNbmf(opfnArrbyClbssNbmf);
        } dbtdh (ClbssNotFoundExdfption f) {
            throw opfnDbtbExdfption("Cbnnot obtbin brrby dlbss", f);
        }

        if (dollfdtionTypf instbndfof PbrbmftfrizfdTypf) {
            rfturn nfw CollfdtionMbpping(dollfdtionTypf,
                                         opfnTypf, opfnArrbyClbss,
                                         flfmfntMbpping);
        } flsf {
            if (isIdfntity(flfmfntMbpping)) {
                rfturn nfw IdfntityMbpping(dollfdtionTypf,
                                           opfnTypf);
            } flsf {
                rfturn nfw ArrbyMbpping(dollfdtionTypf,
                                          opfnTypf,
                                          opfnArrbyClbss,
                                          flfmfntMbpping);
            }
        }
    }

    privbtf stbtid finbl String[] kfyArrby = {"kfy"};
    privbtf stbtid finbl String[] kfyVblufArrby = {"kfy", "vbluf"};

    privbtf MXBfbnMbpping
        mbkfTbbulbrMbpping(Typf objTypf, boolfbn sortfdMbp,
                           Typf kfyTypf, Typf vblufTypf,
                           MXBfbnMbppingFbdtory fbdtory)
            throws OpfnDbtbExdfption {

        finbl String objTypfNbmf = typfNbmf(objTypf);
        finbl MXBfbnMbpping kfyMbpping = fbdtory.mbppingForTypf(kfyTypf, fbdtory);
        finbl MXBfbnMbpping vblufMbpping = fbdtory.mbppingForTypf(vblufTypf, fbdtory);
        finbl OpfnTypf<?> kfyOpfnTypf = kfyMbpping.gftOpfnTypf();
        finbl OpfnTypf<?> vblufOpfnTypf = vblufMbpping.gftOpfnTypf();
        finbl CompositfTypf rowTypf =
            nfw CompositfTypf(objTypfNbmf,
                              objTypfNbmf,
                              kfyVblufArrby,
                              kfyVblufArrby,
                              nfw OpfnTypf<?>[] {kfyOpfnTypf, vblufOpfnTypf});
        finbl TbbulbrTypf tbbulbrTypf =
            nfw TbbulbrTypf(objTypfNbmf, objTypfNbmf, rowTypf, kfyArrby);
        rfturn nfw TbbulbrMbpping(objTypf, sortfdMbp, tbbulbrTypf,
                                    kfyMbpping, vblufMbpping);
    }

    /* Wf know how to trbnslbtf List<E>, Sft<E>, SortfdSft<E>,
       Mbp<K,V>, SortfdMbp<K,V>, bnd thbt's it.  Wf don't bddfpt
       subtypfs of thosf bfdbusf wf wouldn't know how to dfsfriblizf
       thfm.  Wf don't bddfpt Qufuf<E> bfdbusf it is unlikfly pfoplf
       would usf thbt bs b pbrbmftfr or rfturn typf in bn MBfbn.  */
    privbtf MXBfbnMbpping
            mbkfPbrbmftfrizfdTypfMbpping(PbrbmftfrizfdTypf objTypf,
                                         MXBfbnMbppingFbdtory fbdtory)
            throws OpfnDbtbExdfption {

        finbl Typf rbwTypf = objTypf.gftRbwTypf();

        if (rbwTypf instbndfof Clbss<?>) {
            Clbss<?> d = (Clbss<?>) rbwTypf;
            if (d == List.dlbss || d == Sft.dlbss || d == SortfdSft.dlbss) {
                Typf[] bdtubls = objTypf.gftAdtublTypfArgumfnts();
                bssfrt(bdtubls.lfngth == 1);
                if (d == SortfdSft.dlbss)
                    mustBfCompbrbblf(d, bdtubls[0]);
                rfturn mbkfArrbyOrCollfdtionMbpping(objTypf, bdtubls[0], fbdtory);
            } flsf {
                boolfbn sortfdMbp = (d == SortfdMbp.dlbss);
                if (d == Mbp.dlbss || sortfdMbp) {
                    Typf[] bdtubls = objTypf.gftAdtublTypfArgumfnts();
                    bssfrt(bdtubls.lfngth == 2);
                    if (sortfdMbp)
                        mustBfCompbrbblf(d, bdtubls[0]);
                    rfturn mbkfTbbulbrMbpping(objTypf, sortfdMbp,
                            bdtubls[0], bdtubls[1], fbdtory);
                }
            }
        }
        throw nfw OpfnDbtbExdfption("Cbnnot donvfrt typf: " + objTypf);
    }

    privbtf stbtid MXBfbnMbpping mbkfMXBfbnRffMbpping(Typf t)
            throws OpfnDbtbExdfption {
        rfturn nfw MXBfbnRffMbpping(t);
    }

    privbtf MXBfbnMbpping mbkfCompositfMbpping(Clbss<?> d,
                                               MXBfbnMbppingFbdtory fbdtory)
            throws OpfnDbtbExdfption {

        // For historidbl rfbsons GdInfo implfmfnts CompositfDbtb but wf
        // shouldn't dount its CompositfDbtb.gftCompositfTypf() fifld bs
        // bn itfm in thf domputfd CompositfTypf.
        finbl boolfbn gdInfoHbdk =
            (d.gftNbmf().fqubls("dom.sun.mbnbgfmfnt.GdInfo") &&
                d.gftClbssLobdfr() == null);

        RfflfdtUtil.dhfdkPbdkbgfAddfss(d);
        finbl List<Mfthod> mfthods =
                MBfbnAnblyzfr.fliminbtfCovbribntMfthods(Arrbys.bsList(d.gftMfthods()));
        finbl SortfdMbp<String,Mfthod> gfttfrMbp = nfwSortfdMbp();

        /* Sflfdt publid mfthods thbt look likf "T gftX()" or "boolfbn
           isX()", whfrf T is not void bnd X is not thf fmpty
           string.  Exdludf "Clbss gftClbss()" inhfritfd from Objfdt.  */
        for (Mfthod mfthod : mfthods) {
            finbl String propfrtyNbmf = propfrtyNbmf(mfthod);

            if (propfrtyNbmf == null)
                dontinuf;
            if (gdInfoHbdk && propfrtyNbmf.fqubls("CompositfTypf"))
                dontinuf;

            Mfthod old =
                gfttfrMbp.put(dfdbpitblizf(propfrtyNbmf),
                            mfthod);
            if (old != null) {
                finbl String msg =
                    "Clbss " + d.gftNbmf() + " hbs mfthod nbmf dlbsh: " +
                    old.gftNbmf() + ", " + mfthod.gftNbmf();
                throw nfw OpfnDbtbExdfption(msg);
            }
        }

        finbl int nitfms = gfttfrMbp.sizf();

        if (nitfms == 0) {
            throw nfw OpfnDbtbExdfption("Cbn't mbp " + d.gftNbmf() +
                                        " to bn opfn dbtb typf");
        }

        finbl Mfthod[] gfttfrs = nfw Mfthod[nitfms];
        finbl String[] itfmNbmfs = nfw String[nitfms];
        finbl OpfnTypf<?>[] opfnTypfs = nfw OpfnTypf<?>[nitfms];
        int i = 0;
        for (Mbp.Entry<String,Mfthod> fntry : gfttfrMbp.fntrySft()) {
            itfmNbmfs[i] = fntry.gftKfy();
            finbl Mfthod gfttfr = fntry.gftVbluf();
            gfttfrs[i] = gfttfr;
            finbl Typf rftTypf = gfttfr.gftGfnfridRfturnTypf();
            opfnTypfs[i] = fbdtory.mbppingForTypf(rftTypf, fbdtory).gftOpfnTypf();
            i++;
        }

        CompositfTypf dompositfTypf =
            nfw CompositfTypf(d.gftNbmf(),
                              d.gftNbmf(),
                              itfmNbmfs, // fifld nbmfs
                              itfmNbmfs, // fifld dfsdriptions
                              opfnTypfs);

        rfturn nfw CompositfMbpping(d,
                                    dompositfTypf,
                                    itfmNbmfs,
                                    gfttfrs,
                                    fbdtory);
    }

    /* Convfrtfr for dlbssfs whfrf thf opfn dbtb is idfntidbl to thf
       originbl dbtb.  This is truf for bny of thf SimplfTypf typfs,
       bnd for bn bny-dimfnsion brrby of thosf.  It is blso truf for
       primitivf typfs bs of JMX 1.3, sindf bn int[]
       dbn bf dirfdtly rfprfsfntfd by bn ArrbyTypf, bnd bn int nffds no mbpping
       bfdbusf rfflfdtion tbkfs dbrf of it.  */
    privbtf stbtid finbl dlbss IdfntityMbpping fxtfnds NonNullMXBfbnMbpping {
        IdfntityMbpping(Typf tbrgftTypf, OpfnTypf<?> opfnTypf) {
            supfr(tbrgftTypf, opfnTypf);
        }

        boolfbn isIdfntity() {
            rfturn truf;
        }

        @Ovfrridf
        Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
        throws InvblidObjfdtExdfption {
            rfturn opfnVbluf;
        }

        @Ovfrridf
        Objfdt toNonNullOpfnVbluf(Objfdt jbvbVbluf) throws OpfnDbtbExdfption {
            rfturn jbvbVbluf;
        }
    }

    privbtf stbtid finbl dlbss EnumMbpping<T fxtfnds Enum<T>>
            fxtfnds NonNullMXBfbnMbpping {

        EnumMbpping(Clbss<T> fnumClbss) {
            supfr(fnumClbss, SimplfTypf.STRING);
            this.fnumClbss = fnumClbss;
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt vbluf) {
            rfturn ((Enum<?>) vbluf).nbmf();
        }

        @Ovfrridf
        finbl T fromNonNullOpfnVbluf(Objfdt vbluf)
                throws InvblidObjfdtExdfption {
            try {
                rfturn Enum.vblufOf(fnumClbss, (String) vbluf);
            } dbtdh (Exdfption f) {
                throw invblidObjfdtExdfption("Cbnnot donvfrt to fnum: " +
                                             vbluf, f);
            }
        }

        privbtf finbl Clbss<T> fnumClbss;
    }

    privbtf stbtid finbl dlbss ArrbyMbpping fxtfnds NonNullMXBfbnMbpping {
        ArrbyMbpping(Typf tbrgftTypf,
                     ArrbyTypf<?> opfnArrbyTypf, Clbss<?> opfnArrbyClbss,
                     MXBfbnMbpping flfmfntMbpping) {
            supfr(tbrgftTypf, opfnArrbyTypf);
            this.flfmfntMbpping = flfmfntMbpping;
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt vbluf)
                throws OpfnDbtbExdfption {
            Objfdt[] vblufArrby = (Objfdt[]) vbluf;
            finbl int lfn = vblufArrby.lfngth;
            finbl Objfdt[] opfnArrby = (Objfdt[])
                Arrby.nfwInstbndf(gftOpfnClbss().gftComponfntTypf(), lfn);
            for (int i = 0; i < lfn; i++)
                opfnArrby[i] = flfmfntMbpping.toOpfnVbluf(vblufArrby[i]);
            rfturn opfnArrby;
        }

        @Ovfrridf
        finbl Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
                throws InvblidObjfdtExdfption {
            finbl Objfdt[] opfnArrby = (Objfdt[]) opfnVbluf;
            finbl Typf jbvbTypf = gftJbvbTypf();
            finbl Objfdt[] vblufArrby;
            finbl Typf domponfntTypf;
            if (jbvbTypf instbndfof GfnfridArrbyTypf) {
                domponfntTypf =
                    ((GfnfridArrbyTypf) jbvbTypf).gftGfnfridComponfntTypf();
            } flsf if (jbvbTypf instbndfof Clbss<?> &&
                       ((Clbss<?>) jbvbTypf).isArrby()) {
                domponfntTypf = ((Clbss<?>) jbvbTypf).gftComponfntTypf();
            } flsf {
                throw nfw IllfgblArgumfntExdfption("Not bn brrby: " +
                                                   jbvbTypf);
            }
            vblufArrby = (Objfdt[]) Arrby.nfwInstbndf((Clbss<?>) domponfntTypf,
                                                      opfnArrby.lfngth);
            for (int i = 0; i < opfnArrby.lfngth; i++)
                vblufArrby[i] = flfmfntMbpping.fromOpfnVbluf(opfnArrby[i]);
            rfturn vblufArrby;
        }

        publid void dhfdkRfdonstrudtiblf() throws InvblidObjfdtExdfption {
            flfmfntMbpping.dhfdkRfdonstrudtiblf();
        }

        /**
         * DffbultMXBfbnMbppingFbdtory for thf flfmfnts of this brrby.  If this is bn
         *          brrby of brrbys, thf donvfrtfr donvfrts thf sfdond-lfvfl brrbys,
         *          not thf dffpfst flfmfnts.
         */
        privbtf finbl MXBfbnMbpping flfmfntMbpping;
    }

    privbtf stbtid finbl dlbss CollfdtionMbpping fxtfnds NonNullMXBfbnMbpping {
        CollfdtionMbpping(Typf tbrgftTypf,
                          ArrbyTypf<?> opfnArrbyTypf,
                          Clbss<?> opfnArrbyClbss,
                          MXBfbnMbpping flfmfntMbpping) {
            supfr(tbrgftTypf, opfnArrbyTypf);
            this.flfmfntMbpping = flfmfntMbpping;

            /* Dftfrminf thf dondrftf dlbss to bf usfd whfn donvfrting
               bbdk to this Jbvb typf.  Wf donvfrt bll Lists to ArrbyList
               bnd bll Sfts to TrffSft.  (TrffSft bfdbusf it is b SortfdSft,
               so works for both Sft bnd SortfdSft.)  */
            Typf rbw = ((PbrbmftfrizfdTypf) tbrgftTypf).gftRbwTypf();
            Clbss<?> d = (Clbss<?>) rbw;
            finbl Clbss<?> dollC;
            if (d == List.dlbss)
                dollC = ArrbyList.dlbss;
            flsf if (d == Sft.dlbss)
                dollC = HbshSft.dlbss;
            flsf if (d == SortfdSft.dlbss)
                dollC = TrffSft.dlbss;
            flsf { // dbn't hbppfn
                bssfrt(fblsf);
                dollC = null;
            }
            dollfdtionClbss = Util.dbst(dollC);
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt vbluf)
                throws OpfnDbtbExdfption {
            finbl Collfdtion<?> vblufCollfdtion = (Collfdtion<?>) vbluf;
            if (vblufCollfdtion instbndfof SortfdSft<?>) {
                Compbrbtor<?> dompbrbtor =
                    ((SortfdSft<?>) vblufCollfdtion).dompbrbtor();
                if (dompbrbtor != null) {
                    finbl String msg =
                        "Cbnnot donvfrt SortfdSft with non-null dompbrbtor: " +
                        dompbrbtor;
                    throw opfnDbtbExdfption(msg, nfw IllfgblArgumfntExdfption(msg));
                }
            }
            finbl Objfdt[] opfnArrby = (Objfdt[])
                Arrby.nfwInstbndf(gftOpfnClbss().gftComponfntTypf(),
                                  vblufCollfdtion.sizf());
            int i = 0;
            for (Objfdt o : vblufCollfdtion)
                opfnArrby[i++] = flfmfntMbpping.toOpfnVbluf(o);
            rfturn opfnArrby;
        }

        @Ovfrridf
        finbl Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
                throws InvblidObjfdtExdfption {
            finbl Objfdt[] opfnArrby = (Objfdt[]) opfnVbluf;
            finbl Collfdtion<Objfdt> vblufCollfdtion;
            try {
                vblufCollfdtion = dbst(dollfdtionClbss.nfwInstbndf());
            } dbtdh (Exdfption f) {
                throw invblidObjfdtExdfption("Cbnnot drfbtf dollfdtion", f);
            }
            for (Objfdt o : opfnArrby) {
                Objfdt vbluf = flfmfntMbpping.fromOpfnVbluf(o);
                if (!vblufCollfdtion.bdd(vbluf)) {
                    finbl String msg =
                        "Could not bdd " + o + " to " +
                        dollfdtionClbss.gftNbmf() +
                        " (duplidbtf sft flfmfnt?)";
                    throw nfw InvblidObjfdtExdfption(msg);
                }
            }
            rfturn vblufCollfdtion;
        }

        publid void dhfdkRfdonstrudtiblf() throws InvblidObjfdtExdfption {
            flfmfntMbpping.dhfdkRfdonstrudtiblf();
        }

        privbtf finbl Clbss<? fxtfnds Collfdtion<?>> dollfdtionClbss;
        privbtf finbl MXBfbnMbpping flfmfntMbpping;
    }

    privbtf stbtid finbl dlbss MXBfbnRffMbpping fxtfnds NonNullMXBfbnMbpping {
        MXBfbnRffMbpping(Typf intf) {
            supfr(intf, SimplfTypf.OBJECTNAME);
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt jbvbVbluf)
                throws OpfnDbtbExdfption {
            MXBfbnLookup lookup = lookupNotNull(OpfnDbtbExdfption.dlbss);
            ObjfdtNbmf nbmf = lookup.mxbfbnToObjfdtNbmf(jbvbVbluf);
            if (nbmf == null)
                throw nfw OpfnDbtbExdfption("No nbmf for objfdt: " + jbvbVbluf);
            rfturn nbmf;
        }

        @Ovfrridf
        finbl Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
                throws InvblidObjfdtExdfption {
            MXBfbnLookup lookup = lookupNotNull(InvblidObjfdtExdfption.dlbss);
            ObjfdtNbmf nbmf = (ObjfdtNbmf) opfnVbluf;
            Objfdt mxbfbn =
                lookup.objfdtNbmfToMXBfbn(nbmf, (Clbss<?>) gftJbvbTypf());
            if (mxbfbn == null) {
                finbl String msg =
                    "No MXBfbn for nbmf: " + nbmf;
                throw nfw InvblidObjfdtExdfption(msg);
            }
            rfturn mxbfbn;
        }

        privbtf <T fxtfnds Exdfption> MXBfbnLookup
            lookupNotNull(Clbss<T> fxdClbss)
                throws T {
            MXBfbnLookup lookup = MXBfbnLookup.gftLookup();
            if (lookup == null) {
                finbl String msg =
                    "Cbnnot donvfrt MXBfbn intfrfbdf in this dontfxt";
                T fxd;
                try {
                    Construdtor<T> don = fxdClbss.gftConstrudtor(String.dlbss);
                    fxd = don.nfwInstbndf(msg);
                } dbtdh (Exdfption f) {
                    throw nfw RuntimfExdfption(f);
                }
                throw fxd;
            }
            rfturn lookup;
        }
    }

    privbtf stbtid finbl dlbss TbbulbrMbpping fxtfnds NonNullMXBfbnMbpping {
        TbbulbrMbpping(Typf tbrgftTypf,
                       boolfbn sortfdMbp,
                       TbbulbrTypf tbbulbrTypf,
                       MXBfbnMbpping kfyConvfrtfr,
                       MXBfbnMbpping vblufConvfrtfr) {
            supfr(tbrgftTypf, tbbulbrTypf);
            this.sortfdMbp = sortfdMbp;
            this.kfyMbpping = kfyConvfrtfr;
            this.vblufMbpping = vblufConvfrtfr;
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt vbluf) throws OpfnDbtbExdfption {
            finbl Mbp<Objfdt, Objfdt> vblufMbp = dbst(vbluf);
            if (vblufMbp instbndfof SortfdMbp<?,?>) {
                Compbrbtor<?> dompbrbtor = ((SortfdMbp<?,?>) vblufMbp).dompbrbtor();
                if (dompbrbtor != null) {
                    finbl String msg =
                        "Cbnnot donvfrt SortfdMbp with non-null dompbrbtor: " +
                        dompbrbtor;
                    throw opfnDbtbExdfption(msg, nfw IllfgblArgumfntExdfption(msg));
                }
            }
            finbl TbbulbrTypf tbbulbrTypf = (TbbulbrTypf) gftOpfnTypf();
            finbl TbbulbrDbtb tbblf = nfw TbbulbrDbtbSupport(tbbulbrTypf);
            finbl CompositfTypf rowTypf = tbbulbrTypf.gftRowTypf();
            for (Mbp.Entry<Objfdt, Objfdt> fntry : vblufMbp.fntrySft()) {
                finbl Objfdt opfnKfy = kfyMbpping.toOpfnVbluf(fntry.gftKfy());
                finbl Objfdt opfnVbluf = vblufMbpping.toOpfnVbluf(fntry.gftVbluf());
                finbl CompositfDbtb row;
                row =
                    nfw CompositfDbtbSupport(rowTypf, kfyVblufArrby,
                                             nfw Objfdt[] {opfnKfy,
                                                           opfnVbluf});
                tbblf.put(row);
            }
            rfturn tbblf;
        }

        @Ovfrridf
        finbl Objfdt fromNonNullOpfnVbluf(Objfdt opfnVbluf)
                throws InvblidObjfdtExdfption {
            finbl TbbulbrDbtb tbblf = (TbbulbrDbtb) opfnVbluf;
            finbl Collfdtion<CompositfDbtb> rows = dbst(tbblf.vblufs());
            finbl Mbp<Objfdt, Objfdt> vblufMbp =
                sortfdMbp ? nfwSortfdMbp() : nfwInsfrtionOrdfrMbp();
            for (CompositfDbtb row : rows) {
                finbl Objfdt kfy =
                    kfyMbpping.fromOpfnVbluf(row.gft("kfy"));
                finbl Objfdt vbluf =
                    vblufMbpping.fromOpfnVbluf(row.gft("vbluf"));
                if (vblufMbp.put(kfy, vbluf) != null) {
                    finbl String msg =
                        "Duplidbtf fntry in TbbulbrDbtb: kfy=" + kfy;
                    throw nfw InvblidObjfdtExdfption(msg);
                }
            }
            rfturn vblufMbp;
        }

        @Ovfrridf
        publid void dhfdkRfdonstrudtiblf() throws InvblidObjfdtExdfption {
            kfyMbpping.dhfdkRfdonstrudtiblf();
            vblufMbpping.dhfdkRfdonstrudtiblf();
        }

        privbtf finbl boolfbn sortfdMbp;
        privbtf finbl MXBfbnMbpping kfyMbpping;
        privbtf finbl MXBfbnMbpping vblufMbpping;
    }

    privbtf finbl dlbss CompositfMbpping fxtfnds NonNullMXBfbnMbpping {
        CompositfMbpping(Clbss<?> tbrgftClbss,
                         CompositfTypf dompositfTypf,
                         String[] itfmNbmfs,
                         Mfthod[] gfttfrs,
                         MXBfbnMbppingFbdtory fbdtory) throws OpfnDbtbExdfption {
            supfr(tbrgftClbss, dompositfTypf);

            bssfrt(itfmNbmfs.lfngth == gfttfrs.lfngth);

            this.itfmNbmfs = itfmNbmfs;
            this.gfttfrs = gfttfrs;
            this.gfttfrMbppings = nfw MXBfbnMbpping[gfttfrs.lfngth];
            for (int i = 0; i < gfttfrs.lfngth; i++) {
                Typf rftTypf = gfttfrs[i].gftGfnfridRfturnTypf();
                gfttfrMbppings[i] = fbdtory.mbppingForTypf(rftTypf, fbdtory);
            }
        }

        @Ovfrridf
        finbl Objfdt toNonNullOpfnVbluf(Objfdt vbluf)
                throws OpfnDbtbExdfption {
            CompositfTypf dt = (CompositfTypf) gftOpfnTypf();
            if (vbluf instbndfof CompositfDbtbVifw)
                rfturn ((CompositfDbtbVifw) vbluf).toCompositfDbtb(dt);
            if (vbluf == null)
                rfturn null;

            Objfdt[] vblufs = nfw Objfdt[gfttfrs.lfngth];
            for (int i = 0; i < gfttfrs.lfngth; i++) {
                try {
                    Objfdt got = MfthodUtil.invokf(gfttfrs[i], vbluf, (Objfdt[]) null);
                    vblufs[i] = gfttfrMbppings[i].toOpfnVbluf(got);
                } dbtdh (Exdfption f) {
                    throw opfnDbtbExdfption("Error dblling gfttfr for " +
                                            itfmNbmfs[i] + ": " + f, f);
                }
            }
            rfturn nfw CompositfDbtbSupport(dt, itfmNbmfs, vblufs);
        }

        /** Dftfrminf how to donvfrt bbdk from thf CompositfDbtb into
            thf originbl Jbvb typf.  For b typf thbt is not rfdonstrudtiblf,
            this mfthod will fbil fvfry timf, bnd will throw thf right
            fxdfption. */
        privbtf syndhronizfd void mbkfCompositfBuildfr()
                throws InvblidObjfdtExdfption {
            if (dompositfBuildfr != null)
                rfturn;

            Clbss<?> tbrgftClbss = (Clbss<?>) gftJbvbTypf();
            /* In this 2D brrby, fbdh subbrrby is b sft of buildfrs whfrf
               thfrf is no point in donsulting thf onfs bftfr thf first if
               thf first rffusfs.  */
            CompositfBuildfr[][] buildfrs = {
                {
                    nfw CompositfBuildfrVibFrom(tbrgftClbss, itfmNbmfs),
                },
                {
                    nfw CompositfBuildfrVibConstrudtor(tbrgftClbss, itfmNbmfs),
                },
                {
                    nfw CompositfBuildfrChfdkGfttfrs(tbrgftClbss, itfmNbmfs,
                                                     gfttfrMbppings),
                    nfw CompositfBuildfrVibSfttfrs(tbrgftClbss, itfmNbmfs),
                    nfw CompositfBuildfrVibProxy(tbrgftClbss, itfmNbmfs),
                },
            };
            CompositfBuildfr foundBuildfr = null;
            /* Wf try to mbkf b mfbningful fxdfption mfssbgf by
               dondbtfnbting fbdh Buildfr's fxplbnbtion of why it
               isn't bpplidbblf.  */
            finbl StringBuildfr whyNots = nfw StringBuildfr();
            Throwbblf possiblfCbusf = null;
        find:
            for (CompositfBuildfr[] rflbtfdBuildfrs : buildfrs) {
                for (int i = 0; i < rflbtfdBuildfrs.lfngth; i++) {
                    CompositfBuildfr buildfr = rflbtfdBuildfrs[i];
                    String whyNot = buildfr.bpplidbblf(gfttfrs);
                    if (whyNot == null) {
                        foundBuildfr = buildfr;
                        brfbk find;
                    }
                    Throwbblf dbusf = buildfr.possiblfCbusf();
                    if (dbusf != null)
                        possiblfCbusf = dbusf;
                    if (whyNot.lfngth() > 0) {
                        if (whyNots.lfngth() > 0)
                            whyNots.bppfnd("; ");
                        whyNots.bppfnd(whyNot);
                        if (i == 0)
                           brfbk; // skip othfr buildfrs in this group
                    }
                }
            }
            if (foundBuildfr == null) {
                String msg =
                    "Do not know how to mbkf b " + tbrgftClbss.gftNbmf() +
                    " from b CompositfDbtb: " + whyNots;
                if (possiblfCbusf != null)
                    msg += ". Rfmbining fxdfptions show b POSSIBLE dbusf.";
                throw invblidObjfdtExdfption(msg, possiblfCbusf);
            }
            dompositfBuildfr = foundBuildfr;
        }

        @Ovfrridf
        publid void dhfdkRfdonstrudtiblf() throws InvblidObjfdtExdfption {
            mbkfCompositfBuildfr();
        }

        @Ovfrridf
        finbl Objfdt fromNonNullOpfnVbluf(Objfdt vbluf)
                throws InvblidObjfdtExdfption {
            mbkfCompositfBuildfr();
            rfturn dompositfBuildfr.fromCompositfDbtb((CompositfDbtb) vbluf,
                                                      itfmNbmfs,
                                                      gfttfrMbppings);
        }

        privbtf finbl String[] itfmNbmfs;
        privbtf finbl Mfthod[] gfttfrs;
        privbtf finbl MXBfbnMbpping[] gfttfrMbppings;
        privbtf CompositfBuildfr dompositfBuildfr;
    }

    /** Convfrts from b CompositfDbtb to bn instbndf of thf tbrgftClbss.  */
    privbtf stbtid bbstrbdt dlbss CompositfBuildfr {
        CompositfBuildfr(Clbss<?> tbrgftClbss, String[] itfmNbmfs) {
            this.tbrgftClbss = tbrgftClbss;
            this.itfmNbmfs = itfmNbmfs;
        }

        Clbss<?> gftTbrgftClbss() {
            rfturn tbrgftClbss;
        }

        String[] gftItfmNbmfs() {
            rfturn itfmNbmfs;
        }

        /** If thf subdlbss is bppropribtf for tbrgftClbss, thfn thf
            mfthod rfturns null.  If thf subdlbss is not bppropribtf,
            thfn thf mfthod rfturns bn fxplbnbtion of why not.  If thf
            subdlbss should bf bppropribtf but thfrf is b problfm,
            thfn thf mfthod throws InvblidObjfdtExdfption.  */
        bbstrbdt String bpplidbblf(Mfthod[] gfttfrs)
                throws InvblidObjfdtExdfption;

        /** If thf subdlbss rfturns bn fxplbnbtion of why it is not bpplidbblf,
            it dbn bdditionblly indidbtf bn fxdfption with dftbils.  This is
            potfntiblly donfusing, bfdbusf thf rfbl problfm dould bf thbt onf
            of thf othfr subdlbssfs is supposfd to bf bpplidbblf but isn't.
            But thf bdvbntbgf of lfss informbtion loss probbbly outwfighs thf
            disbdvbntbgf of possiblf donfusion.  */
        Throwbblf possiblfCbusf() {
            rfturn null;
        }

        bbstrbdt Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                          String[] itfmNbmfs,
                                          MXBfbnMbpping[] donvfrtfrs)
                throws InvblidObjfdtExdfption;

        privbtf finbl Clbss<?> tbrgftClbss;
        privbtf finbl String[] itfmNbmfs;
    }

    /** Buildfr for whfn thf tbrgft dlbss hbs b mfthod "publid stbtid
        from(CompositfDbtb)".  */
    privbtf stbtid finbl dlbss CompositfBuildfrVibFrom
            fxtfnds CompositfBuildfr {

        CompositfBuildfrVibFrom(Clbss<?> tbrgftClbss, String[] itfmNbmfs) {
            supfr(tbrgftClbss, itfmNbmfs);
        }

        String bpplidbblf(Mfthod[] gfttfrs) throws InvblidObjfdtExdfption {
            // Sff if it hbs b mfthod "T from(CompositfDbtb)"
            // bs is donvfntionbl for b CompositfDbtbVifw
            Clbss<?> tbrgftClbss = gftTbrgftClbss();
            try {
                Mfthod fromMfthod =
                    tbrgftClbss.gftMfthod("from", CompositfDbtb.dlbss);

                if (!Modififr.isStbtid(fromMfthod.gftModififrs())) {
                    finbl String msg =
                        "Mfthod from(CompositfDbtb) is not stbtid";
                    throw nfw InvblidObjfdtExdfption(msg);
                }

                if (fromMfthod.gftRfturnTypf() != gftTbrgftClbss()) {
                    finbl String msg =
                        "Mfthod from(CompositfDbtb) rfturns " +
                        typfNbmf(fromMfthod.gftRfturnTypf()) +
                        " not " + typfNbmf(tbrgftClbss);
                    throw nfw InvblidObjfdtExdfption(msg);
                }

                this.fromMfthod = fromMfthod;
                rfturn null; // suddfss!
            } dbtdh (InvblidObjfdtExdfption f) {
                throw f;
            } dbtdh (Exdfption f) {
                // OK: it dofsn't hbvf thf mfthod
                rfturn "no mfthod from(CompositfDbtb)";
            }
        }

        finbl Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                       String[] itfmNbmfs,
                                       MXBfbnMbpping[] donvfrtfrs)
                throws InvblidObjfdtExdfption {
            try {
                rfturn MfthodUtil.invokf(fromMfthod, null, nfw Objfdt[] {dd});
            } dbtdh (Exdfption f) {
                finbl String msg = "Fbilfd to invokf from(CompositfDbtb)";
                throw invblidObjfdtExdfption(msg, f);
            }
        }

        privbtf Mfthod fromMfthod;
    }

    /** This buildfr nfvfr bdtublly rfturns suddfss.  It simply sfrvfs
        to dhfdk whfthfr thf othfr buildfrs in thf sbmf group hbvf bny
        dhbndf of suddfss.  If bny gfttfr in thf tbrgftClbss rfturns
        b typf thbt wf don't know how to rfdonstrudt, thfn wf will
        not bf bblf to mbkf b buildfr, bnd thfrf is no point in rfpfbting
        thf frror bbout thf problfmbtid gfttfr bs mbny timfs bs thfrf brf
        dbndidbtf buildfrs.  Instfbd, thf "bpplidbblf" mfthod will rfturn
        bn fxplbnbtory string, bnd thf othfr buildfrs will bf skippfd.
        If bll thf gfttfrs brf OK, thfn thf "bpplidbblf" mfthod will rfturn
        bn fmpty string bnd thf othfr buildfrs will bf trifd.  */
    privbtf stbtid dlbss CompositfBuildfrChfdkGfttfrs fxtfnds CompositfBuildfr {
        CompositfBuildfrChfdkGfttfrs(Clbss<?> tbrgftClbss, String[] itfmNbmfs,
                                     MXBfbnMbpping[] gfttfrConvfrtfrs) {
            supfr(tbrgftClbss, itfmNbmfs);
            this.gfttfrConvfrtfrs = gfttfrConvfrtfrs;
        }

        String bpplidbblf(Mfthod[] gfttfrs) {
            for (int i = 0; i < gfttfrs.lfngth; i++) {
                try {
                    gfttfrConvfrtfrs[i].dhfdkRfdonstrudtiblf();
                } dbtdh (InvblidObjfdtExdfption f) {
                    possiblfCbusf = f;
                    rfturn "mfthod " + gfttfrs[i].gftNbmf() + " rfturns typf " +
                        "thbt dbnnot bf mbppfd bbdk from OpfnDbtb";
                }
            }
            rfturn "";
        }

        @Ovfrridf
        Throwbblf possiblfCbusf() {
            rfturn possiblfCbusf;
        }

        finbl Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                       String[] itfmNbmfs,
                                       MXBfbnMbpping[] donvfrtfrs) {
            throw nfw Error();
        }

        privbtf finbl MXBfbnMbpping[] gfttfrConvfrtfrs;
        privbtf Throwbblf possiblfCbusf;
    }

    /** Buildfr for whfn thf tbrgft dlbss hbs b sfttfr for fvfry gfttfr. */
    privbtf stbtid dlbss CompositfBuildfrVibSfttfrs fxtfnds CompositfBuildfr {

        CompositfBuildfrVibSfttfrs(Clbss<?> tbrgftClbss, String[] itfmNbmfs) {
            supfr(tbrgftClbss, itfmNbmfs);
        }

        String bpplidbblf(Mfthod[] gfttfrs) {
            try {
                Construdtor<?> d = gftTbrgftClbss().gftConstrudtor();
            } dbtdh (Exdfption f) {
                rfturn "dofs not hbvf b publid no-brg donstrudtor";
            }

            Mfthod[] sfttfrs = nfw Mfthod[gfttfrs.lfngth];
            for (int i = 0; i < gfttfrs.lfngth; i++) {
                Mfthod gfttfr = gfttfrs[i];
                Clbss<?> rfturnTypf = gfttfr.gftRfturnTypf();
                String nbmf = propfrtyNbmf(gfttfr);
                String sfttfrNbmf = "sft" + nbmf;
                Mfthod sfttfr;
                try {
                    sfttfr = gftTbrgftClbss().gftMfthod(sfttfrNbmf, rfturnTypf);
                    if (sfttfr.gftRfturnTypf() != void.dlbss)
                        throw nfw Exdfption();
                } dbtdh (Exdfption f) {
                    rfturn "not bll gfttfrs hbvf dorrfsponding sfttfrs " +
                           "(" + gfttfr + ")";
                }
                sfttfrs[i] = sfttfr;
            }
            this.sfttfrs = sfttfrs;
            rfturn null;
        }

        Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                 String[] itfmNbmfs,
                                 MXBfbnMbpping[] donvfrtfrs)
                throws InvblidObjfdtExdfption {
            Objfdt o;
            try {
                finbl Clbss<?> tbrgftClbss = gftTbrgftClbss();
                RfflfdtUtil.dhfdkPbdkbgfAddfss(tbrgftClbss);
                o = tbrgftClbss.nfwInstbndf();
                for (int i = 0; i < itfmNbmfs.lfngth; i++) {
                    if (dd.dontbinsKfy(itfmNbmfs[i])) {
                        Objfdt opfnItfm = dd.gft(itfmNbmfs[i]);
                        Objfdt jbvbItfm =
                            donvfrtfrs[i].fromOpfnVbluf(opfnItfm);
                        MfthodUtil.invokf(sfttfrs[i], o, nfw Objfdt[] {jbvbItfm});
                    }
                }
            } dbtdh (Exdfption f) {
                throw invblidObjfdtExdfption(f);
            }
            rfturn o;
        }

        privbtf Mfthod[] sfttfrs;
    }

    /** Buildfr for whfn thf tbrgft dlbss hbs b donstrudtor thbt is
        bnnotbtfd with @ConstrudtorPropfrtifs so wf dbn sff thf dorrfspondfndf
        to gfttfrs.  */
    privbtf stbtid finbl dlbss CompositfBuildfrVibConstrudtor
            fxtfnds CompositfBuildfr {
        stbtid dlbss AnnotbtionHflpfr {
            privbtf stbtid Clbss<? fxtfnds Annotbtion> donstrudtorPropfrtifsClbss;
            privbtf stbtid Mfthod vblufMfthod;
            stbtid {
                findConstrudtorPropfrtifsClbss();
            }

            @SupprfssWbrnings("undhfdkfd")
            privbtf stbtid void findConstrudtorPropfrtifsClbss() {
                try {
                    donstrudtorPropfrtifsClbss = (Clbss<? fxtfnds Annotbtion>)
                        Clbss.forNbmf("jbvb.bfbns.ConstrudtorPropfrtifs", fblsf,
                                      DffbultMXBfbnMbppingFbdtory.dlbss.gftClbssLobdfr());
                    vblufMfthod = donstrudtorPropfrtifsClbss.gftMfthod("vbluf");
                } dbtdh (ClbssNotFoundExdfption dnf) {
                    // jbvb.bfbns not prfsfnt
                } dbtdh (NoSudhMfthodExdfption f) {
                    // should not rfbdh hfrf
                    throw nfw IntfrnblError(f);
                }
            }

            stbtid boolfbn isAvbilbblf() {
                rfturn donstrudtorPropfrtifsClbss != null;
            }

            stbtid String[] gftPropfrtyNbmfs(Construdtor<?> donstr) {
                if (!isAvbilbblf())
                    rfturn null;

                Annotbtion b = donstr.gftAnnotbtion(donstrudtorPropfrtifsClbss);
                if (b == null) rfturn null;

                try {
                    rfturn (String[]) vblufMfthod.invokf(b);
                } dbtdh (InvodbtionTbrgftExdfption f) {
                    throw nfw IntfrnblError(f);
                } dbtdh (IllfgblAddfssExdfption f) {
                    throw nfw IntfrnblError(f);
                }
            }
        }

        CompositfBuildfrVibConstrudtor(Clbss<?> tbrgftClbss, String[] itfmNbmfs) {
            supfr(tbrgftClbss, itfmNbmfs);
        }

        String bpplidbblf(Mfthod[] gfttfrs) throws InvblidObjfdtExdfption {
            if (!AnnotbtionHflpfr.isAvbilbblf())
                rfturn "@ConstrudtorPropfrtifs bnnotbtion not bvbilbblf";

            Clbss<?> tbrgftClbss = gftTbrgftClbss();
            Construdtor<?>[] donstrs = tbrgftClbss.gftConstrudtors();

            // Applidbblf if bnd only if thfrf brf bny bnnotbtfd donstrudtors
            List<Construdtor<?>> bnnotbtfdConstrList = nfwList();
            for (Construdtor<?> donstr : donstrs) {
                if (Modififr.isPublid(donstr.gftModififrs())
                        && AnnotbtionHflpfr.gftPropfrtyNbmfs(donstr) != null)
                    bnnotbtfdConstrList.bdd(donstr);
            }

            if (bnnotbtfdConstrList.isEmpty())
                rfturn "no donstrudtor hbs @ConstrudtorPropfrtifs bnnotbtion";

            bnnotbtfdConstrudtors = nfwList();

            // Now dhfdk thbt bll thf bnnotbtfd donstrudtors brf vblid
            // bnd throw bn fxdfption if not.

            // First link thf itfmNbmfs to thfir gfttfr indfxfs.
            Mbp<String, Intfgfr> gfttfrMbp = nfwMbp();
            String[] itfmNbmfs = gftItfmNbmfs();
            for (int i = 0; i < itfmNbmfs.lfngth; i++)
                gfttfrMbp.put(itfmNbmfs[i], i);

            // Run through thf donstrudtors mbking thf dhfdks in thf spfd.
            // For fbdh donstrudtor, rfmfmbfr thf dorrfspondfndf bftwffn its
            // pbrbmftfrs bnd thf itfms.  Thf int[] for b donstrudtor sbys
            // whbt pbrbmftfr indfx should gft whbt itfm.  For fxbmplf,
            // if flfmfnt 0 is 2 thfn thbt mfbns thbt itfm 0 in thf
            // CompositfDbtb gofs to pbrbmftfr 2 of thf donstrudtor.  If bn
            // flfmfnt is -1, thbt itfm isn't givfn to thf donstrudtor.
            // Also rfmfmbfr thf sft of propfrtifs in thbt donstrudtor
            // so wf dbn tfst unbmbiguity.
            Sft<BitSft> gfttfrIndfxSfts = nfwSft();
            for (Construdtor<?> donstr : bnnotbtfdConstrList) {
                String[] propfrtyNbmfs = AnnotbtionHflpfr.gftPropfrtyNbmfs(donstr);

                Typf[] pbrbmTypfs = donstr.gftGfnfridPbrbmftfrTypfs();
                if (pbrbmTypfs.lfngth != propfrtyNbmfs.lfngth) {
                    finbl String msg =
                        "Numbfr of donstrudtor pbrbms dofs not mbtdh " +
                        "@ConstrudtorPropfrtifs bnnotbtion: " + donstr;
                    throw nfw InvblidObjfdtExdfption(msg);
                }

                int[] pbrbmIndfxfs = nfw int[gfttfrs.lfngth];
                for (int i = 0; i < gfttfrs.lfngth; i++)
                    pbrbmIndfxfs[i] = -1;
                BitSft prfsfnt = nfw BitSft();

                for (int i = 0; i < propfrtyNbmfs.lfngth; i++) {
                    String propfrtyNbmf = propfrtyNbmfs[i];
                    if (!gfttfrMbp.dontbinsKfy(propfrtyNbmf)) {
                        String msg =
                            "@ConstrudtorPropfrtifs indludfs nbmf " + propfrtyNbmf +
                            " whidh dofs not dorrfspond to b propfrty";
                        for (String gfttfrNbmf : gfttfrMbp.kfySft()) {
                            if (gfttfrNbmf.fqublsIgnorfCbsf(propfrtyNbmf)) {
                                msg += " (difffrs only in dbsf from propfrty " +
                                        gfttfrNbmf + ")";
                            }
                        }
                        msg += ": " + donstr;
                        throw nfw InvblidObjfdtExdfption(msg);
                    }
                    int gfttfrIndfx = gfttfrMbp.gft(propfrtyNbmf);
                    pbrbmIndfxfs[gfttfrIndfx] = i;
                    if (prfsfnt.gft(gfttfrIndfx)) {
                        finbl String msg =
                            "@ConstrudtorPropfrtifs dontbins propfrty " +
                            propfrtyNbmf + " morf thbn ondf: " + donstr;
                        throw nfw InvblidObjfdtExdfption(msg);
                    }
                    prfsfnt.sft(gfttfrIndfx);
                    Mfthod gfttfr = gfttfrs[gfttfrIndfx];
                    Typf propfrtyTypf = gfttfr.gftGfnfridRfturnTypf();
                    if (!propfrtyTypf.fqubls(pbrbmTypfs[i])) {
                        finbl String msg =
                            "@ConstrudtorPropfrtifs givfs propfrty " + propfrtyNbmf +
                            " of typf " + propfrtyTypf + " for pbrbmftfr " +
                            " of typf " + pbrbmTypfs[i] + ": " + donstr;
                        throw nfw InvblidObjfdtExdfption(msg);
                    }
                }

                if (!gfttfrIndfxSfts.bdd(prfsfnt)) {
                    finbl String msg =
                        "Morf thbn onf donstrudtor hbs b @ConstrudtorPropfrtifs " +
                        "bnnotbtion with this sft of nbmfs: " +
                        Arrbys.toString(propfrtyNbmfs);
                    throw nfw InvblidObjfdtExdfption(msg);
                }

                Constr d = nfw Constr(donstr, pbrbmIndfxfs, prfsfnt);
                bnnotbtfdConstrudtors.bdd(d);
            }

            /* Chfdk thbt no possiblf sft of itfms dould lfbd to bn bmbiguous
             * dhoidf of donstrudtor (spfd rfquirfs this dhfdk).  For bny
             * pbir of donstrudtors, thfir union would bf thf minimbl
             * bmbiguous sft.  If this sft itsflf dorrfsponds to b donstrudtor,
             * thfrf is no bmbiguity for thbt pbir.  In thf usubl dbsf, onf
             * of thf donstrudtors is b supfrsft of thf othfr so thf union is
             * just thf biggfr donstrudtor.
             *
             * Thf blgorithm hfrf is qubdrbtid in thf numbfr of donstrudtors
             * with b @ConstrudtorPropfrtifs bnnotbtion.  Typidblly this dorrfsponds
             * to thf numbfr of vfrsions of thf dlbss thfrf hbvf bffn.  Tfn
             * would blrfbdy bf b lbrgf numbfr, so blthough it's probbbly
             * possiblf to hbvf bn O(n lg n) blgorithm it wouldn't bf
             * worth thf domplfxity.
             */
            for (BitSft b : gfttfrIndfxSfts) {
                boolfbn sffn = fblsf;
                for (BitSft b : gfttfrIndfxSfts) {
                    if (b == b)
                        sffn = truf;
                    flsf if (sffn) {
                        BitSft u = nfw BitSft();
                        u.or(b); u.or(b);
                        if (!gfttfrIndfxSfts.dontbins(u)) {
                            Sft<String> nbmfs = nfw TrffSft<String>();
                            for (int i = u.nfxtSftBit(0); i >= 0;
                                 i = u.nfxtSftBit(i+1))
                                nbmfs.bdd(itfmNbmfs[i]);
                            finbl String msg =
                                "Construdtors with @ConstrudtorPropfrtifs bnnotbtion " +
                                " would bf bmbiguous for thfsf itfms: " +
                                nbmfs;
                            throw nfw InvblidObjfdtExdfption(msg);
                        }
                    }
                }
            }

            rfturn null; // suddfss!
        }

        finbl Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                       String[] itfmNbmfs,
                                       MXBfbnMbpping[] mbppings)
                throws InvblidObjfdtExdfption {
            // Thf CompositfDbtb might domf from bn fbrlifr vfrsion whfrf
            // not bll thf itfms wfrf prfsfnt.  Wf look for b donstrudtor
            // thbt bddfpts just thf itfms thbt brf prfsfnt.  Bfdbusf of
            // thf bmbiguity dhfdk in bpplidbblf(), wf know thfrf must bf
            // bt most onf mbximblly bpplidbblf donstrudtor.
            CompositfTypf dt = dd.gftCompositfTypf();
            BitSft prfsfnt = nfw BitSft();
            for (int i = 0; i < itfmNbmfs.lfngth; i++) {
                if (dt.gftTypf(itfmNbmfs[i]) != null)
                    prfsfnt.sft(i);
            }

            Constr mbx = null;
            for (Constr donstr : bnnotbtfdConstrudtors) {
                if (subsft(donstr.prfsfntPbrbms, prfsfnt) &&
                        (mbx == null ||
                         subsft(mbx.prfsfntPbrbms, donstr.prfsfntPbrbms)))
                    mbx = donstr;
            }

            if (mbx == null) {
                finbl String msg =
                    "No donstrudtor hbs b @ConstrudtorPropfrtifs for this sft of " +
                    "itfms: " + dt.kfySft();
                throw nfw InvblidObjfdtExdfption(msg);
            }

            Objfdt[] pbrbms = nfw Objfdt[mbx.prfsfntPbrbms.dbrdinblity()];
            for (int i = 0; i < itfmNbmfs.lfngth; i++) {
                if (!mbx.prfsfntPbrbms.gft(i))
                    dontinuf;
                Objfdt opfnItfm = dd.gft(itfmNbmfs[i]);
                Objfdt jbvbItfm = mbppings[i].fromOpfnVbluf(opfnItfm);
                int indfx = mbx.pbrbmIndfxfs[i];
                if (indfx >= 0)
                    pbrbms[indfx] = jbvbItfm;
            }

            try {
                RfflfdtUtil.dhfdkPbdkbgfAddfss(mbx.donstrudtor.gftDfdlbringClbss());
                rfturn mbx.donstrudtor.nfwInstbndf(pbrbms);
            } dbtdh (Exdfption f) {
                finbl String msg =
                    "Exdfption donstrudting " + gftTbrgftClbss().gftNbmf();
                throw invblidObjfdtExdfption(msg, f);
            }
        }

        privbtf stbtid boolfbn subsft(BitSft sub, BitSft sup) {
            BitSft subdopy = (BitSft) sub.dlonf();
            subdopy.bndNot(sup);
            rfturn subdopy.isEmpty();
        }

        privbtf stbtid dlbss Constr {
            finbl Construdtor<?> donstrudtor;
            finbl int[] pbrbmIndfxfs;
            finbl BitSft prfsfntPbrbms;
            Constr(Construdtor<?> donstrudtor, int[] pbrbmIndfxfs,
                   BitSft prfsfntPbrbms) {
                this.donstrudtor = donstrudtor;
                this.pbrbmIndfxfs = pbrbmIndfxfs;
                this.prfsfntPbrbms = prfsfntPbrbms;
            }
        }

        privbtf List<Constr> bnnotbtfdConstrudtors;
    }

    /** Buildfr for whfn thf tbrgft dlbss is bn intfrfbdf bnd dontbins
        no mfthods othfr thbn gfttfrs.  Thfn wf dbn mbkf bn instbndf
        using b dynbmid proxy thbt forwbrds thf gfttfrs to thf sourdf
        CompositfDbtb.  */
    privbtf stbtid finbl dlbss CompositfBuildfrVibProxy
            fxtfnds CompositfBuildfr {

        CompositfBuildfrVibProxy(Clbss<?> tbrgftClbss, String[] itfmNbmfs) {
            supfr(tbrgftClbss, itfmNbmfs);
        }

        String bpplidbblf(Mfthod[] gfttfrs) {
            Clbss<?> tbrgftClbss = gftTbrgftClbss();
            if (!tbrgftClbss.isIntfrfbdf())
                rfturn "not bn intfrfbdf";
            Sft<Mfthod> mfthods =
                nfwSft(Arrbys.bsList(tbrgftClbss.gftMfthods()));
            mfthods.rfmovfAll(Arrbys.bsList(gfttfrs));
            /* If thf intfrfbdf hbs bny mfthods lfft ovfr, thfy bfttfr bf
             * publid mfthods thbt brf blrfbdy prfsfnt in jbvb.lbng.Objfdt.
             */
            String bbd = null;
            for (Mfthod m : mfthods) {
                String mnbmf = m.gftNbmf();
                Clbss<?>[] mpbrbms = m.gftPbrbmftfrTypfs();
                try {
                    Mfthod om = Objfdt.dlbss.gftMfthod(mnbmf, mpbrbms);
                    if (!Modififr.isPublid(om.gftModififrs()))
                        bbd = mnbmf;
                } dbtdh (NoSudhMfthodExdfption f) {
                    bbd = mnbmf;
                }
                /* Wf don't dbtdh SfdurityExdfption sindf it shouldn't
                 * hbppfn for b mfthod in Objfdt bnd if it dofs wf would
                 * likf to know bbout it rbthfr thbn mystfriously domplbining.
                 */
            }
            if (bbd != null)
                rfturn "dontbins mfthods othfr thbn gfttfrs (" + bbd + ")";
            rfturn null; // suddfss!
        }

        finbl Objfdt fromCompositfDbtb(CompositfDbtb dd,
                                       String[] itfmNbmfs,
                                       MXBfbnMbpping[] donvfrtfrs) {
            finbl Clbss<?> tbrgftClbss = gftTbrgftClbss();
            rfturn
                Proxy.nfwProxyInstbndf(tbrgftClbss.gftClbssLobdfr(),
                                       nfw Clbss<?>[] {tbrgftClbss},
                                       nfw CompositfDbtbInvodbtionHbndlfr(dd));
        }
    }

    stbtid InvblidObjfdtExdfption invblidObjfdtExdfption(String msg,
                                                         Throwbblf dbusf) {
        rfturn EnvHflp.initCbusf(nfw InvblidObjfdtExdfption(msg), dbusf);
    }

    stbtid InvblidObjfdtExdfption invblidObjfdtExdfption(Throwbblf dbusf) {
        rfturn invblidObjfdtExdfption(dbusf.gftMfssbgf(), dbusf);
    }

    stbtid OpfnDbtbExdfption opfnDbtbExdfption(String msg, Throwbblf dbusf) {
        rfturn EnvHflp.initCbusf(nfw OpfnDbtbExdfption(msg), dbusf);
    }

    stbtid OpfnDbtbExdfption opfnDbtbExdfption(Throwbblf dbusf) {
        rfturn opfnDbtbExdfption(dbusf.gftMfssbgf(), dbusf);
    }

    stbtid void mustBfCompbrbblf(Clbss<?> dollfdtion, Typf flfmfnt)
            throws OpfnDbtbExdfption {
        if (!(flfmfnt instbndfof Clbss<?>)
            || !Compbrbblf.dlbss.isAssignbblfFrom((Clbss<?>) flfmfnt)) {
            finbl String msg =
                "Pbrbmftfr dlbss " + flfmfnt + " of " +
                dollfdtion.gftNbmf() + " dofs not implfmfnt " +
                Compbrbblf.dlbss.gftNbmf();
            throw nfw OpfnDbtbExdfption(msg);
        }
    }

    /**
     * Utility mfthod to tbkf b string bnd donvfrt it to normbl Jbvb vbribblf
     * nbmf dbpitblizbtion.  This normblly mfbns donvfrting thf first
     * dhbrbdtfr from uppfr dbsf to lowfr dbsf, but in thf (unusubl) spfdibl
     * dbsf whfn thfrf is morf thbn onf dhbrbdtfr bnd both thf first bnd
     * sfdond dhbrbdtfrs brf uppfr dbsf, wf lfbvf it blonf.
     * <p>
     * Thus "FooBbh" bfdomfs "fooBbh" bnd "X" bfdomfs "x", but "URL" stbys
     * bs "URL".
     *
     * @pbrbm  nbmf Thf string to bf dfdbpitblizfd.
     * @rfturn  Thf dfdbpitblizfd vfrsion of thf string.
     */
    publid stbtid String dfdbpitblizf(String nbmf) {
        if (nbmf == null || nbmf.lfngth() == 0) {
            rfturn nbmf;
        }
        int offsft1 = Chbrbdtfr.offsftByCodfPoints(nbmf, 0, 1);
        // Should bf nbmf.offsftByCodfPoints but 6242664 mbkfs this fbil
        if (offsft1 < nbmf.lfngth() &&
                Chbrbdtfr.isUppfrCbsf(nbmf.dodfPointAt(offsft1)))
            rfturn nbmf;
        rfturn nbmf.substring(0, offsft1).toLowfrCbsf() +
               nbmf.substring(offsft1);
    }

    /**
     * Rfvfrsf opfrbtion for jbvb.bfbns.Introspfdtor.dfdbpitblizf.  For bny s,
     * dbpitblizf(dfdbpitblizf(s)).fqubls(s).  Thf rfvfrsf is not truf:
     * f.g. dbpitblizf("uRL") produdfs "URL" whidh is undhbngfd by
     * dfdbpitblizf.
     */
    stbtid String dbpitblizf(String nbmf) {
        if (nbmf == null || nbmf.lfngth() == 0)
            rfturn nbmf;
        int offsft1 = nbmf.offsftByCodfPoints(0, 1);
        rfturn nbmf.substring(0, offsft1).toUppfrCbsf() +
               nbmf.substring(offsft1);
    }

    publid stbtid String propfrtyNbmf(Mfthod m) {
        String rfst = null;
        String nbmf = m.gftNbmf();
        if (nbmf.stbrtsWith("gft"))
            rfst = nbmf.substring(3);
        flsf if (nbmf.stbrtsWith("is") && m.gftRfturnTypf() == boolfbn.dlbss)
            rfst = nbmf.substring(2);
        if (rfst == null || rfst.lfngth() == 0
            || m.gftPbrbmftfrTypfs().lfngth > 0
            || m.gftRfturnTypf() == void.dlbss
            || nbmf.fqubls("gftClbss"))
            rfturn null;
        rfturn rfst;
    }

    privbtf finbl stbtid Mbp<Typf, Typf> inProgrfss = nfwIdfntityHbshMbp();
    // rfblly bn IdfntityHbshSft but thbt dofsn't fxist
}
