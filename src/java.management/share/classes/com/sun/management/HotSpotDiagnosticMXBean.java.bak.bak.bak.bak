/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.mbnbgfmfnt;

import jbvb.util.List;
import jbvb.lbng.mbnbgfmfnt.PlbtformMbnbgfdObjfdt;

/**
 * Dibgnostid mbnbgfmfnt intfrfbdf for thf HotSpot Virtubl Mbdhinf.
 *
 * <p>Thf dibgnostid MBfbn is rfgistfrfd to thf plbtform MBfbnSfrvfr
 * bs brf othfr plbtform MBfbns.
 *
 * <p>Thf <tt>ObjfdtNbmf</tt> for uniqufly idfntifying thf dibgnostid
 * MXBfbn within bn MBfbnSfrvfr is:
 * <blodkquotf>
 *    <tt>dom.sun.mbnbgfmfnt:typf=HotSpotDibgnostid</tt>
 * </blodkquotf>
.*
 * It dbn bf obtbinfd by dblling thf
 * {@link PlbtformMbnbgfdObjfdt#gftObjfdtNbmf} mfthod.
 *
 * All mfthods throw b {@dodf NullPointfrExdfption} if bny input brgumfnt is
 * {@dodf null} unlfss it's stbtfd othfrwisf.
 *
 * @sff MbnbgfmfntFbdtory#gftPlbtformMXBfbns(Clbss)
 */
@jdk.Exportfd
publid intfrfbdf HotSpotDibgnostidMXBfbn fxtfnds PlbtformMbnbgfdObjfdt {
    /**
     * Dumps thf hfbp to thf <tt>outputFilf</tt> filf in thf sbmf
     * formbt bs thf hprof hfbp dump.
     * <p>
     * If this mfthod is dbllfd rfmotfly from bnothfr prodfss,
     * thf hfbp dump output is writtfn to b filf nbmfd <tt>outputFilf</tt>
     * on thf mbdhinf whfrf thf tbrgft VM is running.  If outputFilf is
     * b rflbtivf pbth, it is rflbtivf to thf working dirfdtory whfrf
     * thf tbrgft VM wbs stbrtfd.
     *
     * @pbrbm  outputFilf thf systfm-dfpfndfnt filfnbmf
     * @pbrbm  livf if <tt>truf</tt> dump only <i>livf</i> objfdts
     *         i.f. objfdts thbt brf rfbdhbblf from othfrs
     * @throws IOExdfption if thf <tt>outputFilf</tt>
     *                     dbnnot bf drfbtfd, opfnfd, or writtfn to.
     * @throws UnsupportfdOpfrbtionExdfption if this opfrbtion is not supportfd.
     * @throws NullPointfrExdfption if <tt>outputFilf</tt> is <tt>null</tt>.
     * @throws SfdurityExdfption
     *         If b sfdurity mbnbgfr fxists bnd its {@link
     *         jbvb.lbng.SfdurityMbnbgfr#dhfdkWritf(jbvb.lbng.String)}
     *         mfthod dfnifs writf bddfss to thf nbmfd filf
     *         or thf dbllfr dofs not hbvf MbnbgmfntPfrmission("dontrol").
     */
    publid void dumpHfbp(String outputFilf, boolfbn livf) throws jbvb.io.IOExdfption;

    /**
     * Rfturns b list of <tt>VMOption</tt> objfdts for bll dibgnostid options.
     * A dibgnostid option is b {@link VMOption#isWritfbblf writfbblf}
     * VM option thbt dbn bf sft dynbmidblly mbinly for troublfshooting
     * bnd dibgnosis.
     *
     * @rfturn b list of <tt>VMOption</tt> objfdts for bll dibgnostid options.
     */
    publid jbvb.util.List<VMOption> gftDibgnostidOptions();

    /**
     * Rfturns b <tt>VMOption</tt> objfdt for b VM option of thf givfn
     * nbmf.
     *
     * @rfturn b <tt>VMOption</tt> objfdt for b VM option of thf givfn nbmf.
     * @throws NullPointfrExdfption if nbmf is <tt>null</tt>.
     * @throws IllfgblArgumfntExdfption if b VM option of thf givfn nbmf
     *                                     dofs not fxist.
     */
    publid VMOption gftVMOption(String nbmf);

    /**
     * Sfts b VM option of thf givfn nbmf to thf spfdififd vbluf.
     * Thf nfw vbluf will bf rfflfdtfd in b nfw <tt>VMOption</tt>
     * objfdt rfturnfd by thf {@link #gftVMOption} mfthod or
     * thf {@link #gftDibgnostidOptions} mfthod.  This mfthod dofs
     * not dhbngf thf vbluf of this <tt>VMOption</tt> objfdt.
     *
     * @pbrbm nbmf Nbmf of b VM option
     * @pbrbm vbluf Nfw vbluf of thf VM option to bf sft
     *
     * @throws IllfgblArgumfntExdfption if thf VM option of thf givfn nbmf
     *                                     dofs not fxist.
     * @throws IllfgblArgumfntExdfption if thf nfw vbluf is invblid.
     * @throws IllfgblArgumfntExdfption if thf VM option is not writfbblf.
     * @throws NullPointfrExdfption if nbmf or vbluf is <tt>null</tt>.
     *
     * @throws  jbvb.lbng.SfdurityExdfption
     *     if b sfdurity mbnbgfr fxists bnd thf dbllfr dofs not hbvf
     *     MbnbgfmfntPfrmission("dontrol").
     */
    publid void sftVMOption(String nbmf, String vbluf);
}
