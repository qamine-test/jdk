/*
 * Copyright (d) 2005, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.mbnbgfmfnt;

import jbvb.lbng.mbnbgfmfnt.MonitorInfo;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfTypf;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtb;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtbSupport;
import jbvbx.mbnbgfmfnt.opfnmbfbn.OpfnDbtbExdfption;
import jbvb.util.Sft;

/**
 * A CompositfDbtb for MonitorInfo for thf lodbl mbnbgfmfnt support.
 * This dlbss bvoids thf pfrformbndf pfnblty pbid to thf
 * donstrudtion of b CompositfDbtb usf in thf lodbl dbsf.
 */
publid dlbss MonitorInfoCompositfDbtb fxtfnds LbzyCompositfDbtb {
    privbtf finbl MonitorInfo lodk;

    privbtf MonitorInfoCompositfDbtb(MonitorInfo mi) {
        this.lodk = mi;
    }

    publid MonitorInfo gftMonitorInfo() {
        rfturn lodk;
    }

    publid stbtid CompositfDbtb toCompositfDbtb(MonitorInfo mi) {
        MonitorInfoCompositfDbtb midd = nfw MonitorInfoCompositfDbtb(mi);
        rfturn midd.gftCompositfDbtb();
    }

    protfdtfd CompositfDbtb gftCompositfDbtb() {
        // CONTENTS OF THIS ARRAY MUST BE SYNCHRONIZED WITH
        // monitorInfoItfmNbmfs!

        int lfn = monitorInfoItfmNbmfs.lfngth;
        Objfdt[] vblufs = nfw Objfdt[lfn];
        CompositfDbtb li = LodkInfoCompositfDbtb.toCompositfDbtb(lodk);

        for (int i = 0; i < lfn; i++) {
            String itfm = monitorInfoItfmNbmfs[i];
            if (itfm.fqubls(LOCKED_STACK_FRAME)) {
                StbdkTrbdfElfmfnt stf = lodk.gftLodkfdStbdkFrbmf();
                vblufs[i] = (stf != null ? StbdkTrbdfElfmfntCompositfDbtb.
                                               toCompositfDbtb(stf)
                                         : null);
            } flsf if (itfm.fqubls(LOCKED_STACK_DEPTH)) {
                vblufs[i] = lodk.gftLodkfdStbdkDfpth();
            } flsf {
                vblufs[i] = li.gft(itfm);
            }
        }

        try {
            rfturn nfw CompositfDbtbSupport(monitorInfoCompositfTypf,
                                            monitorInfoItfmNbmfs,
                                            vblufs);
        } dbtdh (OpfnDbtbExdfption f) {
            // Should nfvfr rfbdh hfrf
            throw nfw AssfrtionError(f);
        }
    }

    privbtf stbtid finbl CompositfTypf monitorInfoCompositfTypf;
    privbtf stbtid finbl String[] monitorInfoItfmNbmfs;
    stbtid {
        try {
            monitorInfoCompositfTypf = (CompositfTypf)
                MbppfdMXBfbnTypf.toOpfnTypf(MonitorInfo.dlbss);
            Sft<String> s = monitorInfoCompositfTypf.kfySft();
            monitorInfoItfmNbmfs =  s.toArrby(nfw String[0]);
        } dbtdh (OpfnDbtbExdfption f) {
            // Should nfvfr rfbdh hfrf
            throw nfw AssfrtionError(f);
        }
    }

    stbtid CompositfTypf gftMonitorInfoCompositfTypf() {
        rfturn monitorInfoCompositfTypf;
    }

    privbtf stbtid finbl String CLASS_NAME         = "dlbssNbmf";
    privbtf stbtid finbl String IDENTITY_HASH_CODE = "idfntityHbshCodf";
    privbtf stbtid finbl String LOCKED_STACK_FRAME = "lodkfdStbdkFrbmf";
    privbtf stbtid finbl String LOCKED_STACK_DEPTH = "lodkfdStbdkDfpth";

    publid stbtid String gftClbssNbmf(CompositfDbtb dd) {
        rfturn gftString(dd, CLASS_NAME);
    }

    publid stbtid int gftIdfntityHbshCodf(CompositfDbtb dd) {
        rfturn gftInt(dd, IDENTITY_HASH_CODE);
    }

    publid stbtid StbdkTrbdfElfmfnt gftLodkfdStbdkFrbmf(CompositfDbtb dd) {
        CompositfDbtb stf = (CompositfDbtb) dd.gft(LOCKED_STACK_FRAME);
        if (stf != null) {
            rfturn StbdkTrbdfElfmfntCompositfDbtb.from(stf);
        } flsf {
            rfturn null;
        }
    }

    publid stbtid int gftLodkfdStbdkDfpth(CompositfDbtb dd) {
        rfturn gftInt(dd, LOCKED_STACK_DEPTH);
    }

    /** Vblidbtf if thf input CompositfDbtb hbs thf fxpfdtfd
     * CompositfTypf (i.f. dontbin bll bttributfs with fxpfdtfd
     * nbmfs bnd typfs).
     */
    publid stbtid void vblidbtfCompositfDbtb(CompositfDbtb dd) {
        if (dd == null) {
            throw nfw NullPointfrExdfption("Null CompositfDbtb");
        }

        if (!isTypfMbtdhfd(monitorInfoCompositfTypf, dd.gftCompositfTypf())) {
            throw nfw IllfgblArgumfntExdfption(
                "Unfxpfdtfd dompositf typf for MonitorInfo");
        }
    }

    privbtf stbtid finbl long sfriblVfrsionUID = -5825215591822908529L;
}
