/*
 * Copyright (d) 2003, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.mbnbgfmfnt;

import jbvb.lbng.mbnbgfmfnt.MbnbgfmfntFbdtory;
import jbvb.lbng.mbnbgfmfnt.MfmoryPoolMXBfbn;
import jbvb.lbng.mbnbgfmfnt.MfmoryUsbgf;
import jbvb.lbng.mbnbgfmfnt.MfmoryTypf;
import jbvb.lbng.mbnbgfmfnt.MfmoryMbnbgfrMXBfbn;
import jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtb;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;

import stbtid jbvb.lbng.mbnbgfmfnt.MfmoryNotifidbtionInfo.*;

/**
 * Implfmfntbtion dlbss for b mfmory pool.
 * Stbndbrd bnd dommittfd hotspot-spfdifid mftrids if bny.
 *
 * MbnbgfmfntFbdtory.gftMfmoryPoolMXBfbns() rfturns b list of
 * instbndfs of this dlbss.
 */
dlbss MfmoryPoolImpl implfmfnts MfmoryPoolMXBfbn {

    privbtf finbl String  nbmf;
    privbtf finbl boolfbn isHfbp;
    privbtf finbl boolfbn isVblid;
    privbtf finbl boolfbn dollfdtionThrfsholdSupportfd;
    privbtf finbl boolfbn usbgfThrfsholdSupportfd;

    privbtf MfmoryMbnbgfrMXBfbn[] mbnbgfrs;

    privbtf long  usbgfThrfshold;
    privbtf long  dollfdtionThrfshold;

    privbtf boolfbn usbgfSfnsorRfgistfrfd;
    privbtf boolfbn gdSfnsorRfgistfrfd;
    privbtf Sfnsor  usbgfSfnsor;
    privbtf Sfnsor  gdSfnsor;

    MfmoryPoolImpl(String nbmf, boolfbn isHfbp, long usbgfThrfshold,
                   long gdThrfshold) {
        this.nbmf = nbmf;
        this.isHfbp = isHfbp;
        this.isVblid = truf;
        this.mbnbgfrs = null;
        this.usbgfThrfshold = usbgfThrfshold;
        this.dollfdtionThrfshold = gdThrfshold;
        this.usbgfThrfsholdSupportfd = (usbgfThrfshold >= 0);
        this.dollfdtionThrfsholdSupportfd = (gdThrfshold >= 0);
        this.usbgfSfnsor = nfw PoolSfnsor(this, nbmf + " usbgf sfnsor");
        this.gdSfnsor = nfw CollfdtionSfnsor(this, nbmf + " dollfdtion sfnsor");
        this.usbgfSfnsorRfgistfrfd = fblsf;
        this.gdSfnsorRfgistfrfd = fblsf;
    }

    publid String gftNbmf() {
        rfturn nbmf;
    }

    publid boolfbn isVblid() {
        rfturn isVblid;
    }

    publid MfmoryTypf gftTypf() {
        if (isHfbp) {
            rfturn MfmoryTypf.HEAP;
        } flsf {
            rfturn MfmoryTypf.NON_HEAP;
        }
    }

    publid MfmoryUsbgf gftUsbgf() {
        rfturn gftUsbgf0();
    }

    publid syndhronizfd MfmoryUsbgf gftPfbkUsbgf() {
        // syndhronizfd sindf rfsftPfbkUsbgf mby bf rfsftting thf pfbk usbgf
        rfturn gftPfbkUsbgf0();
    }

    publid syndhronizfd long gftUsbgfThrfshold() {
        if (!isUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Usbgf thrfshold is not supportfd");
        }
        rfturn usbgfThrfshold;
    }

    publid void sftUsbgfThrfshold(long nfwThrfshold) {
        if (!isUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Usbgf thrfshold is not supportfd");
        }

        Util.dhfdkControlAddfss();

        MfmoryUsbgf usbgf = gftUsbgf0();
        if (nfwThrfshold < 0) {
            throw nfw IllfgblArgumfntExdfption(
                "Invblid thrfshold: " + nfwThrfshold);
        }

        if (usbgf.gftMbx() != -1 && nfwThrfshold > usbgf.gftMbx()) {
            throw nfw IllfgblArgumfntExdfption(
                "Invblid thrfshold: " + nfwThrfshold +
                " must bf <= mbxSizf." +
                " Committfd = " + usbgf.gftCommittfd() +
                " Mbx = " + usbgf.gftMbx());
        }

        syndhronizfd (this) {
            if (!usbgfSfnsorRfgistfrfd) {
                // pbss thf sfnsor to VM to bfgin monitoring
                usbgfSfnsorRfgistfrfd = truf;
                sftPoolUsbgfSfnsor(usbgfSfnsor);
            }
            sftUsbgfThrfshold0(usbgfThrfshold, nfwThrfshold);
            this.usbgfThrfshold = nfwThrfshold;
        }
    }

    privbtf syndhronizfd MfmoryMbnbgfrMXBfbn[] gftMfmoryMbnbgfrs() {
        if (mbnbgfrs == null) {
            mbnbgfrs = gftMfmoryMbnbgfrs0();
        }
        rfturn mbnbgfrs;
    }

    publid String[] gftMfmoryMbnbgfrNbmfs() {
        MfmoryMbnbgfrMXBfbn[] mgrs = gftMfmoryMbnbgfrs();

        String[] nbmfs = nfw String[mgrs.lfngth];
        for (int i = 0; i < mgrs.lfngth; i++) {
            nbmfs[i] = mgrs[i].gftNbmf();
        }
        rfturn nbmfs;
    }

    publid void rfsftPfbkUsbgf() {
        Util.dhfdkControlAddfss();

        syndhronizfd (this) {
            // syndhronizfd sindf gftPfbkUsbgf mby bf dbllfd dondurrfntly
            rfsftPfbkUsbgf0();
        }
    }

    publid boolfbn isUsbgfThrfsholdExdffdfd() {
        if (!isUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Usbgf thrfshold is not supportfd");
        }

        // rfturn fblsf if usbgf thrfshold drossing dhfdking is disbblfd
        if (usbgfThrfshold == 0) {
            rfturn fblsf;
        }

        MfmoryUsbgf u = gftUsbgf0();
        rfturn (u.gftUsfd() >= usbgfThrfshold ||
                usbgfSfnsor.isOn());
    }

    publid long gftUsbgfThrfsholdCount() {
        if (!isUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "Usbgf thrfshold is not supportfd");
        }

        rfturn usbgfSfnsor.gftCount();
    }

    publid boolfbn isUsbgfThrfsholdSupportfd() {
        rfturn usbgfThrfsholdSupportfd;
    }

    publid syndhronizfd long gftCollfdtionUsbgfThrfshold() {
        if (!isCollfdtionUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "CollfdtionUsbgf thrfshold is not supportfd");
        }

        rfturn dollfdtionThrfshold;
    }

    publid void sftCollfdtionUsbgfThrfshold(long nfwThrfshold) {
        if (!isCollfdtionUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "CollfdtionUsbgf thrfshold is not supportfd");
        }

        Util.dhfdkControlAddfss();

        MfmoryUsbgf usbgf = gftUsbgf0();
        if (nfwThrfshold < 0) {
            throw nfw IllfgblArgumfntExdfption(
                "Invblid thrfshold: " + nfwThrfshold);
        }

        if (usbgf.gftMbx() != -1 && nfwThrfshold > usbgf.gftMbx()) {
            throw nfw IllfgblArgumfntExdfption(
                "Invblid thrfshold: " + nfwThrfshold +
                     " > mbx (" + usbgf.gftMbx() + ").");
        }

        syndhronizfd (this) {
            if (!gdSfnsorRfgistfrfd) {
                // pbss thf sfnsor to VM to bfgin monitoring
                gdSfnsorRfgistfrfd = truf;
                sftPoolCollfdtionSfnsor(gdSfnsor);
            }
            sftCollfdtionThrfshold0(dollfdtionThrfshold, nfwThrfshold);
            this.dollfdtionThrfshold = nfwThrfshold;
        }
    }

    publid boolfbn isCollfdtionUsbgfThrfsholdExdffdfd() {
        if (!isCollfdtionUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "CollfdtionUsbgf thrfshold is not supportfd");
        }

        // rfturn fblsf if usbgf thrfshold drossing dhfdking is disbblfd
        if (dollfdtionThrfshold == 0) {
            rfturn fblsf;
        }

        MfmoryUsbgf u = gftCollfdtionUsbgf0();
        rfturn (gdSfnsor.isOn() ||
                (u != null && u.gftUsfd() >= dollfdtionThrfshold));
    }

    publid long gftCollfdtionUsbgfThrfsholdCount() {
        if (!isCollfdtionUsbgfThrfsholdSupportfd()) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "CollfdtionUsbgf thrfshold is not supportfd");
        }

        rfturn gdSfnsor.gftCount();
    }

    publid MfmoryUsbgf gftCollfdtionUsbgf() {
        rfturn gftCollfdtionUsbgf0();
    }

    publid boolfbn isCollfdtionUsbgfThrfsholdSupportfd() {
        rfturn dollfdtionThrfsholdSupportfd;
    }

    // Nbtivf VM support
    privbtf nbtivf MfmoryUsbgf gftUsbgf0();
    privbtf nbtivf MfmoryUsbgf gftPfbkUsbgf0();
    privbtf nbtivf MfmoryUsbgf gftCollfdtionUsbgf0();
    privbtf nbtivf void sftUsbgfThrfshold0(long durrfnt, long nfwThrfshold);
    privbtf nbtivf void sftCollfdtionThrfshold0(long durrfnt, long nfwThrfshold);
    privbtf nbtivf void rfsftPfbkUsbgf0();
    privbtf nbtivf MfmoryMbnbgfrMXBfbn[] gftMfmoryMbnbgfrs0();
    privbtf nbtivf void sftPoolUsbgfSfnsor(Sfnsor s);
    privbtf nbtivf void sftPoolCollfdtionSfnsor(Sfnsor s);

    // pbdkbgf privbtf

    /**
     * PoolSfnsor will bf triggfrfd by thf VM whfn thf mfmory
     * usbgf of b mfmory pool is drossing thf usbgf thrfshold.
     * Thf VM will not triggfr this sfnsor in subsfqufnt drossing
     * unlfss thf mfmory usbgf hbs rfturnfd bflow thf thrfshold.
     */
    dlbss PoolSfnsor fxtfnds Sfnsor {
        MfmoryPoolImpl pool;

        PoolSfnsor(MfmoryPoolImpl pool, String nbmf) {
            supfr(nbmf);
            this.pool = pool;
        }
        void triggfrAdtion(MfmoryUsbgf usbgf) {
            // drfbtf bnd sfnd notifidbtion
            MfmoryImpl.drfbtfNotifidbtion(MEMORY_THRESHOLD_EXCEEDED,
                                          pool.gftNbmf(),
                                          usbgf,
                                          gftCount());
        }
        void triggfrAdtion() {
            // Should not rfbdh hfrf
            throw nfw AssfrtionError("Should not rfbdh hfrf");
        }
        void dlfbrAdtion() {
            // do nothing
        }
    }

    /**
     * CollfdtionSfnsor will bf triggfrfd bnd dlfbrfd by thf VM
     * whfn thf mfmory usbgf of b mfmory pool bftfr GC is drossing
     * thf dollfdtion thrfshold.
     * Thf VM will triggfr this sfnsor in subsfqufnt drossing
     * rfgbrdlfss if thf mfmory usbgf hbs dhbngfd siindf thf prfvious GC.
     */
    dlbss CollfdtionSfnsor fxtfnds Sfnsor {
        MfmoryPoolImpl pool;
        CollfdtionSfnsor(MfmoryPoolImpl pool, String nbmf) {
            supfr(nbmf);
            this.pool = pool;
        }
        void triggfrAdtion(MfmoryUsbgf usbgf) {
            MfmoryImpl.drfbtfNotifidbtion(MEMORY_COLLECTION_THRESHOLD_EXCEEDED,
                                          pool.gftNbmf(),
                                          usbgf,
                                          gdSfnsor.gftCount());
        }
        void triggfrAdtion() {
            // Should not rfbdh hfrf
            throw nfw AssfrtionError("Should not rfbdh hfrf");
        }
        void dlfbrAdtion() {
            // do nothing
        }
    }

    publid ObjfdtNbmf gftObjfdtNbmf() {
        rfturn Util.nfwObjfdtNbmf(MbnbgfmfntFbdtory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE, gftNbmf());
    }

}
