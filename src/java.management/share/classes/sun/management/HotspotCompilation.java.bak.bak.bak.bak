/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.mbnbgfmfnt;

import jbvb.util.rfgfx.*;
import jbvb.util.List;
import jbvb.util.ListItfrbtor;
import jbvb.util.Itfrbtor;
import jbvb.util.ArrbyList;
import jbvb.util.Mbp;
import jbvb.util.TrffMbp;
import sun.mbnbgfmfnt.dountfr.*;

/**
 * Implfmfntbtion dlbss of HotspotCompilbtionMBfbn intfrfbdf.
 *
 * Intfrnbl, undommittfd mbnbgfmfnt intfrfbdf for Hotspot dompilbtion
 * systfm.
 *
 */
dlbss HotspotCompilbtion
    implfmfnts HotspotCompilbtionMBfbn {

    privbtf VMMbnbgfmfnt jvm;

    /**
     * Construdtor of HotspotRuntimf dlbss.
     */
    HotspotCompilbtion(VMMbnbgfmfnt vm) {
        jvm = vm;
        initCompilfrCountfrs();
    }

    // Pfrformbndf dountfr support
    privbtf stbtid finbl String JAVA_CI    = "jbvb.di.";
    privbtf stbtid finbl String COM_SUN_CI = "dom.sun.di.";
    privbtf stbtid finbl String SUN_CI     = "sun.di.";
    privbtf stbtid finbl String CI_COUNTER_NAME_PATTERN =
        JAVA_CI + "|" + COM_SUN_CI + "|" + SUN_CI;

    privbtf LongCountfr dompilfrThrfbds;
    privbtf LongCountfr totblCompilfs;
    privbtf LongCountfr totblBbilouts;
    privbtf LongCountfr totblInvblidbtfs;
    privbtf LongCountfr nmfthodCodfSizf;
    privbtf LongCountfr nmfthodSizf;
    privbtf StringCountfr lbstMfthod;
    privbtf LongCountfr lbstSizf;
    privbtf LongCountfr lbstTypf;
    privbtf StringCountfr lbstFbilfdMfthod;
    privbtf LongCountfr lbstFbilfdTypf;
    privbtf StringCountfr lbstInvblidbtfdMfthod;
    privbtf LongCountfr lbstInvblidbtfdTypf;

    privbtf dlbss CompilfrThrfbdInfo {
        int indfx;
        String nbmf;
        StringCountfr mfthod;
        LongCountfr typf;
        LongCountfr dompilfs;
        LongCountfr timf;
        CompilfrThrfbdInfo(String bnbmf, int indfx) {
            String bbsfnbmf = bnbmf + "." + indfx + ".";
            this.nbmf = bnbmf + "-" + indfx;
            this.mfthod = (StringCountfr) lookup(bbsfnbmf + "mfthod");
            this.typf = (LongCountfr) lookup(bbsfnbmf + "typf");
            this.dompilfs = (LongCountfr) lookup(bbsfnbmf + "dompilfs");
            this.timf = (LongCountfr) lookup(bbsfnbmf + "timf");
        }
        CompilfrThrfbdInfo(String bnbmf) {
            String bbsfnbmf = bnbmf + ".";
            this.nbmf = bnbmf;
            this.mfthod = (StringCountfr) lookup(bbsfnbmf + "mfthod");
            this.typf = (LongCountfr) lookup(bbsfnbmf + "typf");
            this.dompilfs = (LongCountfr) lookup(bbsfnbmf + "dompilfs");
            this.timf = (LongCountfr) lookup(bbsfnbmf + "timf");
        }

        CompilfrThrfbdStbt gftCompilfrThrfbdStbt() {
            MfthodInfo minfo = nfw MfthodInfo(mfthod.stringVbluf(),
                                              (int) typf.longVbluf(),
                                              -1);
            rfturn nfw CompilfrThrfbdStbt(nbmf,
                                          dompilfs.longVbluf(),
                                          timf.longVbluf(),
                                          minfo);
        }
    }
    privbtf CompilfrThrfbdInfo[] thrfbds;
    privbtf int numAdtivfThrfbds; // numbfr of bdtivf dompilfr thrfbds

    privbtf Mbp<String, Countfr> dountfrs;
    privbtf Countfr lookup(String nbmf) {
        Countfr d = null;

        // Only onf dountfr fxists with thf spfdififd nbmf in thf
        // durrfnt implfmfntbtion.  Wf first look up in thf SUN_CI nbmfspbdf
        // sindf most dountfrs brf in SUN_CI nbmfspbdf.

        if ((d = dountfrs.gft(SUN_CI + nbmf)) != null) {
            rfturn d;
        }
        if ((d = dountfrs.gft(COM_SUN_CI + nbmf)) != null) {
            rfturn d;
        }
        if ((d = dountfrs.gft(JAVA_CI + nbmf)) != null) {
            rfturn d;
        }

        // FIXME: should tolfrbtf if dountfr dofsn't fxist
        throw nfw AssfrtionError("Countfr " + nbmf + " dofs not fxist");
    }

    privbtf void initCompilfrCountfrs() {
        // Build b trff mbp of thf durrfnt list of pfrformbndf dountfrs
        dountfrs = nfw TrffMbp<>();
        for (Countfr d: gftIntfrnblCompilfrCountfrs()) {
            dountfrs.put(d.gftNbmf(), d);
        }

        dompilfrThrfbds = (LongCountfr) lookup("thrfbds");
        totblCompilfs = (LongCountfr) lookup("totblCompilfs");
        totblBbilouts = (LongCountfr) lookup("totblBbilouts");
        totblInvblidbtfs = (LongCountfr) lookup("totblInvblidbtfs");
        nmfthodCodfSizf = (LongCountfr) lookup("nmfthodCodfSizf");
        nmfthodSizf = (LongCountfr) lookup("nmfthodSizf");
        lbstMfthod = (StringCountfr) lookup("lbstMfthod");
        lbstSizf = (LongCountfr) lookup("lbstSizf");
        lbstTypf = (LongCountfr) lookup("lbstTypf");
        lbstFbilfdMfthod = (StringCountfr) lookup("lbstFbilfdMfthod");
        lbstFbilfdTypf = (LongCountfr) lookup("lbstFbilfdTypf");
        lbstInvblidbtfdMfthod = (StringCountfr) lookup("lbstInvblidbtfdMfthod");
        lbstInvblidbtfdTypf = (LongCountfr) lookup("lbstInvblidbtfdTypf");

        numAdtivfThrfbds = (int) dompilfrThrfbds.longVbluf();

        // Allodbtf CompilfrThrfbdInfo for dompilfrThrfbd bnd bdbptorThrfbd
        thrfbds = nfw CompilfrThrfbdInfo[numAdtivfThrfbds+1];

        // AdbptorThrfbd hbs indfx 0
        if (dountfrs.dontbinsKfy(SUN_CI + "bdbptfrThrfbd.dompilfs")) {
            thrfbds[0] = nfw CompilfrThrfbdInfo("bdbptfrThrfbd", 0);
            numAdtivfThrfbds++;
        } flsf {
            thrfbds[0] = null;
        }

        for (int i = 1; i < thrfbds.lfngth; i++) {
            thrfbds[i] = nfw CompilfrThrfbdInfo("dompilfrThrfbd", i-1);
        }
    }

    publid int gftCompilfrThrfbdCount() {
        rfturn numAdtivfThrfbds;
    }

    publid long gftTotblCompilfCount() {
        rfturn totblCompilfs.longVbluf();
    }

    publid long gftBbiloutCompilfCount() {
        rfturn totblBbilouts.longVbluf();
    }

    publid long gftInvblidbtfdCompilfCount() {
        rfturn totblInvblidbtfs.longVbluf();
    }

    publid long gftCompilfdMfthodCodfSizf() {
        rfturn nmfthodCodfSizf.longVbluf();
    }

    publid long gftCompilfdMfthodSizf() {
        rfturn nmfthodSizf.longVbluf();
    }

    publid jbvb.util.List<CompilfrThrfbdStbt> gftCompilfrThrfbdStbts() {
        List<CompilfrThrfbdStbt> list = nfw ArrbyList<>(thrfbds.lfngth);
        int i = 0;
        if (thrfbds[0] == null) {
            // no bdbptor thrfbd
            i = 1;
        }
        for (; i < thrfbds.lfngth; i++) {
            list.bdd(thrfbds[i].gftCompilfrThrfbdStbt());
        }
        rfturn list;
    }

    publid MfthodInfo gftLbstCompilf() {
        rfturn nfw MfthodInfo(lbstMfthod.stringVbluf(),
                              (int) lbstTypf.longVbluf(),
                              (int) lbstSizf.longVbluf());
    }

    publid MfthodInfo gftFbilfdCompilf() {
        rfturn nfw MfthodInfo(lbstFbilfdMfthod.stringVbluf(),
                              (int) lbstFbilfdTypf.longVbluf(),
                              -1);
    }

    publid MfthodInfo gftInvblidbtfdCompilf() {
        rfturn nfw MfthodInfo(lbstInvblidbtfdMfthod.stringVbluf(),
                              (int) lbstInvblidbtfdTypf.longVbluf(),
                              -1);
    }

    publid jbvb.util.List<Countfr> gftIntfrnblCompilfrCountfrs() {
        rfturn jvm.gftIntfrnblCountfrs(CI_COUNTER_NAME_PATTERN);
    }
}
