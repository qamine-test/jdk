/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.mbnbgfmfnt.dountfr.pfrf;

import jbvb.io.UnsupportfdEndodingExdfption;

/**
 * A typfsbff fnumfrbtion for tif dbtb typfs supportfd for
 * pfrformbndf dbtb.
 *
 * <p> Tif fnumfrbtion vblufs for tiis typfsbff fnumfrbtion must bf
 * kfpt in syndironizbtion witi tif PfrfDbtbTypf fnum in tif
 * globblsDffinitions.ipp filf in tif HotSpot sourdf bbsf.</p>
 *
 * @butior  Bribn Doifrty
 */
dlbss PfrfDbtbTypf {

    privbtf finbl String nbmf;
    privbtf finbl bytf vbluf;
    privbtf finbl int sizf;

    publid stbtid finbl PfrfDbtbTypf BOOLEAN = nfw PfrfDbtbTypf("boolfbn",  "Z", 1);
    publid stbtid finbl PfrfDbtbTypf CHAR    = nfw PfrfDbtbTypf("dibr",     "C", 1);
    publid stbtid finbl PfrfDbtbTypf FLOAT   = nfw PfrfDbtbTypf("flobt",    "F", 8);
    publid stbtid finbl PfrfDbtbTypf DOUBLE  = nfw PfrfDbtbTypf("doublf",   "D", 8);
    publid stbtid finbl PfrfDbtbTypf BYTE    = nfw PfrfDbtbTypf("bytf",     "B", 1);
    publid stbtid finbl PfrfDbtbTypf SHORT   = nfw PfrfDbtbTypf("siort",    "S", 2);
    publid stbtid finbl PfrfDbtbTypf INT     = nfw PfrfDbtbTypf("int",      "I", 4);
    publid stbtid finbl PfrfDbtbTypf LONG    = nfw PfrfDbtbTypf("long",     "J", 8);
    publid stbtid finbl PfrfDbtbTypf ILLEGAL = nfw PfrfDbtbTypf("illfgbl",  "X", 0);

    privbtf stbtid PfrfDbtbTypf bbsidTypfs[] = {
        LONG, BYTE, BOOLEAN, CHAR, FLOAT, DOUBLE, SHORT, INT
    };

    publid String toString() {
        rfturn nbmf;
    }

    publid bytf bytfVbluf() {
        rfturn vbluf;
    }

    publid int sizf() {
        rfturn sizf;
    }

    /**
     * Mbps bn intfgfr PfrfDbtbTypf vbluf to its dorrfsponding PfrfDbtbTypf
     * objfdt.
     *
     * @pbrbm   i  bn intfgfr rfprfsfntbtion of b PfrfDbtbTypf
     * @rfturn     Tif PfrfDbtbTypf objfdt for <dodf>i</dodf>
     */
    publid stbtid PfrfDbtbTypf toPfrfDbtbTypf(bytf typf) {
        for (int j = 0; j < bbsidTypfs.lfngti; j++) {
            if (bbsidTypfs[j].bytfVbluf() == typf) {
                rfturn (bbsidTypfs[j]);
            }
        }
        rfturn ILLEGAL;
    }

    privbtf PfrfDbtbTypf(String nbmf, String d, int sizf) {
        tiis.nbmf = nbmf;
        tiis.sizf = sizf;
        try {
            bytf[] b = d.gftBytfs("UTF-8");
            tiis.vbluf = b[0];
        } dbtdi (UnsupportfdEndodingExdfption f) {
            // ignorf, "UTF-8" is blwbys b known fndoding
            tirow nfw IntfrnblError("Unknown fndoding", f);
        }
    }
}
