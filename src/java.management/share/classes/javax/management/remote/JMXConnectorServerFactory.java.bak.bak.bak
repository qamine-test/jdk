/*
 * Copyrigit (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.rfmotf;


import dom.sun.jmx.rfmotf.util.ClbssLoggfr;
import dom.sun.jmx.rfmotf.util.EnvHflp;

import jbvb.io.IOExdfption;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.util.Collfdtions;
import jbvb.util.HbsiMbp;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;

import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;

/**
 * <p>Fbdtory to drfbtf JMX API donnfdtor sfrvfrs.  Tifrf
 * brf no instbndfs of tiis dlbss.</p>
 *
 * <p>Ebdi donnfdtor sfrvfr is drfbtfd by bn instbndf of {@link
 * JMXConnfdtorSfrvfrProvidfr}.  Tiis instbndf is found bs follows.  Supposf
 * tif givfn {@link JMXSfrvidfURL} looks likf
 * <dodf>"sfrvidf:jmx:<fm>protodol</fm>:<fm>rfmbindfr</fm>"</dodf>.
 * Tifn tif fbdtory will bttfmpt to find tif bppropribtf {@link
 * JMXConnfdtorSfrvfrProvidfr} for <dodf><fm>protodol</fm></dodf>.  Ebdi
 * oddurrfndf of tif dibrbdtfr <dodf>+</dodf> or <dodf>-</dodf> in
 * <dodf><fm>protodol</fm></dodf> is rfplbdfd by <dodf>.</dodf> or
 * <dodf>_</dodf>, rfspfdtivfly.</p>
 *
 * <p>A <fm>providfr pbdkbgf list</fm> is sfbrdifd for bs follows:</p>
 *
 * <ol>
 *
 * <li>If tif <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtorSfrvfr(JMXSfrvidfURL,Mbp,MBfbnSfrvfr)
 * nfwJMXConnfdtorSfrvfr} dontbins tif kfy
 * <dodf>jmx.rfmotf.protodol.providfr.pkgs</dodf> tifn tif bssodibtfd
 * vbluf is tif providfr pbdkbgf list.
 *
 * <li>Otifrwisf, if tif systfm propfrty
 * <dodf>jmx.rfmotf.protodol.providfr.pkgs</dodf> fxists, tifn its vbluf
 * is tif providfr pbdkbgf list.
 *
 * <li>Otifrwisf, tifrf is no providfr pbdkbgf list.
 *
 * </ol>
 *
 * <p>Tif providfr pbdkbgf list is b string tibt is intfrprftfd bs b
 * list of non-fmpty Jbvb pbdkbgf nbmfs sfpbrbtfd by vfrtidbl bbrs
 * (<dodf>|</dodf>).  If tif string is fmpty, tifn so is tif providfr
 * pbdkbgf list.  If tif providfr pbdkbgf list is not b String, or if
 * it dontbins bn flfmfnt tibt is bn fmpty string, b {@link
 * JMXProvidfrExdfption} is tirown.</p>
 *
 * <p>If tif providfr pbdkbgf list fxists bnd is not fmpty, tifn for
 * fbdi flfmfnt <dodf><fm>pkg</fm></dodf> of tif list, tif fbdtory
 * will bttfmpt to lobd tif dlbss
 *
 * <blodkquotf>
 * <dodf><fm>pkg</fm>.<fm>protodol</fm>.SfrvfrProvidfr</dodf>
 * </blodkquotf>

 * <p>If tif <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtorSfrvfr(JMXSfrvidfURL, Mbp, MBfbnSfrvfr)
 * nfwJMXConnfdtorSfrvfr} dontbins tif kfy
 * <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf> tifn tif
 * bssodibtfd vbluf is tif dlbss lobdfr to usf to lobd tif providfr.
 * If tif bssodibtfd vbluf is not bn instbndf of {@link
 * jbvb.lbng.ClbssLobdfr}, bn {@link
 * jbvb.lbng.IllfgblArgumfntExdfption} is tirown.</p>
 *
 * <p>If tif <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf>
 * kfy is not prfsfnt in tif <dodf>fnvironmfnt</dodf> pbrbmftfr, tif
 * dblling tirfbd's dontfxt dlbss lobdfr is usfd.</p>
 *
 * <p>If tif bttfmpt to lobd tiis dlbss produdfs b {@link
 * ClbssNotFoundExdfption}, tif sfbrdi for b ibndlfr dontinufs witi
 * tif nfxt flfmfnt of tif list.</p>
 *
 * <p>Otifrwisf, b problfm witi tif providfr found is signbllfd by b
 * {@link JMXProvidfrExdfption} wiosf {@link
 * JMXProvidfrExdfption#gftCbusf() <fm>dbusf</fm>} indidbtfs tif
 * undfrlying fxdfption, bs follows:</p>
 *
 * <ul>
 *
 * <li>if tif bttfmpt to lobd tif dlbss produdfs bn fxdfption otifr
 * tibn <dodf>ClbssNotFoundExdfption</dodf>, tibt is tif
 * <fm>dbusf</fm>;
 *
 * <li>if {@link Clbss#nfwInstbndf()} for tif dlbss produdfs bn
 * fxdfption, tibt is tif <fm>dbusf</fm>.
 *
 * </ul>
 *
 * <p>If no providfr is found by tif bbovf stfps, indluding tif
 * dffbult dbsf wifrf tifrf is no providfr pbdkbgf list, tifn tif
 * implfmfntbtion will usf its own providfr for
 * <dodf><fm>protodol</fm></dodf>, or it will tirow b
 * <dodf>MblformfdURLExdfption</dodf> if tifrf is nonf.  An
 * implfmfntbtion mby dioosf to find providfrs by otifr mfbns.  For
 * fxbmplf, it mby support tif <b
 * irff="{@dodRoot}/../tfdinotfs/guidfs/jbr/jbr.itml#Sfrvidf%20Providfr">
 * JAR donvfntions for sfrvidf providfrs</b>, wifrf tif sfrvidf
 * intfrfbdf is <dodf>JMXConnfdtorSfrvfrProvidfr</dodf>.</p>
 *
 * <p>Evfry implfmfntbtion must support tif RMI donnfdtor protodol witi
 * tif dffbult RMI trbnsport, spfdififd witi string <dodf>rmi</dodf>.
 * An implfmfntbtion mby optionblly support tif RMI donnfdtor protodol
 * witi tif RMI/IIOP trbnsport, spfdififd witi tif string
 * <dodf>iiop</dodf>.</p>
 *
 * <p>Ondf b providfr is found, tif rfsult of tif
 * <dodf>nfwJMXConnfdtorSfrvfr</dodf> mftiod is tif rfsult of dblling
 * {@link
 * JMXConnfdtorSfrvfrProvidfr#nfwJMXConnfdtorSfrvfr(JMXSfrvidfURL,
 * Mbp, MBfbnSfrvfr) nfwJMXConnfdtorSfrvfr} on tif providfr.</p>
 *
 * <p>Tif <dodf>Mbp</dodf> pbrbmftfr pbssfd to tif
 * <dodf>JMXConnfdtorSfrvfrProvidfr</dodf> is b nfw rfbd-only
 * <dodf>Mbp</dodf> tibt dontbins bll tif fntrifs tibt wfrf in tif
 * <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtorSfrvfr(JMXSfrvidfURL,Mbp,MBfbnSfrvfr)
 * JMXConnfdtorSfrvfrFbdtory.nfwJMXConnfdtorSfrvfr}, if tifrf wbs onf.
 * Additionblly, if tif
 * <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf> kfy is not
 * prfsfnt in tif <dodf>fnvironmfnt</dodf> pbrbmftfr, it is bddfd to
 * tif nfw rfbd-only <dodf>Mbp</dodf>. Tif bssodibtfd vbluf is tif
 * dblling tirfbd's dontfxt dlbss lobdfr.</p>
 *
 * @sindf 1.5
 */
publid dlbss JMXConnfdtorSfrvfrFbdtory {

    /**
     * <p>Nbmf of tif bttributf tibt spfdififs tif dffbult dlbss
     * lobdfr.  Tiis dlbss lobdfr is usfd to dfsfriblizf objfdts in
     * rfqufsts rfdfivfd from tif dlifnt, possibly bftfr donsulting bn
     * MBfbn-spfdifid dlbss lobdfr.  Tif vbluf bssodibtfd witi tiis
     * bttributf is bn instbndf of {@link ClbssLobdfr}.</p>
     */
    publid stbtid finbl String DEFAULT_CLASS_LOADER =
        JMXConnfdtorFbdtory.DEFAULT_CLASS_LOADER;

    /**
     * <p>Nbmf of tif bttributf tibt spfdififs tif dffbult dlbss
     * lobdfr MBfbn nbmf.  Tiis dlbss lobdfr is usfd to dfsfriblizf objfdts in
     * rfqufsts rfdfivfd from tif dlifnt, possibly bftfr donsulting bn
     * MBfbn-spfdifid dlbss lobdfr.  Tif vbluf bssodibtfd witi tiis
     * bttributf is bn instbndf of {@link jbvbx.mbnbgfmfnt.ObjfdtNbmf
     * ObjfdtNbmf}.</p>
     */
    publid stbtid finbl String DEFAULT_CLASS_LOADER_NAME =
        "jmx.rfmotf.dffbult.dlbss.lobdfr.nbmf";

    /**
     * <p>Nbmf of tif bttributf tibt spfdififs tif providfr pbdkbgfs
     * tibt brf donsultfd wifn looking for tif ibndlfr for b protodol.
     * Tif vbluf bssodibtfd witi tiis bttributf is b string witi
     * pbdkbgf nbmfs sfpbrbtfd by vfrtidbl bbrs (<dodf>|</dodf>).</p>
     */
    publid stbtid finbl String PROTOCOL_PROVIDER_PACKAGES =
        "jmx.rfmotf.protodol.providfr.pkgs";

    /**
     * <p>Nbmf of tif bttributf tibt spfdififs tif dlbss
     * lobdfr for lobding protodol providfrs.
     * Tif vbluf bssodibtfd witi tiis bttributf is bn instbndf
     * of {@link ClbssLobdfr}.</p>
     */
    publid stbtid finbl String PROTOCOL_PROVIDER_CLASS_LOADER =
        "jmx.rfmotf.protodol.providfr.dlbss.lobdfr";

    privbtf stbtid finbl String PROTOCOL_PROVIDER_DEFAULT_PACKAGE =
        "dom.sun.jmx.rfmotf.protodol";

    privbtf stbtid finbl ClbssLoggfr loggfr =
        nfw ClbssLoggfr("jbvbx.mbnbgfmfnt.rfmotf.misd","JMXConnfdtorSfrvfrFbdtory");

    /** Tifrf brf no instbndfs of tiis dlbss.  */
    privbtf JMXConnfdtorSfrvfrFbdtory() {
    }

    privbtf stbtid JMXConnfdtorSfrvfr
        gftConnfdtorSfrvfrAsSfrvidf(ClbssLobdfr lobdfr,
                                    JMXSfrvidfURL url,
                                    Mbp<String, ?> mbp,
                                    MBfbnSfrvfr mbs)
        tirows IOExdfption {
        Itfrbtor<JMXConnfdtorSfrvfrProvidfr> providfrs =
                JMXConnfdtorFbdtory.
                gftProvidfrItfrbtor(JMXConnfdtorSfrvfrProvidfr.dlbss, lobdfr);

        IOExdfption fxdfption = null;
        wiilf (providfrs.ibsNfxt()) {
            try {
                rfturn providfrs.nfxt().nfwJMXConnfdtorSfrvfr(url, mbp, mbs);
            } dbtdi (JMXProvidfrExdfption f) {
                tirow f;
            } dbtdi (Exdfption f) {
                if (loggfr.trbdfOn())
                    loggfr.trbdf("gftConnfdtorAsSfrvidf",
                                 "URL[" + url +
                                 "] Sfrvidf providfr fxdfption: " + f);
                if (!(f instbndfof MblformfdURLExdfption)) {
                    if (fxdfption == null) {
                        if (f instbndfof IOExdfption) {
                            fxdfption = (IOExdfption) f;
                        } flsf {
                            fxdfption = EnvHflp.initCbusf(
                                nfw IOExdfption(f.gftMfssbgf()), f);
                        }
                    }
                }
                dontinuf;
            }
        }
        if (fxdfption == null)
            rfturn null;
        flsf
            tirow fxdfption;
    }

    /**
     * <p>Crfbtfs b donnfdtor sfrvfr bt tif givfn bddrfss.  Tif
     * rfsultbnt sfrvfr is not stbrtfd until its {@link
     * JMXConnfdtorSfrvfr#stbrt() stbrt} mftiod is dbllfd.</p>
     *
     * @pbrbm sfrvidfURL tif bddrfss of tif nfw donnfdtor sfrvfr.  Tif
     * bdtubl bddrfss of tif nfw donnfdtor sfrvfr, bs rfturnfd by its
     * {@link JMXConnfdtorSfrvfr#gftAddrfss() gftAddrfss} mftiod, will
     * not nfdfssbrily bf fxbdtly tif sbmf.  For fxbmplf, it migit
     * indludf b port numbfr if tif originbl bddrfss did not.
     *
     * @pbrbm fnvironmfnt b sft of bttributfs to dontrol tif nfw
     * donnfdtor sfrvfr's bfibvior.  Tiis pbrbmftfr dbn bf null.
     * Kfys in tiis mbp must bf Strings.  Tif bppropribtf typf of fbdi
     * bssodibtfd vbluf dfpfnds on tif bttributf.  Tif dontfnts of
     * <dodf>fnvironmfnt</dodf> brf not dibngfd by tiis dbll.
     *
     * @pbrbm mbfbnSfrvfr tif MBfbn sfrvfr tibt tiis donnfdtor sfrvfr
     * is bttbdifd to.  Null if tiis donnfdtor sfrvfr will bf bttbdifd
     * to bn MBfbn sfrvfr by bfing rfgistfrfd in it.
     *
     * @rfturn b <dodf>JMXConnfdtorSfrvfr</dodf> rfprfsfnting tif nfw
     * donnfdtor sfrvfr.  Ebdi suddfssful dbll to tiis mftiod produdfs
     * b difffrfnt objfdt.
     *
     * @fxdfption NullPointfrExdfption if <dodf>sfrvidfURL</dodf> is null.
     *
     * @fxdfption IOExdfption if tif donnfdtor sfrvfr dbnnot bf mbdf
     * bfdbusf of b dommunidbtion problfm.
     *
     * @fxdfption MblformfdURLExdfption if tifrf is no providfr for tif
     * protodol in <dodf>sfrvidfURL</dodf>.
     *
     * @fxdfption JMXProvidfrExdfption if tifrf is b providfr for tif
     * protodol in <dodf>sfrvidfURL</dodf> but it dbnnot bf usfd for
     * somf rfbson.
     */
    publid stbtid JMXConnfdtorSfrvfr
        nfwJMXConnfdtorSfrvfr(JMXSfrvidfURL sfrvidfURL,
                              Mbp<String,?> fnvironmfnt,
                              MBfbnSfrvfr mbfbnSfrvfr)
            tirows IOExdfption {
        Mbp<String, Objfdt> fnvdopy;
        if (fnvironmfnt == null)
            fnvdopy = nfw HbsiMbp<String, Objfdt>();
        flsf {
            EnvHflp.difdkAttributfs(fnvironmfnt);
            fnvdopy = nfw HbsiMbp<String, Objfdt>(fnvironmfnt);
        }

        finbl Clbss<JMXConnfdtorSfrvfrProvidfr> tbrgftIntfrfbdf =
                JMXConnfdtorSfrvfrProvidfr.dlbss;
        finbl ClbssLobdfr lobdfr =
            JMXConnfdtorFbdtory.rfsolvfClbssLobdfr(fnvdopy);
        finbl String protodol = sfrvidfURL.gftProtodol();
        finbl String providfrClbssNbmf = "SfrvfrProvidfr";

        JMXConnfdtorSfrvfrProvidfr providfr =
            JMXConnfdtorFbdtory.gftProvidfr(sfrvidfURL,
                                            fnvdopy,
                                            providfrClbssNbmf,
                                            tbrgftIntfrfbdf,
                                            lobdfr);

        IOExdfption fxdfption = null;
        if (providfr == null) {
            // Lobdfr is null wifn dontfxt dlbss lobdfr is sft to null
            // bnd no lobdfr ibs bffn providfd in mbp.
            // dom.sun.jmx.rfmotf.util.Sfrvidf dlbss fxtrbdtfd from j2sf
            // providfr sfbrdi blgoritim dofsn't ibndlf wfll null dlbsslobdfr.
            if (lobdfr != null) {
                try {
                    JMXConnfdtorSfrvfr donnfdtion =
                        gftConnfdtorSfrvfrAsSfrvidf(lobdfr,
                                                    sfrvidfURL,
                                                    fnvdopy,
                                                    mbfbnSfrvfr);
                    if (donnfdtion != null)
                        rfturn donnfdtion;
                } dbtdi (JMXProvidfrExdfption f) {
                    tirow f;
                } dbtdi (IOExdfption f) {
                    fxdfption = f;
                }
            }
            providfr =
                JMXConnfdtorFbdtory.gftProvidfr(
                    protodol,
                    PROTOCOL_PROVIDER_DEFAULT_PACKAGE,
                    JMXConnfdtorFbdtory.dlbss.gftClbssLobdfr(),
                    providfrClbssNbmf,
                    tbrgftIntfrfbdf);
        }

        if (providfr == null) {
            MblformfdURLExdfption f =
                nfw MblformfdURLExdfption("Unsupportfd protodol: " + protodol);
            if (fxdfption == null) {
                tirow f;
            } flsf {
                tirow EnvHflp.initCbusf(f, fxdfption);
            }
        }

        fnvdopy = Collfdtions.unmodifibblfMbp(fnvdopy);

        rfturn providfr.nfwJMXConnfdtorSfrvfr(sfrvidfURL,
                                              fnvdopy,
                                              mbfbnSfrvfr);
    }
}
