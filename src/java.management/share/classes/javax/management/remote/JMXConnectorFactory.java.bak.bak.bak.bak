/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.rfmotf;

import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.io.IOExdfption;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.util.Collfdtions;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvb.util.Itfrbtor;
import jbvb.util.SfrvidfLobdfr;
import jbvb.util.StringTokfnizfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

import dom.sun.jmx.rfmotf.util.ClbssLoggfr;
import dom.sun.jmx.rfmotf.util.EnvHflp;
import sun.rfflfdt.misd.RfflfdtUtil;


/**
 * <p>Fbdtory to drfbtf JMX API donnfdtor dlifnts.  Thfrf
 * brf no instbndfs of this dlbss.</p>
 *
 * <p>Connfdtions brf usublly mbdf using thf {@link
 * #donnfdt(JMXSfrvidfURL) donnfdt} mfthod of this dlbss.  Morf
 * bdvbndfd bpplidbtions dbn sfpbrbtf thf drfbtion of thf donnfdtor
 * dlifnt, using {@link #nfwJMXConnfdtor(JMXSfrvidfURL, Mbp)
 * nfwJMXConnfdtor} bnd thf fstbblishmfnt of thf donnfdtion itsflf, using
 * {@link JMXConnfdtor#donnfdt(Mbp)}.</p>
 *
 * <p>Ebdh dlifnt is drfbtfd by bn instbndf of {@link
 * JMXConnfdtorProvidfr}.  This instbndf is found bs follows.  Supposf
 * thf givfn {@link JMXSfrvidfURL} looks likf
 * <dodf>"sfrvidf:jmx:<fm>protodol</fm>:<fm>rfmbindfr</fm>"</dodf>.
 * Thfn thf fbdtory will bttfmpt to find thf bppropribtf {@link
 * JMXConnfdtorProvidfr} for <dodf><fm>protodol</fm></dodf>.  Ebdh
 * oddurrfndf of thf dhbrbdtfr <dodf>+</dodf> or <dodf>-</dodf> in
 * <dodf><fm>protodol</fm></dodf> is rfplbdfd by <dodf>.</dodf> or
 * <dodf>_</dodf>, rfspfdtivfly.</p>
 *
 * <p>A <fm>providfr pbdkbgf list</fm> is sfbrdhfd for bs follows:</p>
 *
 * <ol>
 *
 * <li>If thf <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtor(JMXSfrvidfURL, Mbp) nfwJMXConnfdtor} dontbins thf
 * kfy <dodf>jmx.rfmotf.protodol.providfr.pkgs</dodf> thfn thf
 * bssodibtfd vbluf is thf providfr pbdkbgf list.
 *
 * <li>Othfrwisf, if thf systfm propfrty
 * <dodf>jmx.rfmotf.protodol.providfr.pkgs</dodf> fxists, thfn its vbluf
 * is thf providfr pbdkbgf list.
 *
 * <li>Othfrwisf, thfrf is no providfr pbdkbgf list.
 *
 * </ol>
 *
 * <p>Thf providfr pbdkbgf list is b string thbt is intfrprftfd bs b
 * list of non-fmpty Jbvb pbdkbgf nbmfs sfpbrbtfd by vfrtidbl bbrs
 * (<dodf>|</dodf>).  If thf string is fmpty, thfn so is thf providfr
 * pbdkbgf list.  If thf providfr pbdkbgf list is not b String, or if
 * it dontbins bn flfmfnt thbt is bn fmpty string, b {@link
 * JMXProvidfrExdfption} is thrown.</p>
 *
 * <p>If thf providfr pbdkbgf list fxists bnd is not fmpty, thfn for
 * fbdh flfmfnt <dodf><fm>pkg</fm></dodf> of thf list, thf fbdtory
 * will bttfmpt to lobd thf dlbss
 *
 * <blodkquotf>
 * <dodf><fm>pkg</fm>.<fm>protodol</fm>.ClifntProvidfr</dodf>
 * </blodkquotf>

 * <p>If thf <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtor(JMXSfrvidfURL, Mbp) nfwJMXConnfdtor} dontbins thf
 * kfy <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf> thfn thf
 * bssodibtfd vbluf is thf dlbss lobdfr to usf to lobd thf providfr.
 * If thf bssodibtfd vbluf is not bn instbndf of {@link
 * jbvb.lbng.ClbssLobdfr}, bn {@link
 * jbvb.lbng.IllfgblArgumfntExdfption} is thrown.</p>
 *
 * <p>If thf <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf>
 * kfy is not prfsfnt in thf <dodf>fnvironmfnt</dodf> pbrbmftfr, thf
 * dblling thrfbd's dontfxt dlbss lobdfr is usfd.</p>
 *
 * <p>If thf bttfmpt to lobd this dlbss produdfs b {@link
 * ClbssNotFoundExdfption}, thf sfbrdh for b hbndlfr dontinufs with
 * thf nfxt flfmfnt of thf list.</p>
 *
 * <p>Othfrwisf, b problfm with thf providfr found is signbllfd by b
 * {@link JMXProvidfrExdfption} whosf {@link
 * JMXProvidfrExdfption#gftCbusf() <fm>dbusf</fm>} indidbtfs thf undfrlying
 * fxdfption, bs follows:</p>
 *
 * <ul>
 *
 * <li>if thf bttfmpt to lobd thf dlbss produdfs bn fxdfption othfr
 * thbn <dodf>ClbssNotFoundExdfption</dodf>, thbt is thf
 * <fm>dbusf</fm>;
 *
 * <li>if {@link Clbss#nfwInstbndf()} for thf dlbss produdfs bn
 * fxdfption, thbt is thf <fm>dbusf</fm>.
 *
 * </ul>
 *
 * <p>If no providfr is found by thf bbovf stfps, indluding thf
 * dffbult dbsf whfrf thfrf is no providfr pbdkbgf list, thfn thf
 * implfmfntbtion will usf its own providfr for
 * <dodf><fm>protodol</fm></dodf>, or it will throw b
 * <dodf>MblformfdURLExdfption</dodf> if thfrf is nonf.  An
 * implfmfntbtion mby dhoosf to find providfrs by othfr mfbns.  For
 * fxbmplf, it mby support thf <b
 * hrff="{@dodRoot}/../tfdhnotfs/guidfs/jbr/jbr.html#Sfrvidf%20Providfr">
 * JAR donvfntions for sfrvidf providfrs</b>, whfrf thf sfrvidf
 * intfrfbdf is <dodf>JMXConnfdtorProvidfr</dodf>.</p>
 *
 * <p>Evfry implfmfntbtion must support thf RMI donnfdtor protodol with
 * thf dffbult RMI trbnsport, spfdififd with string <dodf>rmi</dodf>.
 * An implfmfntbtion mby optionblly support thf RMI donnfdtor protodol
 * with thf RMI/IIOP trbnsport, spfdififd with thf string
 * <dodf>iiop</dodf>.</p>
 *
 * <p>Ondf b providfr is found, thf rfsult of thf
 * <dodf>nfwJMXConnfdtor</dodf> mfthod is thf rfsult of dblling {@link
 * JMXConnfdtorProvidfr#nfwJMXConnfdtor(JMXSfrvidfURL,Mbp) nfwJMXConnfdtor}
 * on thf providfr.</p>
 *
 * <p>Thf <dodf>Mbp</dodf> pbrbmftfr pbssfd to thf
 * <dodf>JMXConnfdtorProvidfr</dodf> is b nfw rfbd-only
 * <dodf>Mbp</dodf> thbt dontbins bll thf fntrifs thbt wfrf in thf
 * <dodf>fnvironmfnt</dodf> pbrbmftfr to {@link
 * #nfwJMXConnfdtor(JMXSfrvidfURL,Mbp)
 * JMXConnfdtorFbdtory.nfwJMXConnfdtor}, if thfrf wbs onf.
 * Additionblly, if thf
 * <dodf>jmx.rfmotf.protodol.providfr.dlbss.lobdfr</dodf> kfy is not
 * prfsfnt in thf <dodf>fnvironmfnt</dodf> pbrbmftfr, it is bddfd to
 * thf nfw rfbd-only <dodf>Mbp</dodf>.  Thf bssodibtfd vbluf is thf
 * dblling thrfbd's dontfxt dlbss lobdfr.</p>
 *
 * @sindf 1.5
 */
publid dlbss JMXConnfdtorFbdtory {

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf dffbult dlbss
     * lobdfr. This dlbss lobdfr is usfd to dfsfriblizf rfturn vblufs bnd
     * fxdfptions from rfmotf <dodf>MBfbnSfrvfrConnfdtion</dodf>
     * dblls.  Thf vbluf bssodibtfd with this bttributf is bn instbndf
     * of {@link ClbssLobdfr}.</p>
     */
    publid stbtid finbl String DEFAULT_CLASS_LOADER =
        "jmx.rfmotf.dffbult.dlbss.lobdfr";

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf providfr pbdkbgfs
     * thbt brf donsultfd whfn looking for thf hbndlfr for b protodol.
     * Thf vbluf bssodibtfd with this bttributf is b string with
     * pbdkbgf nbmfs sfpbrbtfd by vfrtidbl bbrs (<dodf>|</dodf>).</p>
     */
    publid stbtid finbl String PROTOCOL_PROVIDER_PACKAGES =
        "jmx.rfmotf.protodol.providfr.pkgs";

    /**
     * <p>Nbmf of thf bttributf thbt spfdififs thf dlbss
     * lobdfr for lobding protodol providfrs.
     * Thf vbluf bssodibtfd with this bttributf is bn instbndf
     * of {@link ClbssLobdfr}.</p>
     */
    publid stbtid finbl String PROTOCOL_PROVIDER_CLASS_LOADER =
        "jmx.rfmotf.protodol.providfr.dlbss.lobdfr";

    privbtf stbtid finbl String PROTOCOL_PROVIDER_DEFAULT_PACKAGE =
        "dom.sun.jmx.rfmotf.protodol";

    privbtf stbtid finbl ClbssLoggfr loggfr =
        nfw ClbssLoggfr("jbvbx.mbnbgfmfnt.rfmotf.misd", "JMXConnfdtorFbdtory");

    /** Thfrf brf no instbndfs of this dlbss.  */
    privbtf JMXConnfdtorFbdtory() {
    }

    /**
     * <p>Crfbtfs b donnfdtion to thf donnfdtor sfrvfr bt thf givfn
     * bddrfss.</p>
     *
     * <p>This mfthod is fquivblfnt to {@link
     * #donnfdt(JMXSfrvidfURL,Mbp) donnfdt(sfrvidfURL, null)}.</p>
     *
     * @pbrbm sfrvidfURL thf bddrfss of thf donnfdtor sfrvfr to
     * donnfdt to.
     *
     * @rfturn b <dodf>JMXConnfdtor</dodf> whosf {@link
     * JMXConnfdtor#donnfdt donnfdt} mfthod hbs bffn dbllfd.
     *
     * @fxdfption NullPointfrExdfption if <dodf>sfrvidfURL</dodf> is null.
     *
     * @fxdfption IOExdfption if thf donnfdtor dlifnt or thf
     * donnfdtion dbnnot bf mbdf bfdbusf of b dommunidbtion problfm.
     *
     * @fxdfption SfdurityExdfption if thf donnfdtion dbnnot bf mbdf
     * for sfdurity rfbsons.
     */
    publid stbtid JMXConnfdtor donnfdt(JMXSfrvidfURL sfrvidfURL)
            throws IOExdfption {
        rfturn donnfdt(sfrvidfURL, null);
    }

    /**
     * <p>Crfbtfs b donnfdtion to thf donnfdtor sfrvfr bt thf givfn
     * bddrfss.</p>
     *
     * <p>This mfthod is fquivblfnt to:</p>
     *
     * <prf>
     * JMXConnfdtor donn = JMXConnfdtorFbdtory.nfwJMXConnfdtor(sfrvidfURL,
     *                                                         fnvironmfnt);
     * donn.donnfdt(fnvironmfnt);
     * </prf>
     *
     * @pbrbm sfrvidfURL thf bddrfss of thf donnfdtor sfrvfr to donnfdt to.
     *
     * @pbrbm fnvironmfnt b sft of bttributfs to dftfrminf how thf
     * donnfdtion is mbdf.  This pbrbmftfr dbn bf null.  Kfys in this
     * mbp must bf Strings.  Thf bppropribtf typf of fbdh bssodibtfd
     * vbluf dfpfnds on thf bttributf.  Thf dontfnts of
     * <dodf>fnvironmfnt</dodf> brf not dhbngfd by this dbll.
     *
     * @rfturn b <dodf>JMXConnfdtor</dodf> rfprfsfnting thf nfwly-mbdf
     * donnfdtion.  Ebdh suddfssful dbll to this mfthod produdfs b
     * difffrfnt objfdt.
     *
     * @fxdfption NullPointfrExdfption if <dodf>sfrvidfURL</dodf> is null.
     *
     * @fxdfption IOExdfption if thf donnfdtor dlifnt or thf
     * donnfdtion dbnnot bf mbdf bfdbusf of b dommunidbtion problfm.
     *
     * @fxdfption SfdurityExdfption if thf donnfdtion dbnnot bf mbdf
     * for sfdurity rfbsons.
     */
    publid stbtid JMXConnfdtor donnfdt(JMXSfrvidfURL sfrvidfURL,
                                       Mbp<String,?> fnvironmfnt)
            throws IOExdfption {
        if (sfrvidfURL == null)
            throw nfw NullPointfrExdfption("Null JMXSfrvidfURL");
        JMXConnfdtor donn = nfwJMXConnfdtor(sfrvidfURL, fnvironmfnt);
        donn.donnfdt(fnvironmfnt);
        rfturn donn;
    }

    privbtf stbtid <K,V> Mbp<K,V> nfwHbshMbp() {
        rfturn nfw HbshMbp<K,V>();
    }

    privbtf stbtid <K> Mbp<K,Objfdt> nfwHbshMbp(Mbp<K,?> mbp) {
        rfturn nfw HbshMbp<K,Objfdt>(mbp);
    }

    /**
     * <p>Crfbtfs b donnfdtor dlifnt for thf donnfdtor sfrvfr bt thf
     * givfn bddrfss.  Thf rfsultbnt dlifnt is not donnfdtfd until its
     * {@link JMXConnfdtor#donnfdt(Mbp) donnfdt} mfthod is dbllfd.</p>
     *
     * @pbrbm sfrvidfURL thf bddrfss of thf donnfdtor sfrvfr to donnfdt to.
     *
     * @pbrbm fnvironmfnt b sft of bttributfs to dftfrminf how thf
     * donnfdtion is mbdf.  This pbrbmftfr dbn bf null.  Kfys in this
     * mbp must bf Strings.  Thf bppropribtf typf of fbdh bssodibtfd
     * vbluf dfpfnds on thf bttributf.  Thf dontfnts of
     * <dodf>fnvironmfnt</dodf> brf not dhbngfd by this dbll.
     *
     * @rfturn b <dodf>JMXConnfdtor</dodf> rfprfsfnting thf nfw
     * donnfdtor dlifnt.  Ebdh suddfssful dbll to this mfthod produdfs
     * b difffrfnt objfdt.
     *
     * @fxdfption NullPointfrExdfption if <dodf>sfrvidfURL</dodf> is null.
     *
     * @fxdfption IOExdfption if thf donnfdtor dlifnt dbnnot bf mbdf
     * bfdbusf of b dommunidbtion problfm.
     *
     * @fxdfption MblformfdURLExdfption if thfrf is no providfr for thf
     * protodol in <dodf>sfrvidfURL</dodf>.
     *
     * @fxdfption JMXProvidfrExdfption if thfrf is b providfr for thf
     * protodol in <dodf>sfrvidfURL</dodf> but it dbnnot bf usfd for
     * somf rfbson.
     */
    publid stbtid JMXConnfdtor nfwJMXConnfdtor(JMXSfrvidfURL sfrvidfURL,
                                               Mbp<String,?> fnvironmfnt)
            throws IOExdfption {

        finbl Mbp<String,Objfdt> fnvdopy;
        if (fnvironmfnt == null)
            fnvdopy = nfwHbshMbp();
        flsf {
            EnvHflp.dhfdkAttributfs(fnvironmfnt);
            fnvdopy = nfwHbshMbp(fnvironmfnt);
        }

        finbl ClbssLobdfr lobdfr = rfsolvfClbssLobdfr(fnvdopy);
        finbl Clbss<JMXConnfdtorProvidfr> tbrgftIntfrfbdf =
                JMXConnfdtorProvidfr.dlbss;
        finbl String protodol = sfrvidfURL.gftProtodol();
        finbl String providfrClbssNbmf = "ClifntProvidfr";
        finbl JMXSfrvidfURL providfrURL = sfrvidfURL;

        JMXConnfdtorProvidfr providfr = gftProvidfr(providfrURL, fnvdopy,
                                               providfrClbssNbmf,
                                               tbrgftIntfrfbdf,
                                               lobdfr);

        IOExdfption fxdfption = null;
        if (providfr == null) {
            // Lobdfr is null whfn dontfxt dlbss lobdfr is sft to null
            // bnd no lobdfr hbs bffn providfd in mbp.
            // dom.sun.jmx.rfmotf.util.Sfrvidf dlbss fxtrbdtfd from j2sf
            // providfr sfbrdh blgorithm dofsn't hbndlf wfll null dlbsslobdfr.
            if (lobdfr != null) {
                try {
                    JMXConnfdtor donnfdtion =
                        gftConnfdtorAsSfrvidf(lobdfr, providfrURL, fnvdopy);
                    if (donnfdtion != null)
                        rfturn donnfdtion;
                } dbtdh (JMXProvidfrExdfption f) {
                    throw f;
                } dbtdh (IOExdfption f) {
                    fxdfption = f;
                }
            }
            providfr = gftProvidfr(protodol, PROTOCOL_PROVIDER_DEFAULT_PACKAGE,
                            JMXConnfdtorFbdtory.dlbss.gftClbssLobdfr(),
                            providfrClbssNbmf, tbrgftIntfrfbdf);
        }

        if (providfr == null) {
            MblformfdURLExdfption f =
                nfw MblformfdURLExdfption("Unsupportfd protodol: " + protodol);
            if (fxdfption == null) {
                throw f;
            } flsf {
                throw EnvHflp.initCbusf(f, fxdfption);
            }
        }

        finbl Mbp<String,Objfdt> fixfdfnv =
                Collfdtions.unmodifibblfMbp(fnvdopy);

        rfturn providfr.nfwJMXConnfdtor(sfrvidfURL, fixfdfnv);
    }

    privbtf stbtid String rfsolvfPkgs(Mbp<String, ?> fnv)
            throws JMXProvidfrExdfption {

        Objfdt pkgsObjfdt = null;

        if (fnv != null)
            pkgsObjfdt = fnv.gft(PROTOCOL_PROVIDER_PACKAGES);

        if (pkgsObjfdt == null)
            pkgsObjfdt =
                AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<String>() {
                    publid String run() {
                        rfturn Systfm.gftPropfrty(PROTOCOL_PROVIDER_PACKAGES);
                    }
                });

        if (pkgsObjfdt == null)
            rfturn null;

        if (!(pkgsObjfdt instbndfof String)) {
            finbl String msg = "Vbluf of " + PROTOCOL_PROVIDER_PACKAGES +
                " pbrbmftfr is not b String: " +
                pkgsObjfdt.gftClbss().gftNbmf();
            throw nfw JMXProvidfrExdfption(msg);
        }

        finbl String pkgs = (String) pkgsObjfdt;
        if (pkgs.trim().fqubls(""))
            rfturn null;

        // pkgs mby not dontbin bn fmpty flfmfnt
        if (pkgs.stbrtsWith("|") || pkgs.fndsWith("|") ||
            pkgs.indfxOf("||") >= 0) {
            finbl String msg = "Vbluf of " + PROTOCOL_PROVIDER_PACKAGES +
                " dontbins bn fmpty flfmfnt: " + pkgs;
            throw nfw JMXProvidfrExdfption(msg);
        }

        rfturn pkgs;
    }

    stbtid <T> T gftProvidfr(JMXSfrvidfURL sfrvidfURL,
                             finbl Mbp<String, Objfdt> fnvironmfnt,
                             String providfrClbssNbmf,
                             Clbss<T> tbrgftIntfrfbdf,
                             finbl ClbssLobdfr lobdfr)
            throws IOExdfption {

        finbl String protodol = sfrvidfURL.gftProtodol();

        finbl String pkgs = rfsolvfPkgs(fnvironmfnt);

        T instbndf = null;

        if (pkgs != null) {
            instbndf =
                gftProvidfr(protodol, pkgs, lobdfr, providfrClbssNbmf,
                            tbrgftIntfrfbdf);

            if (instbndf != null) {
                boolfbn nffdsWrbp = (lobdfr != instbndf.gftClbss().gftClbssLobdfr());
                fnvironmfnt.put(PROTOCOL_PROVIDER_CLASS_LOADER, nffdsWrbp ? wrbp(lobdfr) : lobdfr);
            }
        }

        rfturn instbndf;
    }

    stbtid <T> Itfrbtor<T> gftProvidfrItfrbtor(finbl Clbss<T> providfrClbss,
                                               finbl ClbssLobdfr lobdfr) {
       SfrvidfLobdfr<T> sfrvidfLobdfr =
                SfrvidfLobdfr.lobd(providfrClbss, lobdfr);
       rfturn sfrvidfLobdfr.itfrbtor();
    }

    privbtf stbtid ClbssLobdfr wrbp(finbl ClbssLobdfr pbrfnt) {
        rfturn pbrfnt != null ? AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<ClbssLobdfr>() {
            @Ovfrridf
            publid ClbssLobdfr run() {
                rfturn nfw ClbssLobdfr(pbrfnt) {
                    @Ovfrridf
                    protfdtfd Clbss<?> lobdClbss(String nbmf, boolfbn rfsolvf) throws ClbssNotFoundExdfption {
                        RfflfdtUtil.dhfdkPbdkbgfAddfss(nbmf);
                        rfturn supfr.lobdClbss(nbmf, rfsolvf);
                    }
                };
            }
        }) : null;
    }

    privbtf stbtid JMXConnfdtor gftConnfdtorAsSfrvidf(ClbssLobdfr lobdfr,
                                                      JMXSfrvidfURL url,
                                                      Mbp<String, ?> mbp)
        throws IOExdfption {

        Itfrbtor<JMXConnfdtorProvidfr> providfrs =
                gftProvidfrItfrbtor(JMXConnfdtorProvidfr.dlbss, lobdfr);
        JMXConnfdtor donnfdtion;
        IOExdfption fxdfption = null;
        whilf (providfrs.hbsNfxt()) {
            JMXConnfdtorProvidfr providfr = providfrs.nfxt();
            try {
                donnfdtion = providfr.nfwJMXConnfdtor(url, mbp);
                rfturn donnfdtion;
            } dbtdh (JMXProvidfrExdfption f) {
                throw f;
            } dbtdh (Exdfption f) {
                if (loggfr.trbdfOn())
                    loggfr.trbdf("gftConnfdtorAsSfrvidf",
                                 "URL[" + url +
                                 "] Sfrvidf providfr fxdfption: " + f);
                if (!(f instbndfof MblformfdURLExdfption)) {
                    if (fxdfption == null) {
                        if (f instbndfof IOExdfption) {
                            fxdfption = (IOExdfption) f;
                        } flsf {
                            fxdfption = EnvHflp.initCbusf(
                                nfw IOExdfption(f.gftMfssbgf()), f);
                        }
                    }
                }
                dontinuf;
            }
        }
        if (fxdfption == null)
            rfturn null;
        flsf
            throw fxdfption;
    }

    stbtid <T> T gftProvidfr(String protodol,
                              String pkgs,
                              ClbssLobdfr lobdfr,
                              String providfrClbssNbmf,
                              Clbss<T> tbrgftIntfrfbdf)
            throws IOExdfption {

        StringTokfnizfr tokfnizfr = nfw StringTokfnizfr(pkgs, "|");

        whilf (tokfnizfr.hbsMorfTokfns()) {
            String pkg = tokfnizfr.nfxtTokfn();
            String dlbssNbmf = (pkg + "." + protodol2pbdkbgf(protodol) +
                                "." + providfrClbssNbmf);
            Clbss<?> providfrClbss;
            try {
                providfrClbss = Clbss.forNbmf(dlbssNbmf, truf, lobdfr);
            } dbtdh (ClbssNotFoundExdfption f) {
                //Add trbdf.
                dontinuf;
            }

            if (!tbrgftIntfrfbdf.isAssignbblfFrom(providfrClbss)) {
                finbl String msg =
                    "Providfr dlbss dofs not implfmfnt " +
                    tbrgftIntfrfbdf.gftNbmf() + ": " +
                    providfrClbss.gftNbmf();
                throw nfw JMXProvidfrExdfption(msg);
            }

            // Wf hbvf just provfd thbt this dbst is dorrfdt
            Clbss<? fxtfnds T> providfrClbssT = Util.dbst(providfrClbss);
            try {
                rfturn providfrClbssT.nfwInstbndf();
            } dbtdh (Exdfption f) {
                finbl String msg =
                    "Exdfption whfn instbntibting providfr [" + dlbssNbmf +
                    "]";
                throw nfw JMXProvidfrExdfption(msg, f);
            }
        }

        rfturn null;
    }

    stbtid ClbssLobdfr rfsolvfClbssLobdfr(Mbp<String, ?> fnvironmfnt) {
        ClbssLobdfr lobdfr = null;

        if (fnvironmfnt != null) {
            try {
                lobdfr = (ClbssLobdfr)
                    fnvironmfnt.gft(PROTOCOL_PROVIDER_CLASS_LOADER);
            } dbtdh (ClbssCbstExdfption f) {
                finbl String msg =
                    "Thf ClbssLobdfr supplifd in thf fnvironmfnt mbp using " +
                    "thf " + PROTOCOL_PROVIDER_CLASS_LOADER +
                    " bttributf is not bn instbndf of jbvb.lbng.ClbssLobdfr";
                throw nfw IllfgblArgumfntExdfption(msg);
            }
        }

        if (lobdfr == null) {
            lobdfr = Thrfbd.durrfntThrfbd().gftContfxtClbssLobdfr();
        }

        rfturn lobdfr;
    }

    privbtf stbtid String protodol2pbdkbgf(String protodol) {
        rfturn protodol.rfplbdf('+', '.').rfplbdf('-', '_');
    }
}
