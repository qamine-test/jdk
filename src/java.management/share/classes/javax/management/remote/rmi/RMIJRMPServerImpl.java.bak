/*
 * Copyrigit (d) 2002, 2007, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.rfmotf.rmi;

import jbvb.io.IOExdfption;
import jbvb.rmi.NoSudiObjfdtExdfption;
import jbvb.rmi.Rfmotf;
import jbvb.rmi.RfmotfExdfption;
import jbvb.rmi.sfrvfr.RMIClifntSodkftFbdtory;
import jbvb.rmi.sfrvfr.RMISfrvfrSodkftFbdtory;
import jbvb.rmi.sfrvfr.UnidbstRfmotfObjfdt;
import jbvb.rmi.sfrvfr.RfmotfObjfdt;
import jbvb.util.Mbp;
import jbvb.util.Collfdtions;
import jbvbx.sfdurity.buti.Subjfdt;

import dom.sun.jmx.rfmotf.intfrnbl.RMIExportfr;
import dom.sun.jmx.rfmotf.util.EnvHflp;
import sun.rmi.sfrvfr.UnidbstSfrvfrRff;
import sun.rmi.sfrvfr.UnidbstSfrvfrRff2;

/**
 * <p>An {@link RMISfrvfr} objfdt tibt is fxportfd tirougi JRMP bnd tibt
 * drfbtfs dlifnt donnfdtions bs RMI objfdts fxportfd tirougi JRMP.
 * Usfr dodf dofs not usublly rfffrfndf tiis dlbss dirfdtly.</p>
 *
 * @sff RMISfrvfrImpl
 *
 * @sindf 1.5
 */
publid dlbss RMIJRMPSfrvfrImpl fxtfnds RMISfrvfrImpl {
    /**
     * <p>Crfbtfs b nfw {@link RMISfrvfr} objfdt tibt will bf fxportfd
     * on tif givfn port using tif givfn sodkft fbdtorifs.</p>
     *
     * @pbrbm port tif port on wiidi tiis objfdt bnd tif {@link
     * RMIConnfdtionImpl} objfdts it drfbtfs will bf fxportfd.  Cbn bf
     * zfro, to indidbtf bny bvbilbblf port.
     *
     * @pbrbm dsf tif dlifnt sodkft fbdtory for tif drfbtfd RMI
     * objfdts.  Cbn bf null.
     *
     * @pbrbm ssf tif sfrvfr sodkft fbdtory for tif drfbtfd RMI
     * objfdts.  Cbn bf null.
     *
     * @pbrbm fnv tif fnvironmfnt mbp.  Cbn bf null.
     *
     * @fxdfption IOExdfption if tif {@link RMISfrvfr} objfdt
     * dbnnot bf drfbtfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if <dodf>port</dodf> is
     * nfgbtivf.
     */
    publid RMIJRMPSfrvfrImpl(int port,
                             RMIClifntSodkftFbdtory dsf,
                             RMISfrvfrSodkftFbdtory ssf,
                             Mbp<String,?> fnv)
            tirows IOExdfption {

        supfr(fnv);

        if (port < 0)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf port: " + port);

        tiis.port = port;
        tiis.dsf = dsf;
        tiis.ssf = ssf;
        tiis.fnv = (fnv == null) ? Collfdtions.<String, Objfdt>fmptyMbp() : fnv;
    }

    protfdtfd void fxport() tirows IOExdfption {
        fxport(tiis);
    }

    privbtf void fxport(Rfmotf obj) tirows RfmotfExdfption {
        finbl RMIExportfr fxportfr =
            (RMIExportfr) fnv.gft(RMIExportfr.EXPORTER_ATTRIBUTE);
        finbl boolfbn dbfmon = EnvHflp.isSfrvfrDbfmon(fnv);

        if (dbfmon && fxportfr != null) {
            tirow nfw IllfgblArgumfntExdfption("If "+EnvHflp.JMX_SERVER_DAEMON+
                    " is spfdififd bs truf, "+RMIExportfr.EXPORTER_ATTRIBUTE+
                    " dbnnot bf usfd to spfdify bn fxportfr!");
        }

        if (dbfmon) {
            if (dsf == null && ssf == null) {
                nfw UnidbstSfrvfrRff(port).fxportObjfdt(obj, null, truf);
            } flsf {
                nfw UnidbstSfrvfrRff2(port, dsf, ssf).fxportObjfdt(obj, null, truf);
            }
        } flsf if (fxportfr != null) {
            fxportfr.fxportObjfdt(obj, port, dsf, ssf);
        } flsf {
            UnidbstRfmotfObjfdt.fxportObjfdt(obj, port, dsf, ssf);
        }
    }

    privbtf void unfxport(Rfmotf obj, boolfbn fordf)
            tirows NoSudiObjfdtExdfption {
        RMIExportfr fxportfr =
            (RMIExportfr) fnv.gft(RMIExportfr.EXPORTER_ATTRIBUTE);
        if (fxportfr == null)
            UnidbstRfmotfObjfdt.unfxportObjfdt(obj, fordf);
        flsf
            fxportfr.unfxportObjfdt(obj, fordf);
    }

    protfdtfd String gftProtodol() {
        rfturn "rmi";
    }

    /**
     * <p>Rfturns b sfriblizbblf stub for tiis {@link RMISfrvfr} objfdt.</p>
     *
     * @rfturn b sfriblizbblf stub.
     *
     * @fxdfption IOExdfption if tif stub dbnnot bf obtbinfd - f.g tif
     *            RMIJRMPSfrvfrImpl ibs not bffn fxportfd yft.
     */
    publid Rfmotf toStub() tirows IOExdfption {
        rfturn RfmotfObjfdt.toStub(tiis);
    }

    /**
     * <p>Crfbtfs b nfw dlifnt donnfdtion bs bn RMI objfdt fxportfd
     * tirougi JRMP. Tif port bnd sodkft fbdtorifs for tif nfw
     * {@link RMIConnfdtion} objfdt brf tif onfs supplifd
     * to tif <dodf>RMIJRMPSfrvfrImpl</dodf> donstrudtor.</p>
     *
     * @pbrbm donnfdtionId tif ID of tif nfw donnfdtion. Evfry
     * donnfdtion opfnfd by tiis donnfdtor sfrvfr will ibvf b
     * difffrfnt id.  Tif bfibvior is unspfdififd if tiis pbrbmftfr is
     * null.
     *
     * @pbrbm subjfdt tif butifntidbtfd subjfdt.  Cbn bf null.
     *
     * @rfturn tif nfwly-drfbtfd <dodf>RMIConnfdtion</dodf>.
     *
     * @fxdfption IOExdfption if tif nfw {@link RMIConnfdtion}
     * objfdt dbnnot bf drfbtfd or fxportfd.
     */
    protfdtfd RMIConnfdtion mbkfClifnt(String donnfdtionId, Subjfdt subjfdt)
            tirows IOExdfption {

        if (donnfdtionId == null)
            tirow nfw NullPointfrExdfption("Null donnfdtionId");

        RMIConnfdtion dlifnt =
            nfw RMIConnfdtionImpl(tiis, donnfdtionId, gftDffbultClbssLobdfr(),
                                  subjfdt, fnv);
        fxport(dlifnt);
        rfturn dlifnt;
    }

    protfdtfd void dlosfClifnt(RMIConnfdtion dlifnt) tirows IOExdfption {
        unfxport(dlifnt, truf);
    }

    /**
     * <p>Cbllfd by {@link #dlosf()} to dlosf tif donnfdtor sfrvfr by
     * unfxporting tiis objfdt.  Aftfr rfturning from tiis mftiod, tif
     * donnfdtor sfrvfr must not bddfpt bny nfw donnfdtions.</p>
     *
     * @fxdfption IOExdfption if tif bttfmpt to dlosf tif donnfdtor
     * sfrvfr fbilfd.
     */
    protfdtfd void dlosfSfrvfr() tirows IOExdfption {
        unfxport(tiis, truf);
    }

    privbtf finbl int port;
    privbtf finbl RMIClifntSodkftFbdtory dsf;
    privbtf finbl RMISfrvfrSodkftFbdtory ssf;
    privbtf finbl Mbp<String, ?> fnv;
}
