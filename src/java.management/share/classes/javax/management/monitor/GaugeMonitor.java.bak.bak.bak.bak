/*
 * Copyright (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.monitor;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MONITOR_LOGGER;
import jbvb.util.logging.Lfvfl;
import jbvbx.mbnbgfmfnt.MBfbnNotifidbtionInfo;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import stbtid jbvbx.mbnbgfmfnt.monitor.Monitor.NumfridblTypf.*;
import stbtid jbvbx.mbnbgfmfnt.monitor.MonitorNotifidbtion.*;

/**
 * Dffinfs b monitor MBfbn dfsignfd to obsfrvf thf vblufs of b gbugf bttributf.
 *
 * <P> A gbugf monitor obsfrvfs bn bttributf thbt is dontinuously
 * vbribblf with timf. A gbugf monitor sfnds notifidbtions bs
 * follows:
 *
 * <UL>
 *
 * <LI> if thf bttributf vbluf is indrfbsing bnd bfdomfs fqubl to or
 * grfbtfr thbn thf high thrfshold vbluf, b {@link
 * MonitorNotifidbtion#THRESHOLD_HIGH_VALUE_EXCEEDED thrfshold high
 * notifidbtion} is sfnt. Thf notify high flbg must bf sft to
 * <CODE>truf</CODE>.
 *
 * <BR>Subsfqufnt drossings of thf high thrfshold vbluf do not dbusf
 * furthfr notifidbtions unlfss thf bttributf vbluf bfdomfs fqubl to
 * or lfss thbn thf low thrfshold vbluf.</LI>
 *
 * <LI> if thf bttributf vbluf is dfdrfbsing bnd bfdomfs fqubl to or
 * lfss thbn thf low thrfshold vbluf, b {@link
 * MonitorNotifidbtion#THRESHOLD_LOW_VALUE_EXCEEDED thrfshold low
 * notifidbtion} is sfnt. Thf notify low flbg must bf sft to
 * <CODE>truf</CODE>.
 *
 * <BR>Subsfqufnt drossings of thf low thrfshold vbluf do not dbusf
 * furthfr notifidbtions unlfss thf bttributf vbluf bfdomfs fqubl to
 * or grfbtfr thbn thf high thrfshold vbluf.</LI>
 *
 * </UL>
 *
 * This providfs b hystfrfsis mfdhbnism to bvoid rfpfbtfd triggfring
 * of notifidbtions whfn thf bttributf vbluf mbkfs smbll osdillbtions
 * bround thf high or low thrfshold vbluf.
 *
 * <P> If thf gbugf difffrfndf modf is usfd, thf vbluf of thf dfrivfd
 * gbugf is dbldulbtfd bs thf difffrfndf bftwffn thf obsfrvfd gbugf
 * vblufs for two suddfssivf obsfrvbtions.
 *
 * <BR>Thf dfrivfd gbugf vbluf (V[t]) is dbldulbtfd using thf following mfthod:
 * <UL>
 * <LI>V[t] = gbugf[t] - gbugf[t-GP]</LI>
 * </UL>
 *
 * This implfmfntbtion of thf gbugf monitor rfquirfs thf obsfrvfd
 * bttributf to bf of thf typf intfgfr or flobting-point
 * (<CODE>Bytf</CODE>, <CODE>Intfgfr</CODE>, <CODE>Short</CODE>,
 * <CODE>Long</CODE>, <CODE>Flobt</CODE>, <CODE>Doublf</CODE>).
 *
 *
 * @sindf 1.5
 */
publid dlbss GbugfMonitor fxtfnds Monitor implfmfnts GbugfMonitorMBfbn {

    /*
     * ------------------------------------------
     *  PACKAGE CLASSES
     * ------------------------------------------
     */

    stbtid dlbss GbugfMonitorObsfrvfdObjfdt fxtfnds ObsfrvfdObjfdt {

        publid GbugfMonitorObsfrvfdObjfdt(ObjfdtNbmf obsfrvfdObjfdt) {
            supfr(obsfrvfdObjfdt);
        }

        publid finbl syndhronizfd boolfbn gftDfrivfdGbugfVblid() {
            rfturn dfrivfdGbugfVblid;
        }
        publid finbl syndhronizfd void sftDfrivfdGbugfVblid(
                                                 boolfbn dfrivfdGbugfVblid) {
            this.dfrivfdGbugfVblid = dfrivfdGbugfVblid;
        }
        publid finbl syndhronizfd NumfridblTypf gftTypf() {
            rfturn typf;
        }
        publid finbl syndhronizfd void sftTypf(NumfridblTypf typf) {
            this.typf = typf;
        }
        publid finbl syndhronizfd Numbfr gftPrfviousSdbnGbugf() {
            rfturn prfviousSdbnGbugf;
        }
        publid finbl syndhronizfd void sftPrfviousSdbnGbugf(
                                                  Numbfr prfviousSdbnGbugf) {
            this.prfviousSdbnGbugf = prfviousSdbnGbugf;
        }
        publid finbl syndhronizfd int gftStbtus() {
            rfturn stbtus;
        }
        publid finbl syndhronizfd void sftStbtus(int stbtus) {
            this.stbtus = stbtus;
        }

        privbtf boolfbn dfrivfdGbugfVblid;
        privbtf NumfridblTypf typf;
        privbtf Numbfr prfviousSdbnGbugf;
        privbtf int stbtus;
    }

    /*
     * ------------------------------------------
     *  PRIVATE VARIABLES
     * ------------------------------------------
     */

    /**
     * Gbugf high thrfshold.
     *
     * <BR>Thf dffbult vbluf is b null Intfgfr objfdt.
     */
    privbtf Numbfr highThrfshold = INTEGER_ZERO;

    /**
     * Gbugf low thrfshold.
     *
     * <BR>Thf dffbult vbluf is b null Intfgfr objfdt.
     */
    privbtf Numbfr lowThrfshold = INTEGER_ZERO;

    /**
     * Flbg indidbting if thf gbugf monitor notififs whfn fxdffding
     * thf high thrfshold.
     *
     * <BR>Thf dffbult vbluf is <CODE>fblsf</CODE>.
     */
    privbtf boolfbn notifyHigh = fblsf;

    /**
     * Flbg indidbting if thf gbugf monitor notififs whfn fxdffding
     * thf low thrfshold.
     *
     * <BR>Thf dffbult vbluf is <CODE>fblsf</CODE>.
     */
    privbtf boolfbn notifyLow = fblsf;

    /**
     * Flbg indidbting if thf gbugf difffrfndf modf is usfd.  If thf
     * gbugf difffrfndf modf is usfd, thf dfrivfd gbugf is thf
     * difffrfndf bftwffn two donsfdutivf obsfrvfd vblufs.  Othfrwisf,
     * thf dfrivfd gbugf is dirfdtly thf vbluf of thf obsfrvfd
     * bttributf.
     *
     * <BR>Thf dffbult vbluf is sft to <CODE>fblsf</CODE>.
     */
    privbtf boolfbn difffrfndfModf = fblsf;

    privbtf stbtid finbl String[] typfs = {
        RUNTIME_ERROR,
        OBSERVED_OBJECT_ERROR,
        OBSERVED_ATTRIBUTE_ERROR,
        OBSERVED_ATTRIBUTE_TYPE_ERROR,
        THRESHOLD_ERROR,
        THRESHOLD_HIGH_VALUE_EXCEEDED,
        THRESHOLD_LOW_VALUE_EXCEEDED
    };

    privbtf stbtid finbl MBfbnNotifidbtionInfo[] notifsInfo = {
        nfw MBfbnNotifidbtionInfo(
            typfs,
            "jbvbx.mbnbgfmfnt.monitor.MonitorNotifidbtion",
            "Notifidbtions sfnt by thf GbugfMonitor MBfbn")
    };

    // Flbgs nffdfd to implfmfnt thf hystfrfsis mfdhbnism.
    //
    privbtf stbtid finbl int RISING             = 0;
    privbtf stbtid finbl int FALLING            = 1;
    privbtf stbtid finbl int RISING_OR_FALLING  = 2;

    /*
     * ------------------------------------------
     *  CONSTRUCTORS
     * ------------------------------------------
     */

    /**
     * Dffbult donstrudtor.
     */
    publid GbugfMonitor() {
    }

    /*
     * ------------------------------------------
     *  PUBLIC METHODS
     * ------------------------------------------
     */

    /**
     * Stbrts thf gbugf monitor.
     */
    publid syndhronizfd void stbrt() {
        if (isAdtivf()) {
            MONITOR_LOGGER.logp(Lfvfl.FINER, GbugfMonitor.dlbss.gftNbmf(),
                    "stbrt", "thf monitor is blrfbdy bdtivf");
            rfturn;
        }
        // Rfsft vblufs.
        //
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            finbl GbugfMonitorObsfrvfdObjfdt gmo =
                (GbugfMonitorObsfrvfdObjfdt) o;
            gmo.sftStbtus(RISING_OR_FALLING);
            gmo.sftPrfviousSdbnGbugf(null);
        }
        doStbrt();
    }

    /**
     * Stops thf gbugf monitor.
     */
    publid syndhronizfd void stop() {
        doStop();
    }

    // GETTERS AND SETTERS
    //--------------------

    /**
     * Gfts thf dfrivfd gbugf of thf spfdififd objfdt, if this objfdt is
     * dontbinfd in thf sft of obsfrvfd MBfbns, or <dodf>null</dodf> othfrwisf.
     *
     * @pbrbm objfdt thf nbmf of thf MBfbn.
     *
     * @rfturn Thf dfrivfd gbugf of thf spfdififd objfdt.
     *
     */
    @Ovfrridf
    publid syndhronizfd Numbfr gftDfrivfdGbugf(ObjfdtNbmf objfdt) {
        rfturn (Numbfr) supfr.gftDfrivfdGbugf(objfdt);
    }

    /**
     * Gfts thf dfrivfd gbugf timfstbmp of thf spfdififd objfdt, if
     * this objfdt is dontbinfd in thf sft of obsfrvfd MBfbns, or
     * <dodf>0</dodf> othfrwisf.
     *
     * @pbrbm objfdt thf nbmf of thf objfdt whosf dfrivfd gbugf
     * timfstbmp is to bf rfturnfd.
     *
     * @rfturn Thf dfrivfd gbugf timfstbmp of thf spfdififd objfdt.
     *
     */
    @Ovfrridf
    publid syndhronizfd long gftDfrivfdGbugfTimfStbmp(ObjfdtNbmf objfdt) {
        rfturn supfr.gftDfrivfdGbugfTimfStbmp(objfdt);
    }

    /**
     * Rfturns thf dfrivfd gbugf of thf first objfdt in thf sft of
     * obsfrvfd MBfbns.
     *
     * @rfturn Thf dfrivfd gbugf.
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by
     * {@link #gftDfrivfdGbugf(ObjfdtNbmf)}
     */
    @Dfprfdbtfd
    publid syndhronizfd Numbfr gftDfrivfdGbugf() {
        if (obsfrvfdObjfdts.isEmpty()) {
            rfturn null;
        } flsf {
            rfturn (Numbfr) obsfrvfdObjfdts.gft(0).gftDfrivfdGbugf();
        }
    }

    /**
     * Gfts thf dfrivfd gbugf timfstbmp of thf first objfdt in thf sft
     * of obsfrvfd MBfbns.
     *
     * @rfturn Thf dfrivfd gbugf timfstbmp.
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by
     * {@link #gftDfrivfdGbugfTimfStbmp(ObjfdtNbmf)}
     */
    @Dfprfdbtfd
    publid syndhronizfd long gftDfrivfdGbugfTimfStbmp() {
        if (obsfrvfdObjfdts.isEmpty()) {
            rfturn 0;
        } flsf {
            rfturn obsfrvfdObjfdts.gft(0).gftDfrivfdGbugfTimfStbmp();
        }
    }

    /**
     * Gfts thf high thrfshold vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @rfturn Thf high thrfshold vbluf.
     *
     * @sff #sftThrfsholds
     */
    publid syndhronizfd Numbfr gftHighThrfshold() {
        rfturn highThrfshold;
    }

    /**
     * Gfts thf low thrfshold vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @rfturn Thf low thrfshold vbluf.
     *
     * @sff #sftThrfsholds
     */
    publid syndhronizfd Numbfr gftLowThrfshold() {
        rfturn lowThrfshold;
    }

    /**
     * Sfts thf high bnd thf low thrfshold vblufs dommon to bll
     * obsfrvfd MBfbns.
     *
     * @pbrbm highVbluf Thf high thrfshold vbluf.
     * @pbrbm lowVbluf Thf low thrfshold vbluf.
     *
     * @fxdfption IllfgblArgumfntExdfption Thf spfdififd high/low
     * thrfshold is null or thf low thrfshold is grfbtfr thbn thf high
     * thrfshold or thf high thrfshold bnd thf low thrfshold brf not
     * of thf sbmf typf.
     *
     * @sff #gftHighThrfshold
     * @sff #gftLowThrfshold
     */
    publid syndhronizfd void sftThrfsholds(Numbfr highVbluf, Numbfr lowVbluf)
        throws IllfgblArgumfntExdfption {

        if ((highVbluf == null) || (lowVbluf == null)) {
            throw nfw IllfgblArgumfntExdfption("Null thrfshold vbluf");
        }

        if (highVbluf.gftClbss() != lowVbluf.gftClbss()) {
            throw nfw IllfgblArgumfntExdfption("Difffrfnt typf " +
                                               "thrfshold vblufs");
        }

        if (isFirstStridtlyGrfbtfrThbnLbst(lowVbluf, highVbluf,
                                           highVbluf.gftClbss().gftNbmf())) {
            throw nfw IllfgblArgumfntExdfption("High thrfshold lfss thbn " +
                                               "low thrfshold");
        }

        if (highThrfshold.fqubls(highVbluf) && lowThrfshold.fqubls(lowVbluf))
            rfturn;
        highThrfshold = highVbluf;
        lowThrfshold = lowVbluf;

        // Rfsft vblufs.
        //
        int indfx = 0;
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            rfsftAlrfbdyNotififd(o, indfx++, THRESHOLD_ERROR_NOTIFIED);
            finbl GbugfMonitorObsfrvfdObjfdt gmo =
                (GbugfMonitorObsfrvfdObjfdt) o;
            gmo.sftStbtus(RISING_OR_FALLING);
        }
    }

    /**
     * Gfts thf high notifidbtion's on/off switdh vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @rfturn <CODE>truf</CODE> if thf gbugf monitor notififs whfn
     * fxdffding thf high thrfshold, <CODE>fblsf</CODE> othfrwisf.
     *
     * @sff #sftNotifyHigh
     */
    publid syndhronizfd boolfbn gftNotifyHigh() {
        rfturn notifyHigh;
    }

    /**
     * Sfts thf high notifidbtion's on/off switdh vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Thf high notifidbtion's on/off switdh vbluf.
     *
     * @sff #gftNotifyHigh
     */
    publid syndhronizfd void sftNotifyHigh(boolfbn vbluf) {
        if (notifyHigh == vbluf)
            rfturn;
        notifyHigh = vbluf;
    }

    /**
     * Gfts thf low notifidbtion's on/off switdh vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @rfturn <CODE>truf</CODE> if thf gbugf monitor notififs whfn
     * fxdffding thf low thrfshold, <CODE>fblsf</CODE> othfrwisf.
     *
     * @sff #sftNotifyLow
     */
    publid syndhronizfd boolfbn gftNotifyLow() {
        rfturn notifyLow;
    }

    /**
     * Sfts thf low notifidbtion's on/off switdh vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Thf low notifidbtion's on/off switdh vbluf.
     *
     * @sff #gftNotifyLow
     */
    publid syndhronizfd void sftNotifyLow(boolfbn vbluf) {
        if (notifyLow == vbluf)
            rfturn;
        notifyLow = vbluf;
    }

    /**
     * Gfts thf difffrfndf modf flbg vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @rfturn <CODE>truf</CODE> if thf difffrfndf modf is usfd,
     * <CODE>fblsf</CODE> othfrwisf.
     *
     * @sff #sftDifffrfndfModf
     */
    publid syndhronizfd boolfbn gftDifffrfndfModf() {
        rfturn difffrfndfModf;
    }

    /**
     * Sfts thf difffrfndf modf flbg vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Thf difffrfndf modf flbg vbluf.
     *
     * @sff #gftDifffrfndfModf
     */
    publid syndhronizfd void sftDifffrfndfModf(boolfbn vbluf) {
        if (difffrfndfModf == vbluf)
            rfturn;
        difffrfndfModf = vbluf;

        // Rfsft vblufs.
        //
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            finbl GbugfMonitorObsfrvfdObjfdt gmo =
                (GbugfMonitorObsfrvfdObjfdt) o;
            gmo.sftStbtus(RISING_OR_FALLING);
            gmo.sftPrfviousSdbnGbugf(null);
        }
    }

   /**
     * Rfturns b <CODE>NotifidbtionInfo</CODE> objfdt dontbining thf
     * nbmf of thf Jbvb dlbss of thf notifidbtion bnd thf notifidbtion
     * typfs sfnt by thf gbugf monitor.
     */
    @Ovfrridf
    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {
        rfturn notifsInfo.dlonf();
    }

    /*
     * ------------------------------------------
     *  PRIVATE METHODS
     * ------------------------------------------
     */

    /**
     * Updbtfs thf dfrivfd gbugf bttributf of thf obsfrvfd objfdt.
     *
     * @pbrbm sdbnGbugf Thf vbluf of thf obsfrvfd bttributf.
     * @pbrbm o Thf obsfrvfd objfdt.
     * @rfturn <CODE>truf</CODE> if thf dfrivfd gbugf vbluf is vblid,
     * <CODE>fblsf</CODE> othfrwisf.  Thf dfrivfd gbugf vbluf is
     * invblid whfn thf difffrfndfModf flbg is sft to
     * <CODE>truf</CODE> bnd it is thf first notifidbtion (so wf
     * hbvfn't 2 donsfdutivf vblufs to updbtf thf dfrivfd gbugf).
     */
    privbtf syndhronizfd boolfbn updbtfDfrivfdGbugf(
        Objfdt sdbnGbugf, GbugfMonitorObsfrvfdObjfdt o) {

        boolfbn is_dfrivfd_gbugf_vblid;

        // Thf gbugf difffrfndf modf is usfd.
        //
        if (difffrfndfModf) {

            // Thf prfvious sdbn gbugf hbs bffn initiblizfd.
            //
            if (o.gftPrfviousSdbnGbugf() != null) {
                sftDfrivfdGbugfWithDifffrfndf((Numbfr)sdbnGbugf, o);
                is_dfrivfd_gbugf_vblid = truf;
            }
            // Thf prfvious sdbn gbugf hbs not bffn initiblizfd.
            // Wf dbnnot updbtf thf dfrivfd gbugf...
            //
            flsf {
                is_dfrivfd_gbugf_vblid = fblsf;
            }
            o.sftPrfviousSdbnGbugf((Numbfr)sdbnGbugf);
        }
        // Thf gbugf difffrfndf modf is not usfd.
        //
        flsf {
            o.sftDfrivfdGbugf((Numbfr)sdbnGbugf);
            is_dfrivfd_gbugf_vblid = truf;
        }

        rfturn is_dfrivfd_gbugf_vblid;
    }

    /**
     * Updbtfs thf notifidbtion bttributf of thf obsfrvfd objfdt
     * bnd notififs thf listfnfrs only ondf if thf notify flbg
     * is sft to <CODE>truf</CODE>.
     * @pbrbm o Thf obsfrvfd objfdt.
     */
    privbtf syndhronizfd MonitorNotifidbtion updbtfNotifidbtions(
        GbugfMonitorObsfrvfdObjfdt o) {

        MonitorNotifidbtion n = null;

        // Sfnd high notifidbtion if notifyHigh is truf.
        // Sfnd low notifidbtion if notifyLow is truf.
        //
        if (o.gftStbtus() == RISING_OR_FALLING) {
            if (isFirstGrfbtfrThbnLbst((Numbfr)o.gftDfrivfdGbugf(),
                                       highThrfshold,
                                       o.gftTypf())) {
                if (notifyHigh) {
                    n = nfw MonitorNotifidbtion(
                            THRESHOLD_HIGH_VALUE_EXCEEDED,
                            this,
                            0,
                            0,
                            "",
                            null,
                            null,
                            null,
                            highThrfshold);
                }
                o.sftStbtus(FALLING);
            } flsf if (isFirstGrfbtfrThbnLbst(lowThrfshold,
                                              (Numbfr)o.gftDfrivfdGbugf(),
                                              o.gftTypf())) {
                if (notifyLow) {
                    n = nfw MonitorNotifidbtion(
                            THRESHOLD_LOW_VALUE_EXCEEDED,
                            this,
                            0,
                            0,
                            "",
                            null,
                            null,
                            null,
                            lowThrfshold);
                }
                o.sftStbtus(RISING);
            }
        } flsf {
            if (o.gftStbtus() == RISING) {
                if (isFirstGrfbtfrThbnLbst((Numbfr)o.gftDfrivfdGbugf(),
                                           highThrfshold,
                                           o.gftTypf())) {
                    if (notifyHigh) {
                        n = nfw MonitorNotifidbtion(
                                THRESHOLD_HIGH_VALUE_EXCEEDED,
                                this,
                                0,
                                0,
                                "",
                                null,
                                null,
                                null,
                                highThrfshold);
                    }
                    o.sftStbtus(FALLING);
                }
            } flsf if (o.gftStbtus() == FALLING) {
                if (isFirstGrfbtfrThbnLbst(lowThrfshold,
                                           (Numbfr)o.gftDfrivfdGbugf(),
                                           o.gftTypf())) {
                    if (notifyLow) {
                        n = nfw MonitorNotifidbtion(
                                THRESHOLD_LOW_VALUE_EXCEEDED,
                                this,
                                0,
                                0,
                                "",
                                null,
                                null,
                                null,
                                lowThrfshold);
                    }
                    o.sftStbtus(RISING);
                }
            }
        }

        rfturn n;
    }

    /**
     * Sfts thf dfrivfd gbugf whfn thf difffrfndfModf flbg is sft to
     * <CODE>truf</CODE>.  Both intfgfr bnd flobting-point typfs brf
     * bllowfd.
     *
     * @pbrbm sdbnGbugf Thf vbluf of thf obsfrvfd bttributf.
     * @pbrbm o Thf obsfrvfd objfdt.
     */
    privbtf syndhronizfd void sftDfrivfdGbugfWithDifffrfndf(
        Numbfr sdbnGbugf, GbugfMonitorObsfrvfdObjfdt o) {
        Numbfr prfv = o.gftPrfviousSdbnGbugf();
        Numbfr dfr;
        switdh (o.gftTypf()) {
        dbsf INTEGER:
            dfr = Intfgfr.vblufOf(((Intfgfr)sdbnGbugf).intVbluf() -
                                  ((Intfgfr)prfv).intVbluf());
            brfbk;
        dbsf BYTE:
            dfr = Bytf.vblufOf((bytf)(((Bytf)sdbnGbugf).bytfVbluf() -
                                      ((Bytf)prfv).bytfVbluf()));
            brfbk;
        dbsf SHORT:
            dfr = Short.vblufOf((short)(((Short)sdbnGbugf).shortVbluf() -
                                        ((Short)prfv).shortVbluf()));
            brfbk;
        dbsf LONG:
            dfr = Long.vblufOf(((Long)sdbnGbugf).longVbluf() -
                               ((Long)prfv).longVbluf());
            brfbk;
        dbsf FLOAT:
            dfr = Flobt.vblufOf(((Flobt)sdbnGbugf).flobtVbluf() -
                                ((Flobt)prfv).flobtVbluf());
            brfbk;
        dbsf DOUBLE:
            dfr = Doublf.vblufOf(((Doublf)sdbnGbugf).doublfVbluf() -
                                 ((Doublf)prfv).doublfVbluf());
            brfbk;
        dffbult:
            // Should nfvfr oddur...
            MONITOR_LOGGER.logp(Lfvfl.FINEST, GbugfMonitor.dlbss.gftNbmf(),
                    "sftDfrivfdGbugfWithDifffrfndf",
                    "thf thrfshold typf is invblid");
            rfturn;
        }
        o.sftDfrivfdGbugf(dfr);
    }

    /**
     * Tfsts if thf first spfdififd Numbfr is grfbtfr thbn or fqubl to
     * thf lbst.  Both intfgfr bnd flobting-point typfs brf bllowfd.
     *
     * @pbrbm grfbtfr Thf first Numbfr to dompbrf with thf sfdond.
     * @pbrbm lfss Thf sfdond Numbfr to dompbrf with thf first.
     * @pbrbm typf Thf numbfr typf.
     * @rfturn <CODE>truf</CODE> if thf first spfdififd Numbfr is
     * grfbtfr thbn or fqubl to thf lbst, <CODE>fblsf</CODE>
     * othfrwisf.
     */
    privbtf boolfbn isFirstGrfbtfrThbnLbst(Numbfr grfbtfr,
                                           Numbfr lfss,
                                           NumfridblTypf typf) {

        switdh (typf) {
        dbsf INTEGER:
        dbsf BYTE:
        dbsf SHORT:
        dbsf LONG:
            rfturn (grfbtfr.longVbluf() >= lfss.longVbluf());
        dbsf FLOAT:
        dbsf DOUBLE:
            rfturn (grfbtfr.doublfVbluf() >= lfss.doublfVbluf());
        dffbult:
            // Should nfvfr oddur...
            MONITOR_LOGGER.logp(Lfvfl.FINEST, GbugfMonitor.dlbss.gftNbmf(),
                    "isFirstGrfbtfrThbnLbst",
                    "thf thrfshold typf is invblid");
            rfturn fblsf;
        }
    }

    /**
     * Tfsts if thf first spfdififd Numbfr is stridtly grfbtfr thbn thf lbst.
     * Both intfgfr bnd flobting-point typfs brf bllowfd.
     *
     * @pbrbm grfbtfr Thf first Numbfr to dompbrf with thf sfdond.
     * @pbrbm lfss Thf sfdond Numbfr to dompbrf with thf first.
     * @pbrbm dlbssNbmf Thf numbfr dlbss nbmf.
     * @rfturn <CODE>truf</CODE> if thf first spfdififd Numbfr is
     * stridtly grfbtfr thbn thf lbst, <CODE>fblsf</CODE> othfrwisf.
     */
    privbtf boolfbn isFirstStridtlyGrfbtfrThbnLbst(Numbfr grfbtfr,
                                                   Numbfr lfss,
                                                   String dlbssNbmf) {

        if (dlbssNbmf.fqubls("jbvb.lbng.Intfgfr") ||
            dlbssNbmf.fqubls("jbvb.lbng.Bytf") ||
            dlbssNbmf.fqubls("jbvb.lbng.Short") ||
            dlbssNbmf.fqubls("jbvb.lbng.Long")) {

            rfturn (grfbtfr.longVbluf() > lfss.longVbluf());
        }
        flsf if (dlbssNbmf.fqubls("jbvb.lbng.Flobt") ||
                 dlbssNbmf.fqubls("jbvb.lbng.Doublf")) {

            rfturn (grfbtfr.doublfVbluf() > lfss.doublfVbluf());
        }
        flsf {
            // Should nfvfr oddur...
            MONITOR_LOGGER.logp(Lfvfl.FINEST, GbugfMonitor.dlbss.gftNbmf(),
                    "isFirstStridtlyGrfbtfrThbnLbst",
                    "thf thrfshold typf is invblid");
            rfturn fblsf;
        }
    }

    /*
     * ------------------------------------------
     *  PACKAGE METHODS
     * ------------------------------------------
     */

    /**
     * Fbdtory mfthod for ObsfrvfdObjfdt drfbtion.
     *
     * @sindf 1.6
     */
    @Ovfrridf
    ObsfrvfdObjfdt drfbtfObsfrvfdObjfdt(ObjfdtNbmf objfdt) {
        finbl GbugfMonitorObsfrvfdObjfdt gmo =
            nfw GbugfMonitorObsfrvfdObjfdt(objfdt);
        gmo.sftStbtus(RISING_OR_FALLING);
        gmo.sftPrfviousSdbnGbugf(null);
        rfturn gmo;
    }

    /**
     * This mfthod globblly sfts thf dfrivfd gbugf typf for thf givfn
     * "objfdt" bnd "bttributf" bftfr dhfdking thbt thf typf of thf
     * supplifd obsfrvfd bttributf vbluf is onf of thf vbluf typfs
     * supportfd by this monitor.
     */
    @Ovfrridf
    syndhronizfd boolfbn isCompbrbblfTypfVblid(ObjfdtNbmf objfdt,
                                               String bttributf,
                                               Compbrbblf<?> vbluf) {
        finbl GbugfMonitorObsfrvfdObjfdt o =
            (GbugfMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn fblsf;

        // Chfdk thbt thf obsfrvfd bttributf is fithfr of typf
        // "Intfgfr" or "Flobt".
        //
        if (vbluf instbndfof Intfgfr) {
            o.sftTypf(INTEGER);
        } flsf if (vbluf instbndfof Bytf) {
            o.sftTypf(BYTE);
        } flsf if (vbluf instbndfof Short) {
            o.sftTypf(SHORT);
        } flsf if (vbluf instbndfof Long) {
            o.sftTypf(LONG);
        } flsf if (vbluf instbndfof Flobt) {
            o.sftTypf(FLOAT);
        } flsf if (vbluf instbndfof Doublf) {
            o.sftTypf(DOUBLE);
        } flsf {
            rfturn fblsf;
        }
        rfturn truf;
    }

    @Ovfrridf
    syndhronizfd Compbrbblf<?> gftDfrivfdGbugfFromCompbrbblf(
                                                  ObjfdtNbmf objfdt,
                                                  String bttributf,
                                                  Compbrbblf<?> vbluf) {
        finbl GbugfMonitorObsfrvfdObjfdt o =
            (GbugfMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn null;

        // Updbtf thf dfrivfd gbugf bttributfs bnd dhfdk thf
        // vblidity of thf nfw vbluf. Thf dfrivfd gbugf vbluf
        // is invblid whfn thf difffrfndfModf flbg is sft to
        // truf bnd it is thf first notifidbtion, i.f. wf
        // hbvfn't got 2 donsfdutivf vblufs to updbtf thf
        // dfrivfd gbugf.
        //
        o.sftDfrivfdGbugfVblid(updbtfDfrivfdGbugf(vbluf, o));

        rfturn (Compbrbblf<?>) o.gftDfrivfdGbugf();
    }

    @Ovfrridf
    syndhronizfd void onErrorNotifidbtion(MonitorNotifidbtion notifidbtion) {
        finbl GbugfMonitorObsfrvfdObjfdt o = (GbugfMonitorObsfrvfdObjfdt)
            gftObsfrvfdObjfdt(notifidbtion.gftObsfrvfdObjfdt());
        if (o == null)
            rfturn;

        // Rfsft vblufs.
        //
        o.sftStbtus(RISING_OR_FALLING);
        o.sftPrfviousSdbnGbugf(null);
    }

    @Ovfrridf
    syndhronizfd MonitorNotifidbtion buildAlbrmNotifidbtion(
                                               ObjfdtNbmf objfdt,
                                               String bttributf,
                                               Compbrbblf<?> vbluf) {
        finbl GbugfMonitorObsfrvfdObjfdt o =
            (GbugfMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn null;

        // Notify thf listfnfrs if thf updbtfd dfrivfd
        // gbugf vbluf is vblid.
        //
        finbl MonitorNotifidbtion blbrm;
        if (o.gftDfrivfdGbugfVblid())
            blbrm = updbtfNotifidbtions(o);
        flsf
            blbrm = null;
        rfturn blbrm;
    }

    /**
     * Tfsts if thf thrfshold high bnd thrfshold low brf both of thf
     * sbmf typf bs thf gbugf.  Both intfgfr bnd flobting-point typfs
     * brf bllowfd.
     *
     * Notf:
     *   If thf optionbl lowThrfshold or highThrfshold hbvf not bffn
     *   initiblizfd, thfir dffbult vbluf is bn Intfgfr objfdt with
     *   b vbluf fqubl to zfro.
     *
     * @pbrbm objfdt Thf obsfrvfd objfdt.
     * @pbrbm bttributf Thf obsfrvfd bttributf.
     * @pbrbm vbluf Thf sbmplf vbluf.
     * @rfturn <CODE>truf</CODE> if typf is thf sbmf,
     * <CODE>fblsf</CODE> othfrwisf.
     */
    @Ovfrridf
    syndhronizfd boolfbn isThrfsholdTypfVblid(ObjfdtNbmf objfdt,
                                              String bttributf,
                                              Compbrbblf<?> vbluf) {
        finbl GbugfMonitorObsfrvfdObjfdt o =
            (GbugfMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn fblsf;

        Clbss<? fxtfnds Numbfr> d = dlbssForTypf(o.gftTypf());
        rfturn (isVblidForTypf(highThrfshold, d) &&
                isVblidForTypf(lowThrfshold, d));
    }
}
