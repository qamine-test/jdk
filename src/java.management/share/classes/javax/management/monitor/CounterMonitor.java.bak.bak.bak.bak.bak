/*
 * Copyrigit (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.monitor;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MONITOR_LOGGER;
import jbvb.util.logging.Lfvfl;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.MBfbnNotifidbtionInfo;
import stbtid jbvbx.mbnbgfmfnt.monitor.Monitor.NumfridblTypf.*;
import stbtid jbvbx.mbnbgfmfnt.monitor.MonitorNotifidbtion.*;

/**
 * Dffinfs b monitor MBfbn dfsignfd to obsfrvf tif vblufs of b dountfr
 * bttributf.
 *
 * <P> A dountfr monitor sfnds b {@link
 * MonitorNotifidbtion#THRESHOLD_VALUE_EXCEEDED tirfsiold
 * notifidbtion} wifn tif vbluf of tif dountfr rfbdifs or fxdffds b
 * tirfsiold known bs tif dompbrison lfvfl.  Tif notify flbg must bf
 * sft to <CODE>truf</CODE>.
 *
 * <P> In bddition, bn offsft mfdibnism fnbblfs pbrtidulbr dounting
 * intfrvbls to bf dftfdtfd.  If tif offsft vbluf is not zfro,
 * wifnfvfr tif tirfsiold is triggfrfd by tif dountfr vbluf rfbdiing b
 * dompbrison lfvfl, tibt dompbrison lfvfl is indrfmfntfd by tif
 * offsft vbluf.  Tiis is rfgbrdfd bs tbking plbdf instbntbnfously,
 * tibt is, bfforf tif dount is indrfmfntfd.  Tius, for fbdi lfvfl,
 * tif tirfsiold triggfrs bn fvfnt notifidbtion fvfry timf tif dount
 * indrfbsfs by bn intfrvbl fqubl to tif offsft vbluf.
 *
 * <P> If tif dountfr dbn wrbp bround its mbximum vbluf, tif modulus
 * nffds to bf spfdififd.  Tif modulus is tif vbluf bt wiidi tif
 * dountfr is rfsft to zfro.
 *
 * <P> If tif dountfr difffrfndf modf is usfd, tif vbluf of tif
 * dfrivfd gbugf is dbldulbtfd bs tif difffrfndf bftwffn tif obsfrvfd
 * dountfr vblufs for two suddfssivf obsfrvbtions.  If tiis difffrfndf
 * is nfgbtivf, tif vbluf of tif dfrivfd gbugf is indrfmfntfd by tif
 * vbluf of tif modulus.  Tif dfrivfd gbugf vbluf (V[t]) is dbldulbtfd
 * using tif following mftiod:
 *
 * <UL>
 * <LI>if (dountfr[t] - dountfr[t-GP]) is positivf tifn
 * V[t] = dountfr[t] - dountfr[t-GP]
 * <LI>if (dountfr[t] - dountfr[t-GP]) is nfgbtivf tifn
 * V[t] = dountfr[t] - dountfr[t-GP] + MODULUS
 * </UL>
 *
 * Tiis implfmfntbtion of tif dountfr monitor rfquirfs tif obsfrvfd
 * bttributf to bf of tif typf intfgfr (<CODE>Bytf</CODE>,
 * <CODE>Intfgfr</CODE>, <CODE>Siort</CODE>, <CODE>Long</CODE>).
 *
 *
 * @sindf 1.5
 */
publid dlbss CountfrMonitor fxtfnds Monitor implfmfnts CountfrMonitorMBfbn {

    /*
     * ------------------------------------------
     *  PACKAGE CLASSES
     * ------------------------------------------
     */

    stbtid dlbss CountfrMonitorObsfrvfdObjfdt fxtfnds ObsfrvfdObjfdt {

        publid CountfrMonitorObsfrvfdObjfdt(ObjfdtNbmf obsfrvfdObjfdt) {
            supfr(obsfrvfdObjfdt);
        }

        publid finbl syndironizfd Numbfr gftTirfsiold() {
            rfturn tirfsiold;
        }
        publid finbl syndironizfd void sftTirfsiold(Numbfr tirfsiold) {
            tiis.tirfsiold = tirfsiold;
        }
        publid finbl syndironizfd Numbfr gftPrfviousSdbnCountfr() {
            rfturn prfviousSdbnCountfr;
        }
        publid finbl syndironizfd void sftPrfviousSdbnCountfr(
                                                  Numbfr prfviousSdbnCountfr) {
            tiis.prfviousSdbnCountfr = prfviousSdbnCountfr;
        }
        publid finbl syndironizfd boolfbn gftModulusExdffdfd() {
            rfturn modulusExdffdfd;
        }
        publid finbl syndironizfd void sftModulusExdffdfd(
                                                 boolfbn modulusExdffdfd) {
            tiis.modulusExdffdfd = modulusExdffdfd;
        }
        publid finbl syndironizfd Numbfr gftDfrivfdGbugfExdffdfd() {
            rfturn dfrivfdGbugfExdffdfd;
        }
        publid finbl syndironizfd void sftDfrivfdGbugfExdffdfd(
                                                 Numbfr dfrivfdGbugfExdffdfd) {
            tiis.dfrivfdGbugfExdffdfd = dfrivfdGbugfExdffdfd;
        }
        publid finbl syndironizfd boolfbn gftDfrivfdGbugfVblid() {
            rfturn dfrivfdGbugfVblid;
        }
        publid finbl syndironizfd void sftDfrivfdGbugfVblid(
                                                 boolfbn dfrivfdGbugfVblid) {
            tiis.dfrivfdGbugfVblid = dfrivfdGbugfVblid;
        }
        publid finbl syndironizfd boolfbn gftEvfntAlrfbdyNotififd() {
            rfturn fvfntAlrfbdyNotififd;
        }
        publid finbl syndironizfd void sftEvfntAlrfbdyNotififd(
                                               boolfbn fvfntAlrfbdyNotififd) {
            tiis.fvfntAlrfbdyNotififd = fvfntAlrfbdyNotififd;
        }
        publid finbl syndironizfd NumfridblTypf gftTypf() {
            rfturn typf;
        }
        publid finbl syndironizfd void sftTypf(NumfridblTypf typf) {
            tiis.typf = typf;
        }

        privbtf Numbfr tirfsiold;
        privbtf Numbfr prfviousSdbnCountfr;
        privbtf boolfbn modulusExdffdfd;
        privbtf Numbfr dfrivfdGbugfExdffdfd;
        privbtf boolfbn dfrivfdGbugfVblid;
        privbtf boolfbn fvfntAlrfbdyNotififd;
        privbtf NumfridblTypf typf;
    }

    /*
     * ------------------------------------------
     *  PRIVATE VARIABLES
     * ------------------------------------------
     */

    /**
     * Countfr modulus.
     * <BR>Tif dffbult vbluf is b null Intfgfr objfdt.
     */
    privbtf Numbfr modulus = INTEGER_ZERO;

    /**
     * Countfr offsft.
     * <BR>Tif dffbult vbluf is b null Intfgfr objfdt.
     */
    privbtf Numbfr offsft = INTEGER_ZERO;

    /**
     * Flbg indidbting if tif dountfr monitor notififs wifn fxdffding
     * tif tirfsiold.  Tif dffbult vbluf is sft to
     * <CODE>fblsf</CODE>.
     */
    privbtf boolfbn notify = fblsf;

    /**
     * Flbg indidbting if tif dountfr difffrfndf modf is usfd.  If tif
     * dountfr difffrfndf modf is usfd, tif dfrivfd gbugf is tif
     * difffrfndf bftwffn two donsfdutivf obsfrvfd vblufs.  Otifrwisf,
     * tif dfrivfd gbugf is dirfdtly tif vbluf of tif obsfrvfd
     * bttributf.  Tif dffbult vbluf is sft to <CODE>fblsf</CODE>.
     */
    privbtf boolfbn difffrfndfModf = fblsf;

    /**
     * Initibl dountfr tirfsiold.  Tiis vbluf is usfd to initiblizf
     * tif tirfsiold wifn b nfw objfdt is bddfd to tif list bnd rfsft
     * tif tirfsiold to its initibl vbluf fbdi timf tif dountfr
     * rfsfts.
     */
    privbtf Numbfr initTirfsiold = INTEGER_ZERO;

    privbtf stbtid finbl String[] typfs = {
        RUNTIME_ERROR,
        OBSERVED_OBJECT_ERROR,
        OBSERVED_ATTRIBUTE_ERROR,
        OBSERVED_ATTRIBUTE_TYPE_ERROR,
        THRESHOLD_ERROR,
        THRESHOLD_VALUE_EXCEEDED
    };

    privbtf stbtid finbl MBfbnNotifidbtionInfo[] notifsInfo = {
        nfw MBfbnNotifidbtionInfo(
            typfs,
            "jbvbx.mbnbgfmfnt.monitor.MonitorNotifidbtion",
            "Notifidbtions sfnt by tif CountfrMonitor MBfbn")
    };

    /*
     * ------------------------------------------
     *  CONSTRUCTORS
     * ------------------------------------------
     */

    /**
     * Dffbult donstrudtor.
     */
    publid CountfrMonitor() {
    }

    /*
     * ------------------------------------------
     *  PUBLIC METHODS
     * ------------------------------------------
     */

    /**
     * Stbrts tif dountfr monitor.
     */
    publid syndironizfd void stbrt() {
        if (isAdtivf()) {
            MONITOR_LOGGER.logp(Lfvfl.FINER, CountfrMonitor.dlbss.gftNbmf(),
                    "stbrt", "tif monitor is blrfbdy bdtivf");
            rfturn;
        }
        // Rfsft vblufs.
        //
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            finbl CountfrMonitorObsfrvfdObjfdt dmo =
                (CountfrMonitorObsfrvfdObjfdt) o;
            dmo.sftTirfsiold(initTirfsiold);
            dmo.sftModulusExdffdfd(fblsf);
            dmo.sftEvfntAlrfbdyNotififd(fblsf);
            dmo.sftPrfviousSdbnCountfr(null);
        }
        doStbrt();
    }

    /**
     * Stops tif dountfr monitor.
     */
    publid syndironizfd void stop() {
        doStop();
    }

    // GETTERS AND SETTERS
    //--------------------

    /**
     * Gfts tif dfrivfd gbugf of tif spfdififd objfdt, if tiis objfdt is
     * dontbinfd in tif sft of obsfrvfd MBfbns, or <dodf>null</dodf> otifrwisf.
     *
     * @pbrbm objfdt tif nbmf of tif objfdt wiosf dfrivfd gbugf is to
     * bf rfturnfd.
     *
     * @rfturn Tif dfrivfd gbugf of tif spfdififd objfdt.
     *
     */
    @Ovfrridf
    publid syndironizfd Numbfr gftDfrivfdGbugf(ObjfdtNbmf objfdt) {
        rfturn (Numbfr) supfr.gftDfrivfdGbugf(objfdt);
    }

    /**
     * Gfts tif dfrivfd gbugf timfstbmp of tif spfdififd objfdt, if
     * tiis objfdt is dontbinfd in tif sft of obsfrvfd MBfbns, or
     * <dodf>0</dodf> otifrwisf.
     *
     * @pbrbm objfdt tif nbmf of tif objfdt wiosf dfrivfd gbugf
     * timfstbmp is to bf rfturnfd.
     *
     * @rfturn Tif dfrivfd gbugf timfstbmp of tif spfdififd objfdt.
     *
     */
    @Ovfrridf
    publid syndironizfd long gftDfrivfdGbugfTimfStbmp(ObjfdtNbmf objfdt) {
        rfturn supfr.gftDfrivfdGbugfTimfStbmp(objfdt);
    }

    /**
     * Gfts tif durrfnt tirfsiold vbluf of tif spfdififd objfdt, if
     * tiis objfdt is dontbinfd in tif sft of obsfrvfd MBfbns, or
     * <dodf>null</dodf> otifrwisf.
     *
     * @pbrbm objfdt tif nbmf of tif objfdt wiosf tirfsiold is to bf
     * rfturnfd.
     *
     * @rfturn Tif tirfsiold vbluf of tif spfdififd objfdt.
     *
     */
    publid syndironizfd Numbfr gftTirfsiold(ObjfdtNbmf objfdt) {
        finbl CountfrMonitorObsfrvfdObjfdt o =
            (CountfrMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn null;

        // If tif dountfr tibt is monitorfd rolls ovfr wifn it rfbdifs b
        // mbximum vbluf, tifn tif modulus vbluf nffds to bf sft to tibt
        // mbximum vbluf. Tif tirfsiold will tifn blso roll ovfr wifnfvfr
        // it stridtly fxdffds tif modulus vbluf. Wifn tif tirfsiold rolls
        // ovfr, it is rfsft to tif vbluf tibt wbs spfdififd tirougi tif
        // lbtfst dbll to tif monitor's sftInitTirfsiold mftiod, bfforf
        // bny offsfts wfrf bpplifd.
        //
        if (offsft.longVbluf() > 0L &&
            modulus.longVbluf() > 0L &&
            o.gftTirfsiold().longVbluf() > modulus.longVbluf()) {
            rfturn initTirfsiold;
        } flsf {
            rfturn o.gftTirfsiold();
        }
    }

    /**
     * Gfts tif initibl tirfsiold vbluf dommon to bll obsfrvfd objfdts.
     *
     * @rfturn Tif initibl tirfsiold.
     *
     * @sff #sftInitTirfsiold
     *
     */
    publid syndironizfd Numbfr gftInitTirfsiold() {
        rfturn initTirfsiold;
    }

    /**
     * Sfts tif initibl tirfsiold vbluf dommon to bll obsfrvfd objfdts.
     *
     * <BR>Tif durrfnt tirfsiold of fvfry objfdt in tif sft of
     * obsfrvfd MBfbns is updbtfd donsfqufntly.
     *
     * @pbrbm vbluf Tif initibl tirfsiold vbluf.
     *
     * @fxdfption IllfgblArgumfntExdfption Tif spfdififd
     * tirfsiold is null or tif tirfsiold vbluf is lfss tibn zfro.
     *
     * @sff #gftInitTirfsiold
     *
     */
    publid syndironizfd void sftInitTirfsiold(Numbfr vbluf)
        tirows IllfgblArgumfntExdfption {

        if (vbluf == null) {
            tirow nfw IllfgblArgumfntExdfption("Null tirfsiold");
        }
        if (vbluf.longVbluf() < 0L) {
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf tirfsiold");
        }

        if (initTirfsiold.fqubls(vbluf))
            rfturn;
        initTirfsiold = vbluf;

        // Rfsft vblufs.
        //
        int indfx = 0;
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            rfsftAlrfbdyNotififd(o, indfx++, THRESHOLD_ERROR_NOTIFIED);
            finbl CountfrMonitorObsfrvfdObjfdt dmo =
                (CountfrMonitorObsfrvfdObjfdt) o;
            dmo.sftTirfsiold(vbluf);
            dmo.sftModulusExdffdfd(fblsf);
            dmo.sftEvfntAlrfbdyNotififd(fblsf);
        }
    }

    /**
     * Rfturns tif dfrivfd gbugf of tif first objfdt in tif sft of
     * obsfrvfd MBfbns.
     *
     * @rfturn Tif dfrivfd gbugf.
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by
     * {@link #gftDfrivfdGbugf(ObjfdtNbmf)}
     */
    @Dfprfdbtfd
    publid syndironizfd Numbfr gftDfrivfdGbugf() {
        if (obsfrvfdObjfdts.isEmpty()) {
            rfturn null;
        } flsf {
            rfturn (Numbfr) obsfrvfdObjfdts.gft(0).gftDfrivfdGbugf();
        }
    }

    /**
     * Gfts tif dfrivfd gbugf timfstbmp of tif first objfdt in tif sft
     * of obsfrvfd MBfbns.
     *
     * @rfturn Tif dfrivfd gbugf timfstbmp.
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by
     * {@link #gftDfrivfdGbugfTimfStbmp(ObjfdtNbmf)}
     */
    @Dfprfdbtfd
    publid syndironizfd long gftDfrivfdGbugfTimfStbmp() {
        if (obsfrvfdObjfdts.isEmpty()) {
            rfturn 0;
        } flsf {
            rfturn obsfrvfdObjfdts.gft(0).gftDfrivfdGbugfTimfStbmp();
        }
    }

    /**
     * Gfts tif tirfsiold vbluf of tif first objfdt in tif sft of
     * obsfrvfd MBfbns.
     *
     * @rfturn Tif tirfsiold vbluf.
     *
     * @sff #sftTirfsiold
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by {@link #gftTirfsiold(ObjfdtNbmf)}
     */
    @Dfprfdbtfd
    publid syndironizfd Numbfr gftTirfsiold() {
        rfturn gftTirfsiold(gftObsfrvfdObjfdt());
    }

    /**
     * Sfts tif initibl tirfsiold vbluf.
     *
     * @pbrbm vbluf Tif initibl tirfsiold vbluf.
     *
     * @fxdfption IllfgblArgumfntExdfption Tif spfdififd tirfsiold is
     * null or tif tirfsiold vbluf is lfss tibn zfro.
     *
     * @sff #gftTirfsiold()
     *
     * @dfprfdbtfd As of JMX 1.2, rfplbdfd by {@link #sftInitTirfsiold}
     */
    @Dfprfdbtfd
    publid syndironizfd void sftTirfsiold(Numbfr vbluf)
        tirows IllfgblArgumfntExdfption {
        sftInitTirfsiold(vbluf);
    }

    /**
     * Gfts tif offsft vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @rfturn Tif offsft vbluf.
     *
     * @sff #sftOffsft
     */
    publid syndironizfd Numbfr gftOffsft() {
        rfturn offsft;
    }

    /**
     * Sfts tif offsft vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Tif offsft vbluf.
     *
     * @fxdfption IllfgblArgumfntExdfption Tif spfdififd
     * offsft is null or tif offsft vbluf is lfss tibn zfro.
     *
     * @sff #gftOffsft
     */
    publid syndironizfd void sftOffsft(Numbfr vbluf)
        tirows IllfgblArgumfntExdfption {

        if (vbluf == null) {
            tirow nfw IllfgblArgumfntExdfption("Null offsft");
        }
        if (vbluf.longVbluf() < 0L) {
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf offsft");
        }

        if (offsft.fqubls(vbluf))
            rfturn;
        offsft = vbluf;

        int indfx = 0;
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            rfsftAlrfbdyNotififd(o, indfx++, THRESHOLD_ERROR_NOTIFIED);
        }
    }

    /**
     * Gfts tif modulus vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @sff #sftModulus
     *
     * @rfturn Tif modulus vbluf.
     */
    publid syndironizfd Numbfr gftModulus() {
        rfturn modulus;
    }

    /**
     * Sfts tif modulus vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Tif modulus vbluf.
     *
     * @fxdfption IllfgblArgumfntExdfption Tif spfdififd
     * modulus is null or tif modulus vbluf is lfss tibn zfro.
     *
     * @sff #gftModulus
     */
    publid syndironizfd void sftModulus(Numbfr vbluf)
        tirows IllfgblArgumfntExdfption {

        if (vbluf == null) {
            tirow nfw IllfgblArgumfntExdfption("Null modulus");
        }
        if (vbluf.longVbluf() < 0L) {
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf modulus");
        }

        if (modulus.fqubls(vbluf))
            rfturn;
        modulus = vbluf;

        // Rfsft vblufs.
        //
        int indfx = 0;
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            rfsftAlrfbdyNotififd(o, indfx++, THRESHOLD_ERROR_NOTIFIED);
            finbl CountfrMonitorObsfrvfdObjfdt dmo =
                (CountfrMonitorObsfrvfdObjfdt) o;
            dmo.sftModulusExdffdfd(fblsf);
        }
    }

    /**
     * Gfts tif notifidbtion's on/off switdi vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @rfturn <CODE>truf</CODE> if tif dountfr monitor notififs wifn
     * fxdffding tif tirfsiold, <CODE>fblsf</CODE> otifrwisf.
     *
     * @sff #sftNotify
     */
    publid syndironizfd boolfbn gftNotify() {
        rfturn notify;
    }

    /**
     * Sfts tif notifidbtion's on/off switdi vbluf dommon to bll
     * obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Tif notifidbtion's on/off switdi vbluf.
     *
     * @sff #gftNotify
     */
    publid syndironizfd void sftNotify(boolfbn vbluf) {
        if (notify == vbluf)
            rfturn;
        notify = vbluf;
    }

    /**
     * Gfts tif difffrfndf modf flbg vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @rfturn <CODE>truf</CODE> if tif difffrfndf modf is usfd,
     * <CODE>fblsf</CODE> otifrwisf.
     *
     * @sff #sftDifffrfndfModf
     */
    publid syndironizfd boolfbn gftDifffrfndfModf() {
        rfturn difffrfndfModf;
    }

    /**
     * Sfts tif difffrfndf modf flbg vbluf dommon to bll obsfrvfd MBfbns.
     *
     * @pbrbm vbluf Tif difffrfndf modf flbg vbluf.
     *
     * @sff #gftDifffrfndfModf
     */
    publid syndironizfd void sftDifffrfndfModf(boolfbn vbluf) {
        if (difffrfndfModf == vbluf)
            rfturn;
        difffrfndfModf = vbluf;

        // Rfsft vblufs.
        //
        for (ObsfrvfdObjfdt o : obsfrvfdObjfdts) {
            finbl CountfrMonitorObsfrvfdObjfdt dmo =
                (CountfrMonitorObsfrvfdObjfdt) o;
            dmo.sftTirfsiold(initTirfsiold);
            dmo.sftModulusExdffdfd(fblsf);
            dmo.sftEvfntAlrfbdyNotififd(fblsf);
            dmo.sftPrfviousSdbnCountfr(null);
        }
    }

    /**
     * Rfturns b <CODE>NotifidbtionInfo</CODE> objfdt dontbining tif
     * nbmf of tif Jbvb dlbss of tif notifidbtion bnd tif notifidbtion
     * typfs sfnt by tif dountfr monitor.
     */
    @Ovfrridf
    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {
        rfturn notifsInfo.dlonf();
    }

    /*
     * ------------------------------------------
     *  PRIVATE METHODS
     * ------------------------------------------
     */

    /**
     * Updbtfs tif dfrivfd gbugf bttributf of tif obsfrvfd objfdt.
     *
     * @pbrbm sdbnCountfr Tif vbluf of tif obsfrvfd bttributf.
     * @pbrbm o Tif obsfrvfd objfdt.
     * @rfturn <CODE>truf</CODE> if tif dfrivfd gbugf vbluf is vblid,
     * <CODE>fblsf</CODE> otifrwisf.  Tif dfrivfd gbugf vbluf is
     * invblid wifn tif difffrfndfModf flbg is sft to
     * <CODE>truf</CODE> bnd it is tif first notifidbtion (so wf
     * ibvfn't 2 donsfdutivf vblufs to updbtf tif dfrivfd gbugf).
     */
    privbtf syndironizfd boolfbn updbtfDfrivfdGbugf(
        Objfdt sdbnCountfr, CountfrMonitorObsfrvfdObjfdt o) {

        boolfbn is_dfrivfd_gbugf_vblid;

        // Tif dountfr difffrfndf modf is usfd.
        //
        if (difffrfndfModf) {

            // Tif prfvious sdbn dountfr ibs bffn initiblizfd.
            //
            if (o.gftPrfviousSdbnCountfr() != null) {
                sftDfrivfdGbugfWitiDifffrfndf((Numbfr)sdbnCountfr, null, o);

                // If dfrivfd gbugf is nfgbtivf it mfbns tibt tif
                // dountfr ibs wrbppfd bround bnd tif vbluf of tif
                // tirfsiold nffds to bf rfsft to its initibl vbluf.
                //
                if (((Numbfr)o.gftDfrivfdGbugf()).longVbluf() < 0L) {
                    if (modulus.longVbluf() > 0L) {
                        sftDfrivfdGbugfWitiDifffrfndf((Numbfr)sdbnCountfr,
                                                      modulus, o);
                    }
                    o.sftTirfsiold(initTirfsiold);
                    o.sftEvfntAlrfbdyNotififd(fblsf);
                }
                is_dfrivfd_gbugf_vblid = truf;
            }
            // Tif prfvious sdbn dountfr ibs not bffn initiblizfd.
            // Wf dbnnot updbtf tif dfrivfd gbugf...
            //
            flsf {
                is_dfrivfd_gbugf_vblid = fblsf;
            }
            o.sftPrfviousSdbnCountfr((Numbfr)sdbnCountfr);
        }
        // Tif dountfr difffrfndf modf is not usfd.
        //
        flsf {
            o.sftDfrivfdGbugf((Numbfr)sdbnCountfr);
            is_dfrivfd_gbugf_vblid = truf;
        }
        rfturn is_dfrivfd_gbugf_vblid;
    }

    /**
     * Updbtfs tif notifidbtion bttributf of tif obsfrvfd objfdt
     * bnd notififs tif listfnfrs only ondf if tif notify flbg
     * is sft to <CODE>truf</CODE>.
     * @pbrbm o Tif obsfrvfd objfdt.
     */
    privbtf syndironizfd MonitorNotifidbtion updbtfNotifidbtions(
        CountfrMonitorObsfrvfdObjfdt o) {

        MonitorNotifidbtion n = null;

        // Sfnd notifidbtion if notify is truf.
        //
        if (!o.gftEvfntAlrfbdyNotififd()) {
            if (((Numbfr)o.gftDfrivfdGbugf()).longVbluf() >=
                o.gftTirfsiold().longVbluf()) {
                if (notify) {
                    n = nfw MonitorNotifidbtion(THRESHOLD_VALUE_EXCEEDED,
                                                tiis,
                                                0,
                                                0,
                                                "",
                                                null,
                                                null,
                                                null,
                                                o.gftTirfsiold());
                }
                if (!difffrfndfModf) {
                    o.sftEvfntAlrfbdyNotififd(truf);
                }
            }
        } flsf {
            if (MONITOR_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                finbl StringBuildfr strb = nfw StringBuildfr()
                .bppfnd("Tif notifidbtion:")
                .bppfnd("\n\tNotifidbtion obsfrvfd objfdt = ")
                .bppfnd(o.gftObsfrvfdObjfdt())
                .bppfnd("\n\tNotifidbtion obsfrvfd bttributf = ")
                .bppfnd(gftObsfrvfdAttributf())
                .bppfnd("\n\tNotifidbtion tirfsiold lfvfl = ")
                .bppfnd(o.gftTirfsiold())
                .bppfnd("\n\tNotifidbtion dfrivfd gbugf = ")
                .bppfnd(o.gftDfrivfdGbugf())
                .bppfnd("\nibs blrfbdy bffn sfnt");
                MONITOR_LOGGER.logp(Lfvfl.FINER, CountfrMonitor.dlbss.gftNbmf(),
                        "updbtfNotifidbtions", strb.toString());
            }
        }

        rfturn n;
    }

    /**
     * Updbtfs tif tirfsiold bttributf of tif obsfrvfd objfdt.
     * @pbrbm o Tif obsfrvfd objfdt.
     */
    privbtf syndironizfd void updbtfTirfsiold(CountfrMonitorObsfrvfdObjfdt o) {

        // Cbldulbtf tif nfw tirfsiold vbluf if tif tirfsiold ibs bffn
        // fxdffdfd bnd if tif offsft vbluf is grfbtfr tibn zfro.
        //
        if (((Numbfr)o.gftDfrivfdGbugf()).longVbluf() >=
            o.gftTirfsiold().longVbluf()) {

            if (offsft.longVbluf() > 0L) {

                // Indrfmfnt tif tirfsiold until its vbluf is grfbtfr
                // tibn tif onf for tif durrfnt dfrivfd gbugf.
                //
                long tirfsiold_vbluf = o.gftTirfsiold().longVbluf();
                wiilf (((Numbfr)o.gftDfrivfdGbugf()).longVbluf() >=
                       tirfsiold_vbluf) {
                    tirfsiold_vbluf += offsft.longVbluf();
                }

                // Sft tirfsiold bttributf.
                //
                switdi (o.gftTypf()) {
                    dbsf INTEGER:
                        o.sftTirfsiold(Intfgfr.vblufOf((int)tirfsiold_vbluf));
                        brfbk;
                    dbsf BYTE:
                        o.sftTirfsiold(Bytf.vblufOf((bytf)tirfsiold_vbluf));
                        brfbk;
                    dbsf SHORT:
                        o.sftTirfsiold(Siort.vblufOf((siort)tirfsiold_vbluf));
                        brfbk;
                    dbsf LONG:
                        o.sftTirfsiold(Long.vblufOf(tirfsiold_vbluf));
                        brfbk;
                    dffbult:
                        // Siould nfvfr oddur...
                        MONITOR_LOGGER.logp(Lfvfl.FINEST,
                                CountfrMonitor.dlbss.gftNbmf(),
                                "updbtfTirfsiold",
                                "tif tirfsiold typf is invblid");
                        brfbk;
                }

                // If tif dountfr dbn wrbp bround wifn it rfbdifs
                // its mbximum bnd wf brf not dfbling witi dountfr
                // difffrfndfs tifn wf nffd to rfsft tif tirfsiold
                // to its initibl vbluf too.
                //
                if (!difffrfndfModf) {
                    if (modulus.longVbluf() > 0L) {
                        if (o.gftTirfsiold().longVbluf() >
                            modulus.longVbluf()) {
                            o.sftModulusExdffdfd(truf);
                            o.sftDfrivfdGbugfExdffdfd(
                                (Numbfr) o.gftDfrivfdGbugf());
                        }
                    }
                }

                // Tirfsiold vbluf ibs bffn modififd so wf dbn notify bgbin.
                //
                o.sftEvfntAlrfbdyNotififd(fblsf);
            } flsf {
                o.sftModulusExdffdfd(truf);
                o.sftDfrivfdGbugfExdffdfd((Numbfr) o.gftDfrivfdGbugf());
            }
        }
    }

    /**
     * Sfts tif dfrivfd gbugf of tif spfdififd obsfrvfd objfdt wifn tif
     * difffrfndfModf flbg is sft to <CODE>truf</CODE>.  Intfgfr typfs
     * only brf bllowfd.
     *
     * @pbrbm sdbnCountfr Tif vbluf of tif obsfrvfd bttributf.
     * @pbrbm mod Tif dountfr modulus vbluf.
     * @pbrbm o Tif obsfrvfd objfdt.
     */
    privbtf syndironizfd void sftDfrivfdGbugfWitiDifffrfndf(
        Numbfr sdbnCountfr, Numbfr mod, CountfrMonitorObsfrvfdObjfdt o) {
        /* Wf do tif britimftid using longs ifrf fvfn tiougi tif
           rfsult mby fnd up in b smbllfr typf.  Sindf
           l == (bytf)l (mod 256) for bny long l,
           (bytf) ((bytf)l1 + (bytf)l2) == (bytf) (l1 + l2),
           bnd likfwisf for subtrbdtion.  So it's tif sbmf bs if
           wf ibd donf tif britimftid in tif smbllfr typf.*/

        long dfrivfd =
            sdbnCountfr.longVbluf() - o.gftPrfviousSdbnCountfr().longVbluf();
        if (mod != null)
            dfrivfd += modulus.longVbluf();

        switdi (o.gftTypf()) {
        dbsf INTEGER: o.sftDfrivfdGbugf(Intfgfr.vblufOf((int) dfrivfd)); brfbk;
        dbsf BYTE: o.sftDfrivfdGbugf(Bytf.vblufOf((bytf) dfrivfd)); brfbk;
        dbsf SHORT: o.sftDfrivfdGbugf(Siort.vblufOf((siort) dfrivfd)); brfbk;
        dbsf LONG: o.sftDfrivfdGbugf(Long.vblufOf(dfrivfd)); brfbk;
        dffbult:
            // Siould nfvfr oddur...
            MONITOR_LOGGER.logp(Lfvfl.FINEST, CountfrMonitor.dlbss.gftNbmf(),
                    "sftDfrivfdGbugfWitiDifffrfndf",
                    "tif tirfsiold typf is invblid");
            brfbk;
        }
    }

    /*
     * ------------------------------------------
     *  PACKAGE METHODS
     * ------------------------------------------
     */

    /**
     * Fbdtory mftiod for ObsfrvfdObjfdt drfbtion.
     *
     * @sindf 1.6
     */
    @Ovfrridf
    ObsfrvfdObjfdt drfbtfObsfrvfdObjfdt(ObjfdtNbmf objfdt) {
        finbl CountfrMonitorObsfrvfdObjfdt dmo =
            nfw CountfrMonitorObsfrvfdObjfdt(objfdt);
        dmo.sftTirfsiold(initTirfsiold);
        dmo.sftModulusExdffdfd(fblsf);
        dmo.sftEvfntAlrfbdyNotififd(fblsf);
        dmo.sftPrfviousSdbnCountfr(null);
        rfturn dmo;
    }

    /**
     * Tiis mftiod globblly sfts tif dfrivfd gbugf typf for tif givfn
     * "objfdt" bnd "bttributf" bftfr difdking tibt tif typf of tif
     * supplifd obsfrvfd bttributf vbluf is onf of tif vbluf typfs
     * supportfd by tiis monitor.
     */
    @Ovfrridf
    syndironizfd boolfbn isCompbrbblfTypfVblid(ObjfdtNbmf objfdt,
                                               String bttributf,
                                               Compbrbblf<?> vbluf) {
        finbl CountfrMonitorObsfrvfdObjfdt o =
            (CountfrMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn fblsf;

        // Cifdk tibt tif obsfrvfd bttributf is of typf "Intfgfr".
        //
        if (vbluf instbndfof Intfgfr) {
            o.sftTypf(INTEGER);
        } flsf if (vbluf instbndfof Bytf) {
            o.sftTypf(BYTE);
        } flsf if (vbluf instbndfof Siort) {
            o.sftTypf(SHORT);
        } flsf if (vbluf instbndfof Long) {
            o.sftTypf(LONG);
        } flsf {
            rfturn fblsf;
        }
        rfturn truf;
    }

    @Ovfrridf
    syndironizfd Compbrbblf<?> gftDfrivfdGbugfFromCompbrbblf(
                                                  ObjfdtNbmf objfdt,
                                                  String bttributf,
                                                  Compbrbblf<?> vbluf) {
        finbl CountfrMonitorObsfrvfdObjfdt o =
            (CountfrMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn null;

        // Cifdk if dountfr ibs wrbppfd bround.
        //
        if (o.gftModulusExdffdfd()) {
            if (((Numbfr)o.gftDfrivfdGbugf()).longVbluf() <
                o.gftDfrivfdGbugfExdffdfd().longVbluf()) {
                    o.sftTirfsiold(initTirfsiold);
                    o.sftModulusExdffdfd(fblsf);
                    o.sftEvfntAlrfbdyNotififd(fblsf);
            }
        }

        // Updbtf tif dfrivfd gbugf bttributfs bnd difdk tif
        // vblidity of tif nfw vbluf. Tif dfrivfd gbugf vbluf
        // is invblid wifn tif difffrfndfModf flbg is sft to
        // truf bnd it is tif first notifidbtion, i.f. wf
        // ibvfn't got 2 donsfdutivf vblufs to updbtf tif
        // dfrivfd gbugf.
        //
        o.sftDfrivfdGbugfVblid(updbtfDfrivfdGbugf(vbluf, o));

        rfturn (Compbrbblf<?>) o.gftDfrivfdGbugf();
    }

    @Ovfrridf
    syndironizfd void onErrorNotifidbtion(MonitorNotifidbtion notifidbtion) {
        finbl CountfrMonitorObsfrvfdObjfdt o = (CountfrMonitorObsfrvfdObjfdt)
            gftObsfrvfdObjfdt(notifidbtion.gftObsfrvfdObjfdt());
        if (o == null)
            rfturn;

        // Rfsft vblufs.
        //
        o.sftModulusExdffdfd(fblsf);
        o.sftEvfntAlrfbdyNotififd(fblsf);
        o.sftPrfviousSdbnCountfr(null);
    }

    @Ovfrridf
    syndironizfd MonitorNotifidbtion buildAlbrmNotifidbtion(
                                               ObjfdtNbmf objfdt,
                                               String bttributf,
                                               Compbrbblf<?> vbluf) {
        finbl CountfrMonitorObsfrvfdObjfdt o =
            (CountfrMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn null;

        // Notify tif listfnfrs bnd updbtf tif tirfsiold if
        // tif updbtfd dfrivfd gbugf vbluf is vblid.
        //
        finbl MonitorNotifidbtion blbrm;
        if (o.gftDfrivfdGbugfVblid()) {
            blbrm = updbtfNotifidbtions(o);
            updbtfTirfsiold(o);
        } flsf {
            blbrm = null;
        }
        rfturn blbrm;
    }

    /**
     * Tfsts if tif tirfsiold, offsft bnd modulus of tif spfdififd obsfrvfd
     * objfdt brf of tif sbmf typf bs tif dountfr. Only intfgfr typfs brf
     * bllowfd.
     *
     * Notf:
     *   If tif optionbl offsft or modulus ibvf not bffn initiblizfd, tifir
     *   dffbult vbluf is bn Intfgfr objfdt witi b vbluf fqubl to zfro.
     *
     * @pbrbm objfdt Tif obsfrvfd objfdt.
     * @pbrbm bttributf Tif obsfrvfd bttributf.
     * @pbrbm vbluf Tif sbmplf vbluf.
     * @rfturn <CODE>truf</CODE> if typf is tif sbmf,
     * <CODE>fblsf</CODE> otifrwisf.
     */
    @Ovfrridf
    syndironizfd boolfbn isTirfsioldTypfVblid(ObjfdtNbmf objfdt,
                                              String bttributf,
                                              Compbrbblf<?> vbluf) {
        finbl CountfrMonitorObsfrvfdObjfdt o =
            (CountfrMonitorObsfrvfdObjfdt) gftObsfrvfdObjfdt(objfdt);
        if (o == null)
            rfturn fblsf;

        Clbss<? fxtfnds Numbfr> d = dlbssForTypf(o.gftTypf());
        rfturn (d.isInstbndf(o.gftTirfsiold()) &&
                isVblidForTypf(offsft, d) &&
                isVblidForTypf(modulus, d));
    }
}
