/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt;

/**
 * <p>An MBfbn whosf mbnbgfmfnt intfrfbdf is dftfrminfd by rfflfdtion
 * on b Jbvb intfrfbdf, bnd thbt fmits notifidbtions.</p>
 *
 * <p>Thf following fxbmplf shows how to usf thf publid donstrudtor
 * {@link #StbndbrdEmittfrMBfbn(Objfdt, Clbss, NotifidbtionEmittfr)
 * StbndbrdEmittfrMBfbn(implfmfntbtion, mbfbnIntfrfbdf, fmittfr)} to
 * drfbtf bn MBfbn fmitting notifidbtions with bny
 * implfmfntbtion dlbss nbmf <i>Impl</i>, with b mbnbgfmfnt
 * intfrfbdf dffinfd (bs for durrfnt Stbndbrd MBfbns) by bny intfrfbdf
 * <i>Intf</i>, bnd with bny implfmfntbtion of thf intfrfbdf
 * {@link NotifidbtionEmittfr}. Thf fxbmplf usfs thf dlbss
 * {@link NotifidbtionBrobddbstfrSupport} bs bn implfmfntbtion
 * of thf intfrfbdf {@link NotifidbtionEmittfr}.</p>
 *
 *     <prf>
 *     MBfbnSfrvfr mbs;
 *     ...
 *     finbl String[] typfs = nfw String[] {"sun.disd.spbdf","sun.disd.blbrm"};
 *     finbl MBfbnNotifidbtionInfo info = nfw MBfbnNotifidbtionInfo(
 *                                          typfs,
 *                                          Notifidbtion.dlbss.gftNbmf(),
 *                                          "Notifidbtion bbout disd info.");
 *     finbl NotifidbtionEmittfr fmittfr =
 *                    nfw NotifidbtionBrobddbstfrSupport(info);
 *
 *     finbl Intf impl = nfw Impl(...);
 *     finbl Objfdt mbfbn = nfw StbndbrdEmittfrMBfbn(
 *                                     impl, Intf.dlbss, fmittfr);
 *     mbs.rfgistfrMBfbn(mbfbn, objfdtNbmf);
 *     </prf>
 *
 * @sff StbndbrdMBfbn
 *
 * @sindf 1.6
 */
publid dlbss StbndbrdEmittfrMBfbn fxtfnds StbndbrdMBfbn
        implfmfnts NotifidbtionEmittfr {

    privbtf stbtid finbl MBfbnNotifidbtionInfo[] NO_NOTIFICATION_INFO =
        nfw MBfbnNotifidbtionInfo[0];

    privbtf finbl NotifidbtionEmittfr fmittfr;
    privbtf finbl MBfbnNotifidbtionInfo[] notifidbtionInfo;

    /**
     * <p>Mbkf bn MBfbn whosf mbnbgfmfnt intfrfbdf is spfdififd by
     * {@dodf mbfbnIntfrfbdf}, with thf givfn implfmfntbtion bnd
     * whfrf notifidbtions brf hbndlfd by thf givfn {@dodf NotifidbtionEmittfr}.
     * Thf rfsultbnt MBfbn implfmfnts thf {@dodf NotifidbtionEmittfr} intfrfbdf
     * by forwbrding its mfthods to {@dodf fmittfr}.  It is lfgbl bnd usfful
     * for {@dodf implfmfntbtion} bnd {@dodf fmittfr} to bf thf sbmf objfdt.</p>
     *
     * <p>If {@dodf fmittfr} is bn instbndf of {@dodf
     * NotifidbtionBrobddbstfrSupport} thfn thf MBfbn's {@link #sfndNotifidbtion
     * sfndNotifidbtion} mfthod will dbll {@dodf fmittfr.}{@link
     * NotifidbtionBrobddbstfrSupport#sfndNotifidbtion sfndNotifidbtion}.</p>
     *
     * <p>Thf brrby rfturnfd by {@link #gftNotifidbtionInfo()} on thf
     * nfw MBfbn is b dopy of thf brrby rfturnfd by
     * {@dodf fmittfr.}{@link NotifidbtionBrobddbstfr#gftNotifidbtionInfo
     * gftNotifidbtionInfo()} bt thf timf of donstrudtion.  If thf brrby
     * rfturnfd by {@dodf fmittfr.gftNotifidbtionInfo()} lbtfr dhbngfs,
     * thbt will hbvf no ffffdt on this objfdt's
     * {@dodf gftNotifidbtionInfo()}.</p>
     *
     * @pbrbm implfmfntbtion thf implfmfntbtion of thf MBfbn intfrfbdf.
     * @pbrbm mbfbnIntfrfbdf b Stbndbrd MBfbn intfrfbdf.
     * @pbrbm fmittfr thf objfdt thbt will hbndlf notifidbtions.
     *
     * @throws IllfgblArgumfntExdfption if thf {@dodf mbfbnIntfrfbdf}
     *    dofs not follow JMX dfsign pbttfrns for Mbnbgfmfnt Intfrfbdfs, or
     *    if thf givfn {@dodf implfmfntbtion} dofs not implfmfnt thf
     *    spfdififd intfrfbdf, or if {@dodf fmittfr} is null.
     */
    publid <T> StbndbrdEmittfrMBfbn(T implfmfntbtion, Clbss<T> mbfbnIntfrfbdf,
                                    NotifidbtionEmittfr fmittfr) {
        this(implfmfntbtion, mbfbnIntfrfbdf, fblsf, fmittfr);
    }

    /**
     * <p>Mbkf bn MBfbn whosf mbnbgfmfnt intfrfbdf is spfdififd by
     * {@dodf mbfbnIntfrfbdf}, with thf givfn implfmfntbtion bnd whfrf
     * notifidbtions brf hbndlfd by thf givfn {@dodf
     * NotifidbtionEmittfr}.  This donstrudtor dbn bf usfd to mbkf
     * fithfr Stbndbrd MBfbns or MXBfbns.  Thf rfsultbnt MBfbn
     * implfmfnts thf {@dodf NotifidbtionEmittfr} intfrfbdf by
     * forwbrding its mfthods to {@dodf fmittfr}.  It is lfgbl bnd
     * usfful for {@dodf implfmfntbtion} bnd {@dodf fmittfr} to bf thf
     * sbmf objfdt.</p>
     *
     * <p>If {@dodf fmittfr} is bn instbndf of {@dodf
     * NotifidbtionBrobddbstfrSupport} thfn thf MBfbn's {@link #sfndNotifidbtion
     * sfndNotifidbtion} mfthod will dbll {@dodf fmittfr.}{@link
     * NotifidbtionBrobddbstfrSupport#sfndNotifidbtion sfndNotifidbtion}.</p>
     *
     * <p>Thf brrby rfturnfd by {@link #gftNotifidbtionInfo()} on thf
     * nfw MBfbn is b dopy of thf brrby rfturnfd by
     * {@dodf fmittfr.}{@link NotifidbtionBrobddbstfr#gftNotifidbtionInfo
     * gftNotifidbtionInfo()} bt thf timf of donstrudtion.  If thf brrby
     * rfturnfd by {@dodf fmittfr.gftNotifidbtionInfo()} lbtfr dhbngfs,
     * thbt will hbvf no ffffdt on this objfdt's
     * {@dodf gftNotifidbtionInfo()}.</p>
     *
     * @pbrbm implfmfntbtion thf implfmfntbtion of thf MBfbn intfrfbdf.
     * @pbrbm mbfbnIntfrfbdf b Stbndbrd MBfbn intfrfbdf.
     * @pbrbm isMXBfbn If truf, thf {@dodf mbfbnIntfrfbdf} pbrbmftfr
     * nbmfs bn MXBfbn intfrfbdf bnd thf rfsultbnt MBfbn is bn MXBfbn.
     * @pbrbm fmittfr thf objfdt thbt will hbndlf notifidbtions.
     *
     * @throws IllfgblArgumfntExdfption if thf {@dodf mbfbnIntfrfbdf}
     *    dofs not follow JMX dfsign pbttfrns for Mbnbgfmfnt Intfrfbdfs, or
     *    if thf givfn {@dodf implfmfntbtion} dofs not implfmfnt thf
     *    spfdififd intfrfbdf, or if {@dodf fmittfr} is null.
     */
    publid <T> StbndbrdEmittfrMBfbn(T implfmfntbtion, Clbss<T> mbfbnIntfrfbdf,
                                    boolfbn isMXBfbn,
                                    NotifidbtionEmittfr fmittfr) {
        supfr(implfmfntbtion, mbfbnIntfrfbdf, isMXBfbn);
        if (fmittfr == null)
            throw nfw IllfgblArgumfntExdfption("Null fmittfr");
        this.fmittfr = fmittfr;
        MBfbnNotifidbtionInfo[] infos = fmittfr.gftNotifidbtionInfo();
        if (infos == null || infos.lfngth == 0) {
            this.notifidbtionInfo = NO_NOTIFICATION_INFO;
        } flsf {
            this.notifidbtionInfo = infos.dlonf();
        }
    }

    /**
     * <p>Mbkf bn MBfbn whosf mbnbgfmfnt intfrfbdf is spfdififd by
     * {@dodf mbfbnIntfrfbdf}, bnd
     * whfrf notifidbtions brf hbndlfd by thf givfn {@dodf NotifidbtionEmittfr}.
     * Thf rfsultbnt MBfbn implfmfnts thf {@dodf NotifidbtionEmittfr} intfrfbdf
     * by forwbrding its mfthods to {@dodf fmittfr}.</p>
     *
     * <p>If {@dodf fmittfr} is bn instbndf of {@dodf
     * NotifidbtionBrobddbstfrSupport} thfn thf MBfbn's {@link #sfndNotifidbtion
     * sfndNotifidbtion} mfthod will dbll {@dodf fmittfr.}{@link
     * NotifidbtionBrobddbstfrSupport#sfndNotifidbtion sfndNotifidbtion}.</p>
     *
     * <p>Thf brrby rfturnfd by {@link #gftNotifidbtionInfo()} on thf
     * nfw MBfbn is b dopy of thf brrby rfturnfd by
     * {@dodf fmittfr.}{@link NotifidbtionBrobddbstfr#gftNotifidbtionInfo
     * gftNotifidbtionInfo()} bt thf timf of donstrudtion.  If thf brrby
     * rfturnfd by {@dodf fmittfr.gftNotifidbtionInfo()} lbtfr dhbngfs,
     * thbt will hbvf no ffffdt on this objfdt's
     * {@dodf gftNotifidbtionInfo()}.</p>
     *
     * <p>This donstrudtor must bf dbllfd from b subdlbss thbt implfmfnts
     * thf givfn {@dodf mbfbnIntfrfbdf}.</p>
     *
     * @pbrbm mbfbnIntfrfbdf b StbndbrdMBfbn intfrfbdf.
     * @pbrbm fmittfr thf objfdt thbt will hbndlf notifidbtions.
     *
     * @throws IllfgblArgumfntExdfption if thf {@dodf mbfbnIntfrfbdf}
     *    dofs not follow JMX dfsign pbttfrns for Mbnbgfmfnt Intfrfbdfs, or
     *    if {@dodf this} dofs not implfmfnt thf spfdififd intfrfbdf, or
     *    if {@dodf fmittfr} is null.
     */
    protfdtfd StbndbrdEmittfrMBfbn(Clbss<?> mbfbnIntfrfbdf,
                                   NotifidbtionEmittfr fmittfr) {
        this(mbfbnIntfrfbdf, fblsf, fmittfr);
    }

    /**
     * <p>Mbkf bn MBfbn whosf mbnbgfmfnt intfrfbdf is spfdififd by
     * {@dodf mbfbnIntfrfbdf}, bnd whfrf notifidbtions brf hbndlfd by
     * thf givfn {@dodf NotifidbtionEmittfr}.  This donstrudtor dbn bf
     * usfd to mbkf fithfr Stbndbrd MBfbns or MXBfbns.  Thf rfsultbnt
     * MBfbn implfmfnts thf {@dodf NotifidbtionEmittfr} intfrfbdf by
     * forwbrding its mfthods to {@dodf fmittfr}.</p>
     *
     * <p>If {@dodf fmittfr} is bn instbndf of {@dodf
     * NotifidbtionBrobddbstfrSupport} thfn thf MBfbn's {@link #sfndNotifidbtion
     * sfndNotifidbtion} mfthod will dbll {@dodf fmittfr.}{@link
     * NotifidbtionBrobddbstfrSupport#sfndNotifidbtion sfndNotifidbtion}.</p>
     *
     * <p>Thf brrby rfturnfd by {@link #gftNotifidbtionInfo()} on thf
     * nfw MBfbn is b dopy of thf brrby rfturnfd by
     * {@dodf fmittfr.}{@link NotifidbtionBrobddbstfr#gftNotifidbtionInfo
     * gftNotifidbtionInfo()} bt thf timf of donstrudtion.  If thf brrby
     * rfturnfd by {@dodf fmittfr.gftNotifidbtionInfo()} lbtfr dhbngfs,
     * thbt will hbvf no ffffdt on this objfdt's
     * {@dodf gftNotifidbtionInfo()}.</p>
     *
     * <p>This donstrudtor must bf dbllfd from b subdlbss thbt implfmfnts
     * thf givfn {@dodf mbfbnIntfrfbdf}.</p>
     *
     * @pbrbm mbfbnIntfrfbdf b StbndbrdMBfbn intfrfbdf.
     * @pbrbm isMXBfbn If truf, thf {@dodf mbfbnIntfrfbdf} pbrbmftfr
     * nbmfs bn MXBfbn intfrfbdf bnd thf rfsultbnt MBfbn is bn MXBfbn.
     * @pbrbm fmittfr thf objfdt thbt will hbndlf notifidbtions.
     *
     * @throws IllfgblArgumfntExdfption if thf {@dodf mbfbnIntfrfbdf}
     *    dofs not follow JMX dfsign pbttfrns for Mbnbgfmfnt Intfrfbdfs, or
     *    if {@dodf this} dofs not implfmfnt thf spfdififd intfrfbdf, or
     *    if {@dodf fmittfr} is null.
     */
    protfdtfd StbndbrdEmittfrMBfbn(Clbss<?> mbfbnIntfrfbdf, boolfbn isMXBfbn,
                                   NotifidbtionEmittfr fmittfr) {
        supfr(mbfbnIntfrfbdf, isMXBfbn);
        if (fmittfr == null)
            throw nfw IllfgblArgumfntExdfption("Null fmittfr");
        this.fmittfr = fmittfr;
        MBfbnNotifidbtionInfo[] infos = fmittfr.gftNotifidbtionInfo();
        if (infos == null || infos.lfngth == 0) {
            this.notifidbtionInfo = NO_NOTIFICATION_INFO;
        } flsf {
            this.notifidbtionInfo = infos.dlonf();
        }
    }

    publid void rfmovfNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr)
            throws ListfnfrNotFoundExdfption {
        fmittfr.rfmovfNotifidbtionListfnfr(listfnfr);
    }

    publid void rfmovfNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr,
                                           NotifidbtionFiltfr filtfr,
                                           Objfdt hbndbbdk)
            throws ListfnfrNotFoundExdfption {
        fmittfr.rfmovfNotifidbtionListfnfr(listfnfr, filtfr, hbndbbdk);
    }

    publid void bddNotifidbtionListfnfr(NotifidbtionListfnfr listfnfr,
                                        NotifidbtionFiltfr filtfr,
                                        Objfdt hbndbbdk) {
        fmittfr.bddNotifidbtionListfnfr(listfnfr, filtfr, hbndbbdk);
    }

    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {
        // this gfttfr might gft dbllfd from thf supfr donstrudtor
        // whfn thf notifidbtionInfo hbs not bffn propfrly sft yft
        if (notifidbtionInfo == null) {
            rfturn NO_NOTIFICATION_INFO;
        }
        if (notifidbtionInfo.lfngth == 0) {
            rfturn notifidbtionInfo;
        } flsf {
            rfturn notifidbtionInfo.dlonf();
        }
    }

    /**
     * <p>Sfnds b notifidbtion.</p>
     *
     * <p>If thf {@dodf fmittfr} pbrbmftfr to thf donstrudtor wbs bn
     * instbndf of {@dodf NotifidbtionBrobddbstfrSupport} thfn this
     * mfthod will dbll {@dodf fmittfr.}{@link
     * NotifidbtionBrobddbstfrSupport#sfndNotifidbtion
     * sfndNotifidbtion}.</p>
     *
     * @pbrbm n thf notifidbtion to sfnd.
     *
     * @throws ClbssCbstExdfption if thf {@dodf fmittfr} pbrbmftfr to thf
     * donstrudtor wbs not b {@dodf NotifidbtionBrobddbstfrSupport}.
     */
    publid void sfndNotifidbtion(Notifidbtion n) {
        if (fmittfr instbndfof NotifidbtionBrobddbstfrSupport)
            ((NotifidbtionBrobddbstfrSupport) fmittfr).sfndNotifidbtion(n);
        flsf {
            finbl String msg =
                "Cbnnot sfndNotifidbtion whfn fmittfr is not bn " +
                "instbndf of NotifidbtionBrobddbstfrSupport: " +
                fmittfr.gftClbss().gftNbmf();
            throw nfw ClbssCbstExdfption(msg);
        }
    }

    /**
     * <p>Gft thf MBfbnNotifidbtionInfo[] thbt will bf usfd in thf
     * MBfbnInfo rfturnfd by this MBfbn.</p>
     *
     * <p>Thf dffbult implfmfntbtion of this mfthod rfturns
     * {@link #gftNotifidbtionInfo()}.</p>
     *
     * @pbrbm info Thf dffbult MBfbnInfo dfrivfd by rfflfdtion.
     * @rfturn thf MBfbnNotifidbtionInfo[] for thf nfw MBfbnInfo.
     */
    @Ovfrridf
    MBfbnNotifidbtionInfo[] gftNotifidbtions(MBfbnInfo info) {
        rfturn gftNotifidbtionInfo();
    }
}
