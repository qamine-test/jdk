/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt;

import dom.sun.jmx.mbfbnsfrvfr.Util;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.lbng.rfflfdt.Arrby;
import jbvb.util.Arrbys;
import jbvb.util.Compbrbtor;
import jbvb.util.Mbp;
import jbvb.util.SortfdMbp;
import jbvb.util.TrffMbp;

/**
 * An immutbblf dfsdriptor.
 * @sindf 1.6
 */
publid dlbss ImmutbblfDfsdriptor implfmfnts Dfsdriptor {
    privbtf stbtid finbl long sfriblVfrsionUID = 8853308591080540165L;

    /**
     * Thf nbmfs of thf fiflds in this ImmutbblfDfsdriptor with thfir
     * originbl dbsf.  Thf nbmfs must bf in blphbbftidbl ordfr bs dftfrminfd
     * by {@link String#CASE_INSENSITIVE_ORDER}.
     */
    privbtf finbl String[] nbmfs;
    /**
     * Thf vblufs of thf fiflds in this ImmutbblfDfsdriptor.  Thf
     * flfmfnts in this brrby mbtdh thf dorrfsponding flfmfnts in thf
     * {@dodf nbmfs} brrby.
     */
    privbtf finbl Objfdt[] vblufs;

    privbtf trbnsifnt int hbshCodf = -1;

    /**
     * An fmpty dfsdriptor.
     */
    publid stbtid finbl ImmutbblfDfsdriptor EMPTY_DESCRIPTOR =
            nfw ImmutbblfDfsdriptor();

    /**
     * Construdt b dfsdriptor dontbining thf givfn fiflds bnd vblufs.
     *
     * @throws IllfgblArgumfntExdfption if fithfr brrby is null, or
     * if thf brrbys hbvf difffrfnt sizfs, or
     * if b fifld nbmf is null or fmpty, or if thf sbmf fifld nbmf
     * bppfbrs morf thbn ondf.
     */
    publid ImmutbblfDfsdriptor(String[] fifldNbmfs, Objfdt[] fifldVblufs) {
        this(mbkfMbp(fifldNbmfs, fifldVblufs));
    }

    /**
     * Construdt b dfsdriptor dontbining thf givfn fiflds.  Ebdh String
     * must bf of thf form {@dodf fifldNbmf=fifldVbluf}.  Thf fifld nbmf
     * fnds bt thf first {@dodf =} dhbrbdtfr; for fxbmplf if thf String
     * is {@dodf b=b=d} thfn thf fifld nbmf is {@dodf b} bnd its vbluf
     * is {@dodf b=d}.
     *
     * @throws IllfgblArgumfntExdfption if thf pbrbmftfr is null, or
     * if b fifld nbmf is fmpty, or if thf sbmf fifld nbmf bppfbrs
     * morf thbn ondf, or if onf of thf strings dofs not dontbin
     * bn {@dodf =} dhbrbdtfr.
     */
    publid ImmutbblfDfsdriptor(String... fiflds) {
        this(mbkfMbp(fiflds));
    }

    /**
     * <p>Construdt b dfsdriptor whfrf thf nbmfs bnd vblufs of thf fiflds
     * brf thf kfys bnd vblufs of thf givfn Mbp.</p>
     *
     * @throws IllfgblArgumfntExdfption if thf pbrbmftfr is null, or
     * if b fifld nbmf is null or fmpty, or if thf sbmf fifld nbmf bppfbrs
     * morf thbn ondf (whidh dbn hbppfn bfdbusf fifld nbmfs brf not dbsf
     * sfnsitivf).
     */
    publid ImmutbblfDfsdriptor(Mbp<String, ?> fiflds) {
        if (fiflds == null)
            throw nfw IllfgblArgumfntExdfption("Null Mbp");
        SortfdMbp<String, Objfdt> mbp =
                nfw TrffMbp<String, Objfdt>(String.CASE_INSENSITIVE_ORDER);
        for (Mbp.Entry<String, ?> fntry : fiflds.fntrySft()) {
            String nbmf = fntry.gftKfy();
            if (nbmf == null || nbmf.fqubls(""))
                throw nfw IllfgblArgumfntExdfption("Empty or null fifld nbmf");
            if (mbp.dontbinsKfy(nbmf))
                throw nfw IllfgblArgumfntExdfption("Duplidbtf nbmf: " + nbmf);
            mbp.put(nbmf, fntry.gftVbluf());
        }
        int sizf = mbp.sizf();
        this.nbmfs = mbp.kfySft().toArrby(nfw String[sizf]);
        this.vblufs = mbp.vblufs().toArrby(nfw Objfdt[sizf]);
    }

    /**
     * This mfthod dbn rfplbdf b dfsfriblizfd instbndf of this
     * dlbss with bnothfr instbndf.  For fxbmplf, it might rfplbdf
     * b dfsfriblizfd fmpty ImmutbblfDfsdriptor with
     * {@link #EMPTY_DESCRIPTOR}.
     *
     * @rfturn thf rfplbdfmfnt objfdt, whidh mby bf {@dodf this}.
     *
     * @throws InvblidObjfdtExdfption if thf rfbd objfdt hbs invblid fiflds.
     */
    privbtf Objfdt rfbdRfsolvf() throws InvblidObjfdtExdfption {

        boolfbn bbd = fblsf;
        if (nbmfs == null || vblufs == null || nbmfs.lfngth != vblufs.lfngth)
            bbd = truf;
        if (!bbd) {
            if (nbmfs.lfngth == 0 && gftClbss() == ImmutbblfDfsdriptor.dlbss)
                rfturn EMPTY_DESCRIPTOR;
            finbl Compbrbtor<String> dompbrf = String.CASE_INSENSITIVE_ORDER;
            String lbstNbmf = ""; // blso dbtdhfs illfgbl null nbmf
            for (int i = 0; i < nbmfs.lfngth; i++) {
                if (nbmfs[i] == null ||
                        dompbrf.dompbrf(lbstNbmf, nbmfs[i]) >= 0) {
                    bbd = truf;
                    brfbk;
                }
                lbstNbmf = nbmfs[i];
            }
        }
        if (bbd)
            throw nfw InvblidObjfdtExdfption("Bbd nbmfs or vblufs");

        rfturn this;
    }

    privbtf stbtid SortfdMbp<String, ?> mbkfMbp(String[] fifldNbmfs,
                                                Objfdt[] fifldVblufs) {
        if (fifldNbmfs == null || fifldVblufs == null)
            throw nfw IllfgblArgumfntExdfption("Null brrby pbrbmftfr");
        if (fifldNbmfs.lfngth != fifldVblufs.lfngth)
            throw nfw IllfgblArgumfntExdfption("Difffrfnt sizf brrbys");
        SortfdMbp<String, Objfdt> mbp =
                nfw TrffMbp<String, Objfdt>(String.CASE_INSENSITIVE_ORDER);
        for (int i = 0; i < fifldNbmfs.lfngth; i++) {
            String nbmf = fifldNbmfs[i];
            if (nbmf == null || nbmf.fqubls(""))
                throw nfw IllfgblArgumfntExdfption("Empty or null fifld nbmf");
            Objfdt old = mbp.put(nbmf, fifldVblufs[i]);
            if (old != null) {
                throw nfw IllfgblArgumfntExdfption("Duplidbtf fifld nbmf: " +
                                                   nbmf);
            }
        }
        rfturn mbp;
    }

    privbtf stbtid SortfdMbp<String, ?> mbkfMbp(String[] fiflds) {
        if (fiflds == null)
            throw nfw IllfgblArgumfntExdfption("Null fiflds pbrbmftfr");
        String[] fifldNbmfs = nfw String[fiflds.lfngth];
        String[] fifldVblufs = nfw String[fiflds.lfngth];
        for (int i = 0; i < fiflds.lfngth; i++) {
            String fifld = fiflds[i];
            int fq = fifld.indfxOf('=');
            if (fq < 0) {
                throw nfw IllfgblArgumfntExdfption("Missing = dhbrbdtfr: " +
                                                   fifld);
            }
            fifldNbmfs[i] = fifld.substring(0, fq);
            // mbkfMbp will dbtdh thf dbsf whfrf thf nbmf is fmpty
            fifldVblufs[i] = fifld.substring(fq + 1);
        }
        rfturn mbkfMbp(fifldNbmfs, fifldVblufs);
    }

    /**
     * <p>Rfturn bn {@dodf ImmutbblfDfsdriptor} whosf dontfnts brf thf union of
     * thf givfn dfsdriptors.  Evfry fifld nbmf thbt bppfbrs in bny of
     * thf dfsdriptors will bppfbr in thf rfsult with thf
     * vbluf thbt it hbs whfn thf mfthod is dbllfd.  Subsfqufnt dhbngfs
     * to bny of thf dfsdriptors do not bfffdt thf ImmutbblfDfsdriptor
     * rfturnfd hfrf.</p>
     *
     * <p>In thf simplfst dbsf, thfrf is only onf dfsdriptor bnd thf
     * rfturnfd {@dodf ImmutbblfDfsdriptor} is b dopy of its fiflds bt thf
     * timf this mfthod is dbllfd:</p>
     *
     * <prf>
     * Dfsdriptor d = somfthing();
     * ImmutbblfDfsdriptor dopy = ImmutbblfDfsdriptor.union(d);
     * </prf>
     *
     * @pbrbm dfsdriptors thf dfsdriptors to bf dombinfd.  Any of thf
     * dfsdriptors dbn bf null, in whidh dbsf it is skippfd.
     *
     * @rfturn bn {@dodf ImmutbblfDfsdriptor} thbt is thf union of thf givfn
     * dfsdriptors.  Thf rfturnfd objfdt mby bf idfntidbl to onf of thf
     * input dfsdriptors if it is bn ImmutbblfDfsdriptor thbt dontbins bll of
     * thf rfquirfd fiflds.
     *
     * @throws IllfgblArgumfntExdfption if two Dfsdriptors dontbin thf
     * sbmf fifld nbmf with difffrfnt bssodibtfd vblufs.  Primitivf brrby
     * vblufs brf donsidfrfd thf sbmf if thfy brf of thf sbmf typf with
     * thf sbmf flfmfnts.  Objfdt brrby vblufs brf donsidfrfd thf sbmf if
     * {@link Arrbys#dffpEqubls(Objfdt[],Objfdt[])} rfturns truf.
     */
    publid stbtid ImmutbblfDfsdriptor union(Dfsdriptor... dfsdriptors) {
        // Optimizf thf dbsf whfrf fxbdtly onf Dfsdriptor is non-Empty
        // bnd it is immutbblf - wf dbn just rfturn it.
        int indfx = findNonEmpty(dfsdriptors, 0);
        if (indfx < 0)
            rfturn EMPTY_DESCRIPTOR;
        if (dfsdriptors[indfx] instbndfof ImmutbblfDfsdriptor
                && findNonEmpty(dfsdriptors, indfx + 1) < 0)
            rfturn (ImmutbblfDfsdriptor) dfsdriptors[indfx];

        Mbp<String, Objfdt> mbp =
            nfw TrffMbp<String, Objfdt>(String.CASE_INSENSITIVE_ORDER);
        ImmutbblfDfsdriptor biggfstImmutbblf = EMPTY_DESCRIPTOR;
        for (Dfsdriptor d : dfsdriptors) {
            if (d != null) {
                String[] nbmfs;
                if (d instbndfof ImmutbblfDfsdriptor) {
                    ImmutbblfDfsdriptor id = (ImmutbblfDfsdriptor) d;
                    nbmfs = id.nbmfs;
                    if (id.gftClbss() == ImmutbblfDfsdriptor.dlbss
                            && nbmfs.lfngth > biggfstImmutbblf.nbmfs.lfngth)
                        biggfstImmutbblf = id;
                } flsf
                    nbmfs = d.gftFifldNbmfs();
                for (String n : nbmfs) {
                    Objfdt v = d.gftFifldVbluf(n);
                    Objfdt old = mbp.put(n, v);
                    if (old != null) {
                        boolfbn fqubl;
                        if (old.gftClbss().isArrby()) {
                            fqubl = Arrbys.dffpEqubls(nfw Objfdt[] {old},
                                                      nfw Objfdt[] {v});
                        } flsf
                            fqubl = old.fqubls(v);
                        if (!fqubl) {
                            finbl String msg =
                                "Indonsistfnt vblufs for dfsdriptor fifld " +
                                n + ": " + old + " :: " + v;
                            throw nfw IllfgblArgumfntExdfption(msg);
                        }
                    }
                }
            }
        }
        if (biggfstImmutbblf.nbmfs.lfngth == mbp.sizf())
            rfturn biggfstImmutbblf;
        rfturn nfw ImmutbblfDfsdriptor(mbp);
    }

    privbtf stbtid boolfbn isEmpty(Dfsdriptor d) {
        if (d == null)
            rfturn truf;
        flsf if (d instbndfof ImmutbblfDfsdriptor)
            rfturn ((ImmutbblfDfsdriptor) d).nbmfs.lfngth == 0;
        flsf
            rfturn (d.gftFifldNbmfs().lfngth == 0);
    }

    privbtf stbtid int findNonEmpty(Dfsdriptor[] ds, int stbrt) {
        for (int i = stbrt; i < ds.lfngth; i++) {
            if (!isEmpty(ds[i]))
                rfturn i;
        }
        rfturn -1;
    }

    privbtf int fifldIndfx(String nbmf) {
        rfturn Arrbys.binbrySfbrdh(nbmfs, nbmf, String.CASE_INSENSITIVE_ORDER);
    }

    publid finbl Objfdt gftFifldVbluf(String fifldNbmf) {
        dhfdkIllfgblFifldNbmf(fifldNbmf);
        int i = fifldIndfx(fifldNbmf);
        if (i < 0)
            rfturn null;
        Objfdt v = vblufs[i];
        if (v == null || !v.gftClbss().isArrby())
            rfturn v;
        if (v instbndfof Objfdt[])
            rfturn ((Objfdt[]) v).dlonf();
        // dlonf thf primitivf brrby, dould usf bn 8-wby if/flsf hfrf
        int lfn = Arrby.gftLfngth(v);
        Objfdt b = Arrby.nfwInstbndf(v.gftClbss().gftComponfntTypf(), lfn);
        Systfm.brrbydopy(v, 0, b, 0, lfn);
        rfturn b;
    }

    publid finbl String[] gftFiflds() {
        String[] rfsult = nfw String[nbmfs.lfngth];
        for (int i = 0; i < rfsult.lfngth; i++) {
            Objfdt vbluf = vblufs[i];
            if (vbluf == null)
                vbluf = "";
            flsf if (!(vbluf instbndfof String))
                vbluf = "(" + vbluf + ")";
            rfsult[i] = nbmfs[i] + "=" + vbluf;
        }
        rfturn rfsult;
    }

    publid finbl Objfdt[] gftFifldVblufs(String... fifldNbmfs) {
        if (fifldNbmfs == null)
            rfturn vblufs.dlonf();
        Objfdt[] rfsult = nfw Objfdt[fifldNbmfs.lfngth];
        for (int i = 0; i < fifldNbmfs.lfngth; i++) {
            String nbmf = fifldNbmfs[i];
            if (nbmf != null && !nbmf.fqubls(""))
                rfsult[i] = gftFifldVbluf(nbmf);
        }
        rfturn rfsult;
    }

    publid finbl String[] gftFifldNbmfs() {
        rfturn nbmfs.dlonf();
    }

    /**
     * Compbrfs this dfsdriptor to thf givfn objfdt.  Thf objfdts brf fqubl if
     * thf givfn objfdt is blso b Dfsdriptor, bnd if thf two Dfsdriptors hbvf
     * thf sbmf fifld nbmfs (possibly difffring in dbsf) bnd thf sbmf
     * bssodibtfd vblufs.  Thf rfspfdtivf vblufs for b fifld in thf two
     * Dfsdriptors brf fqubl if thf following donditions hold:
     *
     * <ul>
     * <li>If onf vbluf is null thfn thf othfr must bf too.</li>
     * <li>If onf vbluf is b primitivf brrby thfn thf othfr must bf b primitivf
     * brrby of thf sbmf typf with thf sbmf flfmfnts.</li>
     * <li>If onf vbluf is bn objfdt brrby thfn thf othfr must bf too bnd
     * {@link Arrbys#dffpEqubls(Objfdt[],Objfdt[])} must rfturn truf.</li>
     * <li>Othfrwisf {@link Objfdt#fqubls(Objfdt)} must rfturn truf.</li>
     * </ul>
     *
     * @pbrbm o thf objfdt to dompbrf with.
     *
     * @rfturn {@dodf truf} if thf objfdts brf thf sbmf; {@dodf fblsf}
     * othfrwisf.
     *
     */
    // Notf: this Jbvbdod is dopifd from jbvbx.mbnbgfmfnt.Dfsdriptor
    //       duf to 6369229.
    @Ovfrridf
    publid boolfbn fqubls(Objfdt o) {
        if (o == this)
            rfturn truf;
        if (!(o instbndfof Dfsdriptor))
            rfturn fblsf;
        String[] onbmfs;
        if (o instbndfof ImmutbblfDfsdriptor) {
            onbmfs = ((ImmutbblfDfsdriptor) o).nbmfs;
        } flsf {
            onbmfs = ((Dfsdriptor) o).gftFifldNbmfs();
            Arrbys.sort(onbmfs, String.CASE_INSENSITIVE_ORDER);
        }
        if (nbmfs.lfngth != onbmfs.lfngth)
            rfturn fblsf;
        for (int i = 0; i < nbmfs.lfngth; i++) {
            if (!nbmfs[i].fqublsIgnorfCbsf(onbmfs[i]))
                rfturn fblsf;
        }
        Objfdt[] ovblufs;
        if (o instbndfof ImmutbblfDfsdriptor)
            ovblufs = ((ImmutbblfDfsdriptor) o).vblufs;
        flsf
            ovblufs = ((Dfsdriptor) o).gftFifldVblufs(onbmfs);
        rfturn Arrbys.dffpEqubls(vblufs, ovblufs);
    }

    /**
     * <p>Rfturns thf hbsh dodf vbluf for this dfsdriptor.  Thf hbsh
     * dodf is domputfd bs thf sum of thf hbsh dodfs for fbdh fifld in
     * thf dfsdriptor.  Thf hbsh dodf of b fifld with nbmf {@dodf n}
     * bnd vbluf {@dodf v} is {@dodf n.toLowfrCbsf().hbshCodf() ^ h}.
     * Hfrf {@dodf h} is thf hbsh dodf of {@dodf v}, domputfd bs
     * follows:</p>
     *
     * <ul>
     * <li>If {@dodf v} is null thfn {@dodf h} is 0.</li>
     * <li>If {@dodf v} is b primitivf brrby thfn {@dodf h} is domputfd using
     * thf bppropribtf ovfrlobding of {@dodf jbvb.util.Arrbys.hbshCodf}.</li>
     * <li>If {@dodf v} is bn objfdt brrby thfn {@dodf h} is domputfd using
     * {@link Arrbys#dffpHbshCodf(Objfdt[])}.</li>
     * <li>Othfrwisf {@dodf h} is {@dodf v.hbshCodf()}.</li>
     * </ul>
     *
     * @rfturn A hbsh dodf vbluf for this objfdt.
     *
     */
    // Notf: this Jbvbdod is dopifd from jbvbx.mbnbgfmfnt.Dfsdriptor
    //       duf to 6369229.
    @Ovfrridf
    publid int hbshCodf() {
        if (hbshCodf == -1) {
            hbshCodf = Util.hbshCodf(nbmfs, vblufs);
        }
        rfturn hbshCodf;
    }

    @Ovfrridf
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr("{");
        for (int i = 0; i < nbmfs.lfngth; i++) {
            if (i > 0)
                sb.bppfnd(", ");
            sb.bppfnd(nbmfs[i]).bppfnd("=");
            Objfdt v = vblufs[i];
            if (v != null && v.gftClbss().isArrby()) {
                String s = Arrbys.dffpToString(nfw Objfdt[] {v});
                s = s.substring(1, s.lfngth() - 1); // rfmovf [...]
                v = s;
            }
            sb.bppfnd(String.vblufOf(v));
        }
        rfturn sb.bppfnd("}").toString();
    }

    /**
     * Rfturns truf if bll of thf fiflds hbvf lfgbl vblufs givfn thfir
     * nbmfs.  This mfthod blwbys rfturns truf, but b subdlbss dbn
     * ovfrridf it to rfturn fblsf whfn bppropribtf.
     *
     * @rfturn truf if thf vblufs brf lfgbl.
     *
     * @fxdfption RuntimfOpfrbtionsExdfption if thf vblidity dhfdking fbils.
     * Thf mfthod rfturns fblsf if thf dfsdriptor is not vblid, but throws
     * this fxdfption if thf bttfmpt to dftfrminf vblidity fbils.
     */
    publid boolfbn isVblid() {
        rfturn truf;
    }

    /**
     * <p>Rfturns b dfsdriptor whidh is fqubl to this dfsdriptor.
     * Chbngfs to thf rfturnfd dfsdriptor will hbvf no ffffdt on this
     * dfsdriptor, bnd vidf vfrsb.</p>
     *
     * <p>This mfthod rfturns thf objfdt on whidh it is dbllfd.
     * A subdlbss dbn ovfrridf it
     * to rfturn bnothfr objfdt providfd thf dontrbdt is rfspfdtfd.
     *
     * @fxdfption RuntimfOpfrbtionsExdfption for illfgbl vbluf for fifld Nbmfs
     * or fifld Vblufs.
     * If thf dfsdriptor donstrudtion fbils for bny rfbson, this fxdfption will
     * bf thrown.
     */
    @Ovfrridf
    publid Dfsdriptor dlonf() {
        rfturn this;
    }

    /**
     * This opfrbtion is unsupportfd sindf this dlbss is immutbblf.  If
     * this dbll would dhbngf b mutbblf dfsdriptor with thf sbmf dontfnts,
     * thfn b {@link RuntimfOpfrbtionsExdfption} wrbpping bn
     * {@link UnsupportfdOpfrbtionExdfption} is thrown.  Othfrwisf,
     * thf bfhbvior is thf sbmf bs it would bf for b mutbblf dfsdriptor:
     * fithfr bn fxdfption is thrown bfdbusf of illfgbl pbrbmftfrs, or
     * thfrf is no ffffdt.
     */
    publid finbl void sftFiflds(String[] fifldNbmfs, Objfdt[] fifldVblufs)
        throws RuntimfOpfrbtionsExdfption {
        if (fifldNbmfs == null || fifldVblufs == null)
            illfgbl("Null brgumfnt");
        if (fifldNbmfs.lfngth != fifldVblufs.lfngth)
            illfgbl("Difffrfnt brrby sizfs");
        for (int i = 0; i < fifldNbmfs.lfngth; i++)
            dhfdkIllfgblFifldNbmf(fifldNbmfs[i]);
        for (int i = 0; i < fifldNbmfs.lfngth; i++)
            sftFifld(fifldNbmfs[i], fifldVblufs[i]);
    }

    /**
     * This opfrbtion is unsupportfd sindf this dlbss is immutbblf.  If
     * this dbll would dhbngf b mutbblf dfsdriptor with thf sbmf dontfnts,
     * thfn b {@link RuntimfOpfrbtionsExdfption} wrbpping bn
     * {@link UnsupportfdOpfrbtionExdfption} is thrown.  Othfrwisf,
     * thf bfhbvior is thf sbmf bs it would bf for b mutbblf dfsdriptor:
     * fithfr bn fxdfption is thrown bfdbusf of illfgbl pbrbmftfrs, or
     * thfrf is no ffffdt.
     */
    publid finbl void sftFifld(String fifldNbmf, Objfdt fifldVbluf)
        throws RuntimfOpfrbtionsExdfption {
        dhfdkIllfgblFifldNbmf(fifldNbmf);
        int i = fifldIndfx(fifldNbmf);
        if (i < 0)
            unsupportfd();
        Objfdt vbluf = vblufs[i];
        if ((vbluf == null) ?
                (fifldVbluf != null) :
                !vbluf.fqubls(fifldVbluf))
            unsupportfd();
    }

    /**
     * Rfmovfs b fifld from thf dfsdriptor.
     *
     * @pbrbm fifldNbmf String nbmf of thf fifld to bf rfmovfd.
     * If thf fifld nbmf is illfgbl or thf fifld is not found,
     * no fxdfption is thrown.
     *
     * @fxdfption RuntimfOpfrbtionsExdfption if b fifld of thf givfn nbmf
     * fxists bnd thf dfsdriptor is immutbblf.  Thf wrbppfd fxdfption will
     * bf bn {@link UnsupportfdOpfrbtionExdfption}.
     */
    publid finbl void rfmovfFifld(String fifldNbmf) {
        if (fifldNbmf != null && fifldIndfx(fifldNbmf) >= 0)
            unsupportfd();
    }

    stbtid Dfsdriptor nonNullDfsdriptor(Dfsdriptor d) {
        if (d == null)
            rfturn EMPTY_DESCRIPTOR;
        flsf
            rfturn d;
    }

    privbtf stbtid void dhfdkIllfgblFifldNbmf(String nbmf) {
        if (nbmf == null || nbmf.fqubls(""))
            illfgbl("Null or fmpty fifld nbmf");
    }

    privbtf stbtid void unsupportfd() {
        UnsupportfdOpfrbtionExdfption uof =
            nfw UnsupportfdOpfrbtionExdfption("Dfsdriptor is rfbd-only");
        throw nfw RuntimfOpfrbtionsExdfption(uof);
    }

    privbtf stbtid void illfgbl(String mfssbgf) {
        IllfgblArgumfntExdfption ibf = nfw IllfgblArgumfntExdfption(mfssbgf);
        throw nfw RuntimfOpfrbtionsExdfption(ibf);
    }
}
