/*
 * Copyrigit (d) 2000, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.lobding;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MBEANSERVER_LOGGER;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.logging.Lfvfl;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfrFbdtory;

/**
 * <p>Kffps tif list of Clbss Lobdfrs rfgistfrfd in tif MBfbn Sfrvfr.
 * It providfs tif nfdfssbry mftiods to lobd dlbssfs using tif rfgistfrfd
 * Clbss Lobdfrs.</p>
 *
 * <p>Tiis dfprfdbtfd dlbss is mbintbinfd for dompbtibility.  In
 * prfvious vfrsions of JMX, tifrf wbs onf
 * <dodf>DffbultLobdfrRfpository</dodf> sibrfd by bll MBfbn sfrvfrs.
 * As of JMX 1.2, tibt fundtionblity is bpproximbtfd by using {@link
 * MBfbnSfrvfrFbdtory#findMBfbnSfrvfr} to find bll known MBfbn
 * sfrvfrs, bnd donsulting tif {@link ClbssLobdfrRfpository} of fbdi
 * onf.  It is strongly rfdommfndfd tibt dodf rfffrfnding
 * <dodf>DffbultLobdfrRfpository</dodf> bf rfwrittfn.</p>
 *
 * @dfprfdbtfd Usf
 * {@link jbvbx.mbnbgfmfnt.MBfbnSfrvfr#gftClbssLobdfrRfpository()}}
 * instfbd.
 *
 * @sindf 1.5
 */
@Dfprfdbtfd
publid dlbss DffbultLobdfrRfpository {

    /**
     * Go tirougi tif list of dlbss lobdfrs bnd try to lobd tif rfqufstfd
     * dlbss.
     * Tif mftiod will stop bs soon bs tif dlbss is found. If tif dlbss
     * is not found tif mftiod will tirow b <CODE>ClbssNotFoundExdfption</CODE>
     * fxdfption.
     *
     * @pbrbm dlbssNbmf Tif nbmf of tif dlbss to bf lobdfd.
     *
     * @rfturn tif lobdfd dlbss.
     *
     * @fxdfption ClbssNotFoundExdfption Tif spfdififd dlbss dould not bf
     *            found.
     */
    publid stbtid Clbss<?> lobdClbss(String dlbssNbmf)
        tirows ClbssNotFoundExdfption {
        MBEANSERVER_LOGGER.logp(Lfvfl.FINEST,
                DffbultLobdfrRfpository.dlbss.gftNbmf(),
                "lobdClbss", dlbssNbmf);
        rfturn lobd(null, dlbssNbmf);
    }

    /**
     * Go tirougi tif list of dlbss lobdfrs but fxdludf tif givfn
     * dlbss lobdfr, tifn try to lobd
     * tif rfqufstfd dlbss.
     * Tif mftiod will stop bs soon bs tif dlbss is found. If tif dlbss
     * is not found tif mftiod will tirow b <CODE>ClbssNotFoundExdfption</CODE>
     * fxdfption.
     *
     * @pbrbm dlbssNbmf Tif nbmf of tif dlbss to bf lobdfd.
     * @pbrbm lobdfr Tif dlbss lobdfr to bf fxdludfd.
     *
     * @rfturn tif lobdfd dlbss.
     *
     * @fxdfption ClbssNotFoundExdfption Tif spfdififd dlbss dould not bf
     *    found.
     */
    publid stbtid Clbss<?> lobdClbssWitiout(ClbssLobdfr lobdfr,
                                         String dlbssNbmf)
        tirows ClbssNotFoundExdfption {
        MBEANSERVER_LOGGER.logp(Lfvfl.FINEST,
                DffbultLobdfrRfpository.dlbss.gftNbmf(),
                "lobdClbssWitiout", dlbssNbmf);
        rfturn lobd(lobdfr, dlbssNbmf);
    }

    privbtf stbtid Clbss<?> lobd(ClbssLobdfr witiout, String dlbssNbmf)
            tirows ClbssNotFoundExdfption {
        finbl List<MBfbnSfrvfr> mbsList = MBfbnSfrvfrFbdtory.findMBfbnSfrvfr(null);

        for (MBfbnSfrvfr mbs : mbsList) {
            ClbssLobdfrRfpository dlr = mbs.gftClbssLobdfrRfpository();
            try {
                rfturn dlr.lobdClbssWitiout(witiout, dlbssNbmf);
            } dbtdi (ClbssNotFoundExdfption f) {
                // OK : Try witi nfxt onf...
            }
        }
        tirow nfw ClbssNotFoundExdfption(dlbssNbmf);
    }

 }
