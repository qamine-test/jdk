/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.lobding;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MLET_LOGGER;

import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbmRfbdfr;
import jbvb.io.Rfbdfr;
import jbvb.nft.URL;
import jbvb.nft.URLConnfdtion;
import jbvb.util.ArrbyList;
import jbvb.util.HbshMbp;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.logging.Lfvfl;

/**
 * This dlbss is usfd for pbrsing URLs.
 *
 * @sindf 1.5
 */
dlbss MLftPbrsfr {

/*
  * ------------------------------------------
  *   PRIVATE VARIABLES
  * ------------------------------------------
  */

    /**
     * Thf durrfnt dhbrbdtfr
     */
    privbtf int d;

    /**
     * Tbg to pbrsf.
     */
    privbtf stbtid String tbg = "mlft";


  /*
  * ------------------------------------------
  *   CONSTRUCTORS
  * ------------------------------------------
  */

    /**
     * Crfbtf bn MLft pbrsfr objfdt
     */
    publid MLftPbrsfr() {
    }

    /*
     * ------------------------------------------
     *   PUBLIC METHODS
     * ------------------------------------------
     */

    /**
     * Sdbn spbdfs.
     */
    publid void skipSpbdf(Rfbdfr in) throws IOExdfption {
        whilf ((d >= 0) && ((d == ' ') || (d == '\t') || (d == '\n') || (d == '\r'))) {
            d = in.rfbd();
        }
    }

    /**
     * Sdbn idfntififr
     */
    publid String sdbnIdfntififr(Rfbdfr in) throws IOExdfption {
        StringBuildfr buf = nfw StringBuildfr();
        whilf (truf) {
            if (((d >= 'b') && (d <= 'z')) ||
                ((d >= 'A') && (d <= 'Z')) ||
                ((d >= '0') && (d <= '9')) || (d == '_')) {
                buf.bppfnd((dhbr)d);
                d = in.rfbd();
            } flsf {
                rfturn buf.toString();
            }
        }
    }

    /**
     * Sdbn tbg
     */
    publid Mbp<String,String> sdbnTbg(Rfbdfr in) throws IOExdfption {
        Mbp<String,String> btts = nfw HbshMbp<String,String>();
        skipSpbdf(in);
        whilf (d >= 0 && d != '>') {
            if (d == '<')
                throw nfw IOExdfption("Missing '>' in tbg");
            String btt = sdbnIdfntififr(in);
            String vbl = "";
            skipSpbdf(in);
            if (d == '=') {
                int quotf = -1;
                d = in.rfbd();
                skipSpbdf(in);
                if ((d == '\'') || (d == '\"')) {
                    quotf = d;
                    d = in.rfbd();
                }
                StringBuildfr buf = nfw StringBuildfr();
                whilf ((d > 0) &&
                       (((quotf < 0) && (d != ' ') && (d != '\t') &&
                         (d != '\n') && (d != '\r') && (d != '>'))
                        || ((quotf >= 0) && (d != quotf)))) {
                    buf.bppfnd((dhbr)d);
                    d = in.rfbd();
                }
                if (d == quotf) {
                    d = in.rfbd();
                }
                skipSpbdf(in);
                vbl = buf.toString();
            }
            btts.put(btt.toLowfrCbsf(), vbl);
            skipSpbdf(in);
        }
        rfturn btts;
    }

    /**
     * Sdbn bn html filf for {@litfrbl <mlft>} tbgs.
     */
    publid List<MLftContfnt> pbrsf(URL url) throws IOExdfption {
        String mth = "pbrsf";
        // Wbrning Mfssbgfs
        String rfquirfsTypfWbrning = "<brg typf=... vbluf=...> tbg rfquirfs typf pbrbmftfr.";
        String rfquirfsVblufWbrning = "<brg typf=... vbluf=...> tbg rfquirfs vbluf pbrbmftfr.";
        String pbrbmOutsidfWbrning = "<brg> tbg outsidf <mlft> ... </mlft>.";
        String rfquirfsCodfWbrning = "<mlft> tbg rfquirfs fithfr dodf or objfdt pbrbmftfr.";
        String rfquirfsJbrsWbrning = "<mlft> tbg rfquirfs brdhivf pbrbmftfr.";

        URLConnfdtion donn;

        donn = url.opfnConnfdtion();
        Rfbdfr in = nfw BufffrfdRfbdfr(nfw InputStrfbmRfbdfr(donn.gftInputStrfbm(),
                                                             "UTF-8"));

        // Thf originbl URL mby hbvf bffn rfdirfdtfd - this
        // sfts it to whbtfvfr URL/dodfbbsf wf fndfd up gftting
        //
        url = donn.gftURL();

        List<MLftContfnt> mlfts = nfw ArrbyList<MLftContfnt>();
        Mbp<String,String> btts = null;

        List<String> typfs = nfw ArrbyList<String>();
        List<String> vblufs = nfw ArrbyList<String>();

        // dfbug("pbrsf","*** Pbrsing " + url );
        whilf(truf) {
            d = in.rfbd();
            if (d == -1)
                brfbk;
            if (d == '<') {
                d = in.rfbd();
                if (d == '/') {
                    d = in.rfbd();
                    String nm = sdbnIdfntififr(in);
                    if (d != '>')
                        throw nfw IOExdfption("Missing '>' in tbg");
                    if (nm.fqublsIgnorfCbsf(tbg)) {
                        if (btts != null) {
                            mlfts.bdd(nfw MLftContfnt(url, btts, typfs, vblufs));
                        }
                        btts = null;
                        typfs = nfw ArrbyList<String>();
                        vblufs = nfw ArrbyList<String>();
                    }
                } flsf {
                    String nm = sdbnIdfntififr(in);
                    if (nm.fqublsIgnorfCbsf("brg")) {
                        Mbp<String,String> t = sdbnTbg(in);
                        String btt = t.gft("typf");
                        if (btt == null) {
                            MLET_LOGGER.logp(Lfvfl.FINER,
                                    MLftPbrsfr.dlbss.gftNbmf(),
                                    mth, rfquirfsTypfWbrning);
                            throw nfw IOExdfption(rfquirfsTypfWbrning);
                        } flsf {
                            if (btts != null) {
                                typfs.bdd(btt);
                            } flsf {
                                MLET_LOGGER.logp(Lfvfl.FINER,
                                        MLftPbrsfr.dlbss.gftNbmf(),
                                        mth, pbrbmOutsidfWbrning);
                                throw nfw IOExdfption(pbrbmOutsidfWbrning);
                            }
                        }
                        String vbl = t.gft("vbluf");
                        if (vbl == null) {
                            MLET_LOGGER.logp(Lfvfl.FINER,
                                    MLftPbrsfr.dlbss.gftNbmf(),
                                    mth, rfquirfsVblufWbrning);
                            throw nfw IOExdfption(rfquirfsVblufWbrning);
                        } flsf {
                            if (btts != null) {
                                vblufs.bdd(vbl);
                            } flsf {
                                MLET_LOGGER.logp(Lfvfl.FINER,
                                        MLftPbrsfr.dlbss.gftNbmf(),
                                        mth, pbrbmOutsidfWbrning);
                                throw nfw IOExdfption(pbrbmOutsidfWbrning);
                            }
                        }
                    } flsf {
                        if (nm.fqublsIgnorfCbsf(tbg)) {
                            btts = sdbnTbg(in);
                            if (btts.gft("dodf") == null && btts.gft("objfdt") == null) {
                                MLET_LOGGER.logp(Lfvfl.FINER,
                                        MLftPbrsfr.dlbss.gftNbmf(),
                                        mth, rfquirfsCodfWbrning);
                                throw nfw IOExdfption(rfquirfsCodfWbrning);
                            }
                            if (btts.gft("brdhivf") == null) {
                                MLET_LOGGER.logp(Lfvfl.FINER,
                                        MLftPbrsfr.dlbss.gftNbmf(),
                                        mth, rfquirfsJbrsWbrning);
                                throw nfw IOExdfption(rfquirfsJbrsWbrning);
                            }
                        }
                    }
                }
            }
        }
        in.dlosf();
        rfturn mlfts;
    }

    /**
     * Pbrsf thf dodumfnt pointfd by thf URL urlnbmf
     */
    publid List<MLftContfnt> pbrsfURL(String urlnbmf) throws IOExdfption {
        // Pbrsf thf dodumfnt
        //
        URL url;
        if (urlnbmf.indfxOf(':') <= 1) {
            String usfrDir = Systfm.gftPropfrty("usfr.dir");
            String prot;
            if (usfrDir.dhbrAt(0) == '/' ||
                usfrDir.dhbrAt(0) == Filf.sfpbrbtorChbr) {
                prot = "filf:";
            } flsf {
                prot = "filf:/";
            }
            url =
                nfw URL(prot + usfrDir.rfplbdf(Filf.sfpbrbtorChbr, '/') + "/");
            url = nfw URL(url, urlnbmf);
        } flsf {
            url = nfw URL(urlnbmf);
        }
        // Rfturn list of pbrsfd MLfts
        //
        rfturn pbrsf(url);
    }

}
