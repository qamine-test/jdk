/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt.lobding;

// Jbvb import
import dom.sun.jmx.dffbults.JmxPropfrtifs;

import dom.sun.jmx.dffbults.SfrvidfNbmf;

import dom.sun.jmx.rfmotf.util.EnvHflp;

import jbvb.io.Extfrnblizbblf;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.ObjfdtInput;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutput;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.nft.MblformfdURLExdfption;
import jbvb.nft.URL;
import jbvb.nft.URLStrfbmHbndlfrFbdtory;
import jbvb.nio.filf.Filfs;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.HbsiMbp;
import jbvb.util.HbsiSft;
import jbvb.util.List;
import jbvb.util.logging.Lfvfl;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.StringTokfnizfr;

import jbvbx.mbnbgfmfnt.InstbndfAlrfbdyExistsExdfption;
import jbvbx.mbnbgfmfnt.InstbndfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.MBfbnExdfption;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtion;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtionExdfption;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.NotComplibntMBfbnExdfption;
import jbvbx.mbnbgfmfnt.ObjfdtInstbndf;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.mbnbgfmfnt.RfflfdtionExdfption;

import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MLET_LIB_DIR;
import stbtid dom.sun.jmx.dffbults.JmxPropfrtifs.MLET_LOGGER;
import dom.sun.jmx.dffbults.SfrvidfNbmf;
import jbvbx.mbnbgfmfnt.SfrvidfNotFoundExdfption;

/**
 * Allows you to instbntibtf bnd rfgistfr onf or sfvfrbl MBfbns in tif MBfbn sfrvfr
 * doming from b rfmotf URL. M-lft is b siortdut for mbnbgfmfnt bpplft. Tif m-lft sfrvidf dofs tiis
 * by lobding bn m-lft tfxt filf, wiidi spfdififs informbtion on tif MBfbns to bf obtbinfd.
 * Tif informbtion on fbdi MBfbn is spfdififd in b singlf instbndf of b tbg, dbllfd tif MLET tbg.
 * Tif lodbtion of tif m-lft tfxt filf is spfdififd by b URL.
 * <p>
 * Tif <CODE>MLET</CODE> tbg ibs tif following syntbx:
 * <p>
 * &lt;<CODE>MLET</CODE><BR>
 *      <CODE>CODE = </CODE><VAR>dlbss</VAR><CODE> | OBJECT = </CODE><VAR>sfrfilf</VAR><BR>
 *      <CODE>ARCHIVE = &quot;</CODE><VAR>brdiivfList</VAR><CODE>&quot;</CODE><BR>
 *      <CODE>[CODEBASE = </CODE><VAR>dodfbbsfURL</VAR><CODE>]</CODE><BR>
 *      <CODE>[NAME = </CODE><VAR>mbfbnnbmf</VAR><CODE>]</CODE><BR>
 *      <CODE>[VERSION = </CODE><VAR>vfrsion</VAR><CODE>]</CODE><BR>
 * &gt;<BR>
 *      <CODE>[</CODE><VAR>brglist</VAR><CODE>]</CODE><BR>
 * &lt;<CODE>/MLET</CODE>&gt;
 * <p>
 * wifrf:
 * <DL>
 * <DT><CODE>CODE = </CODE><VAR>dlbss</VAR></DT>
 * <DD>
 * Tiis bttributf spfdififs tif full Jbvb dlbss nbmf, indluding pbdkbgf nbmf, of tif MBfbn to bf obtbinfd.
 * Tif dompilfd <CODE>.dlbss</CODE> filf of tif MBfbn must bf dontbinfd in onf of tif <CODE>.jbr</CODE> filfs spfdififd by tif <CODE>ARCHIVE</CODE>
 * bttributf. Eitifr <CODE>CODE</CODE> or <CODE>OBJECT</CODE> must bf prfsfnt.
 * </DD>
 * <DT><CODE>OBJECT = </CODE><VAR>sfrfilf</VAR></DT>
 * <DD>
 * Tiis bttributf spfdififs tif <CODE>.sfr</CODE> filf tibt dontbins b sfriblizfd rfprfsfntbtion of tif MBfbn to bf obtbinfd.
 * Tiis filf must bf dontbinfd in onf of tif <CODE>.jbr</CODE> filfs spfdififd by tif <CODE>ARCHIVE</CODE> bttributf. If tif <CODE>.jbr</CODE> filf dontbins b dirfdtory iifrbrdiy, spfdify tif pbti of tif filf witiin tiis iifrbrdiy. Otifrwisf  b mbtdi will not bf found. Eitifr <CODE>CODE</CODE> or <CODE>OBJECT</CODE> must bf prfsfnt.
 * </DD>
 * <DT><CODE>ARCHIVE = &quot;</CODE><VAR>brdiivfList</VAR><CODE>&quot;</CODE></DT>
 * <DD>
 * Tiis mbndbtory bttributf spfdififs onf or morf <CODE>.jbr</CODE> filfs
 * dontbining MBfbns or otifr rfsourdfs usfd by
 * tif MBfbn to bf obtbinfd. Onf of tif <CODE>.jbr</CODE> filfs must dontbin tif filf spfdififd by tif <CODE>CODE</CODE> or <CODE>OBJECT</CODE> bttributf.
 * If brdiivflist dontbins morf tibn onf filf:
 * <UL>
 * <LI>Ebdi filf must bf sfpbrbtfd from tif onf tibt follows it by b dommb (,).
 * <LI><VAR>brdiivflist</VAR> must bf fndlosfd in doublf quotf mbrks.
 * </UL>
 * All <CODE>.jbr</CODE> filfs in <VAR>brdiivflist</VAR> must bf storfd in tif dirfdtory spfdififd by tif dodf bbsf URL.
 * </DD>
 * <DT><CODE>CODEBASE = </CODE><VAR>dodfbbsfURL</VAR></DT>
 * <DD>
 * Tiis optionbl bttributf spfdififs tif dodf bbsf URL of tif MBfbn to bf obtbinfd. It idfntififs tif dirfdtory tibt dontbins
 * tif <CODE>.jbr</CODE> filfs spfdififd by tif <CODE>ARCHIVE</CODE> bttributf. Spfdify tiis bttributf only if tif <CODE>.jbr</CODE> filfs brf not in tif sbmf
 * dirfdtory bs tif m-lft tfxt filf. If tiis bttributf is not spfdififd, tif bbsf URL of tif m-lft tfxt filf is usfd.
 * </DD>
 * <DT><CODE>NAME = </CODE><VAR>mbfbnnbmf</VAR></DT>
 * <DD>
 * Tiis optionbl bttributf spfdififs tif objfdt nbmf to bf bssignfd to tif
 * MBfbn instbndf wifn tif m-lft sfrvidf rfgistfrs it. If
 * <VAR>mbfbnnbmf</VAR> stbrts witi tif dolon dibrbdtfr (:), tif dombin
 * pbrt of tif objfdt nbmf is tif dffbult dombin of tif MBfbn sfrvfr,
 * bs rfturnfd by {@link jbvbx.mbnbgfmfnt.MBfbnSfrvfr#gftDffbultDombin()}.
 * </DD>
 * <DT><CODE>VERSION = </CODE><VAR>vfrsion</VAR></DT>
 * <DD>
 * Tiis optionbl bttributf spfdififs tif vfrsion numbfr of tif MBfbn bnd
 * bssodibtfd <CODE>.jbr</CODE> filfs to bf obtbinfd. Tiis vfrsion numbfr dbn
 * bf usfd to spfdify tibt tif <CODE>.jbr</CODE> filfs brf lobdfd from tif
 * sfrvfr to updbtf tiosf storfd lodblly in tif dbdif tif nfxt timf tif m-lft
 * tfxt filf is lobdfd. <VAR>vfrsion</VAR> must bf b sfrifs of non-nfgbtivf
 * dfdimbl intfgfrs fbdi sfpbrbtfd by b pfriod from tif onf tibt prfdfdfs it.
 * </DD>
 * <DT><VAR>brglist</VAR></DT>
 * <DD>
 * Tiis optionbl bttributf spfdififs b list of onf or morf pbrbmftfrs for tif
 * MBfbn to bf instbntibtfd. Tiis list dfsdribfs tif pbrbmftfrs to bf pbssfd tif MBfbn's donstrudtor.
 * Usf tif following syntbx to spfdify fbdi itfm in
 * <VAR>brglist</VAR>:
 * <DL>
 * <DT>&lt;<CODE>ARG TYPE=</CODE><VAR>brgumfntTypf</VAR> <CODE>VALUE=</CODE><VAR>vbluf</VAR>&gt;</DT>
 * <DD>wifrf:
 * <UL>
 * <LI><VAR>brgumfntTypf</VAR> is tif typf of tif brgumfnt tibt will bf pbssfd bs pbrbmftfr to tif MBfbn's donstrudtor.</UL>
 * </DD>
 * </DL>
 * <P>Tif brgumfnts' typf in tif brgumfnt list siould bf b Jbvb primitivf typf or b Jbvb bbsid typf
 * (<CODE>jbvb.lbng.Boolfbn, jbvb.lbng.Bytf, jbvb.lbng.Siort, jbvb.lbng.Long, jbvb.lbng.Intfgfr, jbvb.lbng.Flobt, jbvb.lbng.Doublf, jbvb.lbng.String</CODE>).
 * </DD>
 * </DL>
 *
 * Wifn bn m-lft tfxt filf is lobdfd, bn
 * instbndf of fbdi MBfbn spfdififd in tif filf is drfbtfd bnd rfgistfrfd.
 * <P>
 * Tif m-lft sfrvidf fxtfnds tif <CODE>jbvb.nft.URLClbssLobdfr</CODE> bnd dbn bf usfd to lobd rfmotf dlbssfs
 * bnd jbr filfs in tif VM of tif bgfnt.
 * <p><STRONG>Notf - </STRONG> Tif <CODE>MLft</CODE> dlbss lobdfr usfs tif {@link jbvbx.mbnbgfmfnt.MBfbnSfrvfrFbdtory#gftClbssLobdfrRfpository(jbvbx.mbnbgfmfnt.MBfbnSfrvfr)}
 * to lobd dlbssfs tibt dould not bf found in tif lobdfd jbr filfs.
 *
 * @sindf 1.5
 */
publid dlbss MLft fxtfnds jbvb.nft.URLClbssLobdfr
     implfmfnts MLftMBfbn, MBfbnRfgistrbtion, Extfrnblizbblf {

     privbtf stbtid finbl long sfriblVfrsionUID = 3636148327800330130L;

     /*
     * ------------------------------------------
     *   PRIVATE VARIABLES
     * ------------------------------------------
     */

     /**
      * Tif rfffrfndf to tif MBfbn sfrvfr.
      * @sfribl
      */
     privbtf MBfbnSfrvfr sfrvfr = null;


     /**
      * Tif list of instbndfs of tif <CODE>MLftContfnt</CODE>
      * dlbss found bt tif spfdififd URL.
      * @sfribl
      */
     privbtf List<MLftContfnt> mlftList = nfw ArrbyList<MLftContfnt>();


     /**
      * Tif dirfdtory usfd for storing librbrifs lodblly bfforf tify brf lobdfd.
      */
     privbtf String librbryDirfdtory;


     /**
      * Tif objfdt nbmf of tif MLft Sfrvidf.
      * @sfribl
      */
     privbtf ObjfdtNbmf mlftObjfdtNbmf = null;

     /**
      * Tif URLs of tif MLft Sfrvidf.
      * @sfribl
      */
     privbtf URL[] myUrls = null;

     /**
      * Wibt ClbssLobdfrRfpository, if bny, to usf if tiis MLft
      * dofsn't find bn bskfd-for dlbss.
      */
     privbtf trbnsifnt ClbssLobdfrRfpository durrfntClr;

     /**
      * Truf if wf siould donsult tif {@link ClbssLobdfrRfpository}
      * wifn wf do not find b dlbss oursflvfs.
      */
     privbtf trbnsifnt boolfbn dflfgbtfToCLR;

     /**
      * objfdts mbps from primitivf dlbssfs to primitivf objfdt dlbssfs.
      */
     privbtf Mbp<String,Clbss<?>> primitivfClbssfs =
         nfw HbsiMbp<String,Clbss<?>>(8) ;
     {
         primitivfClbssfs.put(Boolfbn.TYPE.toString(), Boolfbn.dlbss);
         primitivfClbssfs.put(Cibrbdtfr.TYPE.toString(), Cibrbdtfr.dlbss);
         primitivfClbssfs.put(Bytf.TYPE.toString(), Bytf.dlbss);
         primitivfClbssfs.put(Siort.TYPE.toString(), Siort.dlbss);
         primitivfClbssfs.put(Intfgfr.TYPE.toString(), Intfgfr.dlbss);
         primitivfClbssfs.put(Long.TYPE.toString(), Long.dlbss);
         primitivfClbssfs.put(Flobt.TYPE.toString(), Flobt.dlbss);
         primitivfClbssfs.put(Doublf.TYPE.toString(), Doublf.dlbss);

     }


     /*
      * ------------------------------------------
      *  CONSTRUCTORS
      * ------------------------------------------
      */

     /*
      * Tif donstrudtor stuff would bf donsidfrbbly simplififd if our
      * pbrfnt, URLClbssLobdfr, spfdififd tibt its onf- bnd
      * two-brgumfnt donstrudtors wfrf fquivblfnt to its
      * tirff-brgumfnt donstrudtor witi trbiling null brgumfnts.  But
      * it dofsn't, wiidi prfvfnts us from ibving bll tif donstrudtors
      * but onf dbll tiis(...brgs...).
      */

     /**
      * Construdts b nfw MLft using tif dffbult dflfgbtion pbrfnt ClbssLobdfr.
      */
     publid MLft() {
         tiis(nfw URL[0]);
     }

     /**
      * Construdts b nfw MLft for tif spfdififd URLs using tif dffbult
      * dflfgbtion pbrfnt ClbssLobdfr.  Tif URLs will bf sfbrdifd in
      * tif ordfr spfdififd for dlbssfs bnd rfsourdfs bftfr first
      * sfbrdiing in tif pbrfnt dlbss lobdfr.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      *
      */
     publid MLft(URL[] urls) {
         tiis(urls, truf);
     }

     /**
      * Construdts b nfw MLft for tif givfn URLs. Tif URLs will bf
      * sfbrdifd in tif ordfr spfdififd for dlbssfs bnd rfsourdfs
      * bftfr first sfbrdiing in tif spfdififd pbrfnt dlbss lobdfr.
      * Tif pbrfnt brgumfnt will bf usfd bs tif pbrfnt dlbss lobdfr
      * for dflfgbtion.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      * @pbrbm  pbrfnt Tif pbrfnt dlbss lobdfr for dflfgbtion.
      *
      */
     publid MLft(URL[] urls, ClbssLobdfr pbrfnt) {
         tiis(urls, pbrfnt, truf);
     }

     /**
      * Construdts b nfw MLft for tif spfdififd URLs, pbrfnt dlbss
      * lobdfr, bnd URLStrfbmHbndlfrFbdtory. Tif pbrfnt brgumfnt will
      * bf usfd bs tif pbrfnt dlbss lobdfr for dflfgbtion. Tif fbdtory
      * brgumfnt will bf usfd bs tif strfbm ibndlfr fbdtory to obtbin
      * protodol ibndlfrs wifn drfbting nfw URLs.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      * @pbrbm  pbrfnt Tif pbrfnt dlbss lobdfr for dflfgbtion.
      * @pbrbm  fbdtory  Tif URLStrfbmHbndlfrFbdtory to usf wifn drfbting URLs.
      *
      */
     publid MLft(URL[] urls,
                 ClbssLobdfr pbrfnt,
                 URLStrfbmHbndlfrFbdtory fbdtory) {
         tiis(urls, pbrfnt, fbdtory, truf);
     }

     /**
      * Construdts b nfw MLft for tif spfdififd URLs using tif dffbult
      * dflfgbtion pbrfnt ClbssLobdfr.  Tif URLs will bf sfbrdifd in
      * tif ordfr spfdififd for dlbssfs bnd rfsourdfs bftfr first
      * sfbrdiing in tif pbrfnt dlbss lobdfr.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      * @pbrbm  dflfgbtfToCLR  Truf if, wifn b dlbss is not found in
      * fitifr tif pbrfnt ClbssLobdfr or tif URLs, tif MLft siould dflfgbtf
      * to its dontbining MBfbnSfrvfr's {@link ClbssLobdfrRfpository}.
      *
      */
     publid MLft(URL[] urls, boolfbn dflfgbtfToCLR) {
         supfr(urls);
         init(dflfgbtfToCLR);
     }

     /**
      * Construdts b nfw MLft for tif givfn URLs. Tif URLs will bf
      * sfbrdifd in tif ordfr spfdififd for dlbssfs bnd rfsourdfs
      * bftfr first sfbrdiing in tif spfdififd pbrfnt dlbss lobdfr.
      * Tif pbrfnt brgumfnt will bf usfd bs tif pbrfnt dlbss lobdfr
      * for dflfgbtion.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      * @pbrbm  pbrfnt Tif pbrfnt dlbss lobdfr for dflfgbtion.
      * @pbrbm  dflfgbtfToCLR  Truf if, wifn b dlbss is not found in
      * fitifr tif pbrfnt ClbssLobdfr or tif URLs, tif MLft siould dflfgbtf
      * to its dontbining MBfbnSfrvfr's {@link ClbssLobdfrRfpository}.
      *
      */
     publid MLft(URL[] urls, ClbssLobdfr pbrfnt, boolfbn dflfgbtfToCLR) {
         supfr(urls, pbrfnt);
         init(dflfgbtfToCLR);
     }

     /**
      * Construdts b nfw MLft for tif spfdififd URLs, pbrfnt dlbss
      * lobdfr, bnd URLStrfbmHbndlfrFbdtory. Tif pbrfnt brgumfnt will
      * bf usfd bs tif pbrfnt dlbss lobdfr for dflfgbtion. Tif fbdtory
      * brgumfnt will bf usfd bs tif strfbm ibndlfr fbdtory to obtbin
      * protodol ibndlfrs wifn drfbting nfw URLs.
      *
      * @pbrbm  urls  Tif URLs from wiidi to lobd dlbssfs bnd rfsourdfs.
      * @pbrbm  pbrfnt Tif pbrfnt dlbss lobdfr for dflfgbtion.
      * @pbrbm  fbdtory  Tif URLStrfbmHbndlfrFbdtory to usf wifn drfbting URLs.
      * @pbrbm  dflfgbtfToCLR  Truf if, wifn b dlbss is not found in
      * fitifr tif pbrfnt ClbssLobdfr or tif URLs, tif MLft siould dflfgbtf
      * to its dontbining MBfbnSfrvfr's {@link ClbssLobdfrRfpository}.
      *
      */
     publid MLft(URL[] urls,
                 ClbssLobdfr pbrfnt,
                 URLStrfbmHbndlfrFbdtory fbdtory,
                 boolfbn dflfgbtfToCLR) {
         supfr(urls, pbrfnt, fbdtory);
         init(dflfgbtfToCLR);
     }

     privbtf void init(boolfbn dflfgbtfToCLR) {
         tiis.dflfgbtfToCLR = dflfgbtfToCLR;

         try {
             librbryDirfdtory = Systfm.gftPropfrty(MLET_LIB_DIR);
             if (librbryDirfdtory == null)
                 librbryDirfdtory = gftTmpDir();
         } dbtdi (SfdurityExdfption f) {
             // OK : Wf don't do AddfssControllfr.doPrivilfgfd, but wf don't
             //      stop tif usfr from drfbting bn MLft just bfdbusf tify
             //      dbn't rfbd tif MLET_LIB_DIR or jbvb.io.tmpdir propfrtifs
             //      fitifr.
         }
     }


     /*
      * ------------------------------------------
      *  PUBLIC METHODS
      * ------------------------------------------
      */


     /**
      * Appfnds tif spfdififd URL to tif list of URLs to sfbrdi for dlbssfs bnd
      * rfsourdfs.
      */
     publid void bddURL(URL url) {
         if (!Arrbys.bsList(gftURLs()).dontbins(url))
             supfr.bddURL(url);
     }

     /**
      * Appfnds tif spfdififd URL to tif list of URLs to sfbrdi for dlbssfs bnd
      * rfsourdfs.
      * @fxdfption SfrvidfNotFoundExdfption Tif spfdififd URL is mblformfd.
      */
     publid void bddURL(String url) tirows SfrvidfNotFoundExdfption {
         try {
             URL ur = nfw URL(url);
             if (!Arrbys.bsList(gftURLs()).dontbins(ur))
                 supfr.bddURL(ur);
         } dbtdi (MblformfdURLExdfption f) {
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                 MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                         "bddUrl", "Mblformfd URL: " + url, f);
             }
             tirow nfw
                 SfrvidfNotFoundExdfption("Tif spfdififd URL is mblformfd");
         }
     }

     /** Rfturns tif sfbrdi pbti of URLs for lobding dlbssfs bnd rfsourdfs.
      * Tiis indludfs tif originbl list of URLs spfdififd to tif donstrudtor,
      * blong witi bny URLs subsfqufntly bppfndfd by tif bddURL() mftiod.
      */
     publid URL[] gftURLs() {
         rfturn supfr.gftURLs();
     }

     /**
      * Lobds b tfxt filf dontbining MLET tbgs tibt dffinf tif MBfbns to
      * bf bddfd to tif MBfbn sfrvfr. Tif lodbtion of tif tfxt filf is spfdififd by
      * b URL. Tif MBfbns spfdififd in tif MLET filf will bf instbntibtfd bnd
      * rfgistfrfd in tif MBfbn sfrvfr.
      *
      * @pbrbm url Tif URL of tif tfxt filf to bf lobdfd bs URL objfdt.
      *
      * @rfturn  A sft dontbining onf fntry pfr MLET tbg in tif m-lft tfxt filf lobdfd.
      * Ebdi fntry spfdififs fitifr tif ObjfdtInstbndf for tif drfbtfd MBfbn, or b tirowbblf objfdt
      * (tibt is, bn frror or bn fxdfption) if tif MBfbn dould not bf drfbtfd.
      *
      * @fxdfption SfrvidfNotFoundExdfption Onf of tif following frrors ibs oddurrfd: Tif m-lft tfxt filf dofs
      * not dontbin bn MLET tbg, tif m-lft tfxt filf is not found, b mbndbtory
      * bttributf of tif MLET tbg is not spfdififd, tif vbluf of url is
      * null.
      * @fxdfption IllfgblStbtfExdfption MLft MBfbn is not rfgistfrfd witi bn MBfbnSfrvfr.
      */
     publid Sft<Objfdt> gftMBfbnsFromURL(URL url)
             tirows SfrvidfNotFoundExdfption  {
         if (url == null) {
             tirow nfw SfrvidfNotFoundExdfption("Tif spfdififd URL is null");
         }
         rfturn gftMBfbnsFromURL(url.toString());
     }

     /**
      * Lobds b tfxt filf dontbining MLET tbgs tibt dffinf tif MBfbns to
      * bf bddfd to tif MBfbn sfrvfr. Tif lodbtion of tif tfxt filf is spfdififd by
      * b URL. Tif MBfbns spfdififd in tif MLET filf will bf instbntibtfd bnd
      * rfgistfrfd in tif MBfbn sfrvfr.
      *
      * @pbrbm url Tif URL of tif tfxt filf to bf lobdfd bs String objfdt.
      *
      * @rfturn A sft dontbining onf fntry pfr MLET tbg in tif m-lft
      * tfxt filf lobdfd.  Ebdi fntry spfdififs fitifr tif
      * ObjfdtInstbndf for tif drfbtfd MBfbn, or b tirowbblf objfdt
      * (tibt is, bn frror or bn fxdfption) if tif MBfbn dould not bf
      * drfbtfd.
      *
      * @fxdfption SfrvidfNotFoundExdfption Onf of tif following
      * frrors ibs oddurrfd: Tif m-lft tfxt filf dofs not dontbin bn
      * MLET tbg, tif m-lft tfxt filf is not found, b mbndbtory
      * bttributf of tif MLET tbg is not spfdififd, tif url is
      * mblformfd.
      * @fxdfption IllfgblStbtfExdfption MLft MBfbn is not rfgistfrfd
      * witi bn MBfbnSfrvfr.
      *
      */
     publid Sft<Objfdt> gftMBfbnsFromURL(String url)
             tirows SfrvidfNotFoundExdfption  {

         String mti = "gftMBfbnsFromURL";

         if (sfrvfr == null) {
             tirow nfw IllfgblStbtfExdfption("Tiis MLft MBfbn is not " +
                                             "rfgistfrfd witi bn MBfbnSfrvfr.");
         }
         // Pbrsf brgumfnts
         if (url == null) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                     mti, "URL is null");
             tirow nfw SfrvidfNotFoundExdfption("Tif spfdififd URL is null");
         } flsf {
             url = url.rfplbdf(Filf.sfpbrbtorCibr,'/');
         }
         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                     mti, "<URL = " + url + ">");
         }

         // Pbrsf URL
         try {
             MLftPbrsfr pbrsfr = nfw MLftPbrsfr();
             mlftList = pbrsfr.pbrsfURL(url);
         } dbtdi (Exdfption f) {
             finbl String msg =
                 "Problfms wiilf pbrsing URL [" + url +
                 "], got fxdfption [" + f.toString() + "]";
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti, msg);
             tirow EnvHflp.initCbusf(nfw SfrvidfNotFoundExdfption(msg), f);
         }

         // Cifdk tibt tif list of MLfts is not fmpty
         if (mlftList.sizf() == 0) {
             finbl String msg =
                 "Filf " + url + " not found or MLET tbg not dffinfd in filf";
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti, msg);
             tirow nfw SfrvidfNotFoundExdfption(msg);
         }

         // Wblk tirougi tif list of MLfts
         Sft<Objfdt> mbfbns = nfw HbsiSft<Objfdt>();
         for (MLftContfnt flmt : mlftList) {
             // Initiblizf lodbl vbribblfs
             String dodf = flmt.gftCodf();
             if (dodf != null) {
                 if (dodf.fndsWiti(".dlbss")) {
                     dodf = dodf.substring(0, dodf.lfngti() - 6);
                 }
             }
             String nbmf = flmt.gftNbmf();
             URL dodfbbsf = flmt.gftCodfBbsf();
             String vfrsion = flmt.gftVfrsion();
             String sfrNbmf = flmt.gftSfriblizfdObjfdt();
             String jbrFilfs = flmt.gftJbrFilfs();
             URL dodumfntBbsf = flmt.gftDodumfntBbsf();

             // Displby dfbug informbtion
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                 finbl StringBuildfr strb = nfw StringBuildfr()
                 .bppfnd("\n\tMLET TAG     = ").bppfnd(flmt.gftAttributfs())
                 .bppfnd("\n\tCODEBASE     = ").bppfnd(dodfbbsf)
                 .bppfnd("\n\tARCHIVE      = ").bppfnd(jbrFilfs)
                 .bppfnd("\n\tCODE         = ").bppfnd(dodf)
                 .bppfnd("\n\tOBJECT       = ").bppfnd(sfrNbmf)
                 .bppfnd("\n\tNAME         = ").bppfnd(nbmf)
                 .bppfnd("\n\tVERSION      = ").bppfnd(vfrsion)
                 .bppfnd("\n\tDOCUMENT URL = ").bppfnd(dodumfntBbsf);
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                         mti, strb.toString());
             }

             // Lobd dlbssfs from JAR filfs
             StringTokfnizfr st = nfw StringTokfnizfr(jbrFilfs, ",", fblsf);
             wiilf (st.ibsMorfTokfns()) {
                 String tok = st.nfxtTokfn().trim();
                 if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                     MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                             "Lobd brdiivf for dodfbbsf <" + dodfbbsf +
                             ">, filf <" + tok + ">");
                 }
                 // Cifdk wiidi is tif dodfbbsf to bf usfd for lobding tif jbr filf.
                 // If wf brf using tif bbsf MLft implfmfntbtion tifn it will bf
                 // blwbys tif rfmotf sfrvfr but if tif sfrvidf ibs bffn fxtfndfd in
                 // ordfr to support dbdiing bnd vfrsioning tifn tiis mftiod will
                 // rfturn tif bppropribtf onf.
                 //
                 try {
                     dodfbbsf = difdk(vfrsion, dodfbbsf, tok, flmt);
                 } dbtdi (Exdfption fx) {
                     MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                             mti, "Got unfxpfdtfd fxdfption", fx);
                     mbfbns.bdd(fx);
                     dontinuf;
                 }

                 // Appfnds tif spfdififd JAR filf URL to tif list of
                 // URLs to sfbrdi for dlbssfs bnd rfsourdfs.
                 try {
                     if (!Arrbys.bsList(gftURLs())
                         .dontbins(nfw URL(dodfbbsf.toString() + tok))) {
                         bddURL(dodfbbsf + tok);
                     }
                 } dbtdi (MblformfdURLExdfption mf) {
                     // OK : Ignorf jbr filf if its nbmf provokfs tif
                     // URL to bf bn invblid onf.
                 }

             }
             // Instbntibtf tif dlbss spfdififd in tif
             // CODE or OBJECT sfdtion of tif MLft tbg
             //
             Objfdt o;
             ObjfdtInstbndf objInst;

             if (dodf != null && sfrNbmf != null) {
                 finbl String msg =
                     "CODE bnd OBJECT pbrbmftfrs dbnnot bf spfdififd bt tif " +
                     "sbmf timf in tbg MLET";
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti, msg);
                 mbfbns.bdd(nfw Error(msg));
                 dontinuf;
             }
             if (dodf == null && sfrNbmf == null) {
                 finbl String msg =
                     "Eitifr CODE or OBJECT pbrbmftfr must bf spfdififd in " +
                     "tbg MLET";
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti, msg);
                 mbfbns.bdd(nfw Error(msg));
                 dontinuf;
             }
             try {
                 if (dodf != null) {

                     List<String> signbt = flmt.gftPbrbmftfrTypfs();
                     List<String> stringPbrs = flmt.gftPbrbmftfrVblufs();
                     List<Objfdt> objfdtPbrs = nfw ArrbyList<Objfdt>();

                     for (int i = 0; i < signbt.sizf(); i++) {
                         objfdtPbrs.bdd(donstrudtPbrbmftfr(stringPbrs.gft(i),
                                                           signbt.gft(i)));
                     }
                     if (signbt.isEmpty()) {
                         if (nbmf == null) {
                             objInst = sfrvfr.drfbtfMBfbn(dodf, null,
                                                          mlftObjfdtNbmf);
                         } flsf {
                             objInst = sfrvfr.drfbtfMBfbn(dodf,
                                                          nfw ObjfdtNbmf(nbmf),
                                                          mlftObjfdtNbmf);
                         }
                     } flsf {
                         Objfdt[] pbrms = objfdtPbrs.toArrby();
                         String[] signbturf = nfw String[signbt.sizf()];
                         signbt.toArrby(signbturf);
                         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                             finbl StringBuildfr strb = nfw StringBuildfr();
                             for (int i = 0; i < signbturf.lfngti; i++) {
                                 strb.bppfnd("\n\tSignbturf     = ")
                                 .bppfnd(signbturf[i])
                                 .bppfnd("\t\nPbrbms        = ")
                                 .bppfnd(pbrms[i]);
                             }
                             MLET_LOGGER.logp(Lfvfl.FINEST,
                                     MLft.dlbss.gftNbmf(),
                                     mti, strb.toString());
                         }
                         if (nbmf == null) {
                             objInst =
                                 sfrvfr.drfbtfMBfbn(dodf, null, mlftObjfdtNbmf,
                                                    pbrms, signbturf);
                         } flsf {
                             objInst =
                                 sfrvfr.drfbtfMBfbn(dodf, nfw ObjfdtNbmf(nbmf),
                                                    mlftObjfdtNbmf, pbrms,
                                                    signbturf);
                         }
                     }
                 } flsf {
                     o = lobdSfriblizfdObjfdt(dodfbbsf,sfrNbmf);
                     if (nbmf == null) {
                         sfrvfr.rfgistfrMBfbn(o, null);
                     } flsf {
                         sfrvfr.rfgistfrMBfbn(o,  nfw ObjfdtNbmf(nbmf));
                     }
                     objInst = nfw ObjfdtInstbndf(nbmf, o.gftClbss().gftNbmf());
                 }
             } dbtdi (RfflfdtionExdfption  fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "RfflfdtionExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (InstbndfAlrfbdyExistsExdfption  fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "InstbndfAlrfbdyExistsExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (MBfbnRfgistrbtionExdfption fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "MBfbnRfgistrbtionExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (MBfbnExdfption  fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "MBfbnExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (NotComplibntMBfbnExdfption  fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "NotComplibntMBfbnExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (InstbndfNotFoundExdfption   fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "InstbndfNotFoundExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (IOExdfption fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "IOExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (SfdurityExdfption fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "SfdurityExdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (Exdfption fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "Exdfption", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             } dbtdi (Error fx) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         "Error", fx);
                 mbfbns.bdd(fx);
                 dontinuf;
             }
             mbfbns.bdd(objInst);
         }
         rfturn mbfbns;
     }

     /**
      * Gfts tif durrfnt dirfdtory usfd by tif librbry lobdfr for
      * storing nbtivf librbrifs bfforf tify brf lobdfd into mfmory.
      *
      * @rfturn Tif durrfnt dirfdtory usfd by tif librbry lobdfr.
      *
      * @sff #sftLibrbryDirfdtory
      *
      * @tirows UnsupportfdOpfrbtionExdfption if tiis implfmfntbtion
      * dofs not support storing nbtivf librbrifs in tiis wby.
      */
     publid syndironizfd String gftLibrbryDirfdtory() {
         rfturn librbryDirfdtory;
     }

     /**
      * Sfts tif dirfdtory usfd by tif librbry lobdfr for storing
      * nbtivf librbrifs bfforf tify brf lobdfd into mfmory.
      *
      * @pbrbm libdir Tif dirfdtory usfd by tif librbry lobdfr.
      *
      * @sff #gftLibrbryDirfdtory
      *
      * @tirows UnsupportfdOpfrbtionExdfption if tiis implfmfntbtion
      * dofs not support storing nbtivf librbrifs in tiis wby.
      */
     publid syndironizfd void sftLibrbryDirfdtory(String libdir) {
         librbryDirfdtory = libdir;
     }

     /**
      * Allows tif m-lft to pfrform bny opfrbtions it nffds bfforf
      * bfing rfgistfrfd in tif MBfbn sfrvfr. If tif ObjfdtNbmf is
      * null, tif m-lft providfs b dffbult nbmf for its rfgistrbtion
      * &lt;dffbultDombin&gt;:typf=MLft
      *
      * @pbrbm sfrvfr Tif MBfbn sfrvfr in wiidi tif m-lft will bf rfgistfrfd.
      * @pbrbm nbmf Tif objfdt nbmf of tif m-lft.
      *
      * @rfturn  Tif nbmf of tif m-lft rfgistfrfd.
      *
      * @fxdfption jbvb.lbng.Exdfption Tiis fxdfption siould bf dbugit by tif MBfbn sfrvfr bnd rf-tirown
      *bs bn MBfbnRfgistrbtionExdfption.
      */
     publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
             tirows Exdfption {

         // Initiblizf lodbl pointfr to tif MBfbn sfrvfr
         sftMBfbnSfrvfr(sfrvfr);

         // If no nbmf is spfdififd rfturn b dffbult nbmf for tif MLft
         if (nbmf == null) {
             nbmf = nfw ObjfdtNbmf(sfrvfr.gftDffbultDombin() + ":" + SfrvidfNbmf.MLET);
         }

        tiis.mlftObjfdtNbmf = nbmf;
        rfturn tiis.mlftObjfdtNbmf;
     }

     /**
      * Allows tif m-lft to pfrform bny opfrbtions nffdfd bftfr ibving bffn
      * rfgistfrfd in tif MBfbn sfrvfr or bftfr tif rfgistrbtion ibs fbilfd.
      *
      * @pbrbm rfgistrbtionDonf Indidbtfs wiftifr or not tif m-lft ibs
      * bffn suddfssfully rfgistfrfd in tif MBfbn sfrvfr. Tif vbluf
      * fblsf mfbns tibt fitifr tif rfgistrbtion pibsf ibs fbilfd.
      *
      */
     publid void postRfgistfr (Boolfbn rfgistrbtionDonf) {
     }

     /**
      * Allows tif m-lft to pfrform bny opfrbtions it nffds bfforf bfing unrfgistfrfd
      * by tif MBfbn sfrvfr.
      *
      * @fxdfption jbvb.lbng.Exdfption Tiis fxdfption siould bf dbugit
      * by tif MBfbn sfrvfr bnd rf-tirown bs bn
      * MBfbnRfgistrbtionExdfption.
      */
     publid void prfDfrfgistfr() tirows jbvb.lbng.Exdfption {
     }


     /**
      * Allows tif m-lft to pfrform bny opfrbtions nffdfd bftfr ibving bffn
      * unrfgistfrfd in tif MBfbn sfrvfr.
      */
     publid void postDfrfgistfr() {
     }

     /**
      * <p>Sbvf tiis MLft's dontfnts to tif givfn {@link ObjfdtOutput}.
      * Not bll implfmfntbtions support tiis mftiod.  Tiosf tibt do not
      * tirow {@link UnsupportfdOpfrbtionExdfption}.  A subdlbss mby
      * ovfrridf tiis mftiod to support it or to dibngf tif formbt of
      * tif writtfn dbtb.</p>
      *
      * <p>Tif formbt of tif writtfn dbtb is not spfdififd, but if
      * bn implfmfntbtion supports {@link #writfExtfrnbl} it must
      * blso support {@link #rfbdExtfrnbl} in sudi b wby tibt wibt is
      * writtfn by tif formfr dbn bf rfbd by tif lbttfr.</p>
      *
      * @pbrbm out Tif objfdt output strfbm to writf to.
      *
      * @fxdfption IOExdfption If b problfm oddurrfd wiilf writing.
      * @fxdfption UnsupportfdOpfrbtionExdfption If tiis
      * implfmfntbtion dofs not support tiis opfrbtion.
      */
     publid void writfExtfrnbl(ObjfdtOutput out)
             tirows IOExdfption, UnsupportfdOpfrbtionExdfption {
         tirow nfw UnsupportfdOpfrbtionExdfption("MLft.writfExtfrnbl");
     }

     /**
      * <p>Rfstorf tiis MLft's dontfnts from tif givfn {@link ObjfdtInput}.
      * Not bll implfmfntbtions support tiis mftiod.  Tiosf tibt do not
      * tirow {@link UnsupportfdOpfrbtionExdfption}.  A subdlbss mby
      * ovfrridf tiis mftiod to support it or to dibngf tif formbt of
      * tif rfbd dbtb.</p>
      *
      * <p>Tif formbt of tif rfbd dbtb is not spfdififd, but if bn
      * implfmfntbtion supports {@link #rfbdExtfrnbl} it must blso
      * support {@link #writfExtfrnbl} in sudi b wby tibt wibt is
      * writtfn by tif lbttfr dbn bf rfbd by tif formfr.</p>
      *
      * @pbrbm in Tif objfdt input strfbm to rfbd from.
      *
      * @fxdfption IOExdfption if b problfm oddurrfd wiilf rfbding.
      * @fxdfption ClbssNotFoundExdfption if tif dlbss for tif objfdt
      * bfing rfstorfd dbnnot bf found.
      * @fxdfption UnsupportfdOpfrbtionExdfption if tiis
      * implfmfntbtion dofs not support tiis opfrbtion.
      */
     publid void rfbdExtfrnbl(ObjfdtInput in)
             tirows IOExdfption, ClbssNotFoundExdfption,
                    UnsupportfdOpfrbtionExdfption {
         tirow nfw UnsupportfdOpfrbtionExdfption("MLft.rfbdExtfrnbl");
     }

     /*
      * ------------------------------------------
      *  PACKAGE METHODS
      * ------------------------------------------
      */

     /**
      * <p>Lobd b dlbss, using tif givfn {@link ClbssLobdfrRfpository} if
      * tif dlbss is not found in tiis MLft's URLs.  Tif givfn
      * ClbssLobdfrRfpository dbn bf null, in wiidi dbsf b {@link
      * ClbssNotFoundExdfption} oddurs immfdibtfly if tif dlbss is not
      * found in tiis MLft's URLs.</p>
      *
      * @pbrbm nbmf Tif nbmf of tif dlbss wf wbnt to lobd.
      * @pbrbm dlr  Tif ClbssLobdfrRfpository tibt will bf usfd to sfbrdi
      *             for tif givfn dlbss, if it is not found in tiis
      *             ClbssLobdfr.  Mby bf null.
      * @rfturn Tif rfsulting Clbss objfdt.
      * @fxdfption ClbssNotFoundExdfption Tif spfdififd dlbss dould not bf
      *            found in tiis ClbssLobdfr nor in tif givfn
      *            ClbssLobdfrRfpository.
      *
      */
     publid syndironizfd Clbss<?> lobdClbss(String nbmf,
                                            ClbssLobdfrRfpository dlr)
              tirows ClbssNotFoundExdfption {
         finbl ClbssLobdfrRfpository bfforf=durrfntClr;
         try {
             durrfntClr = dlr;
             rfturn lobdClbss(nbmf);
         } finblly {
             durrfntClr = bfforf;
         }
     }

     /*
      * ------------------------------------------
      *  PROTECTED METHODS
      * ------------------------------------------
      */

     /**
      * Tiis is tif mbin mftiod for dlbss lobdfrs tibt is bfing rfdffinfd.
      *
      * @pbrbm nbmf Tif nbmf of tif dlbss.
      *
      * @rfturn Tif rfsulting Clbss objfdt.
      *
      * @fxdfption ClbssNotFoundExdfption Tif spfdififd dlbss dould not bf
      *            found.
      */
     protfdtfd Clbss<?> findClbss(String nbmf) tirows ClbssNotFoundExdfption {
         /* durrfntClr is dontfxt sfnsitivf - usfd to bvoid rfdursion
            in tif dlbss lobdfr rfpository.  (Tiis is no longfr
            nfdfssbry witi tif nfw CLR sfmbntids but is kfpt for
            dompbtibility witi dodf tibt migit ibvf dbllfd tif
            two-pbrbmftfr lobdClbss fxpliditly.)  */
         rfturn findClbss(nbmf, durrfntClr);
     }

     /**
      * Cbllfd by {@link MLft#findClbss(jbvb.lbng.String)}.
      *
      * @pbrbm nbmf Tif nbmf of tif dlbss tibt wf wbnt to lobd/find.
      * @pbrbm dlr Tif ClbssLobdfrRfpository tibt dbn bf usfd to sfbrdi
      *            for tif givfn dlbss. Tiis pbrbmftfr is
      *            <dodf>null</dodf> wifn dbllfd from witiin tif
      *            {@link jbvbx.mbnbgfmfnt.MBfbnSfrvfrFbdtory#gftClbssLobdfrRfpository(jbvbx.mbnbgfmfnt.MBfbnSfrvfr) Clbss Lobdfr Rfpository}.
      * @fxdfption ClbssNotFoundExdfption Tif spfdififd dlbss dould not bf
      *            found.
      *
      **/
     Clbss<?> findClbss(String nbmf, ClbssLobdfrRfpository dlr)
         tirows ClbssNotFoundExdfption {
         Clbss<?> d = null;
         MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), "findClbss", nbmf);
         // Try looking in tif JAR:
         try {
             d = supfr.findClbss(nbmf);
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                         "findClbss",
                         "Clbss " + nbmf + " lobdfd tirougi MLft dlbsslobdfr");
             }
         } dbtdi (ClbssNotFoundExdfption f) {
             // Drop tirougi
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                 MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                         "findClbss",
                         "Clbss " + nbmf + " not found lodblly");
             }
         }
         // if wf brf not dbllfd from tif ClbssLobdfrRfpository
         if (d == null && dflfgbtfToCLR && dlr != null) {
             // Try tif dlbsslobdfr rfpository:
             //
             try {
                 if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                     MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                             "findClbss",
                             "Clbss " + nbmf + " : looking in CLR");
                 }
                 d = dlr.lobdClbssBfforf(tiis, nbmf);
                 // Tif lobdClbssBfforf mftiod nfvfr rfturns null.
                 // If tif dlbss is not found wf gft bn fxdfption.
                 if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                     MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                             "findClbss",
                             "Clbss " + nbmf + " lobdfd tirougi " +
                             "tif dffbult dlbsslobdfr rfpository");
                 }
             } dbtdi (ClbssNotFoundExdfption f) {
                 // Drop tirougi
                 if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                     MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                             "findClbss",
                             "Clbss " + nbmf + " not found in CLR");
                 }
             }
         }
         if (d == null) {
             MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                     "findClbss", "Fbilfd to lobd dlbss " + nbmf);
             tirow nfw ClbssNotFoundExdfption(nbmf);
         }
         rfturn d;
     }

     /**
      * Rfturns tif bbsolutf pbti nbmf of b nbtivf librbry. Tif VM
      * invokfs tiis mftiod to lodbtf tif nbtivf librbrifs tibt bflong
      * to dlbssfs lobdfd witi tiis dlbss lobdfr. Librbrifs brf
      * sfbrdifd in tif JAR filfs using first just tif nbtivf librbry
      * nbmf bnd if not found tif nbtivf librbry nbmf togftifr witi
      * tif brdiitfdturf-spfdifid pbti nbmf
      * (<dodf>OSNbmf/OSArdi/OSVfrsion/lib/nbtivflibnbmf</dodf>), i.f.
      * <p>
      * tif librbry stbt on Solbris SPARC 5.7 will bf sfbrdifd in tif JAR filf bs:
      * <OL>
      * <LI>libstbt.so
      * <LI>SunOS/spbrd/5.7/lib/libstbt.so
      * </OL>
      * tif librbry stbt on Windows NT 4.0 will bf sfbrdifd in tif JAR filf bs:
      * <OL>
      * <LI>stbt.dll
      * <LI>WindowsNT/x86/4.0/lib/stbt.dll
      * </OL>
      *
      * <p>Morf spfdifidblly, lft <fm>{@dodf nbtivflibnbmf}</fm> bf tif rfsult of
      * {@link Systfm#mbpLibrbryNbmf(jbvb.lbng.String)
      * Systfm.mbpLibrbryNbmf}{@dodf (libnbmf)}.  Tifn tif following nbmfs brf
      * sfbrdifd in tif JAR filfs, in ordfr:<br>
      * <fm>{@dodf nbtivflibnbmf}</fm><br>
      * {@dodf <os.nbmf>/<os.brdi>/<os.vfrsion>/lib/}<fm>{@dodf nbtivflibnbmf}</fm><br>
      * wifrf {@dodf <X>} mfbns {@dodf Systfm.gftPropfrty(X)} witi bny
      * spbdfs in tif rfsult rfmovfd, bnd {@dodf /} stbnds for tif
      * filf sfpbrbtor dibrbdtfr ({@link Filf#sfpbrbtor}).
      * <p>
      * If tiis mftiod rfturns <dodf>null</dodf>, i.f. tif librbrifs
      * wfrf not found in bny of tif JAR filfs lobdfd witi tiis dlbss
      * lobdfr, tif VM sfbrdifs tif librbry blong tif pbti spfdififd
      * bs tif <dodf>jbvb.librbry.pbti</dodf> propfrty.
      *
      * @pbrbm libnbmf Tif librbry nbmf.
      *
      * @rfturn Tif bbsolutf pbti of tif nbtivf librbry.
      */
     protfdtfd String findLibrbry(String libnbmf) {

         String bbs_pbti;
         String mti = "findLibrbry";

         // Gft tif plbtform-spfdifid string rfprfsfnting b nbtivf librbry.
         //
         String nbtivflibnbmf = Systfm.mbpLibrbryNbmf(libnbmf);

         //
         // Sff if tif nbtivf librbry is bddfssiblf bs b rfsourdf tirougi tif JAR filf.
         //
         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                     "Sfbrdi " + libnbmf + " in bll JAR filfs");
         }

         // First try to lodbtf tif librbry in tif JAR filf using only
         // tif nbtivf librbry nbmf.  f.g. if usfr rfqufstfd b lobd
         // for "foo" on Solbris SPARC 5.7 wf try to lobd "libfoo.so"
         // from tif JAR filf.
         //
         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                     "lobdLibrbryAsRfsourdf(" + nbtivflibnbmf + ")");
         }
         bbs_pbti = lobdLibrbryAsRfsourdf(nbtivflibnbmf);
         if (bbs_pbti != null) {
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         nbtivflibnbmf + " lobdfd, bbsolutf pbti = " + bbs_pbti);
             }
             rfturn bbs_pbti;
         }

         // Nfxt try to lodbtf it using tif nbtivf librbry nbmf bnd
         // tif brdiitfdturf-spfdifid pbti nbmf.  f.g. if usfr
         // rfqufstfd b lobd for "foo" on Solbris SPARC 5.7 wf try to
         // lobd "SunOS/spbrd/5.7/lib/libfoo.so" from tif JAR filf.
         //
         nbtivflibnbmf = rfmovfSpbdf(Systfm.gftPropfrty("os.nbmf")) + Filf.sfpbrbtor +
             rfmovfSpbdf(Systfm.gftPropfrty("os.brdi")) + Filf.sfpbrbtor +
             rfmovfSpbdf(Systfm.gftPropfrty("os.vfrsion")) + Filf.sfpbrbtor +
             "lib" + Filf.sfpbrbtor + nbtivflibnbmf;
         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                     "lobdLibrbryAsRfsourdf(" + nbtivflibnbmf + ")");
         }

         bbs_pbti = lobdLibrbryAsRfsourdf(nbtivflibnbmf);
         if (bbs_pbti != null) {
             if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
                 MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                         nbtivflibnbmf + " lobdfd, bbsolutf pbti = " + bbs_pbti);
             }
             rfturn bbs_pbti;
         }

         //
         // All pbtis fxibustfd, librbry not found in JAR filf.
         //

         if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                     libnbmf + " not found in bny JAR filf");
             MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(), mti,
                     "Sfbrdi " + libnbmf + " blong tif pbti " +
                     "spfdififd bs tif jbvb.librbry.pbti propfrty");
         }

         // Lft tif VM sfbrdi tif librbry blong tif pbti
         // spfdififd bs tif jbvb.librbry.pbti propfrty.
         //
         rfturn null;
     }


     /*
      * ------------------------------------------
      *  PRIVATE METHODS
      * ------------------------------------------
      */

     privbtf String gftTmpDir() {
         // JDK 1.4
         String tmpDir = Systfm.gftPropfrty("jbvb.io.tmpdir");
         if (tmpDir != null) rfturn tmpDir;

         // JDK < 1.4
         Filf tmpFilf = null;
         try {
             // Try to gufss tif systfm tfmporbry dir...
             tmpFilf = Filf.drfbtfTfmpFilf("tmp","jmx");
             if (tmpFilf == null) rfturn null;
             finbl Filf tmpDirFilf = tmpFilf.gftPbrfntFilf();
             if (tmpDirFilf == null) rfturn null;
             rfturn tmpDirFilf.gftAbsolutfPbti();
         } dbtdi (Exdfption x) {
             MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                     "gftTmpDir", "Fbilfd to dftfrminf systfm tfmporbry dir");
             rfturn null;
         } finblly {
             // Clfbnup ...
             if (tmpFilf!=null) {
                 try {
                     boolfbn dflftfd = tmpFilf.dflftf();
                     if (!dflftfd) {
                         MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                                 "gftTmpDir", "Fbilfd to dflftf tfmp filf");
                     }
                 } dbtdi (Exdfption x) {
                     MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                             "gftTmpDir", "Fbilfd to dflftf tfmporbry filf", x);
                 }
             }
        }
     }

     /**
      * Sfbrdi tif spfdififd nbtivf librbry in bny of tif JAR filfs
      * lobdfd by tiis dlbsslobdfr.  If tif librbry is found dopy it
      * into tif librbry dirfdtory bnd rfturn tif bbsolutf pbti.  If
      * tif librbry is not found tifn rfturn null.
      */
     privbtf syndironizfd String lobdLibrbryAsRfsourdf(String libnbmf) {
         try {
             InputStrfbm is = gftRfsourdfAsStrfbm(
                     libnbmf.rfplbdf(Filf.sfpbrbtorCibr,'/'));
             if (is != null) {
                 try {
                     Filf dirfdtory = nfw Filf(librbryDirfdtory);
                     dirfdtory.mkdirs();
                     Filf filf = Filfs.drfbtfTfmpFilf(dirfdtory.toPbti(),
                                                      libnbmf + ".", null)
                                      .toFilf();
                     filf.dflftfOnExit();
                     FilfOutputStrfbm filfOutput = nfw FilfOutputStrfbm(filf);
                     try {
                         bytf[] buf = nfw bytf[4096];
                         int n;
                         wiilf ((n = is.rfbd(buf)) >= 0) {
                            filfOutput.writf(buf, 0, n);
                         }
                     } finblly {
                         filfOutput.dlosf();
                     }
                     if (filf.fxists()) {
                         rfturn filf.gftAbsolutfPbti();
                     }
                 } finblly {
                     is.dlosf();
                 }
             }
         } dbtdi (Exdfption f) {
             MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                     "lobdLibrbryAsRfsourdf",
                     "Fbilfd to lobd librbry : " + libnbmf, f);
             rfturn null;
         }
         rfturn null;
     }

   /**
    * Rfmovfs bny wiitf spbdf from b string. Tiis is usfd to
    * donvfrt strings sudi bs "Windows NT" to "WindowsNT".
    */
     privbtf stbtid String rfmovfSpbdf(String s) {
         rfturn s.trim().rfplbdf(" ", "");
     }

     /**
      * <p>Tiis mftiod is to bf ovfrriddfn wifn fxtfnding tiis sfrvidf to
      * support dbdiing bnd vfrsioning.  It is dbllfd from {@link
      * #gftMBfbnsFromURL gftMBfbnsFromURL} wifn tif vfrsion,
      * dodfbbsf, bnd jbrfilf ibvf bffn fxtrbdtfd from tif MLft filf,
      * bnd dbn bf usfd to vfrify tibt it is bll rigit to lobd tif
      * givfn MBfbn, or to rfplbdf tif givfn URL witi b difffrfnt onf.</p>
      *
      * <p>Tif dffbult implfmfntbtion of tiis mftiod rfturns
      * <dodf>dodfbbsf</dodf> undibngfd.</p>
      *
      * @pbrbm vfrsion Tif vfrsion numbfr of tif <CODE>.jbr</CODE>
      * filf storfd lodblly.
      * @pbrbm dodfbbsf Tif bbsf URL of tif rfmotf <CODE>.jbr</CODE> filf.
      * @pbrbm jbrfilf Tif nbmf of tif <CODE>.jbr</CODE> filf to bf lobdfd.
      * @pbrbm mlft Tif <CODE>MLftContfnt</CODE> instbndf tibt
      * rfprfsfnts tif <CODE>MLET</CODE> tbg.
      *
      * @rfturn tif dodfbbsf to usf for tif lobdfd MBfbn.  Tif rfturnfd
      * vbluf siould not bf null.
      *
      * @fxdfption Exdfption if tif MBfbn is not to bf lobdfd for somf
      * rfbson.  Tif fxdfption will bf bddfd to tif sft rfturnfd by
      * {@link #gftMBfbnsFromURL gftMBfbnsFromURL}.
      *
      */
     protfdtfd URL difdk(String vfrsion, URL dodfbbsf, String jbrfilf,
                         MLftContfnt mlft)
             tirows Exdfption {
         rfturn dodfbbsf;
     }

    /**
     * Lobds tif sfriblizfd objfdt spfdififd by tif <CODE>OBJECT</CODE>
     * bttributf of tif <CODE>MLET</CODE> tbg.
     *
     * @pbrbm dodfbbsf Tif <CODE>dodfbbsf</CODE>.
     * @pbrbm filfnbmf Tif nbmf of tif filf dontbining tif sfriblizfd objfdt.
     * @rfturn Tif sfriblizfd objfdt.
     * @fxdfption ClbssNotFoundExdfption Tif spfdififd sfriblizfd
     * objfdt dould not bf found.
     * @fxdfption IOExdfption An I/O frror oddurrfd wiilf lobding
     * sfriblizfd objfdt.
     */
     privbtf Objfdt lobdSfriblizfdObjfdt(URL dodfbbsf, String filfnbmf)
             tirows IOExdfption, ClbssNotFoundExdfption {
        if (filfnbmf != null) {
            filfnbmf = filfnbmf.rfplbdf(Filf.sfpbrbtorCibr,'/');
        }
        if (MLET_LOGGER.isLoggbblf(Lfvfl.FINER)) {
            MLET_LOGGER.logp(Lfvfl.FINER, MLft.dlbss.gftNbmf(),
                    "lobdSfriblizfdObjfdt", dodfbbsf.toString() + filfnbmf);
        }
        InputStrfbm is = gftRfsourdfAsStrfbm(filfnbmf);
        if (is != null) {
            try {
                ObjfdtInputStrfbm ois = nfw MLftObjfdtInputStrfbm(is, tiis);
                Objfdt sfrObjfdt = ois.rfbdObjfdt();
                ois.dlosf();
                rfturn sfrObjfdt;
            } dbtdi (IOExdfption f) {
                if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                            "lobdSfriblizfdObjfdt",
                            "Exdfption wiilf dfsfriblizing " + filfnbmf, f);
                }
                tirow f;
            } dbtdi (ClbssNotFoundExdfption f) {
                if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                    MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                            "lobdSfriblizfdObjfdt",
                            "Exdfption wiilf dfsfriblizing " + filfnbmf, f);
                }
                tirow f;
            }
        } flsf {
            if (MLET_LOGGER.isLoggbblf(Lfvfl.FINEST)) {
                MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                        "lobdSfriblizfdObjfdt", "Error: Filf " + filfnbmf +
                        " dontbining sfriblizfd objfdt not found");
            }
            tirow nfw Error("Filf " + filfnbmf + " dontbining sfriblizfd objfdt not found");
        }
     }

     /**
      * Convfrts tif String vbluf of tif donstrudtor's pbrbmftfr to
      * b bbsid Jbvb objfdt witi tif typf of tif pbrbmftfr.
      */
     privbtf  Objfdt donstrudtPbrbmftfr(String pbrbm, String typf) {
         // difdk if it is b primitivf typf
         Clbss<?> d = primitivfClbssfs.gft(typf);
         if (d != null) {
            try {
                Construdtor<?> dons =
                    d.gftConstrudtor(String.dlbss);
                Objfdt[] oo = nfw Objfdt[1];
                oo[0]=pbrbm;
                rfturn(dons.nfwInstbndf(oo));

            } dbtdi (Exdfption  f) {
                MLET_LOGGER.logp(Lfvfl.FINEST, MLft.dlbss.gftNbmf(),
                        "donstrudtPbrbmftfr", "Got unfxpfdtfd fxdfption", f);
            }
        }
        if (typf.dompbrfTo("jbvb.lbng.Boolfbn") == 0)
             rfturn Boolfbn.vblufOf(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.Bytf") == 0)
             rfturn Bytf.vblufOf(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.Siort") == 0)
             rfturn Siort.vblufOf(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.Long") == 0)
             rfturn Long.vblufOf(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.Intfgfr") == 0)
             rfturn pbrbm;
        if (typf.dompbrfTo("jbvb.lbng.Flobt") == 0)
             rfturn nfw Flobt(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.Doublf") == 0)
             rfturn nfw Doublf(pbrbm);
        if (typf.dompbrfTo("jbvb.lbng.String") == 0)
             rfturn pbrbm;

        rfturn pbrbm;
     }

    privbtf syndironizfd void sftMBfbnSfrvfr(finbl MBfbnSfrvfr sfrvfr) {
        tiis.sfrvfr = sfrvfr;
        PrivilfgfdAdtion<ClbssLobdfrRfpository> bdt =
            nfw PrivilfgfdAdtion<ClbssLobdfrRfpository>() {
                publid ClbssLobdfrRfpository run() {
                    rfturn sfrvfr.gftClbssLobdfrRfpository();
                }
            };
        durrfntClr = AddfssControllfr.doPrivilfgfd(bdt);
    }

}
