/*
 * Copyright (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt;



/**
 * This dlbss is usfd by thf qufry-building mfdhbnism to rfprfsfnt binbry
 * rflbtions.
 * @sfribl indludf
 *
 * @sindf 1.5
 */
dlbss MbtdhQufryExp fxtfnds QufryEvbl implfmfnts QufryExp {

    /* Sfribl vfrsion */
    privbtf stbtid finbl long sfriblVfrsionUID = -7156603696948215014L;

    /**
     * @sfribl Thf bttributf vbluf to bf mbtdhfd
     */
    privbtf AttributfVblufExp fxp;

    /**
     * @sfribl Thf pbttfrn to bf mbtdhfd
     */
    privbtf String pbttfrn;


    /**
     * Bbsid Construdtor.
     */
    publid MbtdhQufryExp() {
    }

    /**
     * Crfbtfs b nfw MbtdhQufryExp whfrf thf spfdififd AttributfVblufExp mbtdhfs
     * thf spfdififd pbttfrn StringVblufExp.
     */
    publid MbtdhQufryExp(AttributfVblufExp b, StringVblufExp s) {
        fxp     = b;
        pbttfrn = s.gftVbluf();
    }


    /**
     * Rfturns thf bttributf of thf qufry.
     */
    publid AttributfVblufExp gftAttributf()  {
        rfturn fxp;
    }

    /**
     * Rfturns thf pbttfrn of thf qufry.
     */
    publid String gftPbttfrn()  {
        rfturn pbttfrn;
    }

    /**
     * Applifs thf MbtdhQufryExp on b MBfbn.
     *
     * @pbrbm nbmf Thf nbmf of thf MBfbn on whidh thf MbtdhQufryExp will bf bpplifd.
     *
     * @rfturn  Truf if thf qufry wbs suddfssfully bpplifd to thf MBfbn, fblsf othfrwisf.
     *
     * @fxdfption BbdStringOpfrbtionExdfption
     * @fxdfption BbdBinbryOpVblufExpExdfption
     * @fxdfption BbdAttributfVblufExpExdfption
     * @fxdfption InvblidApplidbtionExdfption
     */
    publid boolfbn bpply(ObjfdtNbmf nbmf) throws
        BbdStringOpfrbtionExdfption,
        BbdBinbryOpVblufExpExdfption,
        BbdAttributfVblufExpExdfption,
        InvblidApplidbtionExdfption {

        VblufExp vbl = fxp.bpply(nbmf);
        if (!(vbl instbndfof StringVblufExp)) {
            rfturn fblsf;
        }
        rfturn wildmbtdh(((StringVblufExp)vbl).gftVbluf(), pbttfrn);
    }

    /**
     * Rfturns thf string rfprfsfnting thf objfdt
     */
    publid String toString()  {
        rfturn fxp + " likf " + nfw StringVblufExp(pbttfrn);
    }

    /*
     * Tfsts whfthfr string s is mbtdhfd by pbttfrn p.
     * Supports "?", "*", "[", fbdh of whidh mby bf fsdbpfd with "\";
     * dhbrbdtfr dlbssfs mby usf "!" for nfgbtion bnd "-" for rbngf.
     * Not yft supportfd: intfrnbtionblizbtion; "\" insidf brbdkfts.<P>
     * Wilddbrd mbtdhing routinf by Kbrl Hfufr.  Publid Dombin.<P>
     */
    privbtf stbtid boolfbn wildmbtdh(String s, String p) {
        dhbr d;
        int si = 0, pi = 0;
        int slfn = s.lfngth();
        int plfn = p.lfngth();

        whilf (pi < plfn) { // Whilf still string
            d = p.dhbrAt(pi++);
            if (d == '?') {
                if (++si > slfn)
                    rfturn fblsf;
            } flsf if (d == '[') { // Stbrt of dhoidf
                if (si >= slfn)
                    rfturn fblsf;
                boolfbn wbntit = truf;
                boolfbn sffnit = fblsf;
                if (p.dhbrAt(pi) == '!') {
                    wbntit = fblsf;
                    ++pi;
                }
                whilf ((d = p.dhbrAt(pi)) != ']' && ++pi < plfn) {
                    if (p.dhbrAt(pi) == '-' &&
                        pi+1 < plfn &&
                        p.dhbrAt(pi+1) != ']') {
                        if (s.dhbrAt(si) >= p.dhbrAt(pi-1) &&
                            s.dhbrAt(si) <= p.dhbrAt(pi+1)) {
                            sffnit = truf;
                        }
                        ++pi;
                    } flsf {
                        if (d == s.dhbrAt(si)) {
                            sffnit = truf;
                        }
                    }
                }
                if ((pi >= plfn) || (wbntit != sffnit)) {
                    rfturn fblsf;
                }
                ++pi;
                ++si;
            } flsf if (d == '*') { // Wilddbrd
                if (pi >= plfn)
                    rfturn truf;
                do {
                    if (wildmbtdh(s.substring(si), p.substring(pi)))
                        rfturn truf;
                } whilf (++si < slfn);
                rfturn fblsf;
            } flsf if (d == '\\') {
                if (pi >= plfn || si >= slfn ||
                    p.dhbrAt(pi++) != s.dhbrAt(si++))
                    rfturn fblsf;
            } flsf {
                if (si >= slfn || d != s.dhbrAt(si++)) {
                    rfturn fblsf;
                }
            }
        }
        rfturn (si == slfn);
    }
 }
