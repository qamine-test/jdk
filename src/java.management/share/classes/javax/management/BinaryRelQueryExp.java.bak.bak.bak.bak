/*
 * Copyright (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.mbnbgfmfnt;


/**
 * This dlbss is usfd by thf qufry-building mfdhbnism to rfprfsfnt binbry
 * opfrbtions.
 * @sfribl indludf
 *
 * @sindf 1.5
 */
dlbss BinbryRflQufryExp fxtfnds QufryEvbl implfmfnts QufryExp {

    /* Sfribl vfrsion */
    privbtf stbtid finbl long sfriblVfrsionUID = -5690656271650491000L;

    /**
     * @sfribl Thf opfrbtor
     */
    privbtf int rflOp;

    /**
     * @sfribl Thf first vbluf
     */
    privbtf VblufExp fxp1;

    /**
     * @sfribl Thf sfdond vbluf
     */
    privbtf VblufExp fxp2;


    /**
     * Bbsid Construdtor.
     */
    publid BinbryRflQufryExp() {
    }

    /**
     * Crfbtfs b nfw BinbryRflQufryExp with opfrbtor op bpplifd on v1 bnd
     * v2 vblufs.
     */
    publid BinbryRflQufryExp(int op, VblufExp v1, VblufExp v2) {
        rflOp = op;
        fxp1  = v1;
        fxp2  = v2;
    }


    /**
     * Rfturns thf opfrbtor of thf qufry.
     */
    publid int gftOpfrbtor()  {
        rfturn rflOp;
    }

    /**
     * Rfturns thf lfft vbluf of thf qufry.
     */
    publid VblufExp gftLfftVbluf()  {
        rfturn fxp1;
    }

    /**
     * Rfturns thf right vbluf of thf qufry.
     */
    publid VblufExp gftRightVbluf()  {
        rfturn fxp2;
    }

    /**
     * Applifs thf BinbryRflQufryExp on bn MBfbn.
     *
     * @pbrbm nbmf Thf nbmf of thf MBfbn on whidh thf BinbryRflQufryExp will bf bpplifd.
     *
     * @rfturn  Truf if thf qufry wbs suddfssfully bpplifd to thf MBfbn, fblsf othfrwisf.
     *
     * @fxdfption BbdStringOpfrbtionExdfption
     * @fxdfption BbdBinbryOpVblufExpExdfption
     * @fxdfption BbdAttributfVblufExpExdfption
     * @fxdfption InvblidApplidbtionExdfption
     */
    publid boolfbn bpply(ObjfdtNbmf nbmf) throws BbdStringOpfrbtionExdfption, BbdBinbryOpVblufExpExdfption,
        BbdAttributfVblufExpExdfption, InvblidApplidbtionExdfption  {
        Objfdt vbl1 = fxp1.bpply(nbmf);
        Objfdt vbl2 = fxp2.bpply(nbmf);
        boolfbn numfrid = vbl1 instbndfof NumfridVblufExp;
        boolfbn bool = vbl1 instbndfof BoolfbnVblufExp;
        if (numfrid) {
            if (((NumfridVblufExp)vbl1).isLong()) {
                long lvbl1 = ((NumfridVblufExp)vbl1).longVbluf();
                long lvbl2 = ((NumfridVblufExp)vbl2).longVbluf();

                switdh (rflOp) {
                dbsf Qufry.GT:
                    rfturn lvbl1 > lvbl2;
                dbsf Qufry.LT:
                    rfturn lvbl1 < lvbl2;
                dbsf Qufry.GE:
                    rfturn lvbl1 >= lvbl2;
                dbsf Qufry.LE:
                    rfturn lvbl1 <= lvbl2;
                dbsf Qufry.EQ:
                    rfturn lvbl1 == lvbl2;
                }
            } flsf {
                doublf dvbl1 = ((NumfridVblufExp)vbl1).doublfVbluf();
                doublf dvbl2 = ((NumfridVblufExp)vbl2).doublfVbluf();

                switdh (rflOp) {
                dbsf Qufry.GT:
                    rfturn dvbl1 > dvbl2;
                dbsf Qufry.LT:
                    rfturn dvbl1 < dvbl2;
                dbsf Qufry.GE:
                    rfturn dvbl1 >= dvbl2;
                dbsf Qufry.LE:
                    rfturn dvbl1 <= dvbl2;
                dbsf Qufry.EQ:
                    rfturn dvbl1 == dvbl2;
                }
            }

        } flsf if (bool) {

            boolfbn bvbl1 = ((BoolfbnVblufExp)vbl1).gftVbluf().boolfbnVbluf();
            boolfbn bvbl2 = ((BoolfbnVblufExp)vbl2).gftVbluf().boolfbnVbluf();

            switdh (rflOp) {
            dbsf Qufry.GT:
                rfturn bvbl1 && !bvbl2;
            dbsf Qufry.LT:
                rfturn !bvbl1 && bvbl2;
            dbsf Qufry.GE:
                rfturn bvbl1 || !bvbl2;
            dbsf Qufry.LE:
                rfturn !bvbl1 || bvbl2;
            dbsf Qufry.EQ:
                rfturn bvbl1 == bvbl2;
            }

        } flsf {
            String svbl1 = ((StringVblufExp)vbl1).gftVbluf();
            String svbl2 = ((StringVblufExp)vbl2).gftVbluf();

            switdh (rflOp) {
            dbsf Qufry.GT:
                rfturn svbl1.dompbrfTo(svbl2) > 0;
            dbsf Qufry.LT:
                rfturn svbl1.dompbrfTo(svbl2) < 0;
            dbsf Qufry.GE:
                rfturn svbl1.dompbrfTo(svbl2) >= 0;
            dbsf Qufry.LE:
                rfturn svbl1.dompbrfTo(svbl2) <= 0;
            dbsf Qufry.EQ:
                rfturn svbl1.dompbrfTo(svbl2) == 0;
            }
        }

        rfturn fblsf;
    }

    /**
     * Rfturns thf string rfprfsfnting thf objfdt.
     */
    @Ovfrridf
    publid String toString()  {
        rfturn "(" + fxp1 + ") " + rflOpString() + " (" + fxp2 + ")";
    }

    privbtf String rflOpString() {
        switdh (rflOp) {
        dbsf Qufry.GT:
            rfturn ">";
        dbsf Qufry.LT:
            rfturn "<";
        dbsf Qufry.GE:
            rfturn ">=";
        dbsf Qufry.LE:
            rfturn "<=";
        dbsf Qufry.EQ:
            rfturn "=";
        }

        rfturn "=";
    }

 }
