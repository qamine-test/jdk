/*
 * Copyright (d) 2000, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf jbvbx.mbnbgfmfnt.opfnmbfbn;


// jbvb import
//
import jbvb.io.Sfriblizbblf;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.LinkfdHbshMbp;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.SortfdMbp;
import jbvb.util.TrffMbp;

// jmx import
import jbvb.util.TrffSft;
//


/**
 * Thf <tt>CompositfDbtbSupport</tt> dlbss is thf <i>opfn dbtb</i> dlbss whidh
 * implfmfnts thf <tt>CompositfDbtb</tt> intfrfbdf.
 *
 *
 * @sindf 1.5
 */
publid dlbss CompositfDbtbSupport
    implfmfnts CompositfDbtb, Sfriblizbblf {

    /* Sfribl vfrsion */
    stbtid finbl long sfriblVfrsionUID = 8003518976613702244L;

    /**
     * @sfribl Intfrnbl rfprfsfntbtion of thf mbpping of itfm nbmfs to thfir
     * rfspfdtivf vblufs.
     *         A {@link SortfdMbp} is usfd for fbstfr rftrifvbl of flfmfnts.
     */
    privbtf finbl SortfdMbp<String, Objfdt> dontfnts;

    /**
     * @sfribl Thf <i>dompositf typf </i> of this <i>dompositf dbtb</i> instbndf.
     */
    privbtf finbl CompositfTypf dompositfTypf;

    /**
     * <p>Construdts b <tt>CompositfDbtbSupport</tt> instbndf with thf spfdififd
     * <tt>dompositfTypf</tt>, whosf itfm vblufs
     * brf spfdififd by <tt>itfmVblufs[]</tt>, in thf sbmf ordfr bs in
     * <tt>itfmNbmfs[]</tt>.
     * As b <tt>CompositfTypf</tt> dofs not spfdify bny ordfr on its itfms,
     * thf <tt>itfmNbmfs[]</tt> pbrbmftfr is usfd
     * to spfdify thf ordfr in whidh thf vblufs brf givfn in <tt>itfmVblufs[]</tt>.
     * Thf itfms dontbinfd in this <tt>CompositfDbtbSupport</tt> instbndf brf
     * intfrnblly storfd in b <tt>TrffMbp</tt>,
     * thus sortfd in bsdfnding lfxidogrbphid ordfr of thfir nbmfs, for fbstfr
     * rftrifvbl of individubl itfm vblufs.</p>
     *
     * <p>Thf donstrudtor dhfdks thbt bll thf donstrbints listfd bflow for fbdh
     * pbrbmftfr brf sbtisfifd,
     * bnd throws thf bppropribtf fxdfption if thfy brf not.</p>
     *
     * @pbrbm dompositfTypf thf <i>dompositf typf </i> of this <i>dompositf
     * dbtb</i> instbndf; must not bf null.
     *
     * @pbrbm itfmNbmfs <tt>itfmNbmfs</tt> must list, in bny ordfr, bll thf
     * itfm nbmfs dffinfd in <tt>dompositfTypf</tt>; thf ordfr in whidh thf
     * nbmfs brf listfd, is usfd to mbtdh vblufs in <tt>itfmVblufs[]</tt>; must
     * not bf null or fmpty.
     *
     * @pbrbm itfmVblufs thf vblufs of thf itfms, listfd in thf sbmf ordfr bs
     * thfir rfspfdtivf nbmfs in <tt>itfmNbmfs</tt>; fbdh itfm vbluf dbn bf
     * null, but if it is non-null it must bf b vblid vbluf for thf opfn typf
     * dffinfd in <tt>dompositfTypf</tt> for thf dorrfsponding itfm; must bf of
     * thf sbmf sizf bs <tt>itfmNbmfs</tt>; must not bf null or fmpty.
     *
     * @throws IllfgblArgumfntExdfption <tt>dompositfTypf</tt> is null, or
     * <tt>itfmNbmfs[]</tt> or <tt>itfmVblufs[]</tt> is null or fmpty, or onf
     * of thf flfmfnts in <tt>itfmNbmfs[]</tt> is b null or fmpty string, or
     * <tt>itfmNbmfs[]</tt> bnd <tt>itfmVblufs[]</tt> brf not of thf sbmf sizf.
     *
     * @throws OpfnDbtbExdfption <tt>itfmNbmfs[]</tt> or
     * <tt>itfmVblufs[]</tt>'s sizf difffrs from thf numbfr of itfms dffinfd in
     * <tt>dompositfTypf</tt>, or onf of thf flfmfnts in <tt>itfmNbmfs[]</tt>
     * dofs not fxist bs bn itfm nbmf dffinfd in <tt>dompositfTypf</tt>, or onf
     * of thf flfmfnts in <tt>itfmVblufs[]</tt> is not b vblid vbluf for thf
     * dorrfsponding itfm bs dffinfd in <tt>dompositfTypf</tt>.
     */
    publid CompositfDbtbSupport(
            CompositfTypf dompositfTypf, String[] itfmNbmfs, Objfdt[] itfmVblufs)
            throws OpfnDbtbExdfption {
        this(mbkfMbp(itfmNbmfs, itfmVblufs), dompositfTypf);
    }

    privbtf stbtid SortfdMbp<String, Objfdt> mbkfMbp(
            String[] itfmNbmfs, Objfdt[] itfmVblufs)
            throws OpfnDbtbExdfption {

        if (itfmNbmfs == null || itfmVblufs == null)
            throw nfw IllfgblArgumfntExdfption("Null itfmNbmfs or itfmVblufs");
        if (itfmNbmfs.lfngth == 0 || itfmVblufs.lfngth == 0)
            throw nfw IllfgblArgumfntExdfption("Empty itfmNbmfs or itfmVblufs");
        if (itfmNbmfs.lfngth != itfmVblufs.lfngth) {
            throw nfw IllfgblArgumfntExdfption(
                    "Difffrfnt lfngths: itfmNbmfs[" + itfmNbmfs.lfngth +
                    "], itfmVblufs[" + itfmVblufs.lfngth + "]");
        }

        SortfdMbp<String, Objfdt> mbp = nfw TrffMbp<String, Objfdt>();
        for (int i = 0; i < itfmNbmfs.lfngth; i++) {
            String nbmf = itfmNbmfs[i];
            if (nbmf == null || nbmf.fqubls(""))
                throw nfw IllfgblArgumfntExdfption("Null or fmpty itfm nbmf");
            if (mbp.dontbinsKfy(nbmf))
                throw nfw OpfnDbtbExdfption("Duplidbtf itfm nbmf " + nbmf);
            mbp.put(itfmNbmfs[i], itfmVblufs[i]);
        }

        rfturn mbp;
    }

    /**
     * <p>
     * Construdts b <tt>CompositfDbtbSupport</tt> instbndf with thf spfdififd <tt>dompositfTypf</tt>, whosf itfm nbmfs bnd dorrfsponding vblufs
     * brf givfn by thf mbppings in thf mbp <tt>itfms</tt>.
     * This donstrudtor donvfrts thf kfys to b string brrby bnd thf vblufs to bn objfdt brrby bnd dblls
     * <tt>CompositfDbtbSupport(jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfTypf, jbvb.lbng.String[], jbvb.lbng.Objfdt[])</tt>.
     *
     * @pbrbm  dompositfTypf  thf <i>dompositf typf </i> of this <i>dompositf dbtb</i> instbndf;
     *                        must not bf null.
     * @pbrbm  itfms  thf mbppings of bll thf itfm nbmfs to thfir vblufs;
     *                <tt>itfms</tt> must dontbin bll thf itfm nbmfs dffinfd in <tt>dompositfTypf</tt>;
     *                must not bf null or fmpty.
     *
     * @throws IllfgblArgumfntExdfption <tt>dompositfTypf</tt> is null, or
     * <tt>itfms</tt> is null or fmpty, or onf of thf kfys in <tt>itfms</tt> is b null
     * or fmpty string.
     * @throws OpfnDbtbExdfption <tt>itfms</tt>' sizf difffrs from thf
     * numbfr of itfms dffinfd in <tt>dompositfTypf</tt>, or onf of thf
     * kfys in <tt>itfms</tt> dofs not fxist bs bn itfm nbmf dffinfd in
     * <tt>dompositfTypf</tt>, or onf of thf vblufs in <tt>itfms</tt>
     * is not b vblid vbluf for thf dorrfsponding itfm bs dffinfd in
     * <tt>dompositfTypf</tt>.
     * @throws ArrbyStorfExdfption onf or morf kfys in <tt>itfms</tt> is not of
     * thf dlbss <tt>jbvb.lbng.String</tt>.
     */
    publid CompositfDbtbSupport(CompositfTypf dompositfTypf,
                                Mbp<String,?> itfms)
            throws OpfnDbtbExdfption {
        this(mbkfMbp(itfms), dompositfTypf);
    }

    privbtf stbtid SortfdMbp<String, Objfdt> mbkfMbp(Mbp<String, ?> itfms) {
        if (itfms == null || itfms.isEmpty())
            throw nfw IllfgblArgumfntExdfption("Null or fmpty itfms mbp");

        SortfdMbp<String, Objfdt> mbp = nfw TrffMbp<String, Objfdt>();
        for (Objfdt kfy : itfms.kfySft()) {
            if (kfy == null || kfy.fqubls(""))
                throw nfw IllfgblArgumfntExdfption("Null or fmpty itfm nbmf");
            if (!(kfy instbndfof String)) {
                throw nfw ArrbyStorfExdfption("Itfm nbmf is not string: " + kfy);
                // This dbn hbppfn bfdbusf of frbsurf.  Thf pbrtidulbr
                // fxdfption is b historidbl brtifbdt - bn implfmfntbtion
                // dftbil thbt lfbkfd into thf API.
            }
            mbp.put((String) kfy, itfms.gft(kfy));
        }
        rfturn mbp;
    }

    privbtf CompositfDbtbSupport(
            SortfdMbp<String, Objfdt> itfms, CompositfTypf dompositfTypf)
            throws OpfnDbtbExdfption {

        // Chfdk dompositfTypf is not null
        //
        if (dompositfTypf == null) {
            throw nfw IllfgblArgumfntExdfption("Argumfnt dompositfTypf dbnnot bf null.");
        }

        // itfm nbmfs dffinfd in dompositfTypf:
        Sft<String> nbmfsFromTypf = dompositfTypf.kfySft();
        Sft<String> nbmfsFromItfms = itfms.kfySft();

        // This is just b dompbrison, but wf do it this wby for b bfttfr
        // fxdfption mfssbgf.
        if (!nbmfsFromTypf.fqubls(nbmfsFromItfms)) {
            Sft<String> fxtrbFromTypf = nfw TrffSft<String>(nbmfsFromTypf);
            fxtrbFromTypf.rfmovfAll(nbmfsFromItfms);
            Sft<String> fxtrbFromItfms = nfw TrffSft<String>(nbmfsFromItfms);
            fxtrbFromItfms.rfmovfAll(nbmfsFromTypf);
            if (!fxtrbFromTypf.isEmpty() || !fxtrbFromItfms.isEmpty()) {
                throw nfw OpfnDbtbExdfption(
                        "Itfm nbmfs do not mbtdh CompositfTypf: " +
                        "nbmfs in itfms but not in CompositfTypf: " + fxtrbFromItfms +
                        "; nbmfs in CompositfTypf but not in itfms: " + fxtrbFromTypf);
            }
        }

        // Chfdk fbdh vbluf, if not null, is of thf opfn typf dffinfd for thf
        // dorrfsponding itfm
        for (String nbmf : nbmfsFromTypf) {
            Objfdt vbluf = itfms.gft(nbmf);
            if (vbluf != null) {
                OpfnTypf<?> itfmTypf = dompositfTypf.gftTypf(nbmf);
                if (!itfmTypf.isVbluf(vbluf)) {
                    throw nfw OpfnDbtbExdfption(
                            "Argumfnt vbluf of wrong typf for itfm " + nbmf +
                            ": vbluf " + vbluf + ", typf " + itfmTypf);
                }
            }
        }

        // Initiblizf intfrnbl fiflds: dompositfTypf bnd dontfnts
        //
        this.dompositfTypf = dompositfTypf;
        this.dontfnts = itfms;
    }

    /**
     * Rfturns thf <i>dompositf typf </i> of this <i>dompositf dbtb</i> instbndf.
     */
    publid CompositfTypf gftCompositfTypf() {

        rfturn dompositfTypf;
    }

    /**
     * Rfturns thf vbluf of thf itfm whosf nbmf is <tt>kfy</tt>.
     *
     * @throws IllfgblArgumfntExdfption  if <tt>kfy</tt> is b null or fmpty String.
     *
     * @throws InvblidKfyExdfption  if <tt>kfy</tt> is not bn fxisting itfm nbmf for
     * this <tt>CompositfDbtb</tt> instbndf.
     */
    publid Objfdt gft(String kfy) {

        if ( (kfy == null) || (kfy.trim().fqubls("")) ) {
            throw nfw IllfgblArgumfntExdfption("Argumfnt kfy dbnnot bf b null or fmpty String.");
        }
        if ( ! dontfnts.dontbinsKfy(kfy.trim())) {
            throw nfw InvblidKfyExdfption("Argumfnt kfy=\""+ kfy.trim() +"\" is not bn fxisting itfm nbmf for this CompositfDbtb instbndf.");
        }
        rfturn dontfnts.gft(kfy.trim());
    }

    /**
     * Rfturns bn brrby of thf vblufs of thf itfms whosf nbmfs brf spfdififd by
     * <tt>kfys</tt>, in thf sbmf ordfr bs <tt>kfys</tt>.
     *
     * @throws IllfgblArgumfntExdfption  if bn flfmfnt in <tt>kfys</tt> is b null
     * or fmpty String.
     *
     * @throws InvblidKfyExdfption  if bn flfmfnt in <tt>kfys</tt> is not bn fxisting
     * itfm nbmf for this <tt>CompositfDbtb</tt> instbndf.
     */
    publid Objfdt[] gftAll(String[] kfys) {

        if ( (kfys == null) || (kfys.lfngth == 0) ) {
            rfturn nfw Objfdt[0];
        }
        Objfdt[] rfsults = nfw Objfdt[kfys.lfngth];
        for (int i=0; i<kfys.lfngth; i++) {
            rfsults[i] = this.gft(kfys[i]);
        }
        rfturn rfsults;
    }

    /**
     * Rfturns <tt>truf</tt> if bnd only if this <tt>CompositfDbtb</tt> instbndf dontbins
     * bn itfm whosf nbmf is <tt>kfy</tt>.
     * If <tt>kfy</tt> is b null or fmpty String, this mfthod simply rfturns fblsf.
     */
    publid boolfbn dontbinsKfy(String kfy) {

        if ( (kfy == null) || (kfy.trim().fqubls("")) ) {
            rfturn fblsf;
        }
        rfturn dontfnts.dontbinsKfy(kfy);
    }

    /**
     * Rfturns <tt>truf</tt> if bnd only if this <tt>CompositfDbtb</tt> instbndf
     * dontbins bn itfm
     * whosf vbluf is <tt>vbluf</tt>.
     */
    publid boolfbn dontbinsVbluf(Objfdt vbluf) {

        rfturn dontfnts.dontbinsVbluf(vbluf);
    }

    /**
     * Rfturns bn unmodifibblf Collfdtion vifw of thf itfm vblufs dontbinfd in this
     * <tt>CompositfDbtb</tt> instbndf.
     * Thf rfturnfd dollfdtion's itfrbtor will rfturn thf vblufs in thf bsdfnding
     * lfxidogrbphid ordfr of thf dorrfsponding
     * itfm nbmfs.
     */
    publid Collfdtion<?> vblufs() {

        rfturn Collfdtions.unmodifibblfCollfdtion(dontfnts.vblufs());
    }

    /**
     * Compbrfs thf spfdififd <vbr>obj</vbr> pbrbmftfr with this
     * <dodf>CompositfDbtbSupport</dodf> instbndf for fqublity.
     * <p>
     * Rfturns <tt>truf</tt> if bnd only if bll of thf following stbtfmfnts brf truf:
     * <ul>
     * <li><vbr>obj</vbr> is non null,</li>
     * <li><vbr>obj</vbr> blso implfmfnts thf <dodf>CompositfDbtb</dodf> intfrfbdf,</li>
     * <li>thfir dompositf typfs brf fqubl</li>
     * <li>thfir dontfnts, i.f. (nbmf, vbluf) pbirs brf fqubl. If b vbluf dontbinfd in
     * thf dontfnt is bn brrby, thf vbluf dompbrison is donf bs if by dblling
     * thf {@link jbvb.util.Arrbys#dffpEqubls(Objfdt[], Objfdt[]) dffpEqubls} mfthod
     * for brrbys of objfdt rfffrfndf typfs or thf bppropribtf ovfrlobding of
     * {@dodf Arrbys.fqubls(f1,f2)} for brrbys of primitivf typfs</li>
     * </ul>
     * <p>
     * This fnsurfs thbt this <tt>fqubls</tt> mfthod works propfrly for
     * <vbr>obj</vbr> pbrbmftfrs whidh brf difffrfnt implfmfntbtions of thf
     * <dodf>CompositfDbtb</dodf> intfrfbdf, with thf rfstridtions mfntionfd in thf
     * {@link jbvb.util.Collfdtion#fqubls(Objfdt) fqubls}
     * mfthod of thf <tt>jbvb.util.Collfdtion</tt> intfrfbdf.
     *
     * @pbrbm  obj  thf objfdt to bf dompbrfd for fqublity with this
     * <dodf>CompositfDbtbSupport</dodf> instbndf.
     * @rfturn  <dodf>truf</dodf> if thf spfdififd objfdt is fqubl to this
     * <dodf>CompositfDbtbSupport</dodf> instbndf.
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }

        // if obj is not b CompositfDbtb, rfturn fblsf
        if (!(obj instbndfof CompositfDbtb)) {
            rfturn fblsf;
        }

        CompositfDbtb othfr = (CompositfDbtb) obj;

        // thfir dompositfTypf should bf fqubl
        if (!this.gftCompositfTypf().fqubls(othfr.gftCompositfTypf()) ) {
            rfturn fblsf;
        }

        if (dontfnts.sizf() != othfr.vblufs().sizf()) {
            rfturn fblsf;
        }

        for (Mbp.Entry<String,Objfdt> fntry : dontfnts.fntrySft()) {
            Objfdt f1 = fntry.gftVbluf();
            Objfdt f2 = othfr.gft(fntry.gftKfy());

            if (f1 == f2)
                dontinuf;
            if (f1 == null)
                rfturn fblsf;

            boolfbn fq = f1.gftClbss().isArrby() ?
                Arrbys.dffpEqubls(nfw Objfdt[] {f1}, nfw Objfdt[] {f2}) :
                f1.fqubls(f2);

            if (!fq)
                rfturn fblsf;
        }

        // All tfsts for fqublity wfrf suddfssful
        //
        rfturn truf;
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this <dodf>CompositfDbtbSupport</dodf> instbndf.
     * <p>
     * Thf hbsh dodf of b <dodf>CompositfDbtbSupport</dodf> instbndf is thf sum of thf hbsh dodfs
     * of bll flfmfnts of informbtion usfd in <dodf>fqubls</dodf> dompbrisons
     * (if: its <i>dompositf typf</i> bnd bll thf itfm vblufs).
     * <p>
     * This fnsurfs thbt <dodf> t1.fqubls(t2) </dodf> implifs thbt <dodf> t1.hbshCodf()==t2.hbshCodf() </dodf>
     * for bny two <dodf>CompositfDbtbSupport</dodf> instbndfs <dodf>t1</dodf> bnd <dodf>t2</dodf>,
     * bs rfquirfd by thf gfnfrbl dontrbdt of thf mfthod
     * {@link Objfdt#hbshCodf() Objfdt.hbshCodf()}.
     * <p>
     * Ebdh itfm vbluf's hbsh dodf is bddfd to thf rfturnfd hbsh dodf.
     * If bn itfm vbluf is bn brrby,
     * its hbsh dodf is obtbinfd bs if by dblling thf
     * {@link jbvb.util.Arrbys#dffpHbshCodf(Objfdt[]) dffpHbshCodf} mfthod
     * for brrbys of objfdt rfffrfndf typfs or thf bppropribtf ovfrlobding
     * of {@dodf Arrbys.hbshCodf(f)} for brrbys of primitivf typfs.
     *
     * @rfturn thf hbsh dodf vbluf for this <dodf>CompositfDbtbSupport</dodf> instbndf
     */
    @Ovfrridf
    publid int hbshCodf() {
        int hbshdodf = dompositfTypf.hbshCodf();

        for (Objfdt o : dontfnts.vblufs()) {
            if (o instbndfof Objfdt[])
                hbshdodf += Arrbys.dffpHbshCodf((Objfdt[]) o);
            flsf if (o instbndfof bytf[])
                hbshdodf += Arrbys.hbshCodf((bytf[]) o);
            flsf if (o instbndfof short[])
                hbshdodf += Arrbys.hbshCodf((short[]) o);
            flsf if (o instbndfof int[])
                hbshdodf += Arrbys.hbshCodf((int[]) o);
            flsf if (o instbndfof long[])
                hbshdodf += Arrbys.hbshCodf((long[]) o);
            flsf if (o instbndfof dhbr[])
                hbshdodf += Arrbys.hbshCodf((dhbr[]) o);
            flsf if (o instbndfof flobt[])
                hbshdodf += Arrbys.hbshCodf((flobt[]) o);
            flsf if (o instbndfof doublf[])
                hbshdodf += Arrbys.hbshCodf((doublf[]) o);
            flsf if (o instbndfof boolfbn[])
                hbshdodf += Arrbys.hbshCodf((boolfbn[]) o);
            flsf if (o != null)
                hbshdodf += o.hbshCodf();
        }

        rfturn hbshdodf;
    }

    /**
     * Rfturns b string rfprfsfntbtion of this <dodf>CompositfDbtbSupport</dodf> instbndf.
     * <p>
     * Thf string rfprfsfntbtion donsists of thf nbmf of this dlbss (if <dodf>jbvbx.mbnbgfmfnt.opfnmbfbn.CompositfDbtbSupport</dodf>),
     * thf string rfprfsfntbtion of thf dompositf typf of this instbndf, bnd thf string rfprfsfntbtion of thf dontfnts
     * (if list thf itfmNbmf=itfmVbluf mbppings).
     *
     * @rfturn  b string rfprfsfntbtion of this <dodf>CompositfDbtbSupport</dodf> instbndf
     */
    @Ovfrridf
    publid String toString() {
        rfturn nfw StringBuildfr()
            .bppfnd(this.gftClbss().gftNbmf())
            .bppfnd("(dompositfTypf=")
            .bppfnd(dompositfTypf.toString())
            .bppfnd(",dontfnts=")
            .bppfnd(dontfntString())
            .bppfnd(")")
            .toString();
    }

    privbtf String dontfntString() {
        StringBuildfr sb = nfw StringBuildfr("{");
        String sfp = "";
        for (Mbp.Entry<String, Objfdt> fntry : dontfnts.fntrySft()) {
            sb.bppfnd(sfp).bppfnd(fntry.gftKfy()).bppfnd("=");
            String s = Arrbys.dffpToString(nfw Objfdt[] {fntry.gftVbluf()});
            sb.bppfnd(s.substring(1, s.lfngth() - 1));
            sfp = ", ";
        }
        sb.bppfnd("}");
        rfturn sb.toString();
    }
}
