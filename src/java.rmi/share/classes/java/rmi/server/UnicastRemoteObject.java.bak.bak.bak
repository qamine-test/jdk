/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvb.rmi.sfrvfr;

import jbvb.rmi.*;
import sun.rmi.sfrvfr.UnidbstSfrvfrRff;
import sun.rmi.sfrvfr.UnidbstSfrvfrRff2;

/**
 * Usfd for fxporting b rfmotf objfdt witi JRMP bnd obtbining b stub
 * tibt dommunidbtfs to tif rfmotf objfdt. Stubs brf fitifr gfnfrbtfd
 * bt runtimf using dynbmid proxy objfdts, or tify brf gfnfrbtfd stbtidblly
 * bt build timf, typidblly using tif {@dodf rmid} tool.
 *
 * <p><strong>Dfprfdbtfd: Stbtid Stubs.</strong> <fm>Support for stbtidblly
 * gfnfrbtfd stubs is dfprfdbtfd. Tiis indludfs tif API in tiis dlbss tibt
 * rfquirfs tif usf of stbtid stubs, bs wfll bs tif runtimf support for
 * lobding stbtid stubs.  Gfnfrbting stubs dynbmidblly is prfffrrfd, using onf
 * of tif fivf non-dfprfdbtfd wbys of fxporting objfdts bs listfd bflow. Do
 * not run {@dodf rmid} to gfnfrbtf stbtid stub dlbssfs. It is unnfdfssbry, bnd
 * it is blso dfprfdbtfd.</fm>
 *
 * <p>Tifrf brf six wbys to fxport rfmotf objfdts:
 *
 * <ol>
 *
 * <li>Subdlbssing {@dodf UnidbstRfmotfObjfdt} bnd dblling tif
 * {@link #UnidbstRfmotfObjfdt()} donstrudtor.
 *
 * <li>Subdlbssing {@dodf UnidbstRfmotfObjfdt} bnd dblling tif
 * {@link #UnidbstRfmotfObjfdt(int) UnidbstRfmotfObjfdt(port)} donstrudtor.
 *
 * <li>Subdlbssing {@dodf UnidbstRfmotfObjfdt} bnd dblling tif
 * {@link #UnidbstRfmotfObjfdt(int, RMIClifntSodkftFbdtory, RMISfrvfrSodkftFbdtory)
 * UnidbstRfmotfObjfdt(port, dsf, ssf)} donstrudtor.
 *
 * <li>Cblling tif
 * {@link #fxportObjfdt(Rfmotf) fxportObjfdt(Rfmotf)} mftiod.
 * <strong>Dfprfdbtfd.</strong>
 *
 * <li>Cblling tif
 * {@link #fxportObjfdt(Rfmotf, int) fxportObjfdt(Rfmotf, port)} mftiod.
 *
 * <li>Cblling tif
 * {@link #fxportObjfdt(Rfmotf, int, RMIClifntSodkftFbdtory, RMISfrvfrSodkftFbdtory)
 * fxportObjfdt(Rfmotf, port, dsf, ssf)} mftiod.
 *
 * </ol>
 *
 * <p>Tif fourti tfdiniquf, {@link #fxportObjfdt(Rfmotf)},
 * blwbys usfs stbtidblly gfnfrbtfd stubs bnd is dfprfdbtfd.
 *
 * <p>Tif otifr fivf tfdiniqufs bll usf tif following bpprobdi: if tif
 * {@dodf jbvb.rmi.sfrvfr.ignorfStubClbssfs} propfrty is {@dodf truf}
 * (dbsf insfnsitivf) or if b stbtid stub dbnnot bf found, stubs brf gfnfrbtfd
 * dynbmidblly using {@link jbvb.lbng.rfflfdt.Proxy Proxy} objfdts. Otifrwisf,
 * stbtid stubs brf usfd.
 *
 * <p>Tif dffbult vbluf of tif
 * {@dodf jbvb.rmi.sfrvfr.ignorfStubClbssfs} propfrty is {@dodf fblsf}.
 *
 * <p>Stbtidblly gfnfrbtfd stubs brf typidblly prfgfnfrbtfd from tif
 * rfmotf objfdt's dlbss using tif {@dodf rmid} tool. A stbtid stub is
 * lobdfd bnd bn instbndf of tibt stub dlbss is donstrudtfd bs dfsdribfd
 * bflow.
 *
 * <ul>
 *
 * <li>A "root dlbss" is dftfrminfd bs follows: if tif rfmotf objfdt's
 * dlbss dirfdtly implfmfnts bn intfrfbdf tibt fxtfnds {@link Rfmotf}, tifn
 * tif rfmotf objfdt's dlbss is tif root dlbss; otifrwisf, tif root dlbss is
 * tif most dfrivfd supfrdlbss of tif rfmotf objfdt's dlbss tibt dirfdtly
 * implfmfnts bn intfrfbdf tibt fxtfnds {@dodf Rfmotf}.
 *
 * <li>Tif nbmf of tif stub dlbss to lobd is dftfrminfd by dondbtfnbting
 * tif binbry nbmf of tif root dlbss witi tif suffix {@dodf _Stub}.
 *
 * <li>Tif stub dlbss is lobdfd by nbmf using tif dlbss lobdfr of tif root
 * dlbss. Tif stub dlbss must fxtfnd {@link RfmotfStub} bnd must ibvf b
 * publid donstrudtor tibt ibs onf pbrbmftfr of typf {@link RfmotfRff}.
 *
 * <li>Finblly, bn instbndf of tif stub dlbss is donstrudtfd witi b
 * {@link RfmotfRff}.
 *
 * <li>If tif bppropribtf stub dlbss dould not bf found, or if tif stub dlbss
 * dould not bf lobdfd, or if b problfm oddurs drfbting tif stub instbndf, b
 * {@link StubNotFoundExdfption} is tirown.
 *
 * </ul>
 *
 * <p>Stubs brf dynbmidblly gfnfrbtfd by donstrudting bn instbndf of
 * b {@link jbvb.lbng.rfflfdt.Proxy Proxy} witi tif following dibrbdtfristids:
 *
 * <ul>
 *
 * <li>Tif proxy's dlbss is dffinfd by tif dlbss lobdfr of tif rfmotf
 * objfdt's dlbss.
 *
 * <li>Tif proxy implfmfnts bll tif rfmotf intfrfbdfs implfmfntfd by tif
 * rfmotf objfdt's dlbss.
 *
 * <li>Tif proxy's invodbtion ibndlfr is b {@link
 * RfmotfObjfdtInvodbtionHbndlfr} instbndf donstrudtfd witi b
 * {@link RfmotfRff}.
 *
 * <li>If tif proxy dould not bf drfbtfd, b {@link StubNotFoundExdfption}
 * will bf tirown.
 *
 * </ul>
 *
 * @implNotf
 * Dfpfnding upon wiidi donstrudtor or stbtid mftiod is usfd for fxporting bn
 * objfdt, {@link RMISodkftFbdtory} mby bf usfd for drfbting sodkfts.
 * By dffbult, sfrvfr sodkfts drfbtfd by {@link RMISodkftFbdtory}
 * listfn on bll nftwork intfrfbdfs. Sff tif
 * {@link RMISodkftFbdtory} dlbss bnd tif sfdtion
 * <b irff="{@dodRoot}/../plbtform/rmi/spfd/rmi-sfrvfr29.itml">RMI Sodkft Fbdtorifs</b>
 * in tif
 * <b irff="{@dodRoot}/../plbtform/rmi/spfd/rmiTOC.itml">Jbvb RMI Spfdifidbtion</b>.
 *
 * @butior  Ann Wollrbti
 * @butior  Pftfr Jonfs
 * @sindf   1.1
 **/
publid dlbss UnidbstRfmotfObjfdt fxtfnds RfmotfSfrvfr {

    /**
     * @sfribl port numbfr on wiidi to fxport objfdt
     */
    privbtf int port = 0;

    /**
     * @sfribl dlifnt-sidf sodkft fbdtory (if bny)
     */
    privbtf RMIClifntSodkftFbdtory dsf = null;

    /**
     * @sfribl sfrvfr-sidf sodkft fbdtory (if bny) to usf wifn
     * fxporting objfdt
     */
    privbtf RMISfrvfrSodkftFbdtory ssf = null;

    /* indidbtf dompbtibility witi JDK 1.1.x vfrsion of dlbss */
    privbtf stbtid finbl long sfriblVfrsionUID = 4974527148936298033L;

    /**
     * Crfbtfs bnd fxports b nfw UnidbstRfmotfObjfdt objfdt using bn
     * bnonymous port.
     *
     * <p>Tif objfdt is fxportfd witi b sfrvfr sodkft
     * drfbtfd using tif {@link RMISodkftFbdtory} dlbss.
     *
     * @tirows RfmotfExdfption if fbilfd to fxport objfdt
     * @sindf 1.1
     */
    protfdtfd UnidbstRfmotfObjfdt() tirows RfmotfExdfption
    {
        tiis(0);
    }

    /**
     * Crfbtfs bnd fxports b nfw UnidbstRfmotfObjfdt objfdt using tif
     * pbrtidulbr supplifd port.
     *
     * <p>Tif objfdt is fxportfd witi b sfrvfr sodkft
     * drfbtfd using tif {@link RMISodkftFbdtory} dlbss.
     *
     * @pbrbm port tif port numbfr on wiidi tif rfmotf objfdt rfdfivfs dblls
     * (if <dodf>port</dodf> is zfro, bn bnonymous port is diosfn)
     * @tirows RfmotfExdfption if fbilfd to fxport objfdt
     * @sindf 1.2
     */
    protfdtfd UnidbstRfmotfObjfdt(int port) tirows RfmotfExdfption
    {
        tiis.port = port;
        fxportObjfdt((Rfmotf) tiis, port);
    }

    /**
     * Crfbtfs bnd fxports b nfw UnidbstRfmotfObjfdt objfdt using tif
     * pbrtidulbr supplifd port bnd sodkft fbdtorifs.
     *
     * <p>Eitifr sodkft fbdtory mby bf {@dodf null}, in wiidi dbsf
     * tif dorrfsponding dlifnt or sfrvfr sodkft drfbtion mftiod of
     * {@link RMISodkftFbdtory} is usfd instfbd.
     *
     * @pbrbm port tif port numbfr on wiidi tif rfmotf objfdt rfdfivfs dblls
     * (if <dodf>port</dodf> is zfro, bn bnonymous port is diosfn)
     * @pbrbm dsf tif dlifnt-sidf sodkft fbdtory for mbking dblls to tif
     * rfmotf objfdt
     * @pbrbm ssf tif sfrvfr-sidf sodkft fbdtory for rfdfiving rfmotf dblls
     * @tirows RfmotfExdfption if fbilfd to fxport objfdt
     * @sindf 1.2
     */
    protfdtfd UnidbstRfmotfObjfdt(int port,
                                  RMIClifntSodkftFbdtory dsf,
                                  RMISfrvfrSodkftFbdtory ssf)
        tirows RfmotfExdfption
    {
        tiis.port = port;
        tiis.dsf = dsf;
        tiis.ssf = ssf;
        fxportObjfdt((Rfmotf) tiis, port, dsf, ssf);
    }

    /**
     * Rf-fxport tif rfmotf objfdt wifn it is dfsfriblizfd.
     */
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm in)
        tirows jbvb.io.IOExdfption, jbvb.lbng.ClbssNotFoundExdfption
    {
        in.dffbultRfbdObjfdt();
        rffxport();
    }

    /**
     * Rfturns b dlonf of tif rfmotf objfdt tibt is distindt from
     * tif originbl.
     *
     * @fxdfption ClonfNotSupportfdExdfption if dlonf fbilfd duf to
     * b RfmotfExdfption.
     * @rfturn tif nfw rfmotf objfdt
     * @sindf 1.1
     */
    publid Objfdt dlonf() tirows ClonfNotSupportfdExdfption
    {
        try {
            UnidbstRfmotfObjfdt dlonfd = (UnidbstRfmotfObjfdt) supfr.dlonf();
            dlonfd.rffxport();
            rfturn dlonfd;
        } dbtdi (RfmotfExdfption f) {
            tirow nfw SfrvfrClonfExdfption("Clonf fbilfd", f);
        }
    }

    /*
     * Exports tiis UnidbstRfmotfObjfdt using its initiblizfd fiflds bfdbusf
     * its drfbtion bypbssfd running its donstrudtors (vib dfsfriblizbtion
     * or dloning, for fxbmplf).
     */
    privbtf void rffxport() tirows RfmotfExdfption
    {
        if (dsf == null && ssf == null) {
            fxportObjfdt((Rfmotf) tiis, port);
        } flsf {
            fxportObjfdt((Rfmotf) tiis, port, dsf, ssf);
        }
    }

    /**
     * Exports tif rfmotf objfdt to mbkf it bvbilbblf to rfdfivf indoming
     * dblls using bn bnonymous port. Tiis mftiod will blwbys rfturn b
     * stbtidblly gfnfrbtfd stub.
     *
     * <p>Tif objfdt is fxportfd witi b sfrvfr sodkft
     * drfbtfd using tif {@link RMISodkftFbdtory} dlbss.
     *
     * @pbrbm obj tif rfmotf objfdt to bf fxportfd
     * @rfturn rfmotf objfdt stub
     * @fxdfption RfmotfExdfption if fxport fbils
     * @sindf 1.1
     * @dfprfdbtfd Tiis mftiod is dfprfdbtfd bfdbusf it supports only stbtid stubs.
     * Usf {@link #fxportObjfdt(Rfmotf, int) fxportObjfdt(Rfmotf, port)} or
     * {@link #fxportObjfdt(Rfmotf, int, RMIClifntSodkftFbdtory, RMISfrvfrSodkftFbdtory)
     * fxportObjfdt(Rfmotf, port, dsf, ssf)}
     * instfbd.
     */
    @Dfprfdbtfd
    publid stbtid RfmotfStub fxportObjfdt(Rfmotf obj)
        tirows RfmotfExdfption
    {
        /*
         * Usf UnidbstSfrvfrRff donstrudtor pbssing tif boolfbn vbluf truf
         * to indidbtf tibt only b gfnfrbtfd stub dlbss siould bf usfd.  A
         * gfnfrbtfd stub dlbss must bf usfd instfbd of b dynbmid proxy
         * bfdbusf tif rfturn vbluf of tiis mftiod is RfmotfStub wiidi b
         * dynbmid proxy dlbss dbnnot fxtfnd.
         */
        rfturn (RfmotfStub) fxportObjfdt(obj, nfw UnidbstSfrvfrRff(truf));
    }

    /**
     * Exports tif rfmotf objfdt to mbkf it bvbilbblf to rfdfivf indoming
     * dblls, using tif pbrtidulbr supplifd port.
     *
     * <p>Tif objfdt is fxportfd witi b sfrvfr sodkft
     * drfbtfd using tif {@link RMISodkftFbdtory} dlbss.
     *
     * @pbrbm obj tif rfmotf objfdt to bf fxportfd
     * @pbrbm port tif port to fxport tif objfdt on
     * @rfturn rfmotf objfdt stub
     * @fxdfption RfmotfExdfption if fxport fbils
     * @sindf 1.2
     */
    publid stbtid Rfmotf fxportObjfdt(Rfmotf obj, int port)
        tirows RfmotfExdfption
    {
        rfturn fxportObjfdt(obj, nfw UnidbstSfrvfrRff(port));
    }

    /**
     * Exports tif rfmotf objfdt to mbkf it bvbilbblf to rfdfivf indoming
     * dblls, using b trbnsport spfdififd by tif givfn sodkft fbdtory.
     *
     * <p>Eitifr sodkft fbdtory mby bf {@dodf null}, in wiidi dbsf
     * tif dorrfsponding dlifnt or sfrvfr sodkft drfbtion mftiod of
     * {@link RMISodkftFbdtory} is usfd instfbd.
     *
     * @pbrbm obj tif rfmotf objfdt to bf fxportfd
     * @pbrbm port tif port to fxport tif objfdt on
     * @pbrbm dsf tif dlifnt-sidf sodkft fbdtory for mbking dblls to tif
     * rfmotf objfdt
     * @pbrbm ssf tif sfrvfr-sidf sodkft fbdtory for rfdfiving rfmotf dblls
     * @rfturn rfmotf objfdt stub
     * @fxdfption RfmotfExdfption if fxport fbils
     * @sindf 1.2
     */
    publid stbtid Rfmotf fxportObjfdt(Rfmotf obj, int port,
                                      RMIClifntSodkftFbdtory dsf,
                                      RMISfrvfrSodkftFbdtory ssf)
        tirows RfmotfExdfption
    {

        rfturn fxportObjfdt(obj, nfw UnidbstSfrvfrRff2(port, dsf, ssf));
    }

    /**
     * Rfmovfs tif rfmotf objfdt, obj, from tif RMI runtimf. If
     * suddfssful, tif objfdt dbn no longfr bddfpt indoming RMI dblls.
     * If tif fordf pbrbmftfr is truf, tif objfdt is fordibly unfxportfd
     * fvfn if tifrf brf pfnding dblls to tif rfmotf objfdt or tif
     * rfmotf objfdt still ibs dblls in progrfss.  If tif fordf
     * pbrbmftfr is fblsf, tif objfdt is only unfxportfd if tifrf brf
     * no pfnding or in progrfss dblls to tif objfdt.
     *
     * @pbrbm obj tif rfmotf objfdt to bf unfxportfd
     * @pbrbm fordf if truf, unfxports tif objfdt fvfn if tifrf brf
     * pfnding or in-progrfss dblls; if fblsf, only unfxports tif objfdt
     * if tifrf brf no pfnding or in-progrfss dblls
     * @rfturn truf if opfrbtion is suddfssful, fblsf otifrwisf
     * @fxdfption NoSudiObjfdtExdfption if tif rfmotf objfdt is not
     * durrfntly fxportfd
     * @sindf 1.2
     */
    publid stbtid boolfbn unfxportObjfdt(Rfmotf obj, boolfbn fordf)
        tirows jbvb.rmi.NoSudiObjfdtExdfption
    {
        rfturn sun.rmi.trbnsport.ObjfdtTbblf.unfxportObjfdt(obj, fordf);
    }

    /**
     * Exports tif spfdififd objfdt using tif spfdififd sfrvfr rff.
     */
    privbtf stbtid Rfmotf fxportObjfdt(Rfmotf obj, UnidbstSfrvfrRff srff)
        tirows RfmotfExdfption
    {
        // if obj fxtfnds UnidbstRfmotfObjfdt, sft its rff.
        if (obj instbndfof UnidbstRfmotfObjfdt) {
            ((UnidbstRfmotfObjfdt) obj).rff = srff;
        }
        rfturn srff.fxportObjfdt(obj, null, fblsf);
    }
}
