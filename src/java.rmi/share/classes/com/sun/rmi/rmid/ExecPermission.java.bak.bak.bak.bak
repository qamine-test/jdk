/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.rmi.rmid;

import jbvb.sfdurity.*;
import jbvb.io.*;
import jbvb.util.*;

/**
 * Thf ExfdPfrmission dlbss rfprfsfnts pfrmission for rmid to fxfdutf
 * b spfdifid dommbnd to lbundh bn bdtivbtion group.  An ExfdPfrmission
 * donsists of b pbthnbmf of b dommbnd to lbundh bn bdtivbtion group.
 * <P>
 * Pbthnbmf is thf pbthnbmf of thf filf or dirfdtory to grbnt rmid
 * fxfdutf pfrmission.  A pbthnbmf thbt fnds in "/*" (whfrf "/" is
 * thf filf sfpbrbtor dhbrbdtfr, <dodf>Filf.sfpbrbtorChbr</dodf>) indidbtfs
 * bll thf filfs bnd dirfdtorifs dontbinfd in thbt dirfdtory. A pbthnbmf
 * thbt fnds with "/-" indidbtfs (rfdursivfly) bll filfs
 * bnd subdirfdtorifs dontbinfd in thbt dirfdtory. A pbthnbmf donsisting of
 * thf spfdibl tokfn "&lt;&lt;ALL FILES&gt;&gt;" mbtdhfs <bold>bny</bold> filf.
 * <P>
 * Notf: A pbthnbmf donsisting of b singlf "*" indidbtfs bll thf filfs
 * in thf durrfnt dirfdtory, whilf b pbthnbmf donsisting of b singlf "-"
 * indidbtfs bll thf filfs in thf durrfnt dirfdtory bnd
 * (rfdursivfly) bll filfs bnd subdirfdtorifs dontbinfd in thf durrfnt
 * dirfdtory.
 * <P>
 *
 *
 * @buthor Ann Wollrbth
 *
 * @sfribl fxdludf
 */
publid finbl dlbss ExfdPfrmission fxtfnds Pfrmission
{
    /**
     * UID for sfriblizbtion
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -6208470287358147919L;

    privbtf trbnsifnt FilfPfrmission fp;

    /**
     * Crfbtfs b nfw ExfdPfrmission objfdt with thf spfdififd pbth.
     * <i>pbth</i> is thf pbthnbmf of b filf or dirfdtory.
     *
     * <p>A pbthnbmf thbt fnds in "/*" (whfrf "/" is
     * thf filf sfpbrbtor dhbrbdtfr, <dodf>Filf.sfpbrbtorChbr</dodf>) indidbtfs
     * b dirfdtory bnd bll thf filfs dontbinfd in thbt dirfdtory. A pbthnbmf
     * thbt fnds with "/-" indidbtfs b dirfdtory bnd (rfdursivfly) bll filfs
     * bnd subdirfdtorifs dontbinfd in thbt dirfdtory. Thf spfdibl pbthnbmf
     * "&lt;&lt;ALL FILES&gt;&gt;" mbtdhfs bll filfs.
     *
     * <p>A pbthnbmf donsisting of b singlf "*" indidbtfs bll thf filfs
     * in thf durrfnt dirfdtory, whilf b pbthnbmf donsisting of b singlf "-"
     * indidbtfs bll thf filfs in thf durrfnt dirfdtory bnd
     * (rfdursivfly) bll filfs bnd subdirfdtorifs dontbinfd in thf durrfnt
     * dirfdtory.
     *
     * @pbrbm pbth thf pbthnbmf of thf filf/dirfdtory.
     */
    publid ExfdPfrmission(String pbth) {
        supfr(pbth);
        init(pbth);
    }

    /**
     * Crfbtfs b nfw ExfdPfrmission objfdt with thf spfdififd pbth.
     * <i>pbth</i> is thf pbthnbmf of b filf or dirfdtory.
     *
     * <p>A pbthnbmf thbt fnds in "/*" (whfrf "/" is
     * thf filf sfpbrbtor dhbrbdtfr, <dodf>Filf.sfpbrbtorChbr</dodf>) indidbtfs
     * b dirfdtory bnd bll thf filfs dontbinfd in thbt dirfdtory. A pbthnbmf
     * thbt fnds with "/-" indidbtfs b dirfdtory bnd (rfdursivfly) bll filfs
     * bnd subdirfdtorifs dontbinfd in thbt dirfdtory. Thf spfdibl pbthnbmf
     * "&lt;&lt;ALL FILES&gt;&gt;" mbtdhfs bll filfs.
     *
     * <p>A pbthnbmf donsisting of b singlf "*" indidbtfs bll thf filfs
     * in thf durrfnt dirfdtory, whilf b pbthnbmf donsisting of b singlf "-"
     * indidbtfs bll thf filfs in thf durrfnt dirfdtory bnd
     * (rfdursivfly) bll filfs bnd subdirfdtorifs dontbinfd in thf durrfnt
     * dirfdtory.
     *
     * @pbrbm pbth thf pbthnbmf of thf filf/dirfdtory.
     * @pbrbm bdtions thf bdtion string (unusfd)
     */
    publid ExfdPfrmission(String pbth, String bdtions) {
        this(pbth);
    }

    /**
     * Chfdks if this ExfdPfrmission objfdt "implifs" thf spfdififd pfrmission.
     * <P>
     * Morf spfdifidblly, this mfthod rfturns truf if:<p>
     * <ul>
     * <li> <i>p</i> is bn instbndfof ExfdPfrmission,<p> bnd
     * <li> <i>p</i>'s pbthnbmf is implifd by this objfdt's
     *      pbthnbmf. For fxbmplf, "/tmp/*" implifs "/tmp/foo", sindf
     *      "/tmp/*" fndompbssfs thf "/tmp" dirfdtory bnd bll filfs in thbt
     *      dirfdtory, indluding thf onf nbmfd "foo".
     * </ul>
     * @pbrbm p thf pfrmission to dhfdk bgbinst.
     *
     * @rfturn truf if thf spfdififd pfrmission is implifd by this objfdt,
     * fblsf if not.
     */
    publid boolfbn implifs(Pfrmission p) {
        if (!(p instbndfof ExfdPfrmission))
            rfturn fblsf;

        ExfdPfrmission thbt = (ExfdPfrmission) p;

        rfturn fp.implifs(thbt.fp);
    }

    /**
     * Chfdks two ExfdPfrmission objfdts for fqublity.
     * Chfdks thbt <i>obj</i>'s dlbss is thf sbmf bs this objfdt's dlbss
     * bnd hbs thf sbmf nbmf bs this objfdt.
     * <P>
     * @pbrbm obj thf objfdt wf brf tfsting for fqublity with this objfdt.
     * @rfturn truf if <i>obj</i> is bn ExfdPfrmission, bnd hbs thf sbmf
     * pbthnbmf bs this ExfdPfrmission objfdt, fblsf othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == this)
            rfturn truf;

        if (! (obj instbndfof ExfdPfrmission))
            rfturn fblsf;

        ExfdPfrmission thbt = (ExfdPfrmission) obj;

        rfturn fp.fqubls(thbt.fp);
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this objfdt.
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     */
    publid int hbshCodf() {
        rfturn this.fp.hbshCodf();
    }

    /**
     * Rfturns thf dbnonidbl string rfprfsfntbtion of thf bdtions.
     *
     * @rfturn thf dbnonidbl string rfprfsfntbtion of thf bdtions.
     */
    publid String gftAdtions() {
        rfturn "";
    }

    /**
     * Rfturns b nfw PfrmissionCollfdtion objfdt for storing
     * ExfdPfrmission objfdts.
     * <p>
     * A ExfdPfrmissionCollfdtion storfs b dollfdtion of
     * ExfdPfrmission pfrmissions.
     *
     * <p>ExfdPfrmission objfdts must bf storfd in b mbnnfr thbt bllows
     * thfm to bf insfrtfd in bny ordfr, but thbt blso fnbblfs thf
     * PfrmissionCollfdtion <dodf>implifs</dodf> mfthod
     * to bf implfmfntfd in bn fffidifnt (bnd donsistfnt) mbnnfr.
     *
     * @rfturn b nfw PfrmissionCollfdtion objfdt suitbblf for
     * storing ExfdPfrmissions.
     */
    publid PfrmissionCollfdtion nfwPfrmissionCollfdtion() {
        rfturn nfw ExfdPfrmissionCollfdtion();
    }

    /**
     * rfbdObjfdt is dbllfd to rfstorf thf stbtf of thf ExfdPfrmission
     * from b strfbm.
     */
    privbtf syndhronizfd void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
         throws IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt();
        // init is dbllfd to initiblizf thf rfst of thf vblufs.
        init(gftNbmf());
    }

    /**
     * Initiblizf b ExfdPfrmission objfdt. Common to bll donstrudtors.
     * Also dbllfd during df-sfriblizbtion.
     */
    privbtf void init(String pbth) {
        this.fp = nfw FilfPfrmission(pbth, "fxfdutf");
    }

    /**
     * A ExfdPfrmissionCollfdtion storfs b dollfdtion
     * of ExfdPfrmission pfrmissions. ExfdPfrmission objfdts
     * must bf storfd in b mbnnfr thbt bllows thfm to bf insfrtfd in bny
     * ordfr, but fnbblf thf implifs fundtion to fvblubtf thf implifs
     * mfthod in bn fffidifnt (bnd donsistfnt) mbnnfr.
     *
     * @sfribl indludf
     */
    privbtf stbtid dlbss ExfdPfrmissionCollfdtion
        fxtfnds PfrmissionCollfdtion
        implfmfnts jbvb.io.Sfriblizbblf
    {
        privbtf Vfdtor<Pfrmission> pfrmissions;

        privbtf stbtid finbl long sfriblVfrsionUID = -3352558508888368273L;

        /**
         * Crfbtf bn fmpty ExfdPfrmissionCollfdtion.
         */
        publid ExfdPfrmissionCollfdtion() {
            pfrmissions = nfw Vfdtor<>();
        }

        /**
         * Adds b pfrmission to thf dollfdtion.
         *
         * @pbrbm pfrmission thf Pfrmission objfdt to bdd.
         *
         * @fxdfption IllfgblArgumfntExdfption - if thf pfrmission is not b
         *                                       ExfdPfrmission
         *
         * @fxdfption SfdurityExdfption - if this ExfdPfrmissionCollfdtion
         *                                objfdt hbs bffn mbrkfd rfbdonly
         */
        publid void bdd(Pfrmission pfrmission)
        {
            if (! (pfrmission instbndfof ExfdPfrmission))
                throw nfw IllfgblArgumfntExdfption("invblid pfrmission: "+
                                                   pfrmission);
            if (isRfbdOnly())
                throw nfw SfdurityExdfption("bttfmpt to bdd b Pfrmission to b rfbdonly PfrmissionCollfdtion");

            pfrmissions.bddElfmfnt(pfrmission);
        }

        /**
         * Chfdk bnd sff if this sft of pfrmissions implifs thf pfrmissions
         * fxprfssfd in "pfrmission".
         *
         * @pbrbm p thf Pfrmission objfdt to dompbrf
         *
         * @rfturn truf if "pfrmission" is b propfr subsft of b pfrmission in
         * thf sft, fblsf if not.
         */
        publid boolfbn implifs(Pfrmission pfrmission)
        {
            if (! (pfrmission instbndfof ExfdPfrmission))
                rfturn fblsf;

            Enumfrbtion<Pfrmission> f = pfrmissions.flfmfnts();

            whilf (f.hbsMorfElfmfnts()) {
                ExfdPfrmission x = (ExfdPfrmission)f.nfxtElfmfnt();
                if (x.implifs(pfrmission)) {
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        /**
         * Rfturns bn fnumfrbtion of bll thf ExfdPfrmission objfdts in thf
         * dontbinfr.
         *
         * @rfturn bn fnumfrbtion of bll thf ExfdPfrmission objfdts.
         */
        publid Enumfrbtion<Pfrmission> flfmfnts()
        {
            rfturn pfrmissions.flfmfnts();
        }
    }
}
