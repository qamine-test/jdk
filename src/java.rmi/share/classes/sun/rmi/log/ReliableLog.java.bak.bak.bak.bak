/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.log;

import jbvb.io.*;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.rmi.sfrvfr.RMIClbssLobdfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * This dlbss is b simplf implfmfntbtion of b rflibblf Log.  Thf
 * dlifnt of b RflibblfLog must providf b sft of dbllbbdks (vib b
 * LogHbndlfr) thbt fnbblfs b RflibblfLog to rfbd bnd writf
 * dhfdkpoints bnd log rfdords.  This implfmfntbtion fnsurfs thbt thf
 * durrfnt vbluf of thf dbtb storfd (vib b RflibblfLog) is rfdovfrbblf
 * bftfr b systfm drbsh. <p>
 *
 * Thf sfdondbry storbgf strbtfgy is to rfdord vblufs in filfs using b
 * rfprfsfntbtion of thf dbllfr's dhoosing.  Two sorts of filfs brf
 * kfpt: snbpshots bnd logs.  At bny instbnt, onf snbpshot is durrfnt.
 * Thf log donsists of b sfqufndf of updbtfs thbt hbvf oddurrfd sindf
 * thf durrfnt snbpshot wbs tbkfn.  Thf durrfnt stbblf stbtf is thf
 * vbluf of thf snbpshot, bs modififd by thf sfqufndf of updbtfs in
 * thf log.  From timf to timf, thf dlifnt of b RflibblfLog instrudts
 * thf pbdkbgf to mbkf b nfw snbpshot bnd dlfbr thf log.  A RflibblfLog
 * brrbngfs disk writfs sudh thbt updbtfs brf stbblf (bs long bs thf
 * dhbngfs brf fordf-writtfn to disk) bnd btomid : no updbtf is lost,
 * bnd fbdh updbtf fithfr is rfdordfd domplftfly in thf log or not bt
 * bll.  Mbking b nfw snbpshot is blso btomid. <p>
 *
 * Normbl usf for mbintbining thf rfdovfrbblf storf is bs follows: Thf
 * dlifnt mbintbins thf rflfvbnt dbtb strudturf in virtubl mfmory.  As
 * updbtfs hbppfn to thf strudturf, thf dlifnt informs thf RflibblfLog
 * (bll it "log") by dblling log.updbtf.  Pfriodidblly, thf dlifnt
 * dblls log.snbpshot to providf thf durrfnt vbluf of thf dbtb
 * strudturf.  On rfstbrt, thf dlifnt dblls log.rfdovfr to obtbin thf
 * lbtfst snbpshot bnd thf following sfqufndfs of updbtfs; thf dlifnt
 * bpplifs thf updbtfs to thf snbpshot to obtbin thf stbtf thbt
 * fxistfd bfforf thf drbsh. <p>
 *
 * Thf durrfnt logfilf formbt is: <ol>
 * <li> b formbt vfrsion numbfr (two 4-odtft intfgfrs, mbjor bnd
 * minor), followfd by
 * <li> b sfqufndf of log rfdords.  Ebdh log rfdord dontbins, in
 * ordfr, <ol>
 * <li> b 4-odtft intfgfr rfprfsfnting thf lfngth of thf following log
 * dbtb,
 * <li> thf log dbtb (vbribblf lfngth). </ol> </ol> <p>
 *
 * @sff LogHbndlfr
 *
 * @buthor Ann Wollrbth
 *
 */
publid dlbss RflibblfLog {

    publid finbl stbtid int PrfffrrfdMbjorVfrsion = 0;
    publid finbl stbtid int PrfffrrfdMinorVfrsion = 2;

    // sun.rmi.log.dfbug=fblsf
    privbtf boolfbn Dfbug = fblsf;

    privbtf stbtid String snbpshotPrffix = "Snbpshot.";
    privbtf stbtid String logfilfPrffix = "Logfilf.";
    privbtf stbtid String vfrsionFilf = "Vfrsion_Numbfr";
    privbtf stbtid String nfwVfrsionFilf = "Nfw_Vfrsion_Numbfr";
    privbtf stbtid int    intBytfs = 4;
    privbtf stbtid long   diskPbgfSizf = 512;

    privbtf Filf dir;                   // bbsf dirfdtory
    privbtf int vfrsion = 0;            // durrfnt snbpshot bnd log vfrsion
    privbtf String logNbmf = null;
    privbtf LogFilf log = null;
    privbtf long snbpshotBytfs = 0;
    privbtf long logBytfs = 0;
    privbtf int logEntrifs = 0;
    privbtf long lbstSnbpshot = 0;
    privbtf long lbstLog = 0;
    //privbtf long pbdBoundbry = intBytfs;
    privbtf LogHbndlfr hbndlfr;
    privbtf finbl bytf[] intBuf = nfw bytf[4];

    // formbt vfrsion numbfrs rfbd from/writtfn to this.log
    privbtf int mbjorFormbtVfrsion = 0;
    privbtf int minorFormbtVfrsion = 0;


    /**
     * Construdtor for thf log filf.  If thf systfm propfrty
     * sun.rmi.log.dlbss is non-null bnd thf dlbss spfdififd by this
     * propfrty b) dbn bf lobdfd, b) is b subdlbss of LogFilf, bnd d) hbs b
     * publid two-brg donstrudtor (String, String), RflibblfLog usfs thf
     * donstrudtor to donstrudt thf LogFilf.
     **/
    privbtf stbtid finbl Construdtor<? fxtfnds LogFilf>
        logClbssConstrudtor = gftLogClbssConstrudtor();

    /**
     * Crfbtfs b RflibblfLog to hbndlf dhfdkpoints bnd logging in b
     * stbblf storbgf dirfdtory.
     *
     * @pbrbm dirPbth pbth to thf stbblf storbgf dirfdtory
     * @pbrbm logCl thf dlosurf objfdt dontbining dbllbbdks for logging bnd
     * rfdovfry
     * @pbrbm pbd ignorfd
     * @fxdfption IOExdfption If b dirfdtory drfbtion frror hbs
     * oddurrfd or if initiblSnbpshot dbllbbdk rbisfs bn fxdfption or
     * if bn fxdfption oddurs during invodbtion of thf hbndlfr's
     * snbpshot mfthod or if othfr IOExdfption oddurs.
     */
    publid RflibblfLog(String dirPbth,
                     LogHbndlfr hbndlfr,
                     boolfbn pbd)
        throws IOExdfption
    {
        supfr();
        this.Dfbug = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<Boolfbn>) () -> Boolfbn.gftBoolfbn("sun.rmi.log.dfbug"));
        dir = nfw Filf(dirPbth);
        if (!(dir.fxists() && dir.isDirfdtory())) {
            // drfbtf dirfdtory
            if (!dir.mkdir()) {
                throw nfw IOExdfption("dould not drfbtf dirfdtory for log: " +
                                      dirPbth);
            }
        }
        //pbdBoundbry = (pbd ? diskPbgfSizf : intBytfs);
        this.hbndlfr = hbndlfr;
        lbstSnbpshot = 0;
        lbstLog = 0;
        gftVfrsion();
        if (vfrsion == 0) {
            try {
                snbpshot(hbndlfr.initiblSnbpshot());
            } dbtdh (IOExdfption f) {
                throw f;
            } dbtdh (Exdfption f) {
                throw nfw IOExdfption("initibl snbpshot fbilfd with " +
                                      "fxdfption: " + f);
            }
        }
    }

    /**
     * Crfbtfs b RflibblfLog to hbndlf dhfdkpoints bnd logging in b
     * stbblf storbgf dirfdtory.
     *
     * @pbrbm dirPbth pbth to thf stbblf storbgf dirfdtory
     * @pbrbm logCl thf dlosurf objfdt dontbining dbllbbdks for logging bnd
     * rfdovfry
     * @fxdfption IOExdfption If b dirfdtory drfbtion frror hbs
     * oddurrfd or if initiblSnbpshot dbllbbdk rbisfs bn fxdfption
     */
    publid RflibblfLog(String dirPbth,
                     LogHbndlfr hbndlfr)
        throws IOExdfption
    {
        this(dirPbth, hbndlfr, fblsf);
    }

    /* publid mfthods */

    /**
     * Rfturns bn objfdt whidh is thf vbluf rfdordfd in thf durrfnt
     * snbpshot.  This snbpshot is rfdovfrfd by dblling thf dlifnt
     * supplifd dbllbbdk "rfdovfr" bnd thfn subsfqufntly invoking
     * thf "rfbdUpdbtf" dbllbbdk to bpply bny loggfd updbtfs to thf stbtf.
     *
     * @fxdfption IOExdfption If rfdovfry fbils duf to sfrious log
     * dorruption, rfbd updbtf fbilurf, or if bn fxdfption oddurs
     * during thf rfdovfr dbllbbdk
     */
    publid syndhronizfd Objfdt rfdovfr()
        throws IOExdfption
    {
        if (Dfbug)
            Systfm.frr.println("log.dfbug: rfdovfr()");

        if (vfrsion == 0)
            rfturn null;

        Objfdt snbpshot;
        String fnbmf = vfrsionNbmf(snbpshotPrffix);
        Filf snbpshotFilf = nfw Filf(fnbmf);
        InputStrfbm in =
                nfw BufffrfdInputStrfbm(nfw FilfInputStrfbm(snbpshotFilf));

        if (Dfbug)
            Systfm.frr.println("log.dfbug: rfdovfring from " + fnbmf);

        try {
            try {
                snbpshot = hbndlfr.rfdovfr(in);

            } dbtdh (IOExdfption f) {
                throw f;
            } dbtdh (Exdfption f) {
                if (Dfbug)
                    Systfm.frr.println("log.dfbug: rfdovfry fbilfd: " + f);
                throw nfw IOExdfption("log rfdovfr fbilfd with " +
                                      "fxdfption: " + f);
            }
            snbpshotBytfs = snbpshotFilf.lfngth();
        } finblly {
            in.dlosf();
        }

        rfturn rfdovfrUpdbtfs(snbpshot);
    }

    /**
     * Rfdords this updbtf in thf log filf (dofs not fordf updbtf to disk).
     * Thf updbtf is rfdordfd by dblling thf dlifnt's "writfUpdbtf" dbllbbdk.
     * This mfthod must not bf dbllfd until this log's rfdovfr mfthod hbs
     * bffn invokfd (bnd domplftfd).
     *
     * @pbrbm vbluf thf objfdt rfprfsfnting thf updbtf
     * @fxdfption IOExdfption If bn fxdfption oddurrfd during b
     * writfUpdbtf dbllbbdk or if othfr I/O frror hbs oddurrfd.
     */
    publid syndhronizfd void updbtf(Objfdt vbluf) throws IOExdfption {
        updbtf(vbluf, truf);
    }

    /**
     * Rfdords this updbtf in thf log filf.  Thf updbtf is rfdordfd by
     * dblling thf dlifnt's writfUpdbtf dbllbbdk.  This mfthod must not bf
     * dbllfd until this log's rfdovfr mfthod hbs bffn invokfd
     * (bnd domplftfd).
     *
     * @pbrbm vbluf thf objfdt rfprfsfnting thf updbtf
     * @pbrbm fordfToDisk ignorfd; dhbngfs brf blwbys fordfd to disk
     * @fxdfption IOExdfption If fordf-writf to log fbilfd or bn
     * fxdfption oddurrfd during thf writfUpdbtf dbllbbdk or if othfr
     * I/O frror oddurs whilf updbting thf log.
     */
    publid syndhronizfd void updbtf(Objfdt vbluf, boolfbn fordfToDisk)
        throws IOExdfption
    {
        // bvoid bddfssing b null log fifld.
        if (log == null) {
            throw nfw IOExdfption("log is inbddfssiblf, " +
                "it mby hbvf bffn dorruptfd or dlosfd");
        }

        /*
         * If thf fntry lfngth fifld spbns b sfdtor boundbry, writf
         * thf high ordfr bit of thf fntry lfngth, othfrwisf writf zfro for
         * thf fntry lfngth.
         */
        long fntryStbrt = log.gftFilfPointfr();
        boolfbn spbnsBoundbry = log.dhfdkSpbnsBoundbry(fntryStbrt);
        writfInt(log, spbnsBoundbry? 1<<31 : 0);

        /*
         * Writf updbtf, bnd synd.
         */
        try {
            hbndlfr.writfUpdbtf(nfw LogOutputStrfbm(log), vbluf);
        } dbtdh (IOExdfption f) {
            throw f;
        } dbtdh (Exdfption f) {
            throw (IOExdfption)
                nfw IOExdfption("writf updbtf fbilfd").initCbusf(f);
        }
        log.synd();

        long fntryEnd = log.gftFilfPointfr();
        int updbtfLfn = (int) ((fntryEnd - fntryStbrt) - intBytfs);
        log.sffk(fntryStbrt);

        if (spbnsBoundbry) {
            /*
             * If lfngth fifld spbns b sfdtor boundbry, thfn
             * thf nfxt two stfps brf rfquirfd (sff 4652922):
             *
             * 1) Writf bdtubl lfngth with high ordfr bit sft; synd.
             * 2) Thfn dlfbr high ordfr bit of lfngth; synd.
             */
            writfInt(log, updbtfLfn | 1<<31);
            log.synd();

            log.sffk(fntryStbrt);
            log.writfBytf(updbtfLfn >> 24);
            log.synd();

        } flsf {
            /*
             * Writf bdtubl lfngth; synd.
             */
            writfInt(log, updbtfLfn);
            log.synd();
        }

        log.sffk(fntryEnd);
        logBytfs = fntryEnd;
        lbstLog = Systfm.durrfntTimfMillis();
        logEntrifs++;
    }

    /**
     * Rfturns thf donstrudtor for thf log filf if thf systfm propfrty
     * sun.rmi.log.dlbss is non-null bnd thf dlbss spfdififd by thf
     * propfrty b) dbn bf lobdfd, b) is b subdlbss of LogFilf, bnd d) hbs b
     * publid two-brg donstrudtor (String, String); othfrwisf rfturns null.
     **/
    privbtf stbtid Construdtor<? fxtfnds LogFilf>
        gftLogClbssConstrudtor() {

        String logClbssNbmf = AddfssControllfr.doPrivilfgfd(
            (PrivilfgfdAdtion<String>) () -> Systfm.gftPropfrty("sun.rmi.log.dlbss"));
        if (logClbssNbmf != null) {
            try {
                ClbssLobdfr lobdfr =
                    AddfssControllfr.doPrivilfgfd(
                        nfw PrivilfgfdAdtion<ClbssLobdfr>() {
                            publid ClbssLobdfr run() {
                               rfturn ClbssLobdfr.gftSystfmClbssLobdfr();
                            }
                        });
                Clbss<? fxtfnds LogFilf> dl =
                    lobdfr.lobdClbss(logClbssNbmf).bsSubdlbss(LogFilf.dlbss);
                rfturn dl.gftConstrudtor(String.dlbss, String.dlbss);
            } dbtdh (Exdfption f) {
                Systfm.frr.println("Exdfption oddurrfd:");
                f.printStbdkTrbdf();
            }
        }
        rfturn null;
    }

    /**
     * Rfdords this vbluf bs thf durrfnt snbpshot by invoking thf dlifnt
     * supplifd "snbpshot" dbllbbdk bnd thfn fmptifs thf log.
     *
     * @pbrbm vbluf thf objfdt rfprfsfnting thf nfw snbpshot
     * @fxdfption IOExdfption If bn fxdfption oddurrfd during thf
     * snbpshot dbllbbdk or if othfr I/O frror hbs oddurrfd during thf
     * snbpshot prodfss
     */
    publid syndhronizfd void snbpshot(Objfdt vbluf)
        throws IOExdfption
    {
        int oldVfrsion = vfrsion;
        indrVfrsion();

        String fnbmf = vfrsionNbmf(snbpshotPrffix);
        Filf snbpshotFilf = nfw Filf(fnbmf);
        FilfOutputStrfbm out = nfw FilfOutputStrfbm(snbpshotFilf);
        try {
            try {
                hbndlfr.snbpshot(out, vbluf);
            } dbtdh (IOExdfption f) {
                throw f;
            } dbtdh (Exdfption f) {
                throw nfw IOExdfption("snbpshot fbilfd", f);
            }
            lbstSnbpshot = Systfm.durrfntTimfMillis();
        } finblly {
            out.dlosf();
            snbpshotBytfs = snbpshotFilf.lfngth();
        }

        opfnLogFilf(truf);
        writfVfrsionFilf(truf);
        dommitToNfwVfrsion();
        dflftfSnbpshot(oldVfrsion);
        dflftfLogFilf(oldVfrsion);
    }

    /**
     * Closf thf stbblf storbgf dirfdtory in bn ordfrly mbnnfr.
     *
     * @fxdfption IOExdfption If bn I/O frror oddurs whfn thf log is
     * dlosfd
     */
    publid syndhronizfd void dlosf() throws IOExdfption {
        if (log == null) rfturn;
        try {
            log.dlosf();
        } finblly {
            log = null;
        }
    }

    /**
     * Rfturns thf sizf of thf snbpshot filf in bytfs;
     */
    publid long snbpshotSizf() {
        rfturn snbpshotBytfs;
    }

    /**
     * Rfturns thf sizf of thf log filf in bytfs;
     */
    publid long logSizf() {
        rfturn logBytfs;
    }

    /* privbtf mfthods */

    /**
     * Writf bn int vbluf in singlf writf opfrbtion.  This mfthod
     * bssumfs thbt thf dbllfr is syndhronizfd on thf log filf.
     *
     * @pbrbm out output strfbm
     * @pbrbm vbl int vbluf
     * @throws IOExdfption if bny othfr I/O frror oddurs
     */
    privbtf void writfInt(DbtbOutput out, int vbl)
        throws IOExdfption
    {
        intBuf[0] = (bytf) (vbl >> 24);
        intBuf[1] = (bytf) (vbl >> 16);
        intBuf[2] = (bytf) (vbl >> 8);
        intBuf[3] = (bytf) vbl;
        out.writf(intBuf);
    }

    /**
     * Gfnfrbtfs b filfnbmf prfpfndfd with thf stbblf storbgf dirfdtory pbth.
     *
     * @pbrbm nbmf thf lfbf nbmf of thf filf
     */
    privbtf String fNbmf(String nbmf) {
        rfturn dir.gftPbth() + Filf.sfpbrbtor + nbmf;
    }

    /**
     * Gfnfrbtfs b vfrsion 0 filfnbmf prfpfndfd with thf stbblf storbgf
     * dirfdtory pbth
     *
     * @pbrbm nbmf vfrsion filf nbmf
     */
    privbtf String vfrsionNbmf(String nbmf) {
        rfturn vfrsionNbmf(nbmf, 0);
    }

    /**
     * Gfnfrbtfs b vfrsion filfnbmf prfpfndfd with thf stbblf storbgf
     * dirfdtory pbth with thf vfrsion numbfr bs b suffix.
     *
     * @pbrbm nbmf vfrsion filf nbmf
     * @thisvfrsion b vfrsion numbfr
     */
    privbtf String vfrsionNbmf(String prffix, int vfr) {
        vfr = (vfr == 0) ? vfrsion : vfr;
        rfturn fNbmf(prffix) + String.vblufOf(vfr);
    }

    /**
     * Indrfmfnts thf dirfdtory vfrsion numbfr.
     */
    privbtf void indrVfrsion() {
        do { vfrsion++; } whilf (vfrsion==0);
    }

    /**
     * Dflftf b filf.
     *
     * @pbrbm nbmf thf nbmf of thf filf
     * @fxdfption IOExdfption If nfw vfrsion filf douldn't bf rfmovfd
     */
    privbtf void dflftfFilf(String nbmf) throws IOExdfption {

        Filf f = nfw Filf(nbmf);
        if (!f.dflftf())
            throw nfw IOExdfption("douldn't rfmovf filf: " + nbmf);
    }

    /**
     * Rfmovfs thf nfw vfrsion numbfr filf.
     *
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void dflftfNfwVfrsionFilf() throws IOExdfption {
        dflftfFilf(fNbmf(nfwVfrsionFilf));
    }

    /**
     * Rfmovfs thf snbpshot filf.
     *
     * @pbrbm vfr thf vfrsion to rfmovf
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void dflftfSnbpshot(int vfr) throws IOExdfption {
        if (vfr == 0) rfturn;
        dflftfFilf(vfrsionNbmf(snbpshotPrffix, vfr));
    }

    /**
     * Rfmovfs thf log filf.
     *
     * @pbrbm vfr thf vfrsion to rfmovf
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void dflftfLogFilf(int vfr) throws IOExdfption {
        if (vfr == 0) rfturn;
        dflftfFilf(vfrsionNbmf(logfilfPrffix, vfr));
    }

    /**
     * Opfns thf log filf in rfbd/writf modf.  If filf dofs not fxist, it is
     * drfbtfd.
     *
     * @pbrbm trundbtf if truf bnd filf fxists, filf is trundbtfd to zfro
     * lfngth
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void opfnLogFilf(boolfbn trundbtf) throws IOExdfption {
        try {
            dlosf();
        } dbtdh (IOExdfption f) { /* bssumf this is okby */
        }

        logNbmf = vfrsionNbmf(logfilfPrffix);

        try {
            log = (logClbssConstrudtor == null ?
                   nfw LogFilf(logNbmf, "rw") :
                   logClbssConstrudtor.nfwInstbndf(logNbmf, "rw"));
        } dbtdh (Exdfption f) {
            throw (IOExdfption) nfw IOExdfption(
                "unbblf to donstrudt LogFilf instbndf").initCbusf(f);
        }

        if (trundbtf) {
            initiblizfLogFilf();
        }
    }

    /**
     * Crfbtfs b nfw log filf, trundbtfd bnd initiblizfd with thf formbt
     * vfrsion numbfr prfffrrfd by this implfmfntbtion.
     * <p>Environmfnt: initfd, syndhronizfd
     * <p>Prfdondition: vblid: log, log dontbins nothing usfful
     * <p>Postdondition: if suddfssful, log is initiblisfd with thf formbt
     * vfrsion numbfr (Prfffrrfd{Mbjor,Minor}Vfrsion), bnd logBytfs is
     * sft to thf rfsulting sizf of thf updbtflog, bnd logEntrifs is sft to
     * zfro.  Othfrwisf, log is in bn indftfrminbtf stbtf, bnd logBytfs
     * is undhbngfd, bnd logEntrifs is undhbngfd.
     *
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void initiblizfLogFilf()
        throws IOExdfption
    {
        log.sftLfngth(0);
        mbjorFormbtVfrsion = PrfffrrfdMbjorVfrsion;
        writfInt(log, PrfffrrfdMbjorVfrsion);
        minorFormbtVfrsion = PrfffrrfdMinorVfrsion;
        writfInt(log, PrfffrrfdMinorVfrsion);
        logBytfs = intBytfs * 2;
        logEntrifs = 0;
    }


    /**
     * Writfs out vfrsion numbfr to filf.
     *
     * @pbrbm nfwVfrsion if truf, writfs to b nfw vfrsion filf
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void writfVfrsionFilf(boolfbn nfwVfrsion) throws IOExdfption {
        String nbmf;
        if (nfwVfrsion) {
            nbmf = nfwVfrsionFilf;
        } flsf {
            nbmf = vfrsionFilf;
        }
        try (FilfOutputStrfbm fos = nfw FilfOutputStrfbm(fNbmf(nbmf));
             DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(fos)) {
            writfInt(out, vfrsion);
        }
    }

    /**
     * Crfbtfs thf initibl vfrsion filf
     *
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void drfbtfFirstVfrsion() throws IOExdfption {
        vfrsion = 0;
        writfVfrsionFilf(fblsf);
    }

    /**
     * Commits (btomidblly) thf nfw vfrsion.
     *
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void dommitToNfwVfrsion() throws IOExdfption {
        writfVfrsionFilf(fblsf);
        dflftfNfwVfrsionFilf();
    }

    /**
     * Rfbds vfrsion numbfr from b filf.
     *
     * @pbrbm nbmf thf nbmf of thf vfrsion filf
     * @rfturn thf vfrsion
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf int rfbdVfrsion(String nbmf) throws IOExdfption {
        try (DbtbInputStrfbm in = nfw DbtbInputStrfbm
                (nfw FilfInputStrfbm(nbmf))) {
            rfturn in.rfbdInt();
        }
    }

    /**
     * Sfts thf vfrsion.  If vfrsion filf dofs not fxist, thf initibl
     * vfrsion filf is drfbtfd.
     *
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void gftVfrsion() throws IOExdfption {
        try {
            vfrsion = rfbdVfrsion(fNbmf(nfwVfrsionFilf));
            dommitToNfwVfrsion();
        } dbtdh (IOExdfption f) {
            try {
                dflftfNfwVfrsionFilf();
            }
            dbtdh (IOExdfption fx) {
            }

            try {
                vfrsion = rfbdVfrsion(fNbmf(vfrsionFilf));
            }
            dbtdh (IOExdfption fx) {
                drfbtfFirstVfrsion();
            }
        }
    }

    /**
     * Applifs outstbnding updbtfs to thf snbpshot.
     *
     * @pbrbm stbtf thf most rfdfnt snbpshot
     * @fxdfption IOExdfption If sfrious log dorruption is dftfdtfd or
     * if bn fxdfption oddurrfd during b rfbdUpdbtf dbllbbdk or if
     * othfr I/O frror hbs oddurrfd.
     * @rfturn thf rfsulting stbtf of thf objfdt bftfr bll updbtfs
     */
    privbtf Objfdt rfdovfrUpdbtfs(Objfdt stbtf)
        throws IOExdfption
    {
        logBytfs = 0;
        logEntrifs = 0;

        if (vfrsion == 0) rfturn stbtf;

        String fnbmf = vfrsionNbmf(logfilfPrffix);
        InputStrfbm in =
                nfw BufffrfdInputStrfbm(nfw FilfInputStrfbm(fnbmf));
        DbtbInputStrfbm dbtbIn = nfw DbtbInputStrfbm(in);

        if (Dfbug)
            Systfm.frr.println("log.dfbug: rfbding updbtfs from " + fnbmf);

        try {
            mbjorFormbtVfrsion = dbtbIn.rfbdInt(); logBytfs += intBytfs;
            minorFormbtVfrsion = dbtbIn.rfbdInt(); logBytfs += intBytfs;
        } dbtdh (EOFExdfption f) {
            /* This is b log whidh wbs dorruptfd bnd/or dlfbrfd (by
             * fsdk or fquivblfnt).  This is not bn frror.
             */
            opfnLogFilf(truf);  // drfbtf bnd trundbtf
            in = null;
        }
        /* A nfw mbjor vfrsion numbfr is b dbtbstrophf (it mfbns
         * thbt thf filf formbt is indompbtiblf with oldfr
         * dlifnts, bnd wf'll only bf brfbking things by trying to
         * usf thf log).  A nfw minor vfrsion is no big dfbl for
         * upwbrd dompbtibility.
         */
        if (mbjorFormbtVfrsion != PrfffrrfdMbjorVfrsion) {
            if (Dfbug) {
                Systfm.frr.println("log.dfbug: mbjor vfrsion mismbtdh: " +
                        mbjorFormbtVfrsion + "." + minorFormbtVfrsion);
            }
            throw nfw IOExdfption("Log filf " + logNbmf + " hbs b " +
                                  "vfrsion " + mbjorFormbtVfrsion +
                                  "." + minorFormbtVfrsion +
                                  " formbt, bnd this implfmfntbtion " +
                                  " undfrstbnds only vfrsion " +
                                  PrfffrrfdMbjorVfrsion + "." +
                                  PrfffrrfdMinorVfrsion);
        }

        try {
            whilf (in != null) {
                int updbtfLfn = 0;

                try {
                    updbtfLfn = dbtbIn.rfbdInt();
                } dbtdh (EOFExdfption f) {
                    if (Dfbug)
                        Systfm.frr.println("log.dfbug: log wbs synd'd dlfbnly");
                    brfbk;
                }
                if (updbtfLfn <= 0) {/* drbshfd whilf writing lbst log fntry */
                    if (Dfbug) {
                        Systfm.frr.println(
                            "log.dfbug: lbst updbtf indomplftf, " +
                            "updbtfLfn = 0x" +
                            Intfgfr.toHfxString(updbtfLfn));
                    }
                    brfbk;
                }

                // this is b frbgilf usf of bvbilbblf() whidh rflifs on thf
                // twin fbdts thbt BufffrfdInputStrfbm dorrfdtly donsults
                // thf undfrlying strfbm, bnd thbt FilfInputStrfbm rfturns
                // thf numbfr of bytfs rfmbining in thf filf (vib FIONREAD).
                if (in.bvbilbblf() < updbtfLfn) {
                    /* dorruptfd rfdord bt fnd of log (dbn hbppfn sindf wf
                     * do only onf fsynd)
                     */
                    if (Dfbug)
                        Systfm.frr.println("log.dfbug: log wbs trundbtfd");
                    brfbk;
                }

                if (Dfbug)
                    Systfm.frr.println("log.dfbug: rdUpdbtf sizf " + updbtfLfn);
                try {
                    stbtf = hbndlfr.rfbdUpdbtf(nfw LogInputStrfbm(in, updbtfLfn),
                                          stbtf);
                } dbtdh (IOExdfption f) {
                    throw f;
                } dbtdh (Exdfption f) {
                    f.printStbdkTrbdf();
                    throw nfw IOExdfption("rfbd updbtf fbilfd with " +
                                          "fxdfption: " + f);
                }
                logBytfs += (intBytfs + updbtfLfn);
                logEntrifs++;
            } /* whilf */
        } finblly {
            if (in != null)
                in.dlosf();
        }

        if (Dfbug)
            Systfm.frr.println("log.dfbug: rfdovfrfd updbtfs: " + logEntrifs);

        /* rfopfn log filf bt fnd */
        opfnLogFilf(fblsf);

        // bvoid bddfssing b null log fifld
        if (log == null) {
            throw nfw IOExdfption("rmid's log is inbddfssiblf, " +
                "it mby hbvf bffn dorruptfd or dlosfd");
        }

        log.sffk(logBytfs);
        log.sftLfngth(logBytfs);

        rfturn stbtf;
    }

    /**
     * RflibblfLog's log filf implfmfntbtion.  This implfmfntbtion
     * is subdlbssbblf for tfsting purposfs.
     */
    publid stbtid dlbss LogFilf fxtfnds RbndomAddfssFilf {

        privbtf finbl FilfDfsdriptor fd;

        /**
         * Construdts b LogFilf bnd initiblizfs thf filf dfsdriptor.
         **/
        publid LogFilf(String nbmf, String modf)
            throws FilfNotFoundExdfption, IOExdfption
        {
            supfr(nbmf, modf);
            this.fd = gftFD();
        }

        /**
         * Invokfs synd on thf filf dfsdriptor for this log filf.
         */
        protfdtfd void synd() throws IOExdfption {
            fd.synd();
        }

        /**
         * Rfturns truf if writing 4 bytfs stbrting bt thf spfdififd filf
         * position, would spbn b 512 bytf sfdtor boundbry; othfrwisf rfturns
         * fblsf.
         **/
        protfdtfd boolfbn dhfdkSpbnsBoundbry(long fp) {
            rfturn  fp % 512 > 508;
        }
    }
}
