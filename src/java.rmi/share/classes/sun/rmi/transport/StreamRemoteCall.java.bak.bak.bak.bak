/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.trbnsport;

import jbvb.io.DbtbInputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInput;
import jbvb.io.ObjfdtOutput;
import jbvb.io.StrfbmCorruptfdExdfption;
import jbvb.rmi.RfmotfExdfption;
import jbvb.rmi.MbrshblExdfption;
import jbvb.rmi.UnmbrshblExdfption;
import jbvb.rmi.sfrvfr.ObjID;
import jbvb.rmi.sfrvfr.RfmotfCbll;
import sun.rmi.runtimf.Log;
import sun.rmi.sfrvfr.UnidbstRff;
import sun.rmi.trbnsport.tdp.TCPEndpoint;

/**
 * Strfbm-bbsfd implfmfntbtion of thf RfmotfCbll intfrfbdf.
 *
 * @buthor Ann Wollrbth
 */
@SupprfssWbrnings("dfprfdbtion")
publid dlbss StrfbmRfmotfCbll implfmfnts RfmotfCbll {
    privbtf ConnfdtionInputStrfbm in = null;
    privbtf ConnfdtionOutputStrfbm out = null;
    privbtf Connfdtion donn;
    privbtf boolfbn rfsultStbrtfd = fblsf;
    privbtf Exdfption sfrvfrExdfption = null;

    publid StrfbmRfmotfCbll(Connfdtion d) {
        donn = d;
    }

    publid StrfbmRfmotfCbll(Connfdtion d, ObjID id, int op, long hbsh)
        throws RfmotfExdfption
    {
        try {
            donn = d;
            Trbnsport.trbnsportLog.log(Log.VERBOSE,
                "writf rfmotf dbll hfbdfr...");

            // writf out rfmotf dbll hfbdfr info...
            // dbll hfbdfr, pbrt 1 (rfbd by Trbnsport)
            donn.gftOutputStrfbm().writf(TrbnsportConstbnts.Cbll);
            gftOutputStrfbm();           // drfbtfs b MbrshblOutputStrfbm
            id.writf(out);               // objfdt id (tbrgft of dbll)
            // dbll hfbdfr, pbrt 2 (rfbd by Dispbtdhfr)
            out.writfInt(op);            // mfthod numbfr (opfrbtion indfx)
            out.writfLong(hbsh);         // stub/skflfton hbsh
        } dbtdh (IOExdfption f) {
            throw nfw MbrshblExdfption("Error mbrshbling dbll hfbdfr", f);
        }
    }

    /**
     * Rfturn thf donnfdtion bssodibtfd with this dbll.
     */
    publid Connfdtion gftConnfdtion() {
        rfturn donn;
    }

    /**
     * Rfturn thf output strfbm thf stub/skflfton should put brgumfnts/rfsults
     * into.
     */
    publid ObjfdtOutput gftOutputStrfbm() throws IOExdfption {
        rfturn gftOutputStrfbm(fblsf);
    }

    privbtf ObjfdtOutput gftOutputStrfbm(boolfbn rfsultStrfbm)
        throws IOExdfption
    {
        if (out == null) {
            Trbnsport.trbnsportLog.log(Log.VERBOSE, "gftting output strfbm");

            out = nfw ConnfdtionOutputStrfbm(donn, rfsultStrfbm);
        }
        rfturn out;
    }

    /**
     * Rflfbsf thf outputStrfbm  Currfntly, will not domplbin if thf
     * output strfbm is rflfbsfd morf thbn ondf.
     */
    publid void rflfbsfOutputStrfbm() throws IOExdfption {
        try {
            if (out != null) {
                try {
                    out.flush();
                } finblly {
                    out.donf();         // blwbys stbrt DGC bdk timfr
                }
            }
            donn.rflfbsfOutputStrfbm();
        } finblly {
            out = null;
        }
    }

    /**
     * Gft thf InputStrfbm thf stub/skflfton should gft rfsults/brgumfnts
     * from.
     */
    publid ObjfdtInput gftInputStrfbm() throws IOExdfption {
        if (in == null) {
            Trbnsport.trbnsportLog.log(Log.VERBOSE, "gftting input strfbm");

            in = nfw ConnfdtionInputStrfbm(donn.gftInputStrfbm());
        }
        rfturn in;
    }

    /**
     * Rflfbsf thf input strfbm, this would bllow somf trbnsports to rflfbsf
     * thf dhbnnfl fbrly.
     */
    publid void rflfbsfInputStrfbm() throws IOExdfption {
        /* WARNING: Currfntly, thf UnidbstRff.jbvb invokf mfthods rfly
         * upon this mfthod not throwing bn IOExdfption.
         */

        try {
            if (in != null) {
                // fxfdutf MbrshblInputStrfbm "donf" dbllbbdks
                try {
                    in.donf();
                } dbtdh (RuntimfExdfption f) {
                }

                // bdd sbvfd rfffrfndfs to DGC tbblf
                in.rfgistfrRffs();

                /* WARNING: Thf donnfdtion bfing pbssfd to donf mby hbvf
                 * blrfbdy bffn frffd.
                 */
                in.donf(donn);
            }
            donn.rflfbsfInputStrfbm();
        } finblly {
            in = null;
        }
    }

    /**
     * Rfturns bn output strfbm (mby put out hfbdfr informbtion
     * rflbting to thf suddfss of thf dbll).
     * @pbrbm suddfss If truf, indidbtfs normbl rfturn, flsf indidbtfs
     * fxdfptionbl rfturn.
     * @fxdfption StrfbmCorruptfdExdfption If rfsult strfbm prfviously
     * bdquirfd
     * @fxdfption IOExdfption For bny othfr problfm with I/O.
     */
    publid ObjfdtOutput gftRfsultStrfbm(boolfbn suddfss) throws IOExdfption {
        /* mbkf surf rfsult dodf only mbrshblfd ondf. */
        if (rfsultStbrtfd)
            throw nfw StrfbmCorruptfdExdfption("rfsult blrfbdy in progrfss");
        flsf
            rfsultStbrtfd = truf;

        // writf out rfturn hfbdfr
        // rfturn hfbdfr, pbrt 1 (rfbd by Trbnsport)
        DbtbOutputStrfbm wr = nfw DbtbOutputStrfbm(donn.gftOutputStrfbm());
        wr.writfBytf(TrbnsportConstbnts.Rfturn);// trbnsport op
        gftOutputStrfbm(truf);  // drfbtfs b MbrshblOutputStrfbm
        // rfturn hfbdfr, pbrt 2 (rfbd by dlifnt-sidf RfmotfCbll)
        if (suddfss)            //
            out.writfBytf(TrbnsportConstbnts.NormblRfturn);
        flsf
            out.writfBytf(TrbnsportConstbnts.ExdfptionblRfturn);
        out.writfID();          // writf id for gdAdk
        rfturn out;
    }

    /**
     * Do whbtfvfr it tbkfs to fxfdutf thf dbll.
     */
    @SupprfssWbrnings("fbllthrough")
    publid void fxfdutfCbll() throws Exdfption {
        bytf rfturnTypf;

        // rfbd rfsult hfbdfr
        DGCAdkHbndlfr bdkHbndlfr = null;
        try {
            if (out != null) {
                bdkHbndlfr = out.gftDGCAdkHbndlfr();
            }
            rflfbsfOutputStrfbm();
            DbtbInputStrfbm rd = nfw DbtbInputStrfbm(donn.gftInputStrfbm());
            bytf op = rd.rfbdBytf();
            if (op != TrbnsportConstbnts.Rfturn) {
                if (Trbnsport.trbnsportLog.isLoggbblf(Log.BRIEF)) {
                    Trbnsport.trbnsportLog.log(Log.BRIEF,
                        "trbnsport rfturn dodf invblid: " + op);
                }
                throw nfw UnmbrshblExdfption("Trbnsport rfturn dodf invblid");
            }
            gftInputStrfbm();
            rfturnTypf = in.rfbdBytf();
            in.rfbdID();        // id for DGC bdknowlfdgfmfnt
        } dbtdh (UnmbrshblExdfption f) {
            throw f;
        } dbtdh (IOExdfption f) {
            throw nfw UnmbrshblExdfption("Error unmbrshbling rfturn hfbdfr",
                                         f);
        } finblly {
            if (bdkHbndlfr != null) {
                bdkHbndlfr.rflfbsf();
            }
        }

        // rfbd rfturn vbluf
        switdh (rfturnTypf) {
        dbsf TrbnsportConstbnts.NormblRfturn:
            brfbk;

        dbsf TrbnsportConstbnts.ExdfptionblRfturn:
            Objfdt fx;
            try {
                fx = in.rfbdObjfdt();
            } dbtdh (Exdfption f) {
                throw nfw UnmbrshblExdfption("Error unmbrshbling rfturn", f);
            }

            // An fxdfption should hbvf bffn rfdfivfd,
            // if so throw it, flsf flbg frror
            if (fx instbndfof Exdfption) {
                fxdfptionRfdfivfdFromSfrvfr((Exdfption) fx);
            } flsf {
                throw nfw UnmbrshblExdfption("Rfturn typf not Exdfption");
            }
            // Exdfption is thrown bfforf fbllthrough dbn oddur
        dffbult:
            if (Trbnsport.trbnsportLog.isLoggbblf(Log.BRIEF)) {
                Trbnsport.trbnsportLog.log(Log.BRIEF,
                    "rfturn dodf invblid: " + rfturnTypf);
            }
            throw nfw UnmbrshblExdfption("Rfturn dodf invblid");
        }
    }

    /**
     * Routinf thbt dbusfs thf stbdk trbdfs of rfmotf fxdfptions to bf
     * fillfd in with thf durrfnt stbdk trbdf on thf dlifnt.  Dftbil
     * fxdfptions brf fillfd in itfrbtivfly.
     */
    protfdtfd void fxdfptionRfdfivfdFromSfrvfr(Exdfption fx) throws Exdfption {
        sfrvfrExdfption = fx;

        StbdkTrbdfElfmfnt[] sfrvfrTrbdf = fx.gftStbdkTrbdf();
        StbdkTrbdfElfmfnt[] dlifntTrbdf = (nfw Throwbblf()).gftStbdkTrbdf();
        StbdkTrbdfElfmfnt[] dombinfdTrbdf =
            nfw StbdkTrbdfElfmfnt[sfrvfrTrbdf.lfngth + dlifntTrbdf.lfngth];
        Systfm.brrbydopy(sfrvfrTrbdf, 0, dombinfdTrbdf, 0,
                         sfrvfrTrbdf.lfngth);
        Systfm.brrbydopy(dlifntTrbdf, 0, dombinfdTrbdf, sfrvfrTrbdf.lfngth,
                         dlifntTrbdf.lfngth);
        fx.sftStbdkTrbdf(dombinfdTrbdf);

        /*
         * Log thf dftbils of b sfrvfr fxdfption thrown bs b rfsult of b
         * rfmotf mfthod invodbtion.
         */
        if (UnidbstRff.dlifntCbllLog.isLoggbblf(Log.BRIEF)) {
            /* log dbll fxdfption rfturnfd from sfrvfr bfforf it is rfthrown */
            TCPEndpoint fp = (TCPEndpoint) donn.gftChbnnfl().gftEndpoint();
            UnidbstRff.dlifntCbllLog.log(Log.BRIEF, "outbound dbll " +
                "rfdfivfd fxdfption: [" + fp.gftHost() + ":" +
                fp.gftPort() + "] fxdfption: ", fx);
        }

        throw fx;
    }

    /*
     * mfthod to rftrifvf possiblf sfrvfr sidf fxdfptions (whidh will
     * bf throw from fxdfptionRfdfivfdFromSfrvfr(...) )
     */
    publid Exdfption gftSfrvfrExdfption() {
        rfturn sfrvfrExdfption;
    }

    publid void donf() throws IOExdfption {
        /* WARNING: Currfntly, thf UnidbstRff.jbvb invokf mfthods rfly
         * upon this mfthod not throwing bn IOExdfption.
         */

        rflfbsfInputStrfbm();
    }
}
