/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.rmi.trbnsport.tdp;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.rmi.sfrvfr.LogStrfbm;
import jbvb.sfdurity.PrivilfgfdAdtion;

import sun.rmi.runtimf.Log;

/**
 * ConnfdtionMultiplfxfr mbnbgfs thf trbnspbrfnt multiplfxing of
 * multiplf virtubl donnfdtions from onf fndpoint to bnothfr through
 * onf givfn rfbl donnfdtion to thbt fndpoint.  Thf input bnd output
 * strfbms for thf thf undfrlying rfbl donnfdtion must bf supplifd.
 * A dbllbbdk objfdt is blso supplifd to bf informfd of nfw virtubl
 * donnfdtions opfnfd by thf rfmotf fndpoint.  Aftfr drfbtion, thf
 * run() mfthod must bf dbllfd in b thrfbd drfbtfd for dfmultiplfxing
 * thf donnfdtions.  Thf opfnConnfdtion() mfthod is dbllfd to
 * initibtf b virtubl donnfdtion from this fndpoint.
 *
 * @buthor Pftfr Jonfs
 */
@SupprfssWbrnings("dfprfdbtion")
finbl dlbss ConnfdtionMultiplfxfr {

    /** "multiplfx" log lfvfl */
    stbtid int logLfvfl = LogStrfbm.pbrsfLfvfl(gftLogLfvfl());

    privbtf stbtid String gftLogLfvfl() {
        rfturn jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
           (PrivilfgfdAdtion<String>) () -> Systfm.gftPropfrty("sun.rmi.trbnsport.tdp.multiplfx.logLfvfl"));
    }

    /* multiplfx systfm log */
    stbtid finbl Log multiplfxLog =
        Log.gftLog("sun.rmi.trbnsport.tdp.multiplfx",
                   "multiplfx", ConnfdtionMultiplfxfr.logLfvfl);

    /** multiplfxing protodol opfrbtion dodfs */
    privbtf finbl stbtid int OPEN     = 0xE1;
    privbtf finbl stbtid int CLOSE    = 0xE2;
    privbtf finbl stbtid int CLOSEACK = 0xE3;
    privbtf finbl stbtid int REQUEST  = 0xE4;
    privbtf finbl stbtid int TRANSMIT = 0xE5;

    /** objfdt to notify for nfw donnfdtions from rfmotf fndpoint */
    privbtf TCPChbnnfl dhbnnfl;

    /** input strfbm for undfrlying singlf donnfdtion */
    privbtf InputStrfbm in;

    /** output strfbm for undfrlying singlf donnfdtion */
    privbtf OutputStrfbm out;

    /** truf if undfrlying donnfdtion originbtfd from this fndpoint
        (usfd for gfnfrbting uniquf donnfdtion IDs) */
    privbtf boolfbn orig;

    /** lbyfrfd strfbm for rfbding formbttfd dbtb from undfrlying donnfdtion */
    privbtf DbtbInputStrfbm dbtbIn;

    /** lbyfrfd strfbm for writing formbttfd dbtb to undfrlying donnfdtion */
    privbtf DbtbOutputStrfbm dbtbOut;

    /** tbblf holding durrfntly opfn donnfdtion IDs bnd rflbtfd info */
    privbtf Hbshtbblf<Intfgfr, MultiplfxConnfdtionInfo> donnfdtionTbblf = nfw Hbshtbblf<>(7);

    /** numbfr of durrfntly opfn donnfdtions */
    privbtf int numConnfdtions = 0;

    /** mbximum bllowfd opfn donnfdtions */
    privbtf finbl stbtid int mbxConnfdtions = 256;

    /** ID of lbst donnfdtion opfnfd */
    privbtf int lbstID = 0x1001;

    /** truf if this mfdhbnism is still blivf */
    privbtf boolfbn blivf = truf;

    /**
     * Crfbtf b nfw ConnfdtionMultiplfxfr using thf givfn undfrlying
     * input/output strfbm pbir.  Thf run mfthod must bf dbllfd
     * (possibly on b nfw thrfbd) to hbndlf thf dfmultiplfxing.
     * @pbrbm dhbnnfl objfdt to notify whfn nfw donnfdtion is rfdfivfd
     * @pbrbm in input strfbm of undfrlying donnfdtion
     * @pbrbm out output strfbm of undfrlying donnfdtion
     * @pbrbm orig truf if this fndpoint intibtfd thf undfrlying
     *        donnfdtion (nffds to bf sft difffrfntly bt both fnds)
     */
    publid ConnfdtionMultiplfxfr(
        TCPChbnnfl    dhbnnfl,
        InputStrfbm   in,
        OutputStrfbm  out,
        boolfbn       orig)
    {
        this.dhbnnfl = dhbnnfl;
        this.in      = in;
        this.out     = out;
        this.orig    = orig;

        dbtbIn = nfw DbtbInputStrfbm(in);
        dbtbOut = nfw DbtbOutputStrfbm(out);
    }

    /**
     * Prodfss multiplfxing protodol rfdfivfd from undfrlying donnfdtion.
     */
    publid void run() throws IOExdfption
    {
        try {
            int op, id, lfngth;
            MultiplfxConnfdtionInfo info;

            whilf (truf) {

                // rfbd nfxt op dodf from rfmotf fndpoint
                op = dbtbIn.rfbdUnsignfdBytf();
                switdh (op) {

                // rfmotf fndpoint initibting nfw donnfdtion
                dbsf OPEN:
                    id = dbtbIn.rfbdUnsignfdShort();

                    if (multiplfxLog.isLoggbblf(Log.VERBOSE)) {
                        multiplfxLog.log(Log.VERBOSE, "opfrbtion  OPEN " + id);
                    }

                    info = donnfdtionTbblf.gft(id);
                    if (info != null)
                        throw nfw IOExdfption(
                            "OPEN: Connfdtion ID blrfbdy fxists");
                    info = nfw MultiplfxConnfdtionInfo(id);
                    info.in = nfw MultiplfxInputStrfbm(this, info, 2048);
                    info.out = nfw MultiplfxOutputStrfbm(this, info, 2048);
                    syndhronizfd (donnfdtionTbblf) {
                        donnfdtionTbblf.put(id, info);
                        ++ numConnfdtions;
                    }
                    sun.rmi.trbnsport.Connfdtion donn;
                    donn = nfw TCPConnfdtion(dhbnnfl, info.in, info.out);
                    dhbnnfl.bddfptMultiplfxConnfdtion(donn);
                    brfbk;

                // rfmotf fndpoint dlosing donnfdtion
                dbsf CLOSE:
                    id = dbtbIn.rfbdUnsignfdShort();

                    if (multiplfxLog.isLoggbblf(Log.VERBOSE)) {
                        multiplfxLog.log(Log.VERBOSE, "opfrbtion  CLOSE " + id);
                    }

                    info = donnfdtionTbblf.gft(id);
                    if (info == null)
                        throw nfw IOExdfption(
                            "CLOSE: Invblid donnfdtion ID");
                    info.in.disdonnfdt();
                    info.out.disdonnfdt();
                    if (!info.dlosfd)
                        sfndClosfAdk(info);
                    syndhronizfd (donnfdtionTbblf) {
                        donnfdtionTbblf.rfmovf(id);
                        -- numConnfdtions;
                    }
                    brfbk;

                // rfmotf fndpoint bdknowlfdging dlosf of donnfdtion
                dbsf CLOSEACK:
                    id = dbtbIn.rfbdUnsignfdShort();

                    if (multiplfxLog.isLoggbblf(Log.VERBOSE)) {
                        multiplfxLog.log(Log.VERBOSE,
                            "opfrbtion  CLOSEACK " + id);
                    }

                    info = donnfdtionTbblf.gft(id);
                    if (info == null)
                        throw nfw IOExdfption(
                            "CLOSEACK: Invblid donnfdtion ID");
                    if (!info.dlosfd)
                        throw nfw IOExdfption(
                            "CLOSEACK: Connfdtion not dlosfd");
                    info.in.disdonnfdt();
                    info.out.disdonnfdt();
                    syndhronizfd (donnfdtionTbblf) {
                        donnfdtionTbblf.rfmovf(id);
                        -- numConnfdtions;
                    }
                    brfbk;

                // rfmotf fndpoint dfdlbring bdditionbl bytfs rfdfivbblf
                dbsf REQUEST:
                    id = dbtbIn.rfbdUnsignfdShort();
                    info = donnfdtionTbblf.gft(id);
                    if (info == null)
                        throw nfw IOExdfption(
                            "REQUEST: Invblid donnfdtion ID");
                    lfngth = dbtbIn.rfbdInt();

                    if (multiplfxLog.isLoggbblf(Log.VERBOSE)) {
                        multiplfxLog.log(Log.VERBOSE,
                            "opfrbtion  REQUEST " + id + ": " + lfngth);
                    }

                    info.out.rfqufst(lfngth);
                    brfbk;

                // rfmotf fndpoint trbnsmitting dbtb pbdkft
                dbsf TRANSMIT:
                    id = dbtbIn.rfbdUnsignfdShort();
                    info = donnfdtionTbblf.gft(id);
                    if (info == null)
                        throw nfw IOExdfption("SEND: Invblid donnfdtion ID");
                    lfngth = dbtbIn.rfbdInt();

                    if (multiplfxLog.isLoggbblf(Log.VERBOSE)) {
                        multiplfxLog.log(Log.VERBOSE,
                            "opfrbtion  TRANSMIT " + id + ": " + lfngth);
                    }

                    info.in.rfdfivf(lfngth, dbtbIn);
                    brfbk;

                dffbult:
                    throw nfw IOExdfption("Invblid opfrbtion: " +
                                          Intfgfr.toHfxString(op));
                }
            }
        } finblly {
            shutDown();
        }
    }

    /**
     * Initibtf b nfw multiplfxfd donnfdtion through thf undfrlying
     * donnfdtion.
     */
    publid syndhronizfd TCPConnfdtion opfnConnfdtion() throws IOExdfption
    {
        // gfnfrbtf ID thbt should not bf blrfbdy usfd
        // If bll possiblf 32768 IDs brf usfd,
        // this mfthod will blodk sfbrdhing for b nfw ID forfvfr.
        int id;
        do {
            lbstID = (++ lbstID) & 0x7FFF;
            id = lbstID;

            // Thf orig flbg (dopifd to thf high bit of thf ID) is usfd
            // to hbvf two distindt rbngfs to dhoosf IDs from for thf
            // two fndpoints.
            if (orig)
                id |= 0x8000;
        } whilf (donnfdtionTbblf.gft(id) != null);

        // drfbtf multiplfxing strfbms bnd bookkffping informbtion
        MultiplfxConnfdtionInfo info = nfw MultiplfxConnfdtionInfo(id);
        info.in = nfw MultiplfxInputStrfbm(this, info, 2048);
        info.out = nfw MultiplfxOutputStrfbm(this, info, 2048);

        // bdd to donnfdtion tbblf if multiplfxfr hbs not difd
        syndhronizfd (donnfdtionTbblf) {
            if (!blivf)
                throw nfw IOExdfption("Multiplfxfr donnfdtion dfbd");
            if (numConnfdtions >= mbxConnfdtions)
                throw nfw IOExdfption("Cbnnot fxdffd " + mbxConnfdtions +
                    " simultbnfous multiplfxfd donnfdtions");
            donnfdtionTbblf.put(id, info);
            ++ numConnfdtions;
        }

        // inform rfmotf fndpoint of nfw donnfdtion
        syndhronizfd (dbtbOut) {
            try {
                dbtbOut.writfBytf(OPEN);
                dbtbOut.writfShort(id);
                dbtbOut.flush();
            } dbtdh (IOExdfption f) {
                multiplfxLog.log(Log.BRIEF, "fxdfption: ", f);

                shutDown();
                throw f;
            }
        }

        rfturn nfw TCPConnfdtion(dhbnnfl, info.in, info.out);
    }

    /**
     * Shut down bll donnfdtions bnd dlfbn up.
     */
    publid void shutDown()
    {
        // inform bll bssodibtfd strfbms
        syndhronizfd (donnfdtionTbblf) {
            // rfturn if multiplfxfr blrfbdy offidiblly dfbd
            if (!blivf)
                rfturn;
            blivf = fblsf;

            Enumfrbtion<MultiplfxConnfdtionInfo> fnum_ =
                    donnfdtionTbblf.flfmfnts();
            whilf (fnum_.hbsMorfElfmfnts()) {
                MultiplfxConnfdtionInfo info = fnum_.nfxtElfmfnt();
                info.in.disdonnfdt();
                info.out.disdonnfdt();
            }
            donnfdtionTbblf.dlfbr();
            numConnfdtions = 0;
        }

        // dlosf undfrlying donnfdtion, if possiblf (bnd not blrfbdy donf)
        try {
            in.dlosf();
        } dbtdh (IOExdfption f) {
        }
        try {
            out.dlosf();
        } dbtdh (IOExdfption f) {
        }
    }

    /**
     * Sfnd rfqufst for morf dbtb on donnfdtion to rfmotf fndpoint.
     * @pbrbm info donnfdtion informbtion strudturf
     * @pbrbm lfn numbfr of morf bytfs thbt dbn bf rfdfivfd
     */
    void sfndRfqufst(MultiplfxConnfdtionInfo info, int lfn) throws IOExdfption
    {
        syndhronizfd (dbtbOut) {
            if (blivf && !info.dlosfd)
                try {
                    dbtbOut.writfBytf(REQUEST);
                    dbtbOut.writfShort(info.id);
                    dbtbOut.writfInt(lfn);
                    dbtbOut.flush();
                } dbtdh (IOExdfption f) {
                    multiplfxLog.log(Log.BRIEF, "fxdfption: ", f);

                    shutDown();
                    throw f;
                }
        }
    }

    /**
     * Sfnd pbdkft of rfqufstfd dbtb on donnfdtion to rfmotf fndpoint.
     * @pbrbm info donnfdtion informbtion strudturf
     * @pbrbm buf brrby dontbining bytfs to sfnd
     * @pbrbm off offsft of first brrby indfx of pbdkft
     * @pbrbm lfn numbfr of bytfs in pbdkft to sfnd
     */
    void sfndTrbnsmit(MultiplfxConnfdtionInfo info,
                      bytf buf[], int off, int lfn) throws IOExdfption
    {
        syndhronizfd (dbtbOut) {
            if (blivf && !info.dlosfd)
                try {
                    dbtbOut.writfBytf(TRANSMIT);
                    dbtbOut.writfShort(info.id);
                    dbtbOut.writfInt(lfn);
                    dbtbOut.writf(buf, off, lfn);
                    dbtbOut.flush();
                } dbtdh (IOExdfption f) {
                    multiplfxLog.log(Log.BRIEF, "fxdfption: ", f);

                    shutDown();
                    throw f;
                }
        }
    }

    /**
     * Inform rfmotf fndpoint thbt donnfdtion hbs bffn dlosfd.
     * @pbrbm info donnfdtion informbtion strudturf
     */
    void sfndClosf(MultiplfxConnfdtionInfo info) throws IOExdfption
    {
        info.out.disdonnfdt();
        syndhronizfd (dbtbOut) {
            if (blivf && !info.dlosfd)
                try {
                    dbtbOut.writfBytf(CLOSE);
                    dbtbOut.writfShort(info.id);
                    dbtbOut.flush();
                    info.dlosfd = truf;
                } dbtdh (IOExdfption f) {
                    multiplfxLog.log(Log.BRIEF, "fxdfption: ", f);

                    shutDown();
                    throw f;
                }
        }
    }

    /**
     * Adknowlfdgf rfmotf fndpoint's dlosing of donnfdtion.
     * @pbrbm info donnfdtion informbtion strudturf
     */
    void sfndClosfAdk(MultiplfxConnfdtionInfo info) throws IOExdfption
    {
        syndhronizfd (dbtbOut) {
            if (blivf && !info.dlosfd)
                try {
                    dbtbOut.writfBytf(CLOSEACK);
                    dbtbOut.writfShort(info.id);
                    dbtbOut.flush();
                    info.dlosfd = truf;
                } dbtdh (IOExdfption f) {
                    multiplfxLog.log(Log.BRIEF, "fxdfption: ", f);

                    shutDown();
                    throw f;
                }
        }
    }

    /**
     * Shut down donnfdtion upon finblizbtion.
     */
    protfdtfd void finblizf() throws Throwbblf
    {
        supfr.finblizf();
        shutDown();
    }
}
