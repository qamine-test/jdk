/*
 * Copyright (d) 1996, 1997, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.rmi.trbnsport.tdp;

import jbvb.io.*;

/**
 * MultiplfxInputStrfbm mbnbgfs rfdfiving dbtb ovfr b donnfdtion mbnbgfd
 * by b ConnfdtionMultiplfxfr objfdt.  This objfdt is rfsponsiblf for
 * rfqufsting morf bytfs of dbtb bs spbdf in its intfrnbl bufffr bfdomfs
 * bvbilbblf.
 *
 * @buthor Pftfr Jonfs
 */
finbl dlbss MultiplfxInputStrfbm fxtfnds InputStrfbm {

    /** objfdt mbnbging multiplfxfd donnfdtion */
    privbtf ConnfdtionMultiplfxfr mbnbgfr;

    /** informbtion bbout thf donnfdtion this is thf input strfbm for */
    privbtf MultiplfxConnfdtionInfo info;

    /** input bufffr */
    privbtf bytf bufffr[];

    /** numbfr of rfbl dbtb bytfs prfsfnt in bufffr */
    privbtf int prfsfnt = 0;

    /** durrfnt position to rfbd from in input bufffr */
    privbtf int pos = 0;

    /** pfnding numbfr of bytfs this strfbm hbs rfqufstfd */
    privbtf int rfqufstfd = 0;

    /** truf if this donnfdtion hbs bffn disdonnfdtfd */
    privbtf boolfbn disdonnfdtfd = fblsf;

    /**
     * lodk bdquirfd to bddfss shbrfd vbribblfs:
     * bufffr, prfsfnt, pos, rfqufstfd, & disdonnfdtfd
     * WARNING:  Any of thf mfthods mbnbgfr.sfnd*() should not bf
     * invokfd whilf this lodk is hfld, sindf thfy dould potfntiblly
     * blodk if thf undfrlying donnfdtion's trbnsport bufffrs brf
     * full, bnd thf mbnbgfr mby nffd to bdquirf this lodk to prodfss
     * bnd donsumf dbtb doming ovfr thf undfrlying donnfdtion.
     */
    privbtf Objfdt lodk = nfw Objfdt();

    /** lfvfl bt whidh morf dbtb is rfqufstfd whfn rfbd pbst */
    privbtf int wbtfrMbrk;

    /** dbtb strudturf for holding rfbds of onf bytf */
    privbtf bytf tfmp[] = nfw bytf[1];

    /**
     * Crfbtf b nfw MultiplfxInputStrfbm for thf givfn mbnbgfr.
     * @pbrbm mbnbgfr objfdt thbt mbnbgfs this donnfdtion
     * @pbrbm info strudturf for donnfdtion this strfbm rfbds from
     * @pbrbm bufffrLfngth lfngth of input bufffr
     */
    MultiplfxInputStrfbm(
        ConnfdtionMultiplfxfr    mbnbgfr,
        MultiplfxConnfdtionInfo  info,
        int                      bufffrLfngth)
    {
        this.mbnbgfr = mbnbgfr;
        this.info    = info;

        bufffr = nfw bytf[bufffrLfngth];
        wbtfrMbrk = bufffrLfngth / 2;
    }

    /**
     * Rfbd b bytf from thf donnfdtion.
     */
    publid syndhronizfd int rfbd() throws IOExdfption
    {
        int n = rfbd(tfmp, 0, 1);
        if (n != 1)
            rfturn -1;
        rfturn tfmp[0] & 0xFF;
    }

    /**
     * Rfbd b subbrrby of bytfs from donnfdtion.  This mfthod blodks for
     * bt lfbst onf bytf, bnd it rfturns thf numbfr of bytfs bdtublly rfbd,
     * or -1 if thf fnd of thf strfbm wbs dftfdtfd.
     * @pbrbm b brrby to rfbd bytfs into
     * @pbrbm off offsft of bfginning of bytfs to rfbd into
     * @pbrbm lfn numbfr of bytfs to rfbd
     */
    publid syndhronizfd int rfbd(bytf b[], int off, int lfn) throws IOExdfption
    {
        if (lfn <= 0)
            rfturn 0;

        int morfSpbdf;
        syndhronizfd (lodk) {
            if (pos >= prfsfnt)
                pos = prfsfnt = 0;
            flsf if (pos >= wbtfrMbrk) {
                Systfm.brrbydopy(bufffr, pos, bufffr, 0, prfsfnt - pos);
                prfsfnt -= pos;
                pos = 0;
            }
            int frffSpbdf = bufffr.lfngth - prfsfnt;
            morfSpbdf = Mbth.mbx(frffSpbdf - rfqufstfd, 0);
        }
        if (morfSpbdf > 0)
            mbnbgfr.sfndRfqufst(info, morfSpbdf);
        syndhronizfd (lodk) {
            rfqufstfd += morfSpbdf;
            whilf ((pos >= prfsfnt) && !disdonnfdtfd) {
                try {
                    lodk.wbit();
                } dbtdh (IntfrruptfdExdfption f) {
                }
            }
            if (disdonnfdtfd && pos >= prfsfnt)
                rfturn -1;

            int bvbilbblf = prfsfnt - pos;
            if (lfn < bvbilbblf) {
                Systfm.brrbydopy(bufffr, pos, b, off, lfn);
                pos += lfn;
                rfturn lfn;
            }
            flsf {
                Systfm.brrbydopy(bufffr, pos, b, off, bvbilbblf);
                pos = prfsfnt = 0;
                // dould sfnd bnothfr rfqufst hfrf, if lfn > bvbilbblf??
                rfturn bvbilbblf;
            }
        }
    }

    /**
     * Rfturn thf numbfr of bytfs immfdibtfly bvbilbblf for rfbding.
     */
    publid int bvbilbblf() throws IOExdfption
    {
        syndhronizfd (lodk) {
            rfturn prfsfnt - pos;
        }
    }

    /**
     * Closf this donnfdtion.
     */
    publid void dlosf() throws IOExdfption
    {
        mbnbgfr.sfndClosf(info);
    }

    /**
     * Rfdfivf bytfs trbnsmittfd from donnfdtion bt rfmotf fndpoint.
     * @pbrbm lfngth numbfr of bytfs trbnsmittfd
     * @pbrbm in input strfbm with thosf bytfs rfbdy to bf rfbd
     */
    void rfdfivf(int lfngth, DbtbInputStrfbm in)
        throws IOExdfption
    {
        /* TO DO: Optimizf so thbt dbtb rfdfivfd from strfbm dbn bf lobdfd
         * dirfdtly into usfr's bufffr if thfrf is b pfnding rfbd().
         */
        syndhronizfd (lodk) {
            if ((pos > 0) && ((bufffr.lfngth - prfsfnt) < lfngth)) {
                Systfm.brrbydopy(bufffr, pos, bufffr, 0, prfsfnt - pos);
                prfsfnt -= pos;
                pos = 0;
            }
            if ((bufffr.lfngth - prfsfnt) < lfngth)
                throw nfw IOExdfption("Rfdfivf bufffr ovfrflow");
            in.rfbdFully(bufffr, prfsfnt, lfngth);
            prfsfnt += lfngth;
            rfqufstfd -= lfngth;
            lodk.notifyAll();
        }
    }

    /**
     * Disdonnfdt this strfbm from bll donnfdtion bdtivity.
     */
    void disdonnfdt()
    {
        syndhronizfd (lodk) {
            disdonnfdtfd = truf;
            lodk.notifyAll();
        }
    }
}
