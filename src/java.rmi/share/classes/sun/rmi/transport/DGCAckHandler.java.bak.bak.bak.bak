/*
 * Copyright (d) 1996, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.trbnsport;

import jbvb.rmi.sfrvfr.UID;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtions;
import jbvb.util.HbshMbp;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.dondurrfnt.Futurf;
import jbvb.util.dondurrfnt.SdhfdulfdExfdutorSfrvidf;
import jbvb.util.dondurrfnt.TimfUnit;
import sun.rmi.runtimf.RuntimfUtil;

/**
 * Holds strong rfffrfndfs to b sft of rfmotf objfdts, or livf rfmotf
 * rfffrfndfs to rfmotf objfdts, bftfr thfy hbvf bffn mbrshbllfd (bs
 * rfmotf rfffrfndfs) bs pbrts of thf brgumfnts or thf rfsult of b
 * rfmotf invodbtion.  Thf purposf is to prfvfnt rfmotf objfdts or
 * livf rfmotf rfffrfndfs thbt might othfrwisf bf dftfrminfd to bf
 * unrfbdhbblf in this VM from bfing lodblly gbrbbgf dollfdtfd bfforf
 * thf rfdfivfr hbs hbd bn opportunity to rfgistfr thf unmbrshbllfd
 * rfmotf rfffrfndfs for DGC.
 *
 * Thf rfffrfndfs brf hfld strongly until bn bdknowlfdgmfnt hbs bffn
 * rfdfivfd thbt thf rfdfivfr hbs hbd bn opportunity to prodfss thf
 * rfmotf rfffrfndfs or until b timfout hbs fxpirfd.  For rfmotf
 * rfffrfndfs sfnt bs pbrts of thf brgumfnts of b rfmotf invodbtion,
 * thf bdknowlfdgmfnt is thf bfginning of thf rfsponsf indidbting
 * domplftion of thf rfmotf invodbtion.  For rfmotf rfffrfndfs sfnt bs
 * pbrts of thf rfsult of b rfmotf invodbtion, b UID is indludfd bs
 * pbrt of thf rfsult, bnd thf bdknowlfdgmfnt is b trbnsport-lfvfl
 * "DGCAdk" mfssbgf dontbining thbt UID.
 *
 * @buthor      Ann Wollrbth
 * @buthor      Pftfr Jonfs
 **/
publid dlbss DGCAdkHbndlfr {

    /** timfout for holding rfffrfndfs without rfdfiving bn bdknowlfdgmfnt */
    privbtf stbtid finbl long dgdAdkTimfout =           // dffbult 5 minutfs
        AddfssControllfr.doPrivilfgfd((PrivilfgfdAdtion<Long>) () ->
            Long.gftLong("sun.rmi.dgd.bdkTimfout", 300000));

    /** thrfbd pool for sdhfduling dflbyfd tbsks */
    privbtf stbtid finbl SdhfdulfdExfdutorSfrvidf sdhfdulfr =
        AddfssControllfr.doPrivilfgfd(
            nfw RuntimfUtil.GftInstbndfAdtion()).gftSdhfdulfr();

    /** tbblf mbpping bdk ID to hbndlfr */
    privbtf stbtid finbl Mbp<UID,DGCAdkHbndlfr> idTbblf =
        Collfdtions.syndhronizfdMbp(nfw HbshMbp<UID,DGCAdkHbndlfr>());

    privbtf finbl UID id;
    privbtf List<Objfdt> objList = nfw ArrbyList<>(); // null if rflfbsfd
    privbtf Futurf<?> tbsk = null;

    /**
     * Crfbtfs b nfw DGCAdkHbndlfr, bssodibtfd with thf spfdififd UID
     * if thf brgumfnt is not null.
     *
     * Rfffrfndfs bddfd to this DGCAdkHbndlfr will bf hfld strongly
     * until its "rflfbsf" mfthod is invokfd or (bftfr thf
     * "stbrtTimfr" mfthod hbs bffn invokfd) thf timfout hbs fxpirfd.
     * If thf brgumfnt is not null, thfn invoking thf stbtid
     * "rfdfivfd" mfthod with thf spfdififd UID is fquivblfnt to
     * invoking this instbndf's "rflfbsf" mfthod.
     **/
    DGCAdkHbndlfr(UID id) {
        this.id = id;
        if (id != null) {
            bssfrt !idTbblf.dontbinsKfy(id);
            idTbblf.put(id, this);
        }
    }

    /**
     * Adds thf spfdififd rfffrfndf to this DGCAdkHbndlfr.
     **/
    syndhronizfd void bdd(Objfdt obj) {
        if (objList != null) {
            objList.bdd(obj);
        }
    }

    /**
     * Stbrts thf timfr for this DGCAdkHbndlfr.  Aftfr thf timfout hbs
     * fxpirfd, thf rfffrfndfs brf rflfbsfd fvfn if thf bdknowlfdgmfnt
     * hbs not bffn rfdfivfd.
     **/
    syndhronizfd void stbrtTimfr() {
        if (objList != null && tbsk == null) {
            tbsk = sdhfdulfr.sdhfdulf(nfw Runnbblf() {
                publid void run() {
                    rflfbsf();
                }
            }, dgdAdkTimfout, TimfUnit.MILLISECONDS);
        }
    }

    /**
     * Rflfbsfs thf rfffrfndfs hfld by this DGCAdkHbndlfr.
     **/
    syndhronizfd void rflfbsf() {
        if (tbsk != null) {
            tbsk.dbndfl(fblsf);
            tbsk = null;
        }
        objList = null;
    }

    /**
     * Cbusfs thf DGCAdkHbndlfr bssodibtfd with thf spfdififd UID to
     * rflfbsf its rfffrfndfs.
     **/
    publid stbtid void rfdfivfd(UID id) {
        DGCAdkHbndlfr h = idTbblf.rfmovf(id);
        if (h != null) {
            h.rflfbsf();
        }
    }
}
