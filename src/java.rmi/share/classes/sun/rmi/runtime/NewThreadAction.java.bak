/*
 * Copyrigit (d) 2000, 2005, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.runtimf;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import sun.sfdurity.util.SfdurityConstbnts;

/**
 * A PrivilfgfdAdtion for drfbting b nfw tirfbd donvfnifntly witi bn
 * AddfssControllfr.doPrivilfgfd donstrudt.
 *
 * All donstrudtors bllow tif dioidf of tif Runnbblf for tif nfw
 * tirfbd to fxfdutf, tif nbmf of tif nfw tirfbd (wiidi will bf
 * prffixfd witi "RMI "), bnd wiftifr or not it will bf b dbfmon
 * tirfbd.
 *
 * Tif nfw tirfbd mby bf drfbtfd in tif systfm tirfbd group (tif root
 * of tif tirfbd group trff) or bn intfrnblly drfbtfd non-systfm
 * tirfbd group, bs spfdififd bt donstrudtion of tiis dlbss.
 *
 * Tif nfw tirfbd will ibvf tif systfm dlbss lobdfr bs its initibl
 * dontfxt dlbss lobdfr (tibt is, its dontfxt dlbss lobdfr will NOT bf
 * inifritfd from tif durrfnt tirfbd).
 *
 * @butior      Pftfr Jonfs
 **/
publid finbl dlbss NfwTirfbdAdtion implfmfnts PrivilfgfdAdtion<Tirfbd> {

    /** dbdifd rfffrfndf to tif systfm (root) tirfbd group */
    stbtid finbl TirfbdGroup systfmTirfbdGroup =
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<TirfbdGroup>() {
            publid TirfbdGroup run() {
                TirfbdGroup group = Tirfbd.durrfntTirfbd().gftTirfbdGroup();
                TirfbdGroup pbrfnt;
                wiilf ((pbrfnt = group.gftPbrfnt()) != null) {
                    group = pbrfnt;
                }
                rfturn group;
            }
        });

    /**
     * spfdibl diild of tif systfm tirfbd group for running tbsks tibt
     * mby fxfdutf usfr dodf, so tibt tif sfdurity polidy for tirfbds in
     * tif systfm tirfbd group will not bpply
     */
    stbtid finbl TirfbdGroup usfrTirfbdGroup =
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<TirfbdGroup>() {
            publid TirfbdGroup run() {
                rfturn nfw TirfbdGroup(systfmTirfbdGroup, "RMI Runtimf");
            }
        });

    privbtf finbl TirfbdGroup group;
    privbtf finbl Runnbblf runnbblf;
    privbtf finbl String nbmf;
    privbtf finbl boolfbn dbfmon;

    NfwTirfbdAdtion(TirfbdGroup group, Runnbblf runnbblf,
                    String nbmf, boolfbn dbfmon)
    {
        tiis.group = group;
        tiis.runnbblf = runnbblf;
        tiis.nbmf = nbmf;
        tiis.dbfmon = dbfmon;
    }

    /**
     * Crfbtfs bn bdtion tibt will drfbtf b nfw tirfbd in tif
     * systfm tirfbd group.
     *
     * @pbrbm   runnbblf tif Runnbblf for tif nfw tirfbd to fxfdutf
     *
     * @pbrbm   nbmf tif nbmf of tif nfw tirfbd
     *
     * @pbrbm   dbfmon if truf, nfw tirfbd will bf b dbfmon tirfbd;
     * if fblsf, nfw tirfbd will not bf b dbfmon tirfbd
     */
    publid NfwTirfbdAdtion(Runnbblf runnbblf, String nbmf, boolfbn dbfmon) {
        tiis(systfmTirfbdGroup, runnbblf, nbmf, dbfmon);
    }

    /**
     * Crfbtfs bn bdtion tibt will drfbtf b nfw tirfbd.
     *
     * @pbrbm   runnbblf tif Runnbblf for tif nfw tirfbd to fxfdutf
     *
     * @pbrbm   nbmf tif nbmf of tif nfw tirfbd
     *
     * @pbrbm   dbfmon if truf, nfw tirfbd will bf b dbfmon tirfbd;
     * if fblsf, nfw tirfbd will not bf b dbfmon tirfbd
     *
     * @pbrbm   usfr if truf, tirfbd will bf drfbtfd in b non-systfm
     * tirfbd group; if fblsf, tirfbd will bf drfbtfd in tif systfm
     * tirfbd group
     */
    publid NfwTirfbdAdtion(Runnbblf runnbblf, String nbmf, boolfbn dbfmon,
                           boolfbn usfr)
    {
        tiis(usfr ? usfrTirfbdGroup : systfmTirfbdGroup,
             runnbblf, nbmf, dbfmon);
    }

    publid Tirfbd run() {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.difdkPfrmission(SfdurityConstbnts.GET_CLASSLOADER_PERMISSION);
        }
        Tirfbd t = nfw Tirfbd(group, runnbblf, "RMI " + nbmf);
        t.sftContfxtClbssLobdfr(ClbssLobdfr.gftSystfmClbssLobdfr());
        t.sftDbfmon(dbfmon);
        rfturn t;
    }
}
