/*
 * Copyright (d) 2000, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.runtimf;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import sun.sfdurity.util.SfdurityConstbnts;

/**
 * A PrivilfgfdAdtion for drfbting b nfw thrfbd donvfnifntly with bn
 * AddfssControllfr.doPrivilfgfd donstrudt.
 *
 * All donstrudtors bllow thf dhoidf of thf Runnbblf for thf nfw
 * thrfbd to fxfdutf, thf nbmf of thf nfw thrfbd (whidh will bf
 * prffixfd with "RMI "), bnd whfthfr or not it will bf b dbfmon
 * thrfbd.
 *
 * Thf nfw thrfbd mby bf drfbtfd in thf systfm thrfbd group (thf root
 * of thf thrfbd group trff) or bn intfrnblly drfbtfd non-systfm
 * thrfbd group, bs spfdififd bt donstrudtion of this dlbss.
 *
 * Thf nfw thrfbd will hbvf thf systfm dlbss lobdfr bs its initibl
 * dontfxt dlbss lobdfr (thbt is, its dontfxt dlbss lobdfr will NOT bf
 * inhfritfd from thf durrfnt thrfbd).
 *
 * @buthor      Pftfr Jonfs
 **/
publid finbl dlbss NfwThrfbdAdtion implfmfnts PrivilfgfdAdtion<Thrfbd> {

    /** dbdhfd rfffrfndf to thf systfm (root) thrfbd group */
    stbtid finbl ThrfbdGroup systfmThrfbdGroup =
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<ThrfbdGroup>() {
            publid ThrfbdGroup run() {
                ThrfbdGroup group = Thrfbd.durrfntThrfbd().gftThrfbdGroup();
                ThrfbdGroup pbrfnt;
                whilf ((pbrfnt = group.gftPbrfnt()) != null) {
                    group = pbrfnt;
                }
                rfturn group;
            }
        });

    /**
     * spfdibl dhild of thf systfm thrfbd group for running tbsks thbt
     * mby fxfdutf usfr dodf, so thbt thf sfdurity polidy for thrfbds in
     * thf systfm thrfbd group will not bpply
     */
    stbtid finbl ThrfbdGroup usfrThrfbdGroup =
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<ThrfbdGroup>() {
            publid ThrfbdGroup run() {
                rfturn nfw ThrfbdGroup(systfmThrfbdGroup, "RMI Runtimf");
            }
        });

    privbtf finbl ThrfbdGroup group;
    privbtf finbl Runnbblf runnbblf;
    privbtf finbl String nbmf;
    privbtf finbl boolfbn dbfmon;

    NfwThrfbdAdtion(ThrfbdGroup group, Runnbblf runnbblf,
                    String nbmf, boolfbn dbfmon)
    {
        this.group = group;
        this.runnbblf = runnbblf;
        this.nbmf = nbmf;
        this.dbfmon = dbfmon;
    }

    /**
     * Crfbtfs bn bdtion thbt will drfbtf b nfw thrfbd in thf
     * systfm thrfbd group.
     *
     * @pbrbm   runnbblf thf Runnbblf for thf nfw thrfbd to fxfdutf
     *
     * @pbrbm   nbmf thf nbmf of thf nfw thrfbd
     *
     * @pbrbm   dbfmon if truf, nfw thrfbd will bf b dbfmon thrfbd;
     * if fblsf, nfw thrfbd will not bf b dbfmon thrfbd
     */
    publid NfwThrfbdAdtion(Runnbblf runnbblf, String nbmf, boolfbn dbfmon) {
        this(systfmThrfbdGroup, runnbblf, nbmf, dbfmon);
    }

    /**
     * Crfbtfs bn bdtion thbt will drfbtf b nfw thrfbd.
     *
     * @pbrbm   runnbblf thf Runnbblf for thf nfw thrfbd to fxfdutf
     *
     * @pbrbm   nbmf thf nbmf of thf nfw thrfbd
     *
     * @pbrbm   dbfmon if truf, nfw thrfbd will bf b dbfmon thrfbd;
     * if fblsf, nfw thrfbd will not bf b dbfmon thrfbd
     *
     * @pbrbm   usfr if truf, thrfbd will bf drfbtfd in b non-systfm
     * thrfbd group; if fblsf, thrfbd will bf drfbtfd in thf systfm
     * thrfbd group
     */
    publid NfwThrfbdAdtion(Runnbblf runnbblf, String nbmf, boolfbn dbfmon,
                           boolfbn usfr)
    {
        this(usfr ? usfrThrfbdGroup : systfmThrfbdGroup,
             runnbblf, nbmf, dbfmon);
    }

    publid Thrfbd run() {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkPfrmission(SfdurityConstbnts.GET_CLASSLOADER_PERMISSION);
        }
        Thrfbd t = nfw Thrfbd(group, runnbblf, "RMI " + nbmf);
        t.sftContfxtClbssLobdfr(ClbssLobdfr.gftSystfmClbssLobdfr());
        t.sftDbfmon(dbfmon);
        rfturn t;
    }
}
