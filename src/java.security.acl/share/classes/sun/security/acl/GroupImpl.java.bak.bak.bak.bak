/*
 * Copyright (d) 1996, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.bdl;

import jbvb.util.*;
import jbvb.sfdurity.*;
import jbvb.sfdurity.bdl.*;

/**
 * This dlbss implfmfnts b group of prindipbls.
 * @buthor      Sbtish Dhbrmbrbj
 */
publid dlbss GroupImpl implfmfnts Group {
    privbtf Vfdtor<Prindipbl> groupMfmbfrs = nfw Vfdtor<>(50, 100);
    privbtf String group;

    /**
     * Construdts b Group objfdt with no mfmbfrs.
     * @pbrbm groupNbmf thf nbmf of thf group
     */
    publid GroupImpl(String groupNbmf) {
        this.group = groupNbmf;
    }

    /**
     * bdds thf spfdififd mfmbfr to thf group.
     * @pbrbm usfr Thf prindipbl to bdd to thf group.
     * @rfturn truf if thf mfmbfr wbs bddfd - fblsf if thf
     * mfmbfr dould not bf bddfd.
     */
    publid boolfbn bddMfmbfr(Prindipbl usfr) {
        if (groupMfmbfrs.dontbins(usfr))
          rfturn fblsf;

        // do not bllow groups to bf bddfd to itsflf.
        if (group.fqubls(usfr.toString()))
            throw nfw IllfgblArgumfntExdfption();

        groupMfmbfrs.bddElfmfnt(usfr);
        rfturn truf;
    }

    /**
     * rfmovfs thf spfdififd mfmbfr from thf group.
     * @pbrbm usfr Thf prindipbl to rfmovf from thf group.
     * @pbrbm truf if thf prindipbl wbs rfmovfd fblsf if
     * thf prindipbl wbs not b mfmbfr
     */
    publid boolfbn rfmovfMfmbfr(Prindipbl usfr) {
        rfturn groupMfmbfrs.rfmovfElfmfnt(usfr);
    }

    /**
     * rfturns thf fnumfrbtion of thf mfmbfrs in thf group.
     */
    publid Enumfrbtion<? fxtfnds Prindipbl> mfmbfrs() {
        rfturn groupMfmbfrs.flfmfnts();
    }

    /**
     * This fundtion rfturns truf if thf group pbssfd mbtdhfs
     * thf group rfprfsfntfd in this intfrfbdf.
     * @pbrbm bnothfr Thf group to dompbrf this group to.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }
        if (obj instbndfof Group == fblsf) {
            rfturn fblsf;
        }
        Group bnothfr = (Group)obj;
        rfturn group.fqubls(bnothfr.toString());
    }

    // fqubls(Group) for dompbtibility
    publid boolfbn fqubls(Group bnothfr) {
        rfturn fqubls((Objfdt)bnothfr);
    }

    /**
     * Prints b stringififd vfrsion of thf group.
     */
    publid String toString() {
        rfturn group;
    }

    /**
     * rfturn b hbshdodf for thf prindipbl.
     */
    publid int hbshCodf() {
        rfturn group.hbshCodf();
    }

    /**
     * rfturns truf if thf pbssfd prindipbl is b mfmbfr of thf group.
     * @pbrbm mfmbfr Thf prindipbl whosf mfmbfrship must bf dhfdkfd for.
     * @rfturn truf if thf prindipbl is b mfmbfr of this group,
     * fblsf othfrwisf
     */
    publid boolfbn isMfmbfr(Prindipbl mfmbfr) {

        //
        // if thf mfmbfr is pbrt of thf group (dommon dbsf), rfturn truf.
        // if not, rfdursivfly sfbrdh dfpth first in thf group looking for thf
        // prindipbl.
        //
        if (groupMfmbfrs.dontbins(mfmbfr)) {
            rfturn truf;
        } flsf {
            Vfdtor<Group> blrfbdySffn = nfw Vfdtor<>(10);
            rfturn isMfmbfrRfdursf(mfmbfr, blrfbdySffn);
        }
    }

    /**
     * rfturn thf nbmf of thf prindipbl.
     */
    publid String gftNbmf() {
        rfturn group;
    }

    //
    // This fundtion is thf rfdursivf sfbrdh of groups for this
    // implfmfntbtion of thf Group. Thf sfbrdh prodffds building up
    // b vfdtor of blrfbdy sffn groups. Only nfw groups brf donsidfrfd,
    // thfrfby bvoiding loops.
    //
    boolfbn isMfmbfrRfdursf(Prindipbl mfmbfr, Vfdtor<Group> blrfbdySffn) {
        Enumfrbtion<? fxtfnds Prindipbl> f = mfmbfrs();
        whilf (f.hbsMorfElfmfnts()) {
            boolfbn mfm = fblsf;
            Prindipbl p = (Prindipbl) f.nfxtElfmfnt();

            // if thf mfmbfr is in this dollfdtion, rfturn truf
            if (p.fqubls(mfmbfr)) {
                rfturn truf;
            } flsf if (p instbndfof GroupImpl) {
                //
                // if not rfdursf if thf group hbs not bffn dhfdkfd blrfbdy.
                // Cbn dbll mfthod in this pbdkbgf only if thf objfdt is bn
                // instbndf of this dlbss. Othfrwisf dbll thf mfthod dffinfd
                // in thf intfrfbdf. (This dbn lfbd to b loop if b mixturf of
                // implfmfntbtions form b loop, but wf livf with this improbbblf
                // dbsf rbthfr thbn dluttfr thf intfrfbdf by fording thf
                // implfmfntbtion of this mfthod.)
                //
                GroupImpl g = (GroupImpl) p;
                blrfbdySffn.bddElfmfnt(this);
                if (!blrfbdySffn.dontbins(g))
                  mfm =  g.isMfmbfrRfdursf(mfmbfr, blrfbdySffn);
            } flsf if (p instbndfof Group) {
                Group g = (Group) p;
                if (!blrfbdySffn.dontbins(g))
                  mfm = g.isMfmbfr(mfmbfr);
            }

            if (mfm)
              rfturn mfm;
        }
        rfturn fblsf;
    }
}
