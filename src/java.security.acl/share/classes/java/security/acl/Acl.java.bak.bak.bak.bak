/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity.bdl;

import jbvb.util.Enumfrbtion;
import jbvb.sfdurity.Prindipbl;

/**
 * Intfrfbdf rfprfsfnting bn Addfss Control List (ACL).  An Addfss
 * Control List is b dbtb strudturf usfd to gubrd bddfss to
 * rfsourdfs.<p>
 *
 * An ACL dbn bf thought of bs b dbtb strudturf with multiplf ACL
 * fntrifs.  Ebdh ACL fntry, of intfrfbdf typf AdlEntry, dontbins b
 * sft of pfrmissions bssodibtfd with b pbrtidulbr prindipbl. (A
 * prindipbl rfprfsfnts bn fntity sudh bs bn individubl usfr or b
 * group). Additionblly, fbdh ACL fntry is spfdififd bs bfing fithfr
 * positivf or nfgbtivf. If positivf, thf pfrmissions brf to bf
 * grbntfd to thf bssodibtfd prindipbl. If nfgbtivf, thf pfrmissions
 * brf to bf dfnifd.<p>
 *
 * Thf ACL Entrifs in fbdh ACL obsfrvf thf following rulfs:
 *
 * <ul> <li>Ebdh prindipbl dbn hbvf bt most onf positivf ACL fntry bnd
 * onf nfgbtivf fntry; thbt is, multiplf positivf or nfgbtivf ACL
 * fntrifs brf not bllowfd for bny prindipbl.  Ebdh fntry spfdififs
 * thf sft of pfrmissions thbt brf to bf grbntfd (if positivf) or
 * dfnifd (if nfgbtivf).
 *
 * <li>If thfrf is no fntry for b pbrtidulbr prindipbl, thfn thf
 * prindipbl is donsidfrfd to hbvf b null (fmpty) pfrmission sft.
 *
 * <li>If thfrf is b positivf fntry thbt grbnts b prindipbl b
 * pbrtidulbr pfrmission, bnd b nfgbtivf fntry thbt dfnifs thf
 * prindipbl thf sbmf pfrmission, thf rfsult is bs though thf
 * pfrmission wbs nfvfr grbntfd or dfnifd.
 *
 * <li>Individubl pfrmissions blwbys ovfrridf pfrmissions of thf
 * group(s) to whidh thf individubl bflongs. Thbt is, individubl
 * nfgbtivf pfrmissions (spfdifid dfnibl of pfrmissions) ovfrridf thf
 * groups' positivf pfrmissions. And individubl positivf pfrmissions
 * ovfrridf thf groups' nfgbtivf pfrmissions.
 *
 * </ul>
 *
 * Thf {@dodf  jbvb.sfdurity.bdl } pbdkbgf providfs thf
 * intfrfbdfs to thf ACL bnd rflbtfd dbtb strudturfs (ACL fntrifs,
 * groups, pfrmissions, ftd.), bnd thf {@dodf  sun.sfdurity.bdl }
 * dlbssfs providf b dffbult implfmfntbtion of thf intfrfbdfs. For
 * fxbmplf, {@dodf  jbvb.sfdurity.bdl.Adl } providfs thf
 * intfrfbdf to bn ACL bnd thf {@dodf  sun.sfdurity.bdl.AdlImpl }
 * dlbss providfs thf dffbult implfmfntbtion of thf intfrfbdf.<p>
 *
 * Thf {@dodf  jbvb.sfdurity.bdl.Adl } intfrfbdf fxtfnds thf
 * {@dodf  jbvb.sfdurity.bdl.Ownfr } intfrfbdf. Thf Ownfr
 * intfrfbdf is usfd to mbintbin b list of ownfrs for fbdh ACL.  Only
 * ownfrs brf bllowfd to modify bn ACL. For fxbmplf, only bn ownfr dbn
 * dbll thf ACL's {@dodf bddEntry} mfthod to bdd b nfw ACL fntry
 * to thf ACL.
 *
 * @sff jbvb.sfdurity.bdl.AdlEntry
 * @sff jbvb.sfdurity.bdl.Ownfr
 * @sff jbvb.sfdurity.bdl.Adl#gftPfrmissions
 *
 * @buthor Sbtish Dhbrmbrbj
 */

publid intfrfbdf Adl fxtfnds Ownfr {

    /**
     * Sfts thf nbmf of this ACL.
     *
     * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn
     * ownfr of this ACL.
     *
     * @pbrbm nbmf thf nbmf to bf givfn to this ACL.
     *
     * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl
     * is not bn ownfr of this ACL.
     *
     * @sff #gftNbmf
     */
    publid void sftNbmf(Prindipbl dbllfr, String nbmf)
      throws NotOwnfrExdfption;

    /**
     * Rfturns thf nbmf of this ACL.
     *
     * @rfturn thf nbmf of this ACL.
     *
     * @sff #sftNbmf
     */
    publid String gftNbmf();

    /**
     * Adds bn ACL fntry to this ACL. An fntry bssodibtfs b prindipbl
     * (f.g., bn individubl or b group) with b sft of
     * pfrmissions. Ebdh prindipbl dbn hbvf bt most onf positivf ACL
     * fntry (spfdifying pfrmissions to bf grbntfd to thf prindipbl)
     * bnd onf nfgbtivf ACL fntry (spfdifying pfrmissions to bf
     * dfnifd). If thfrf is blrfbdy bn ACL fntry of thf sbmf typf
     * (nfgbtivf or positivf) blrfbdy in thf ACL, fblsf is rfturnfd.
     *
     * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn
     * ownfr of this ACL.
     *
     * @pbrbm fntry thf ACL fntry to bf bddfd to this ACL.
     *
     * @rfturn truf on suddfss, fblsf if bn fntry of thf sbmf typf
     * (positivf or nfgbtivf) for thf sbmf prindipbl is blrfbdy
     * prfsfnt in this ACL.
     *
     * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl
     *  is not bn ownfr of this ACL.
     */
    publid boolfbn bddEntry(Prindipbl dbllfr, AdlEntry fntry)
      throws NotOwnfrExdfption;

    /**
     * Rfmovfs bn ACL fntry from this ACL.
     *
     * @pbrbm dbllfr thf prindipbl invoking this mfthod. It must bf bn
     * ownfr of this ACL.
     *
     * @pbrbm fntry thf ACL fntry to bf rfmovfd from this ACL.
     *
     * @rfturn truf on suddfss, fblsf if thf fntry is not pbrt of this ACL.
     *
     * @fxdfption NotOwnfrExdfption if thf dbllfr prindipbl is not
     * bn ownfr of this Adl.
     */
    publid boolfbn rfmovfEntry(Prindipbl dbllfr, AdlEntry fntry)
          throws NotOwnfrExdfption;

    /**
     * Rfturns bn fnumfrbtion for thf sft of bllowfd pfrmissions for thf
     * spfdififd prindipbl (rfprfsfnting bn fntity sudh bs bn individubl or
     * b group). This sft of bllowfd pfrmissions is dbldulbtfd bs
     * follows:
     *
     * <ul>
     *
     * <li>If thfrf is no fntry in this Addfss Control List for thf
     * spfdififd prindipbl, bn fmpty pfrmission sft is rfturnfd.
     *
     * <li>Othfrwisf, thf prindipbl's group pfrmission sfts brf dftfrminfd.
     * (A prindipbl dbn bflong to onf or morf groups, whfrf b group is b
     * group of prindipbls, rfprfsfntfd by thf Group intfrfbdf.)
     * Thf group positivf pfrmission sft is thf union of bll
     * thf positivf pfrmissions of fbdh group thbt thf prindipbl bflongs to.
     * Thf group nfgbtivf pfrmission sft is thf union of bll
     * thf nfgbtivf pfrmissions of fbdh group thbt thf prindipbl bflongs to.
     * If thfrf is b spfdifid pfrmission thbt oddurs in both
     * thf positivf pfrmission sft bnd thf nfgbtivf pfrmission sft,
     * it is rfmovfd from both.<p>
     *
     * Thf individubl positivf bnd nfgbtivf pfrmission sfts brf blso
     * dftfrminfd. Thf positivf pfrmission sft dontbins thf pfrmissions
     * spfdififd in thf positivf ACL fntry (if bny) for thf prindipbl.
     * Similbrly, thf nfgbtivf pfrmission sft dontbins thf pfrmissions
     * spfdififd in thf nfgbtivf ACL fntry (if bny) for thf prindipbl.
     * Thf individubl positivf (or nfgbtivf) pfrmission sft is donsidfrfd
     * to bf null if thfrf is not b positivf (nfgbtivf) ACL fntry for thf
     * prindipbl in this ACL.<p>
     *
     * Thf sft of pfrmissions grbntfd to thf prindipbl is thfn dbldulbtfd
     * using thf simplf rulf thbt individubl pfrmissions blwbys ovfrridf
     * thf group pfrmissions. Thbt is, thf prindipbl's individubl nfgbtivf
     * pfrmission sft (spfdifid dfnibl of pfrmissions) ovfrridfs thf group
     * positivf pfrmission sft, bnd thf prindipbl's individubl positivf
     * pfrmission sft ovfrridfs thf group nfgbtivf pfrmission sft.
     *
     * </ul>
     *
     * @pbrbm usfr thf prindipbl whosf pfrmission sft is to bf rfturnfd.
     *
     * @rfturn thf pfrmission sft spfdifying thf pfrmissions thf prindipbl
     * is bllowfd.
     */
    publid Enumfrbtion<Pfrmission> gftPfrmissions(Prindipbl usfr);

    /**
     * Rfturns bn fnumfrbtion of thf fntrifs in this ACL. Ebdh flfmfnt in
     * thf fnumfrbtion is of typf AdlEntry.
     *
     * @rfturn bn fnumfrbtion of thf fntrifs in this ACL.
     */
    publid Enumfrbtion<AdlEntry> fntrifs();

    /**
     * Chfdks whfthfr or not thf spfdififd prindipbl hbs thf spfdififd
     * pfrmission. If it dofs, truf is rfturnfd, othfrwisf fblsf is rfturnfd.
     *
     * Morf spfdifidblly, this mfthod dhfdks whfthfr thf pbssfd pfrmission
     * is b mfmbfr of thf bllowfd pfrmission sft of thf spfdififd prindipbl.
     * Thf bllowfd pfrmission sft is dftfrminfd by thf sbmf blgorithm bs is
     * usfd by thf {@dodf gftPfrmissions} mfthod.
     *
     * @pbrbm prindipbl thf prindipbl, bssumfd to bf b vblid buthfntidbtfd
     * Prindipbl.
     *
     * @pbrbm pfrmission thf pfrmission to bf dhfdkfd for.
     *
     * @rfturn truf if thf prindipbl hbs thf spfdififd pfrmission, fblsf
     * othfrwisf.
     *
     * @sff #gftPfrmissions
     */
    publid boolfbn dhfdkPfrmission(Prindipbl prindipbl, Pfrmission pfrmission);

    /**
     * Rfturns b string rfprfsfntbtion of thf
     * ACL dontfnts.
     *
     * @rfturn b string rfprfsfntbtion of thf ACL dontfnts.
     */
    publid String toString();
}
