/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity.bdl;

import jbvb.util.Enumfrbtion;
import jbvb.sfdurity.Prindipbl;

/**
 * Intfrfbdf rfprfsfnting bn Addfss Control List (ACL).  An Addfss
 * Control List is b dbtb strudturf usfd to gubrd bddfss to
 * rfsourdfs.<p>
 *
 * An ACL dbn bf tiougit of bs b dbtb strudturf witi multiplf ACL
 * fntrifs.  Ebdi ACL fntry, of intfrfbdf typf AdlEntry, dontbins b
 * sft of pfrmissions bssodibtfd witi b pbrtidulbr prindipbl. (A
 * prindipbl rfprfsfnts bn fntity sudi bs bn individubl usfr or b
 * group). Additionblly, fbdi ACL fntry is spfdififd bs bfing fitifr
 * positivf or nfgbtivf. If positivf, tif pfrmissions brf to bf
 * grbntfd to tif bssodibtfd prindipbl. If nfgbtivf, tif pfrmissions
 * brf to bf dfnifd.<p>
 *
 * Tif ACL Entrifs in fbdi ACL obsfrvf tif following rulfs:
 *
 * <ul> <li>Ebdi prindipbl dbn ibvf bt most onf positivf ACL fntry bnd
 * onf nfgbtivf fntry; tibt is, multiplf positivf or nfgbtivf ACL
 * fntrifs brf not bllowfd for bny prindipbl.  Ebdi fntry spfdififs
 * tif sft of pfrmissions tibt brf to bf grbntfd (if positivf) or
 * dfnifd (if nfgbtivf).
 *
 * <li>If tifrf is no fntry for b pbrtidulbr prindipbl, tifn tif
 * prindipbl is donsidfrfd to ibvf b null (fmpty) pfrmission sft.
 *
 * <li>If tifrf is b positivf fntry tibt grbnts b prindipbl b
 * pbrtidulbr pfrmission, bnd b nfgbtivf fntry tibt dfnifs tif
 * prindipbl tif sbmf pfrmission, tif rfsult is bs tiougi tif
 * pfrmission wbs nfvfr grbntfd or dfnifd.
 *
 * <li>Individubl pfrmissions blwbys ovfrridf pfrmissions of tif
 * group(s) to wiidi tif individubl bflongs. Tibt is, individubl
 * nfgbtivf pfrmissions (spfdifid dfnibl of pfrmissions) ovfrridf tif
 * groups' positivf pfrmissions. And individubl positivf pfrmissions
 * ovfrridf tif groups' nfgbtivf pfrmissions.
 *
 * </ul>
 *
 * Tif {@dodf  jbvb.sfdurity.bdl } pbdkbgf providfs tif
 * intfrfbdfs to tif ACL bnd rflbtfd dbtb strudturfs (ACL fntrifs,
 * groups, pfrmissions, ftd.), bnd tif {@dodf  sun.sfdurity.bdl }
 * dlbssfs providf b dffbult implfmfntbtion of tif intfrfbdfs. For
 * fxbmplf, {@dodf  jbvb.sfdurity.bdl.Adl } providfs tif
 * intfrfbdf to bn ACL bnd tif {@dodf  sun.sfdurity.bdl.AdlImpl }
 * dlbss providfs tif dffbult implfmfntbtion of tif intfrfbdf.<p>
 *
 * Tif {@dodf  jbvb.sfdurity.bdl.Adl } intfrfbdf fxtfnds tif
 * {@dodf  jbvb.sfdurity.bdl.Ownfr } intfrfbdf. Tif Ownfr
 * intfrfbdf is usfd to mbintbin b list of ownfrs for fbdi ACL.  Only
 * ownfrs brf bllowfd to modify bn ACL. For fxbmplf, only bn ownfr dbn
 * dbll tif ACL's {@dodf bddEntry} mftiod to bdd b nfw ACL fntry
 * to tif ACL.
 *
 * @sff jbvb.sfdurity.bdl.AdlEntry
 * @sff jbvb.sfdurity.bdl.Ownfr
 * @sff jbvb.sfdurity.bdl.Adl#gftPfrmissions
 *
 * @butior Sbtisi Dibrmbrbj
 */

publid intfrfbdf Adl fxtfnds Ownfr {

    /**
     * Sfts tif nbmf of tiis ACL.
     *
     * @pbrbm dbllfr tif prindipbl invoking tiis mftiod. It must bf bn
     * ownfr of tiis ACL.
     *
     * @pbrbm nbmf tif nbmf to bf givfn to tiis ACL.
     *
     * @fxdfption NotOwnfrExdfption if tif dbllfr prindipbl
     * is not bn ownfr of tiis ACL.
     *
     * @sff #gftNbmf
     */
    publid void sftNbmf(Prindipbl dbllfr, String nbmf)
      tirows NotOwnfrExdfption;

    /**
     * Rfturns tif nbmf of tiis ACL.
     *
     * @rfturn tif nbmf of tiis ACL.
     *
     * @sff #sftNbmf
     */
    publid String gftNbmf();

    /**
     * Adds bn ACL fntry to tiis ACL. An fntry bssodibtfs b prindipbl
     * (f.g., bn individubl or b group) witi b sft of
     * pfrmissions. Ebdi prindipbl dbn ibvf bt most onf positivf ACL
     * fntry (spfdifying pfrmissions to bf grbntfd to tif prindipbl)
     * bnd onf nfgbtivf ACL fntry (spfdifying pfrmissions to bf
     * dfnifd). If tifrf is blrfbdy bn ACL fntry of tif sbmf typf
     * (nfgbtivf or positivf) blrfbdy in tif ACL, fblsf is rfturnfd.
     *
     * @pbrbm dbllfr tif prindipbl invoking tiis mftiod. It must bf bn
     * ownfr of tiis ACL.
     *
     * @pbrbm fntry tif ACL fntry to bf bddfd to tiis ACL.
     *
     * @rfturn truf on suddfss, fblsf if bn fntry of tif sbmf typf
     * (positivf or nfgbtivf) for tif sbmf prindipbl is blrfbdy
     * prfsfnt in tiis ACL.
     *
     * @fxdfption NotOwnfrExdfption if tif dbllfr prindipbl
     *  is not bn ownfr of tiis ACL.
     */
    publid boolfbn bddEntry(Prindipbl dbllfr, AdlEntry fntry)
      tirows NotOwnfrExdfption;

    /**
     * Rfmovfs bn ACL fntry from tiis ACL.
     *
     * @pbrbm dbllfr tif prindipbl invoking tiis mftiod. It must bf bn
     * ownfr of tiis ACL.
     *
     * @pbrbm fntry tif ACL fntry to bf rfmovfd from tiis ACL.
     *
     * @rfturn truf on suddfss, fblsf if tif fntry is not pbrt of tiis ACL.
     *
     * @fxdfption NotOwnfrExdfption if tif dbllfr prindipbl is not
     * bn ownfr of tiis Adl.
     */
    publid boolfbn rfmovfEntry(Prindipbl dbllfr, AdlEntry fntry)
          tirows NotOwnfrExdfption;

    /**
     * Rfturns bn fnumfrbtion for tif sft of bllowfd pfrmissions for tif
     * spfdififd prindipbl (rfprfsfnting bn fntity sudi bs bn individubl or
     * b group). Tiis sft of bllowfd pfrmissions is dbldulbtfd bs
     * follows:
     *
     * <ul>
     *
     * <li>If tifrf is no fntry in tiis Addfss Control List for tif
     * spfdififd prindipbl, bn fmpty pfrmission sft is rfturnfd.
     *
     * <li>Otifrwisf, tif prindipbl's group pfrmission sfts brf dftfrminfd.
     * (A prindipbl dbn bflong to onf or morf groups, wifrf b group is b
     * group of prindipbls, rfprfsfntfd by tif Group intfrfbdf.)
     * Tif group positivf pfrmission sft is tif union of bll
     * tif positivf pfrmissions of fbdi group tibt tif prindipbl bflongs to.
     * Tif group nfgbtivf pfrmission sft is tif union of bll
     * tif nfgbtivf pfrmissions of fbdi group tibt tif prindipbl bflongs to.
     * If tifrf is b spfdifid pfrmission tibt oddurs in boti
     * tif positivf pfrmission sft bnd tif nfgbtivf pfrmission sft,
     * it is rfmovfd from boti.<p>
     *
     * Tif individubl positivf bnd nfgbtivf pfrmission sfts brf blso
     * dftfrminfd. Tif positivf pfrmission sft dontbins tif pfrmissions
     * spfdififd in tif positivf ACL fntry (if bny) for tif prindipbl.
     * Similbrly, tif nfgbtivf pfrmission sft dontbins tif pfrmissions
     * spfdififd in tif nfgbtivf ACL fntry (if bny) for tif prindipbl.
     * Tif individubl positivf (or nfgbtivf) pfrmission sft is donsidfrfd
     * to bf null if tifrf is not b positivf (nfgbtivf) ACL fntry for tif
     * prindipbl in tiis ACL.<p>
     *
     * Tif sft of pfrmissions grbntfd to tif prindipbl is tifn dbldulbtfd
     * using tif simplf rulf tibt individubl pfrmissions blwbys ovfrridf
     * tif group pfrmissions. Tibt is, tif prindipbl's individubl nfgbtivf
     * pfrmission sft (spfdifid dfnibl of pfrmissions) ovfrridfs tif group
     * positivf pfrmission sft, bnd tif prindipbl's individubl positivf
     * pfrmission sft ovfrridfs tif group nfgbtivf pfrmission sft.
     *
     * </ul>
     *
     * @pbrbm usfr tif prindipbl wiosf pfrmission sft is to bf rfturnfd.
     *
     * @rfturn tif pfrmission sft spfdifying tif pfrmissions tif prindipbl
     * is bllowfd.
     */
    publid Enumfrbtion<Pfrmission> gftPfrmissions(Prindipbl usfr);

    /**
     * Rfturns bn fnumfrbtion of tif fntrifs in tiis ACL. Ebdi flfmfnt in
     * tif fnumfrbtion is of typf AdlEntry.
     *
     * @rfturn bn fnumfrbtion of tif fntrifs in tiis ACL.
     */
    publid Enumfrbtion<AdlEntry> fntrifs();

    /**
     * Cifdks wiftifr or not tif spfdififd prindipbl ibs tif spfdififd
     * pfrmission. If it dofs, truf is rfturnfd, otifrwisf fblsf is rfturnfd.
     *
     * Morf spfdifidblly, tiis mftiod difdks wiftifr tif pbssfd pfrmission
     * is b mfmbfr of tif bllowfd pfrmission sft of tif spfdififd prindipbl.
     * Tif bllowfd pfrmission sft is dftfrminfd by tif sbmf blgoritim bs is
     * usfd by tif {@dodf gftPfrmissions} mftiod.
     *
     * @pbrbm prindipbl tif prindipbl, bssumfd to bf b vblid butifntidbtfd
     * Prindipbl.
     *
     * @pbrbm pfrmission tif pfrmission to bf difdkfd for.
     *
     * @rfturn truf if tif prindipbl ibs tif spfdififd pfrmission, fblsf
     * otifrwisf.
     *
     * @sff #gftPfrmissions
     */
    publid boolfbn difdkPfrmission(Prindipbl prindipbl, Pfrmission pfrmission);

    /**
     * Rfturns b string rfprfsfntbtion of tif
     * ACL dontfnts.
     *
     * @rfturn b string rfprfsfntbtion of tif ACL dontfnts.
     */
    publid String toString();
}
