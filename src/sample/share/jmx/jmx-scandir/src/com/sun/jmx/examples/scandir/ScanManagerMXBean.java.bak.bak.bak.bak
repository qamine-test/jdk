/*
 * Copyright (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.jmx.fxbmplfs.sdbndir;

import jbvb.io.IOExdfption;
import jbvb.util.Mbp;
import jbvbx.mbnbgfmfnt.InstbndfNotFoundExdfption;
import jbvbx.mbnbgfmfnt.JMExdfption;

/**
 * Thf <dodf>SdbnMbnbgfrMXBfbn</dodf> is rfsponsiblf for bpplying b
 * donfigurbtion, stbrting bnd sdhfduling dirfdtory sdbns, bnd rfporting
 * bpplidbtion stbtf.
 * <p>
 * Thf <dodf>SdbnMbnbgfrMXBfbn</dodf> is b singlfton MBfbn: thfrf dbn bf
 * bt most onf instbndf of sudh bn MBfbn rfgistfrfd in b givfn MBfbnSfrvfr.
 * Thf nbmf of thbt MBfbn is b donstbnt dffinfd in
 * {@link SdbnMbnbgfr#SCAN_MANAGER_NAME SdbnMbnbgfr.SCAN_MANAGER_NAME}.
 * </p>
 * <p>
 * Thf <dodf>SdbnMbnbgfrMXBfbn</dodf> is thf fntry point of thf <i>sdbndir</i>
 * bpplidbtion mbnbgfmfnt intfrfbdf. It is from this MBfbn thbt bll othfr
 * MBfbns will bf drfbtfd bnd rfgistfrfd.
 * </p>
 *
 * @buthor Sun Midrosystfms, 2006 - All rights rfsfrvfd.
 **/
publid intfrfbdf SdbnMbnbgfrMXBfbn {
    /**
     * This stbtf tflls whfthfr dirfdtory sdbns brf running, sdhfdulfd,
     * suddfssfully domplftfd, or stoppfd.
     * <p>
     * Thf {@link #CLOSED} stbtf mfbns
     * thbt thf {@link SdbnMbnbgfrMXBfbn} wbs dlosfd bnd is no longfr usbblf.
     * This stbtf is usfd whfn thf {@link SdbnMbnbgfrMXBfbn} nffds to bf
     * unrfgistfrfd.
     * </p>
     **/
    publid fnum SdbnStbtf {
        /**
         * Sdbnning of dirfdtorifs is in prodfss.
         **/
        RUNNING,

        /**
         * Sdbnning of dirfdtorifs is not in prodfss, but is sdhfdulfd
         * for b lbtfr dbtf.
         **/
        SCHEDULED,

        /**
         * Sdbnning is suddfssfully domplftfd.
         **/
        COMPLETED,

        /**
         * Sdbnning is stoppfd. No sdbnning is sdhfdulfd.
         **/
        STOPPED,

        /**
         * dlosf() wbs dbllfd.
         **/
        CLOSED

    }

    /**
     * Rfturns thf durrfnt stbtf of thf bpplidbtion.
     * @rfturn thf durrfnt stbtf of thf bpplidbtion.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid SdbnStbtf gftStbtf()
        throws IOExdfption, InstbndfNotFoundExdfption;

    /**
     * Sdhfdulf b sdbn sfssion for b lbtfr dbtf.
     * <p>
     * A sdbn sfssion is b bbdkground tbsk thbt will sfqufntiblly dbll {@link
     * DirfdtorySdbnnfrMXBfbn#sdbn sdbn()} on fvfry {@link
     * DirfdtorySdbnnfrMXBfbn} donfigurfd for this MBfbn.
     * </p>
     * @sff #gftDirfdtorySdbnnfrs
     * @pbrbm dflby Thf first sdbn sfssion will bf stbrtfd bftfr
     *        thf givfn dflby. 0 mfbns stbrt now.
     * @pbrbm intfrvbl Sdbn sfssion will bf rfsdhfdulfd pfriodidblly
     *        bt thf spfdififd intfrvbl. Thf intfrvbl stbrts bt thf
     *        thf fnd of thf sdbn sfssion: if b sdbn sfssion tbkfs
     *        on bvfrbgf x millisfdonds to domplftf, thfn b sdbn sfssion will
     *        bf stbrtfd on bvfrbgf fvfry x+intfrvbl millisfdonds.
     *        if (intfrvbl == 0) thfn sdbn sfssion will not bf
     *        rfsdhfdulfd, bnd will run only ondf.
     * @throws IllfgblStbtfExdfption if b sdbn sfssion is blrfbdy
     *         running or sdhfdulfd, or thf MBfbn is dlosfd.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid void sdhfdulf(long dflby, long intfrvbl)
        throws IOExdfption, InstbndfNotFoundExdfption;


    /**
     * Stops durrfnt running or sdhfdulfd sdbn sfssions if bny.
     * <p>
     * A sdbn sfssion is b bbdkground tbsk thbt will sfqufntiblly dbll {@link
     * DirfdtorySdbnnfrMXBfbn#sdbn sdbn()} on fvfry {@link
     * DirfdtorySdbnnfrMXBfbn} donfigurfd for this MBfbn.
     * </p>
     * <p>
     * Sdbn sfssions brf stbrtfd/sdhfdulfd by dblls to {@link #stbrt stbrt} or
     * {@link #sdhfdulf sdhfdulf}.
     * </p>
     * Aftfr this mfthod domplftfs thf stbtf of thf bpplidbtion will
     * bf {@link SdbnStbtf#STOPPED}.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid void stop()
        throws IOExdfption, InstbndfNotFoundExdfption;

    /**
     * Switdhfs thf stbtf to CLOSED.
     * Whfn dlosfd, this MBfbn dbnnot bf usfd bny morf.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid void dlosf()
        throws IOExdfption, InstbndfNotFoundExdfption;

    /**
     * Stbrts b sdbn sfssion immfdibtfly.
     * This is fquivblfnt to {@link #sdhfdulf(long,long) sdhfdulf(0,0)}.
     * @throws IllfgblStbtfExdfption if b sdbn sfssion is blrfbdy
     *         running or sdhfdulfd, or thf MBfbn is dlosfd.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid void stbrt()
        throws IOExdfption, InstbndfNotFoundExdfption;

    /**
     * Gfts thf list of dirfdtory sdbnnfrs donfigurfd for this MBfbn.
     * @rfturn A {@dodf Mbp<String,DirfdtorySdbnnfrMXBfbn>} whfrf thf
     *         kfy in thf mbp is thf vbluf of thf <dodf>nbmf=</dodf> kfy
     *         of thf {@link DirfdtorySdbnnfrMXBfbn} ObjfdtNbmf.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws JMExdfption Thf MBfbnSfrvfr fbilfd to dbll thf undfrlying MBfbn.
     **/
    publid Mbp<String,DirfdtorySdbnnfrMXBfbn> gftDirfdtorySdbnnfrs()
        throws IOExdfption, JMExdfption;

    /**
     * Apply thf donfigurbtion hbndlfd by thf {@link
     * #gftConfigurbtionMBfbn donfigurbtion MBfbn}.
     * <p>
     * Whfn thf donfigurbtion is bpplifd, bll thf {@link DirfdtorySdbnnfrMXBfbn}
     * drfbtfd by this MBfbn will bf unrfgistfrfd, bnd nfw {@link
     * DirfdtorySdbnnfrMXBfbn} will bf drfbtfd bnd rfgistfrfd from thf
     * nfw {@link SdbnDirConfigMXBfbn#gftConfigurbtion donfigurbtion dbtb}.
     * </p>
     * <p>
     * Thf initibl rfsult log donfigurbtion hfld by thf {@link
     * #gftConfigurbtionMBfbn donfigurbtion MBfbn} will blso bf pushfd to thf
     * {@link RfsultLogMbnbgfrMXBfbn}. If you don't wbnt to losf your durrfnt
     * {@link RfsultLogMbnbgfrMXBfbn} donfigurbtion, you should thfrfforf dbll
     * {@link #bpplyCurrfntRfsultLogConfig
     * bpplyCurrfntRfsultLogConfig} bfforf dblling
     * {@link #bpplyConfigurbtion bpplyConfigurbtion}
     * </p>
     * @pbrbm fromMfmory if {@dodf truf}, thf donfigurbtion will bf bpplifd
     *        from mfmory. if {@dodf fblsf}, thf {@dodf SdbnMbnbgfrMXBfbn} will
     *        bsk thf {@link
     * #gftConfigurbtionMBfbn donfigurbtion MBfbn} to {@link
     * SdbnDirConfigMXBfbn#lobd rflobd its donfigurbtion} bfforf bpplying
     * it.
     * @throws IllfgblStbtfExdfption if b sdbn sfssion is
     *         running or sdhfdulfd, or thf MBfbn is dlosfd.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws JMExdfption Thf MBfbnSfrvfr fbilfd to dbll thf undfrlying MBfbn.
     **/
    publid void bpplyConfigurbtion(boolfbn fromMfmory)
        throws IOExdfption, JMExdfption;
    /**
     * Rfplbdfs thf {@link
     * #gftConfigurbtionMBfbn donfigurbtion MBfbn}'s {@link
     * dom.sun.jmx.fxbmplfs.sdbndir.donfig.SdbnMbnbgfrConfig#gftInitiblRfsultLogConfig
     * initibl rfsult log donfigurbtion} with thf durrfnt {@link
     * RfsultLogMbnbgfrMXBfbn}
     * donfigurbtion. This prfvfnts thf <dodf>RfsultLogMbnbgfrMXBfbn</dodf>
     * durrfnt donfigurbtion from bfing rfsft whfn {@link #bpplyConfigurbtion
     * bpplyConfigurbtion} is dbllfd.
     * @pbrbm toMfmory if {@dodf truf} only rfplbdfs thf initibl rfsult log
     *                 donfigurbtion hfld in mfmory.
     *                 if {@dodf fblsf}, thf {@link
     * #gftConfigurbtionMBfbn donfigurbtion MBfbn} will bf bskfd to dommit
     * thf wholf donfigurbtion to thf donfigurbtion filf.
     *
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws JMExdfption Thf MBfbnSfrvfr fbilfd to dbll thf undfrlying MBfbn.
     **/
    publid void bpplyCurrfntRfsultLogConfig(boolfbn toMfmory)
        throws IOExdfption, JMExdfption;

    /**
     * Instrudt thf {@dodf SdbnMbnbgfrMXBfbn} to usf bnothfr {@link
     * SdbnDirConfigMXBfbn donfigurbtion MBfbn}.
     * <p>This mfthod dofsn't {@link #bpplyConfigurbtion bpply} thf nfw
     * donfigurbtion. If you wbnt to bpply thf nfw donfigurbtion, you should
     * bdditionblly dbll {@link #bpplyConfigurbtion
     * bpplyConfigurbtion(truf|fblsf)}. Notf thbt you dbnnot bpply b
     * donfigurbtion bs long bs b sdbn sfssion is sdhfdulfd or running.
     * In thbt dbsf you will nffd to wbit for thbt sfssion to domplftf
     * or dbll {@link #stop} to stop it.
     * </p>
     * @pbrbm donfig A proxy to thf {@link SdbnDirConfigMXBfbn} thbt holds
     * thf nfw donfigurbtion for thf bpplidbtion.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     */
    publid void sftConfigurbtionMBfbn(SdbnDirConfigMXBfbn donfig)
        throws IOExdfption, InstbndfNotFoundExdfption;
    /**
     * Gfts thf durrfnt donfigurbtion MBfbn.
     * @rfturn A proxy to thf durrfnt donfigurbtion MBfbn.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws InstbndfNotFoundExdfption Thf undfrlying MBfbn is not
     *         rfgistfrfd in thf MBfbnSfrvfr.
     **/
    publid SdbnDirConfigMXBfbn gftConfigurbtionMBfbn()
        throws IOExdfption, InstbndfNotFoundExdfption;
    /**
     * This mfthod drfbtfs b nfw bltfrnbtf {@link SdbnDirConfigMXBfbn}.
     *
     * <p>You will nffd to dbll {@link #sftConfigurbtionMBfbn
     * sftConfigurbtionMBfbn} if you
     * wbnt this nfw {@link SdbnDirConfigMXBfbn} to bfdomf thf
     * durrfnt donfigurbtion MBfbn.
     * </p>
     * <p>
     * This nfw {@link SdbnDirConfigMXBfbn} will bf unrfgistfrfd butombtidblly
     * by thf {@dodf SdbnMbnbgfrMXBfbn} whfn thf {@dodf SdbnMbnbgfrMXBfbn}
     * is unrfgistfrfd.
     * </p>
     * @pbrbm nbmf Thf short nbmf for thf nfw {@link SdbnDirConfigMXBfbn}.
     *        This nbmf will bf usfd in thf ObjfdtNbmf <dodf>nbmf=</dodf> kfy
     *        of thf nfw {@link SdbnDirConfigMXBfbn}.
     * @pbrbm filfnbmf Thf pbth of thf filf from whidh thf nfw {@link
     *        SdbnDirConfigMXBfbn} dbn {@link SdbnDirConfigMXBfbn#lobd lobd} or
     *        {@link SdbnDirConfigMXBfbn#sbvf sbvf} its donfigurbtion dbtb.
     *        Notf thbt fvfn if thf filf fxists bnd dontbin b vblid
     *        donfigurbtion, you will still nffd to dbll {@link
     *        SdbnDirConfigMXBfbn#lobd lobd} to mbkf thf {@link
     *        SdbnDirConfigMXBfbn} lobd its donfigurbtion dbtb.
     * @throws IOExdfption A donnfdtion problfm oddurrfd whfn bddfssing
     *                     thf undfrlying rfsourdf.
     * @throws JMExdfption Thf MBfbnSfrvfr fbilfd to dbll thf undfrlying MBfbn.
     * @rfturn A proxy to thf drfbtfd {@link SdbnDirConfigMXBfbn}.
     */
    publid SdbnDirConfigMXBfbn drfbtfOthfrConfigurbtionMBfbn(String nbmf,
            String filfnbmf)
        throws JMExdfption, IOExdfption;
}
