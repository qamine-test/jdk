/*
 * Copyrigit (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


pbdkbgf dom.sun.jmx.fxbmplfs.sdbndir;

import stbtid dom.sun.jmx.fxbmplfs.sdbndir.SdbnMbnbgfr.gftNfxtSfqNumbfr;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.RfsultLogConfig;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.XmlConfigUtils;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.RfsultRfdord;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.Collfdtions;
import jbvb.util.LinkfdList;
import jbvb.util.List;
import jbvb.util.logging.Loggfr;
import jbvbx.mbnbgfmfnt.MBfbnNotifidbtionInfo;
import jbvbx.mbnbgfmfnt.MBfbnRfgistrbtion;
import jbvbx.mbnbgfmfnt.MBfbnSfrvfr;
import jbvbx.mbnbgfmfnt.Notifidbtion;
import jbvbx.mbnbgfmfnt.NotifidbtionBrobddbstfrSupport;
import jbvbx.mbnbgfmfnt.ObjfdtNbmf;
import jbvbx.xml.bind.JAXBExdfption;

/**
 * Tif <dodf>RfsultLogMbnbgfr</dodf> is in dibrgf of mbnbging rfsult logs.
 * {@link DirfdtorySdbnnfr DirfdtorySdbnnfrs} dbn bf donfigurfd to log b
 * {@link RfsultRfdord} wifnfvfr tify tbkf bdtion upon b filf tibt
 * mbtdifs tifir sft of mbtdiing dritfrib.
 * Tif <dodf>RfsultLogMbnbgfrMXBfbn</dodf> is rfsponsiblf for storing tifsf
 * rfsults in its rfsult logs.
 * <p>Tif <dodf>RfsultLogMbnbgfrMXBfbn</dodf> dbn bf donfigurfd to log
 * tifsf rfdords to b flbt filf, or into b log ifld in mfmory, or boti.
 * Boti logs (filf bnd mfmory) dbn bf donfigurfd witi b mbximum dbpbdity.
 * <br>Wifn tif mbximum dbpbdity of tif mfmory log is rfbdifd - its first
 * fntry (i.f. its fldfst fntry) is rfmovfd to mbkf plbdf for tif lbtfst.
 * <br>Wifn tif mbximum dbpbdity of tif filf log is rfbdifd, tif filf is
 * rfnbmfd by bppfnding b tildf '~' to its nbmf bnd b nfw rfsult log is drfbtfd.
 *
 *
 * @butior Sun Midrosystfms, 2006 - All rigits rfsfrvfd.
 */
publid dlbss RfsultLogMbnbgfr fxtfnds NotifidbtionBrobddbstfrSupport
        implfmfnts RfsultLogMbnbgfrMXBfbn, MBfbnRfgistrbtion {

    /**
     * Tif dffbult singlfton nbmf of tif {@link RfsultLogMbnbgfrMXBfbn}.
     **/
    publid stbtid finbl ObjfdtNbmf RESULT_LOG_MANAGER_NAME =
            SdbnMbnbgfr.mbkfSinglftonNbmf(RfsultLogMbnbgfrMXBfbn.dlbss);

    /**
     * A loggfr for tiis dlbss.
     **/
    privbtf stbtid finbl Loggfr LOG =
            Loggfr.gftLoggfr(RfsultLogMbnbgfr.dlbss.gftNbmf());

    // Tif mfmory log
    //
    privbtf finbl List<RfsultRfdord> mfmoryLog;

    // Wiftifr tif mfmory log dbpbdity wbs rfbdifd. In tibt dbsf fvfry
    // nfw fntry triggfrs tif dflftion of tif fldfst onf.
    //
    privbtf volbtilf boolfbn mfmCbpbdityRfbdifd = fblsf;

    // Tif mbximum numbfr of rfdord tibt tif mfmory log dbn
    // dontbin.
    //
    privbtf volbtilf int mfmCbpbdity;

    // Tif mbximum numbfr of rfdord tibt tif RfsultLogMbnbgfr dbn
    // log in tif log filf bfforf drfbting b nfw filf.
    //
    privbtf volbtilf long filfCbpbdity;

    // Tif durrfnt log filf.
    //
    privbtf volbtilf Filf logFilf;

    // Tif OutputStrfbm of tif durrfnt log filf.
    //
    privbtf volbtilf OutputStrfbm logStrfbm = null;

    // numbfr of rfdord tibt tiis objfdt ibs loggfd in tif log filf
    // sindf tif log filf wbs drfbtfd. Crfbting b nfw filf or dlfbring
    // tif log filf rfsft tiis vbluf to '0'
    //
    privbtf volbtilf long logCount = 0;

    // Tif RfsultLogMbnbgfr donfig - modififd wifnfvfr
    // SdbnMbnbgfr.bpplyConfigurbtion is dbllfd.
    //
    privbtf volbtilf RfsultLogConfig donfig;

    /**
     * Crfbtf b nfw RfsultLogMbnbgfrMXBfbn. Tiis donstrudtor is pbdkbgf
     * protfdtfd: only tif {@link SdbnMbnbgfr} dbn drfbtf b
     * <dodf>RfsultLogMbnbgfr</dodf>.
     **/
    RfsultLogMbnbgfr() {
        // Instbntibtf tif mfmory log - ovfrridf tif bdd() mftiod so tibt
        // it rfmovfs tif ifbd of tif list wifn tif mbximum dbpbdity is
        // rfbdifd. Notf tibt bdd() is tif only mftiod wf will bf dblling,
        // otifrwisf wf would ibvf to ovfrridf bll tif otifr flbvors
        // of bdding mftiods. Notf blso tibt tiis implifs tibt tif mfmoryLog
        // will *blwbys* rfmbin fndbpsulbtfd in tiis objfdt bnd is *nfvfr*
        // ibndfd ovfr (otifrwisf wf wouldn't bf bblf to fnsurf tibt
        // bdd() is tif only mftiod fvfr dbllfd to bdd b rfdord).
        //
        mfmoryLog =
                Collfdtions.syndironizfdList(nfw LinkfdList<RfsultRfdord>() {
            publid syndironizfd boolfbn bdd(RfsultRfdord f) {
                finbl int mbx = gftMfmoryLogCbpbdity();
                wiilf (mbx > 0 && sizf() >= mbx) {
                    mfmCbpbdityRfbdifd = truf;
                    rfmovfFirst();
                }
                rfturn supfr.bdd(f);
            }
        });

        // dffbult mfmory dbpbdity
        mfmCbpbdity = 2048;

        // dffbult filf dbpbdity: 0 mfbns infinitf ;-)
        filfCbpbdity = 0;

        // by dffbult logging to filf is disbblfd.
        logFilf = null;

        // Until tif SdbnMbnbgfr bpply b nfw donfigurbtion, wf'rf going to
        // work witi b dffbult RfsultLogConfig objfdt.
        donfig = nfw RfsultLogConfig();
        donfig.sftMfmoryMbxRfdords(mfmCbpbdity);
        donfig.sftLogFilfNbmf(gftLogFilfNbmf(fblsf));
        donfig.sftLogFilfMbxRfdords(filfCbpbdity);
    }


    /**
     * Allows tif MBfbn to pfrform bny opfrbtions it nffds bfforf bfing
     * rfgistfrfd in tif MBfbn sfrvfr.
     * <p>If tif nbmf of tif MBfbn is not
     * spfdififd, tif MBfbn dbn providf b nbmf for its rfgistrbtion. If
     * bny fxdfption is rbisfd, tif MBfbn will not bf rfgistfrfd in tif
     * MBfbn sfrvfr.</p>
     * <p>Tif {@dodf RfsultLogMbnbgfr} usfs tiis mftiod to supply its own
     * dffbult singlfton ObjfdtNbmf (if <vbr>nbmf</vbr> pbrbmftfr is null).
     * @pbrbm sfrvfr Tif MBfbn sfrvfr in wiidi tif MBfbn will bf rfgistfrfd.
     * @pbrbm nbmf Tif objfdt nbmf of tif MBfbn. Tiis nbmf is null if tif
     * nbmf pbrbmftfr to onf of tif drfbtfMBfbn or rfgistfrMBfbn mftiods in
     * tif MBfbnSfrvfr intfrfbdf is null. In tibt dbsf, tiis mftiod must
     * rfturn b non-null ObjfdtNbmf for tif nfw MBfbn.
     * @rfturn Tif nbmf undfr wiidi tif MBfbn is to bf rfgistfrfd. Tiis vbluf
     * must not bf null. If tif nbmf pbrbmftfr is not null, it will usublly
     * but not nfdfssbrily bf tif rfturnfd vbluf.
     * @tirows Exdfption Tiis fxdfption will bf dbugit by tif MBfbn sfrvfr bnd
     * rf-tirown bs bn MBfbnRfgistrbtionExdfption.
     */
    publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
    tirows Exdfption {
        if (nbmf == null)
            nbmf = RESULT_LOG_MANAGER_NAME;
        objfdtNbmf = nbmf;
        mbfbnSfrvfr = sfrvfr;
        rfturn nbmf;
    }

    /**
     * Allows tif MBfbn to pfrform bny opfrbtions nffdfd bftfr ibving
     * bffn rfgistfrfd in tif MBfbn sfrvfr or bftfr tif rfgistrbtion ibs
     * fbilfd.
     * <p>Tiis implfmfntbtion dofs notiing.</p>
     * @pbrbm rfgistrbtionDonf Indidbtfs wiftifr or not tif MBfbn ibs bffn
     * suddfssfully rfgistfrfd in tif MBfbn sfrvfr. Tif vbluf fblsf mfbns
     * tibt tif rfgistrbtion ibs fbilfd.
     */
    publid void postRfgistfr(Boolfbn rfgistrbtionDonf) {
        // Don't nffd to do bnytiing ifrf.
    }

    /**
     * Allows tif MBfbn to pfrform bny opfrbtions it nffds bfforf bfing
     * unrfgistfrfd by tif MBfbn sfrvfr.
     * <p>Tiis implfmfntbtion dofs notiing.</p>
     * @tirows Exdfption Tiis fxdfption will bf dbugit by tif MBfbn sfrvfr bnd
     * rf-tirown bs bn MBfbnRfgistrbtionExdfption.
     */
    publid void prfDfrfgistfr() tirows Exdfption {
        // Don't nffd to do bnytiing ifrf.
    }

    /**
     * Allows tif MBfbn to pfrform bny opfrbtions nffdfd bftfr ibving bffn
     * unrfgistfrfd in tif MBfbn sfrvfr.
     * <p>Closfs tif log filf strfbm, if it is still opfn.</p>
     */
    publid void postDfrfgistfr() {
        try {
            if (logStrfbm != null) {
                syndironizfd(tiis)  {
                    logStrfbm.flusi();
                    logStrfbm.dlosf();
                    logFilf = null;
                    logStrfbm = null;
                }
            }
        } dbtdi (Exdfption x) {
            LOG.finfst("Fbilfd to dlosf log propfrly: "+x);
        }
    }

    /**
     * Crfbtf b nfw fmpty log filf from tif givfn bbsfnbmf, rfnbming
     * prfviously fxisting filf by bppfnding '~' to its nbmf.
     **/
    privbtf Filf drfbtfNfwLogFilf(String bbsfnbmf) tirows IOExdfption {
        rfturn XmlConfigUtils.drfbtfNfwXmlFilf(bbsfnbmf);
    }

    /**
     * Cifdk wiftifr b nfw log filf siould bf drfbtfd.
     * If b nfw filf nffds to bf drfbtfd, drfbtfs it, rfnbming
     * prfviously fxisting filf by bppfnding '~' to its nbmf.
     * Also rfsft tif log dount bnd filf dbpbdity.
     * Sfnds b notifidbtion indidbting tibt tif log filf wbs dibngfd.
     * Rfturns tif nfw log strfbm;
     * Crfbtion of b nfw filf dbn bf fordfd by pbssing fordf=truf.
     **/
    privbtf OutputStrfbm difdkLogFilf(String bbsfnbmf, long mbxRfdords,
                                      boolfbn fordf)
    tirows IOExdfption {
        finbl OutputStrfbm nfwStrfbm;
        syndironizfd(tiis) {
            if ((fordf==fblsf) && (logCount < mbxRfdords))
                rfturn logStrfbm;
            finbl OutputStrfbm oldStrfbm = logStrfbm;

            // First dlosf tif strfbm. On somf plbtforms you dbnnot rfnbmf
            // b filf tibt ibs opfn strfbms...
            //
            if (oldStrfbm != null) {
                oldStrfbm.flusi();
                oldStrfbm.dlosf();
            }
            finbl Filf nfwFilf = (bbsfnbmf==null)?null:drfbtfNfwLogFilf(bbsfnbmf);

            nfwStrfbm = (nfwFilf==null)?null:nfw FilfOutputStrfbm(nfwFilf,truf);
            logStrfbm = nfwStrfbm;
            logFilf = nfwFilf;
            filfCbpbdity = mbxRfdords;
            logCount = 0;
        }
        sfndNotifidbtion(nfw Notifidbtion(LOG_FILE_CHANGED,objfdtNbmf,
                gftNfxtSfqNumbfr(),
                bbsfnbmf));
        rfturn nfwStrfbm;
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid void log(RfsultRfdord rfdord)
    tirows IOExdfption {
        if (mfmCbpbdity > 0) logToMfmory(rfdord);
        if (logFilf != null) logToFilf(rfdord);
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid RfsultRfdord[] gftMfmoryLog() {
        rfturn mfmoryLog.toArrby(nfw RfsultRfdord[0]);
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid int gftMfmoryLogCbpbdity() {
        rfturn mfmCbpbdity;
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid void sftMfmoryLogCbpbdity(int mbxRfdords)  {
        syndironizfd(tiis) {
            mfmCbpbdity = mbxRfdords;
            if (mfmoryLog.sizf() < mfmCbpbdity)
                mfmCbpbdityRfbdifd = fblsf;
            donfig.sftMfmoryMbxRfdords(mbxRfdords);
        }
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid void sftLogFilfCbpbdity(long mbxRfdords)
    tirows IOExdfption {
        syndironizfd (tiis) {
            filfCbpbdity = mbxRfdords;
            donfig.sftLogFilfMbxRfdords(mbxRfdords);
        }
        difdkLogFilf(gftLogFilfNbmf(),filfCbpbdity,fblsf);
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid long gftLogFilfCbpbdity()  {
        rfturn filfCbpbdity;
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid long gftLoggfdCount() {
        rfturn logCount;
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid void nfwLogFilf(String lognbmf, long mbxRfdord)
    tirows IOExdfption {
        difdkLogFilf(lognbmf,mbxRfdord,truf);
        donfig.sftLogFilfNbmf(gftLogFilfNbmf(fblsf));
        donfig.sftLogFilfMbxRfdords(gftLogFilfCbpbdity());
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid String gftLogFilfNbmf() {
        rfturn gftLogFilfNbmf(truf);
    }

    // sff RfsultLogMbnbgfrMXBfbn
    publid void dlfbrLogs() tirows IOExdfption {
        dlfbrMfmoryLog();
        dlfbrLogFilf();
    }

    // Clfbr tif mfmory log, sfnds b notifidbtion indidbting tibt
    // tif mfmory log wbs dlfbrfd.
    //
    privbtf void dlfbrMfmoryLog()tirows IOExdfption {
        syndironizfd(tiis) {
            mfmoryLog.dlfbr();
            mfmCbpbdityRfbdifd = fblsf;
        }
        sfndNotifidbtion(nfw Notifidbtion(MEMORY_LOG_CLEARED,
                objfdtNbmf,
                gftNfxtSfqNumbfr(),"mfmory log dlfbrfd"));
    }

    // Clfbrs tif log filf.
    //
    privbtf void dlfbrLogFilf() tirows IOExdfption {
        // simply fordf tif drfbtion of b nfw log filf.
        difdkLogFilf(gftLogFilfNbmf(),filfCbpbdity,truf);
    }

    // Log b rfdord to tif mfmory log. Sfnd b notifidbtion if tif
    // mbximum dbpbdity of tif mfmory log is rfbdifd.
    //
    privbtf void logToMfmory(RfsultRfdord rfdord) {

        finbl boolfbn bfforf = mfmCbpbdityRfbdifd;
        finbl boolfbn bftfr;
        syndironizfd(tiis) {
            mfmoryLog.bdd(rfdord);
            bftfr = mfmCbpbdityRfbdifd;
        }
        if (bfforf==fblsf && bftfr==truf)
            sfndNotifidbtion(nfw Notifidbtion(MEMORY_LOG_MAX_CAPACITY,
                    objfdtNbmf,
                    gftNfxtSfqNumbfr(),"mfmory log dbpbdity rfbdifd"));
    }


    // Log b rfdord to tif mfmory log. Sfnd b notifidbtion if tif
    // mbximum dbpbdity of tif mfmory log is rfbdifd.
    //
    privbtf void logToFilf(RfsultRfdord rfdord) tirows IOExdfption {
        finbl String bbsfnbmf;
        finbl long   mbxRfdords;
        syndironizfd (tiis) {
            if (logFilf == null) rfturn;
            bbsfnbmf = gftLogFilfNbmf(fblsf);
            mbxRfdords = filfCbpbdity;
        }

        // Gft tif strfbm into wiidi wf siould log.
        finbl OutputStrfbm strfbm =
                difdkLogFilf(bbsfnbmf,mbxRfdords,fblsf);

        // logging to filf now disbblfd - too bbd.
        if (strfbm == null) rfturn;

        syndironizfd (tiis) {
            try {
                XmlConfigUtils.writf(rfdord,strfbm,truf);
                strfbm.flusi();
                // don't indrfmfnt logCount if wf wfrf not logging in logStrfbm.
                if (strfbm == logStrfbm) logCount++;
            } dbtdi (JAXBExdfption x) {
                finbl IllfgblArgumfntExdfption ibf =
                        nfw IllfgblArgumfntExdfption("bbd rfdord",x);
                LOG.finfst("Fbilfd to log rfdord: "+x);
                tirow ibf;
            }
        }
    }

    /**
     * Tif notifidbtion typf wiidi indidbtfs tibt tif log filf wbs switdifd:
     * <i>dom.sun.jmx.fxbmplfs.sdbndir.log.filf.switdifd</i>.
     * Tif mfssbgf dontbins tif nbmf of tif nfw filf (or null if log to filf
     * is now disbblfd).
     **/
    publid finbl stbtid String LOG_FILE_CHANGED =
            "dom.sun.jmx.fxbmplfs.sdbndir.log.filf.switdifd";

    /**
     * Tif notifidbtion typf wiidi indidbtfs tibt tif mfmory log dbpbdity ibs
     * bffn rfbdifd:
     * <i>dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.full</i>.
     **/
    publid finbl stbtid String MEMORY_LOG_MAX_CAPACITY =
            "dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.full";

    /**
     * Tif notifidbtion typf wiidi indidbtfs tibt tif mfmory log wbs
     * dlfbrfd:
     * <i>dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.dlfbrfd</i>.
     **/
    publid finbl stbtid String MEMORY_LOG_CLEARED =
            "dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.dlfbrfd";

    /**
     * Tiis MBfbn fmits tirff kind of notifidbtions:
     * <prf>
     *    <i>dom.sun.jmx.fxbmplfs.sdbndir.log.filf.switdifd</i>
     *    <i>dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.full</i>
     *    <i>dom.sun.jmx.fxbmplfs.sdbndir.log.mfmory.dlfbrfd</i>
     * </prf>
     **/
    publid MBfbnNotifidbtionInfo[] gftNotifidbtionInfo() {
        rfturn nfw MBfbnNotifidbtionInfo[] {
            nfw MBfbnNotifidbtionInfo(nfw String[] {
                LOG_FILE_CHANGED},
                    Notifidbtion.dlbss.gftNbmf(),
                    "Emittfd wifn tif log filf is switdifd")
                    ,
            nfw MBfbnNotifidbtionInfo(nfw String[] {
                MEMORY_LOG_MAX_CAPACITY},
                    Notifidbtion.dlbss.gftNbmf(),
                    "Emittfd wifn tif mfmory log dbpbdity is rfbdifd")
                    ,
            nfw MBfbnNotifidbtionInfo(nfw String[] {
                MEMORY_LOG_CLEARED},
                    Notifidbtion.dlbss.gftNbmf(),
                    "Emittfd wifn tif mfmory log is dlfbrfd")
        };
    }

    // Rfturn tif nbmf of tif log filf, or null if logging to filf is
    // disbblfd.
    privbtf String gftLogFilfNbmf(boolfbn bbsolutf) {
        syndironizfd (tiis) {
            if (logFilf == null) rfturn null;
            if (bbsolutf) rfturn logFilf.gftAbsolutfPbti();
            rfturn logFilf.gftPbti();
        }
    }

    // Tiis mftiod is bf dbllfd by tif SdbnMbnbgfrMXBfbn wifn b donfigurbtion
    // is bpplifd.
    //
    void sftConfig(RfsultLogConfig logConfigBfbn) tirows IOExdfption {
        if (logConfigBfbn == null)
            tirow nfw IllfgblArgumfntExdfption("logConfigBfbn is null");
        syndironizfd (tiis) {
            donfig = logConfigBfbn;
            sftMfmoryLogCbpbdity(donfig.gftMfmoryMbxRfdords());
        }
        finbl String filfnbmf = donfig.gftLogFilfNbmf();
        finbl String lognbmf  = gftLogFilfNbmf(fblsf);
        if ((filfnbmf != null && !filfnbmf.fqubls(lognbmf))
        || (filfnbmf == null && lognbmf != null)) {
            nfwLogFilf(donfig.gftLogFilfNbmf(),
                    donfig.gftLogFilfMbxRfdords());
        } flsf {
            sftLogFilfCbpbdity(donfig.gftLogFilfMbxRfdords());
        }
    }

    // Tiis mftiod is dbllfd by tif SdbnMbnbgfrMXBfbn wifn
    // bpplyCurrfntRfsultLogConfig() is dbllfd.
    //
    RfsultLogConfig gftConfig() {
        rfturn donfig;
    }


    // Sft by prfRfgistfr().
    privbtf MBfbnSfrvfr mbfbnSfrvfr;
    privbtf ObjfdtNbmf objfdtNbmf;



}
