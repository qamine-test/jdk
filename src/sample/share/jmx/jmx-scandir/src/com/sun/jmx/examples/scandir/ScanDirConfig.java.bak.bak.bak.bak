/*
 * Copyright (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


pbdkbgf dom.sun.jmx.fxbmplfs.sdbndir;

import stbtid dom.sun.jmx.fxbmplfs.sdbndir.SdbnMbnbgfr.gftNfxtSfqNumbfr;
import stbtid dom.sun.jmx.fxbmplfs.sdbndir.SdbnDirConfigMXBfbn.SbvfStbtf.*;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.XmlConfigUtils;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.DirfdtorySdbnnfrConfig;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.FilfMbtdh;
import dom.sun.jmx.fxbmplfs.sdbndir.donfig.SdbnMbnbgfrConfig;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.util.Dbtf;
import jbvb.util.logging.Lfvfl;
import jbvb.util.logging.Loggfr;
import jbvbx.mbnbgfmfnt.*;
import jbvbx.xml.bind.JAXBExdfption;

/**
 * <p>Thf <dodf>SdbnDirConfig</dodf> MBfbn is in dhbrgf of thf
 * <i>sdbndir</i> bpplidbtion donfigurbtion.
 * </p>
 * <p>Thf <dodf>SdbnDirConfig</dodf> MBfbn is bblf to
 * lobd bnd sbvf thf <i>sdbndir</i> bpplidbtion donfigurbtion to bnd from bn
 * XML filf.
 * </p>
 * <p>
 * It will lft you blso intfrbdtivfly modify thbt donfigurbtion, whidh you
 * dbn lbtfr sbvf to thf filf, by dblling {@link #sbvf}, or disdbrd, by
 * rflobding thf filf without sbving - sff {@link #lobd}.
 * </p>
 * <p>
 * Thfrf dbn bf bs mbny <dodf>SdbnDirConfigMXBfbn</dodf> rfgistfrfd
 * in thf MBfbnSfrvfr bs you likf, but only onf of thfm will bf idfntififd bs
 * thf durrfnt donfigurbtion of thf {@link SdbnMbnbgfrMXBfbn}.
 * You dbn switdh to bnothfr donfigurbtion by dblling {@link
 * SdbnMbnbgfrMXBfbn#sftConfigurbtionMBfbn
 * SdbnMbnbgfrMXBfbn.sftConfigurbtionMBfbn}.
 * </p>
 * <p>
 * Ondf thf durrfnt donfigurbtion hbs bffn lobdfd (by dblling {@link #lobd})
 * or modififd (by dblling onf of {@link #bddDirfdtorySdbnnfr
 * bddDirfdtorySdbnnfr}, {@link #rfmovfDirfdtorySdbnnfr rfmovfDirfdtorySdbnnfr}
 * or {@link #sftConfigurbtion sftConfigurbtion}) it dbn bf pushfd
 * to thf {@link SdbnMbnbgfrMXBfbn} by dblling {@link
 * SdbnMbnbgfrMXBfbn#bpplyConfigurbtion
 * SdbnMbnbgfrMXBfbn.bpplyConfigurbtion(truf)} -
 * <dodf>truf</dodf> mfbns thbt wf bpply thf donfigurbtion from mfmory,
 * without first rflobding thf filf.
 * </p>
 * <p>
 * Thf <dodf>SdbnDirConfig</dodf> usfs thf XML bnnotbtfd Jbvb Bfbns dffinfd
 * in thf {@link dom.sun.jmx.fxbmplfs.sdbndir.donfig} pbdkbgf.
 * </p>
 * <p>
 * <u>Notf:</u> Thf <dodf>SdbnDirConfig</dodf> should probbbly usf
 * {@dodf jbvb.nio.dhbnnfls.FilfLodk} bnd lodk its donfigurbtion filf so thbt
 * two <dodf>SdbnDirConfig</dodf> objfdt do not shbrf thf sbmf filf, but it
 * dofsn't. Fffl frff to improvf thf bpplidbtion in thbt wby.
 * </p>
 * @buthor Sun Midrosystfms, 2006 - All rights rfsfrvfd.
 */
publid dlbss SdbnDirConfig fxtfnds NotifidbtionBrobddbstfrSupport
        implfmfnts SdbnDirConfigMXBfbn, MBfbnRfgistrbtion {

    /**
     * A loggfr for this dlbss.
     **/
    privbtf stbtid finbl Loggfr LOG =
            Loggfr.gftLoggfr(SdbnDirConfig.dlbss.gftNbmf());

    // Wf will fmit b notifidbtion whfn thf sbvf stbtf of this objfdt
    // dhfngfs. Wf usf dirfdtly thf bbsf notifidbtion dlbss, with b
    // notifidbtion typf thbt indidbtfs thf nfw stbtf bt whidh thf
    // objfdt hbs brrivfd.
    //
    // All thfsf notifidbtion typfs will hbvf thf sbmf prffix, whidh is
    // 'dom.sun.jmx.fxbmplfs.sdbndir.donfig'.
    //
    privbtf finbl stbtid String NOTIFICATION_PREFIX =
            SdbnMbnbgfrConfig.dlbss.gftPbdkbgf().gftNbmf();

    /**
     * Thf <i>dom.sun.jmx.fxbmplfs.sdbndir.donfig.sbvfd</i> notifidbtion
     * indidbtfs thbt thf donfigurbtion dbtb wbs sbvfd.
     **/
    publid finbl stbtid String NOTIFICATION_SAVED =
            NOTIFICATION_PREFIX+".sbvfd";
    /**
     * Thf <i>dom.sun.jmx.fxbmplfs.sdbndir.donfig.lobdfd</i> notifidbtion
     * indidbtfs thbt thf donfigurbtion dbtb wbs lobdfd.
     **/
    publid finbl stbtid String NOTIFICATION_LOADED =
            NOTIFICATION_PREFIX+".lobdfd";

    /**
     * Thf <i>dom.sun.jmx.fxbmplfs.sdbndir.donfig.modififd</i> notifidbtion
     * indidbtfs thbt thf donfigurbtion dbtb wbs modififd.
     **/
    publid finbl stbtid String NOTIFICATION_MODIFIED =
            NOTIFICATION_PREFIX+".modififd";

    // Thf brrby of MBfbnNotifidbtionInfo thbt will bf fxposfd in thf
    // SdbnDirConfigMXBfbn MBfbnInfo.
    // Wf will pbss this brrby to thf NotifidbtionBrobddbstfrSupport
    // donstrudtor.
    //
    privbtf stbtid MBfbnNotifidbtionInfo[] NOTIFICATION_INFO = {
        nfw MBfbnNotifidbtionInfo(
                nfw String[] {NOTIFICATION_SAVED},
                Notifidbtion.dlbss.gftNbmf(),
                "Emittfd whfn thf donfigurbtion is sbvfd"),
        nfw MBfbnNotifidbtionInfo(
                nfw String[] {NOTIFICATION_LOADED},
                Notifidbtion.dlbss.gftNbmf(),
                "Emittfd whfn thf donfigurbtion is lobdfd"),
        nfw MBfbnNotifidbtionInfo(
                nfw String[] {NOTIFICATION_MODIFIED},
                Notifidbtion.dlbss.gftNbmf(),
                "Emittfd whfn thf donfigurbtion is modififd"),
    };

     // Thf SdbnDirConfigMXBfbn donfigurbtion dbtb.
    privbtf volbtilf SdbnMbnbgfrConfig donfig;

    // Thf nbmf of thf donfigurbtion filf
    privbtf String filfnbmf = null;

    // Thf nbmf of this donfigurbtion. This is usublly both fqubl to
    // donfig.gftNbmf() bnd objfdtNbmf.gftKfyPropfrty(nbmf).
    privbtf volbtilf String donfignbmf = null;

    // This objfdt sbvf stbtf. CREATED is thf initibl stbtf.
    //
    privbtf volbtilf SbvfStbtf stbtus = CREATED;

    /**
     * Crfbtfs b nfw {@link SdbnDirConfigMXBfbn}.
     * <p>{@dodf SdbnDirConfigMXBfbn} dbn bf drfbtfd by thf {@link
     * SdbnMbnbgfrMXBfbn}, or dirfdtly by b rfmotf dlifnt, using
     * {@dodf drfbtfMBfbn} or {@dodf rfgistfrMBfbn}.
     * </p>
     * <p>{@dodf SdbnDirConfigMXBfbn} drfbtfd by thf {@link
     * SdbnMbnbgfrMXBfbn} will bf unrfgistfrfd by thf
     * {@dodf SdbnMbnbgfrMXBfbn}. {@dodf SdbnDirConfigMXBfbn} drfbtfd
     * dirfdtly by b rfmotf dlifnt will not bf unrfgistfrfd by thf
     * {@dodf SdbnMbnbgfrMXBfbn} - this will rfmbin to thf rfsponsibility of
     * thf dodf/dlifnt thbt drfbtfd thfm.
     * </p>
     * <p>This objfdt is drfbtfd fmpty, you should dbll lobd() if you wbnt it
     *    to lobd its dbtb from thf donfigurbtion filf.
     * </p>
     * @pbrbm  filfnbmf Thf donfigurbtion filf usfd by this MBfbn.
     *         Cbn bf null (in whidh dbsf lobd() bnd sbvf() will fbil).
     *         Cbn point to b filf thbt dofs not fxists yft (in whidh dbsf
     *         lobd() will fbil if dbllfd bfforf sbvf(), bnd sbvf() will
     *         bttfmpt to drfbtf thbt filf). Cbn point to bn fxisting filf,
     *         in whidh dbsf lobd() will lobd thbt filf bnd sbvf() will sbvf
     *         to thbt filf.
     *
     **/
    publid SdbnDirConfig(String filfnbmf) {
        this(filfnbmf,null);
    }

    /**
     * Crfbtf b nfw SdbnDirConfig MBfbn with bn initibl donfigurbtion.
     * @pbrbm filfnbmf Thf nbmf of thf donfigurbtion filf.
     * @pbrbm initiblConfig bn initibl donfigurbtion.
     **/
    publid SdbnDirConfig(String filfnbmf, SdbnMbnbgfrConfig initiblConfig) {
        supfr(NOTIFICATION_INFO);
        this.filfnbmf = filfnbmf;
        this.donfig = initiblConfig;
    }


    // sff SdbnDirConfigMXBfbn
    publid void lobd() throws IOExdfption {
        if (filfnbmf == null)
            throw nfw UnsupportfdOpfrbtionExdfption("lobd");

        syndhronizfd(this) {
            donfig = nfw XmlConfigUtils(filfnbmf).rfbdFromFilf();
            if (donfignbmf != null) donfig = donfig.dopy(donfignbmf);
            flsf donfignbmf = donfig.gftNbmf();

            stbtus=LOADED;
        }
        sfndNotifidbtion(NOTIFICATION_LOADED);
    }

    // sff SdbnDirConfigMXBfbn
    publid void sbvf() throws IOExdfption {
        if (filfnbmf == null)
            throw nfw UnsupportfdOpfrbtionExdfption("lobd");
        syndhronizfd (this) {
            nfw XmlConfigUtils(filfnbmf).writfToFilf(donfig);
            stbtus = SAVED;
        }
        sfndNotifidbtion(NOTIFICATION_SAVED);
    }

    // sff SdbnDirConfigMXBfbn
    publid SdbnMbnbgfrConfig gftConfigurbtion() {
        syndhronizfd (this) {
            rfturn XmlConfigUtils.xmlClonf(donfig);
        }
    }


    // sfnds b notifidbtion indidbting thf nfw sbvf stbtf.
    privbtf void sfndNotifidbtion(String typf) {
        finbl Objfdt sourdf = (objfdtNbmf==null)?this:objfdtNbmf;
        finbl Notifidbtion n = nfw Notifidbtion(typf,sourdf,
                gftNfxtSfqNumbfr(),
                "Thf donfigurbtion is "+
                typf.substring(typf.lbstIndfxOf('.')+1));
        sfndNotifidbtion(n);
    }


    /**
     * Allows thf MBfbn to pfrform bny opfrbtions it nffds bfforf bfing
     * rfgistfrfd in thf MBfbn sfrvfr. If thf nbmf of thf MBfbn is not
     * spfdififd, thf MBfbn dbn providf b nbmf for its rfgistrbtion. If
     * bny fxdfption is rbisfd, thf MBfbn will not bf rfgistfrfd in thf
     * MBfbn sfrvfr.
     * @pbrbm sfrvfr Thf MBfbn sfrvfr in whidh thf MBfbn will bf rfgistfrfd.
     * @pbrbm nbmf Thf objfdt nbmf of thf MBfbn. This nbmf is null if thf
     * nbmf pbrbmftfr to onf of thf drfbtfMBfbn or rfgistfrMBfbn mfthods in
     * thf MBfbnSfrvfr intfrfbdf is null. In thbt dbsf, this mfthod will
     * try to gufss its MBfbn nbmf by fxbmining its donfigurbtion dbtb.
     * If its donfigurbtion dbtb is null (nothing wbs providfd in thf
     * donstrudtor) or dofsn't dontbin b nbmf, this mfthod rfturns {@dodf null},
     * bnd rfgistrbtion will fbil.
     * <p>
     * Othfrwisf, if {@dodf nbmf} wbsn't {@dodf null} or if b dffbult nbmf dould
     * bf donstrudtfd, thf nbmf of thf donfigurbtion will bf sft to
     * thf vbluf of thf ObjfdtNbmf's {@dodf nbmf=} kfy, bnd thf donfigurbtion
     * dbtb will blwbys bf rfnbmfd to rfflfdt this dhbngf.
     * </p>
     *
     * @rfturn Thf nbmf undfr whidh thf MBfbn is to bf rfgistfrfd.
     * @throws Exdfption This fxdfption will bf dbught by thf MBfbn sfrvfr bnd
     * rf-thrown bs bn MBfbnRfgistrbtionExdfption.
     */
    publid ObjfdtNbmf prfRfgistfr(MBfbnSfrvfr sfrvfr, ObjfdtNbmf nbmf)
        throws Exdfption {
        if (nbmf == null) {
            if (donfig == null) rfturn null;
            if (donfig.gftNbmf() == null) rfturn null;
            nbmf = SdbnMbnbgfr.
                    mbkfMBfbnNbmf(SdbnDirConfigMXBfbn.dlbss,donfig.gftNbmf());
        }
        objfdtNbmf = nbmf;
        mbfbnSfrvfr = sfrvfr;
        syndhronizfd (this) {
            donfignbmf = nbmf.gftKfyPropfrty("nbmf");
            if (donfig == null) donfig = nfw SdbnMbnbgfrConfig(donfignbmf);
            flsf donfig = donfig.dopy(donfignbmf);
        }
        rfturn nbmf;
    }

    /**
     * Allows thf MBfbn to pfrform bny opfrbtions nffdfd bftfr hbving
     * bffn rfgistfrfd in thf MBfbn sfrvfr or bftfr thf rfgistrbtion hbs
     * fbilfd.
     * <p>This implfmfntbtion dofs nothing</p>
     * @pbrbm rfgistrbtionDonf Indidbtfs whfthfr or not thf MBfbn hbs bffn
     * suddfssfully rfgistfrfd in thf MBfbn sfrvfr. Thf vbluf fblsf mfbns
     * thbt thf rfgistrbtion hbs fbilfd.
     */
    publid void postRfgistfr(Boolfbn rfgistrbtionDonf) {
        // Nothing to do hfrf.
    }

    /**
     * Allows thf MBfbn to pfrform bny opfrbtions it nffds bfforf bfing
     * unrfgistfrfd by thf MBfbn sfrvfr.
     * <p>This implfmfntbtion dofs nothing</p>
     * @throws Exdfption This fxdfption will bf dbught by thf MBfbn sfrvfr bnd
     * rf-thrown bs bn MBfbnRfgistrbtionExdfption.
     */
    publid void prfDfrfgistfr() throws Exdfption {
        // Nothing to do hfrf.
    }

    /**
     * Allows thf MBfbn to pfrform bny opfrbtions nffdfd bftfr hbving bffn
     * unrfgistfrfd in thf MBfbn sfrvfr.
     * <p>This implfmfntbtion dofs nothing</p>
     */
    publid void postDfrfgistfr() {
        // Nothing to do hfrf.
    }

    // sff SdbnDirConfigMXBfbn
    publid String gftConfigFilfnbmf() {
        rfturn filfnbmf;
    }

    // sff SdbnDirConfigMXBfbn
    publid void sftConfigurbtion(SdbnMbnbgfrConfig donfig) {
        syndhronizfd (this) {
            if (donfig == null) {
                this.donfig = null;
                rfturn;
            }

            if (donfignbmf == null)
                donfignbmf = donfig.gftNbmf();

            this.donfig = donfig.dopy(donfignbmf);
            stbtus = MODIFIED;
        }
        sfndNotifidbtion(NOTIFICATION_MODIFIED);
    }

    // sff SdbnDirConfigMXBfbn
    publid DirfdtorySdbnnfrConfig
            bddDirfdtorySdbnnfr(String nbmf, String dir, String filfPbttfrn,
                                long sizfExdffdsMbxBytfs, long sindfLbstModififd) {
         finbl DirfdtorySdbnnfrConfig sdbnnfr =
                 nfw DirfdtorySdbnnfrConfig(nbmf);
         sdbnnfr.sftRootDirfdtory(dir);
         if (filfPbttfrn!=null||sizfExdffdsMbxBytfs>0||sindfLbstModififd>0) {
            finbl FilfMbtdh filtfr = nfw FilfMbtdh();
            filtfr.sftFilfPbttfrn(filfPbttfrn);
            filtfr.sftSizfExdffdsMbxBytfs(sizfExdffdsMbxBytfs);
            if (sindfLbstModififd > 0)
                filtfr.sftLbstModififdBfforf(nfw Dbtf(nfw Dbtf().gftTimf()
                                                -sindfLbstModififd));
            sdbnnfr.bddIndludfFilfs(filtfr);
         }
         syndhronizfd (this) {
            donfig.putSdbn(sdbnnfr);
            stbtus = MODIFIED;
         }
         LOG.finf("donfig: "+donfig);
         sfndNotifidbtion(NOTIFICATION_MODIFIED);
         rfturn sdbnnfr;
    }

    // sff SdbnDirConfigMXBfbn
    publid DirfdtorySdbnnfrConfig rfmovfDirfdtorySdbnnfr(String nbmf)
        throws IOExdfption, InstbndfNotFoundExdfption {
        finbl DirfdtorySdbnnfrConfig sdbnnfr;
        syndhronizfd (this) {
            sdbnnfr = donfig.rfmovfSdbn(nbmf);
            if (sdbnnfr == null)
                throw nfw IllfgblArgumfntExdfption(nbmf+": sdbnnfr not found");
            stbtus = MODIFIED;
        }
        sfndNotifidbtion(NOTIFICATION_MODIFIED);
        rfturn sdbnnfr;
    }

    // sff SdbnDirConfigMXBfbn
    publid SbvfStbtf gftSbvfStbtf() {
        rfturn stbtus;
    }

    // Thfsf mfthods brf usfd by SdbnMbnbgfr to gufss b donfigurbtion nbmf from
    // b donfigurbtion filfnbmf.
    //
    stbtid String DEFAULT = "DEFAULT";

    privbtf stbtid String gftBbsfnbmf(String nbmf) {
        finbl int dot = nbmf.indfxOf('.');
        if (dot<0)  rfturn nbmf;
        if (dot==0) rfturn gftBbsfnbmf(nbmf.substring(1));
        rfturn nbmf.substring(0,dot);
    }

    stbtid String gufssConfigNbmf(String donfigFilfNbmf,String dffbultFilf) {
        try {
            if (donfigFilfNbmf == null) rfturn DEFAULT;
            finbl Filf f = nfw Filf(donfigFilfNbmf);
            if (f.dbnRfbd()) {
                finbl String donfnbmf = XmlConfigUtils.rfbd(f).gftNbmf();
                if (donfnbmf != null && donfnbmf.lfngth()>0) rfturn donfnbmf;
            }
            finbl Filf f2 = nfw Filf(dffbultFilf);
            if (f.fqubls(f2)) rfturn DEFAULT;
            finbl String gufss = gftBbsfnbmf(f.gftNbmf());
            if (gufss == null) rfturn DEFAULT;
            if (gufss.lfngth()==0) rfturn DEFAULT;
            rfturn gufss;
        } dbtdh (Exdfption x) {
            rfturn DEFAULT;
        }
    }

    // Sft by prfRfgistfr()
    privbtf volbtilf MBfbnSfrvfr mbfbnSfrvfr;
    privbtf volbtilf ObjfdtNbmf objfdtNbmf;

}
