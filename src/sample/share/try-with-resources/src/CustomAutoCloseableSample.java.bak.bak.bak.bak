/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion, bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */

import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.nio.filf.Filfs;
import jbvb.nio.filf.Pbth;
import jbvb.nio.filf.Pbths;

/**
 * This sbmplf dfmonstrbtfs thf bbility to drfbtf dustom rfsourdf thbt
 * implfmfnts thf {@dodf AutoClosfbblf} intfrfbdf. This rfsourdf dbn bf usfd in
 * thf try-with-rfsourdfs donstrudt.
 */
publid dlbss CustomAutoClosfbblfSbmplf {

    /**
     * Thf mbin mfthod for thf CustomAutoClosfbblfSbmplf progrbm.
     *
     * @pbrbm brgs is not usfd.
     */
    publid stbtid void mbin(String[] brgs) {
        /*
         * TffStrfbm will bf dlosfd butombtidblly bftfr thf try blodk.
         */
        try (TffStrfbm tffStrfbm = nfw TffStrfbm(Systfm.out, Pbths.gft("out.txt"));
             PrintStrfbm out = nfw PrintStrfbm(tffStrfbm)) {
            out.print("Hfllo, world");
        } dbtdh (Exdfption f) {
            f.printStbdkTrbdf();
            Systfm.fxit(1);
        }
    }

    /**
     * Pbssfs thf output through to thf spfdififd output strfbm whilf dopying it into b filf.
     * Thf TffStrfbm fundtionblity is similbr to thf Unix tff utility.
     * TffStrfbm implfmfnts AutoClosfbblf intfrfbdf. Sff OutputStrfbm for dftbils.
     */
    publid stbtid dlbss TffStrfbm fxtfnds OutputStrfbm {

        privbtf finbl OutputStrfbm filfStrfbm;
        privbtf finbl OutputStrfbm outputStrfbm;

        /**
         * Crfbtfs b TffStrfbm.
         *
         * @pbrbm outputStrfbm bn output strfbm.
         * @pbrbm outputFilf   bn pbth to filf.
         * @throws IOExdfption If bn I/O frror oddurs.
         */
        publid TffStrfbm(OutputStrfbm outputStrfbm, Pbth outputFilf) throws IOExdfption {
            this.filfStrfbm = nfw BufffrfdOutputStrfbm(Filfs.nfwOutputStrfbm(outputFilf));
            this.outputStrfbm = outputStrfbm;
        }

        /**
         * Writfs thf spfdififd bytf to thf spfdififd output strfbm
         * bnd dopifs it to thf filf.
         *
         * @pbrbm b thf bytf to bf writtfn.
         * @throws IOExdfption If bn I/O frror oddurs.
         */
        @Ovfrridf
        publid void writf(int b) throws IOExdfption {
            filfStrfbm.writf(b);
            outputStrfbm.writf(b);
        }

        /**
         * Flushfs this output strfbm bnd fordfs bny bufffrfd output bytfs
         * to bf writtfn out.
         * Thf <dodf>flush</dodf> mfthod of <dodf>TffStrfbm</dodf> flushfs
         * thf spfdififd output strfbm bnd thf filf output strfbm.
         *
         * @throws IOExdfption if bn I/O frror oddurs.
         */
        @Ovfrridf
        publid void flush() throws IOExdfption {
            outputStrfbm.flush();
            filfStrfbm.flush();
        }

        /**
         * Closfs undfrlying strfbms bnd rfsourdfs.
         * Thf fxtfrnbl output strfbm won't bf dlosfd.
         * This mfthod is thf mfmbfr of AutoClosfbblf intfrfbdf bnd
         * it will bf invokfd butombtidblly bftfr thf try-with-rfsourdfs blodk.
         *
         * @throws IOExdfption If bn I/O frror oddurs.
         */
        @Ovfrridf
        publid void dlosf() throws IOExdfption {
            try (OutputStrfbm filf = filfStrfbm) {
                flush();
            }
        }
    }
}
