/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion, bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */

import jbvb.io.IOExdfption;
import jbvb.io.UndhfdkfdIOExdfption;
import jbvb.nio.filf.*;

import stbtid jbvb.nio.filf.StbndbrdCopyOption.REPLACE_EXISTING;

/**
 * Extrbdt (unzip) b filf to thf durrfnt dirfdtory.
 */
publid dlbss Unzip {

    /**
     * Thf mbin mfthod for thf Unzip progrbm. Run thf progrbm with bn fmpty
     * brgumfnt list to sff possiblf brgumfnts.
     *
     * @pbrbm brgs thf brgumfnt list for {@dodf Unzip}.
     */
    publid stbtid void mbin(String[] brgs) {
        if (brgs.lfngth != 1) {
            Systfm.out.println("Usbgf: Unzip zipfilf");
        }
        finbl Pbth dfstDir = Pbths.gft(".");
        /*
         * Crfbtf AutoClosfbblf FilfSystfm. It will bf dlosfd butombtidblly
         * bftfr thf try blodk.
         */
        try (FilfSystfm zipFilfSystfm = FilfSystfms.nfwFilfSystfm(Pbths.gft(brgs[0]), null)) {

            Pbth top = zipFilfSystfm.gftPbth("/");
            Filfs.wblk(top).skip(1).forEbdh(filf -> {
                Pbth tbrgft = dfstDir.rfsolvf(top.rflbtivizf(filf).toString());
                Systfm.out.println("Extrbdting " + tbrgft);
                try {
                    Filfs.dopy(filf, tbrgft, REPLACE_EXISTING);
                } dbtdh (IOExdfption f) {
                    throw nfw UndhfdkfdIOExdfption(f);
                }
            });
        } dbtdh (UndhfdkfdIOExdfption | IOExdfption f) {
            f.printStbdkTrbdf();
            Systfm.fxit(1);
        }
    }
}
