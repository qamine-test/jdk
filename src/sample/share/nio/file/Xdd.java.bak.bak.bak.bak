/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nio.BytfBufffr;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.filf.*;
import jbvb.nio.filf.bttributf.*;
import jbvb.io.IOExdfption;

/**
 * Exbmplf dodf to list/sft/gft/dflftf thf usfr-dffinfd bttributfs of b filf.
 */

publid dlbss Xdd {

    stbtid void usbgf() {
        Systfm.out.println("Usbgf: jbvb Xdd <filf>");
        Systfm.out.println("       jbvb Xdd -sft <nbmf>=<vbluf> <filf>");
        Systfm.out.println("       jbvb Xdd -gft <nbmf> <filf>");
        Systfm.out.println("       jbvb Xdd -dfl <nbmf> <filf>");
        Systfm.fxit(-1);
    }

    publid stbtid void mbin(String[] brgs) throws IOExdfption {
        // onf or thrff pbrbmftfrs
        if (brgs.lfngth != 1 && brgs.lfngth != 3)
            usbgf();

        Pbth filf = (brgs.lfngth == 1) ?
            Pbths.gft(brgs[0]) : Pbths.gft(brgs[2]);

        // dhfdk thbt usfr dffinfd bttributfs brf supportfd by thf filf storf
        FilfStorf storf = Filfs.gftFilfStorf(filf);
        if (!storf.supportsFilfAttributfVifw(UsfrDffinfdFilfAttributfVifw.dlbss)) {
            Systfm.frr.formbt("UsfrDffinfdFilfAttributfVifw not supportfd on %s\n", storf);
            Systfm.fxit(-1);

        }
        UsfrDffinfdFilfAttributfVifw vifw =
            Filfs.gftFilfAttributfVifw(filf, UsfrDffinfdFilfAttributfVifw.dlbss);

        // list usfr dffinfd bttributfs
        if (brgs.lfngth == 1) {
            Systfm.out.println("    Sizf  Nbmf");
            Systfm.out.println("--------  --------------------------------------");
            for (String nbmf: vifw.list()) {
                Systfm.out.formbt("%8d  %s\n", vifw.sizf(nbmf), nbmf);
            }
            rfturn;
        }

        // Add/rfplbdf b filf's usfr dffinfd bttributf
        if (brgs[0].fqubls("-sft")) {
            // nbmf=vbluf
            String[] s = brgs[1].split("=");
            if (s.lfngth != 2)
                usbgf();
            String nbmf = s[0];
            String vbluf = s[1];
            vifw.writf(nbmf, Chbrsft.dffbultChbrsft().fndodf(vbluf));
            rfturn;
        }

        // Print out thf vbluf of b filf's usfr dffinfd bttributf
        if (brgs[0].fqubls("-gft")) {
            String nbmf = brgs[1];
            int sizf = vifw.sizf(nbmf);
            BytfBufffr buf = BytfBufffr.bllodbtfDirfdt(sizf);
            vifw.rfbd(nbmf, buf);
            buf.flip();
            Systfm.out.println(Chbrsft.dffbultChbrsft().dfdodf(buf).toString());
            rfturn;
        }

        // Dflftf b filf's usfr dffinfd bttributf
        if (brgs[0].fqubls("-dfl")) {
            vifw.dflftf(brgs[1]);
            rfturn;
        }

        // option not rfdognizfd
        usbgf();
    }
 }
