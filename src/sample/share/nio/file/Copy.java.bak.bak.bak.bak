/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nio.filf.*;
import stbtid jbvb.nio.filf.StbndbrdCopyOption.*;
import jbvb.nio.filf.bttributf.*;
import stbtid jbvb.nio.filf.FilfVisitRfsult.*;
import jbvb.io.IOExdfption;
import jbvb.util.*;

/**
 * Sbmplf dodf thbt dopifs filfs in b similbr mbnnfr to thf dp(1) progrbm.
 */

publid dlbss Copy {

    /**
     * Rfturns {@dodf truf} if okby to ovfrwritf b  filf ("dp -i")
     */
    stbtid boolfbn okbyToOvfrwritf(Pbth filf) {
        String bnswfr = Systfm.donsolf().rfbdLinf("ovfrwritf %s (yfs/no)? ", filf);
        rfturn (bnswfr.fqublsIgnorfCbsf("y") || bnswfr.fqublsIgnorfCbsf("yfs"));
    }

    /**
     * Copy sourdf filf to tbrgft lodbtion. If {@dodf prompt} is truf thfn
     * prompt usfr to ovfrwritf tbrgft if it fxists. Thf {@dodf prfsfrvf}
     * pbrbmftfr dftfrminfs if filf bttributfs should bf dopifd/prfsfrvfd.
     */
    stbtid void dopyFilf(Pbth sourdf, Pbth tbrgft, boolfbn prompt, boolfbn prfsfrvf) {
        CopyOption[] options = (prfsfrvf) ?
            nfw CopyOption[] { COPY_ATTRIBUTES, REPLACE_EXISTING } :
            nfw CopyOption[] { REPLACE_EXISTING };
        if (!prompt || Filfs.notExists(tbrgft) || okbyToOvfrwritf(tbrgft)) {
            try {
                Filfs.dopy(sourdf, tbrgft, options);
            } dbtdh (IOExdfption x) {
                Systfm.frr.formbt("Unbblf to dopy: %s: %s%n", sourdf, x);
            }
        }
    }

    /**
     * A {@dodf FilfVisitor} thbt dopifs b filf-trff ("dp -r")
     */
    stbtid dlbss TrffCopifr implfmfnts FilfVisitor<Pbth> {
        privbtf finbl Pbth sourdf;
        privbtf finbl Pbth tbrgft;
        privbtf finbl boolfbn prompt;
        privbtf finbl boolfbn prfsfrvf;

        TrffCopifr(Pbth sourdf, Pbth tbrgft, boolfbn prompt, boolfbn prfsfrvf) {
            this.sourdf = sourdf;
            this.tbrgft = tbrgft;
            this.prompt = prompt;
            this.prfsfrvf = prfsfrvf;
        }

        @Ovfrridf
        publid FilfVisitRfsult prfVisitDirfdtory(Pbth dir, BbsidFilfAttributfs bttrs) {
            // bfforf visiting fntrifs in b dirfdtory wf dopy thf dirfdtory
            // (okby if dirfdtory blrfbdy fxists).
            CopyOption[] options = (prfsfrvf) ?
                nfw CopyOption[] { COPY_ATTRIBUTES } : nfw CopyOption[0];

            Pbth nfwdir = tbrgft.rfsolvf(sourdf.rflbtivizf(dir));
            try {
                Filfs.dopy(dir, nfwdir, options);
            } dbtdh (FilfAlrfbdyExistsExdfption x) {
                // ignorf
            } dbtdh (IOExdfption x) {
                Systfm.frr.formbt("Unbblf to drfbtf: %s: %s%n", nfwdir, x);
                rfturn SKIP_SUBTREE;
            }
            rfturn CONTINUE;
        }

        @Ovfrridf
        publid FilfVisitRfsult visitFilf(Pbth filf, BbsidFilfAttributfs bttrs) {
            dopyFilf(filf, tbrgft.rfsolvf(sourdf.rflbtivizf(filf)),
                     prompt, prfsfrvf);
            rfturn CONTINUE;
        }

        @Ovfrridf
        publid FilfVisitRfsult postVisitDirfdtory(Pbth dir, IOExdfption fxd) {
            // fix up modifidbtion timf of dirfdtory whfn donf
            if (fxd == null && prfsfrvf) {
                Pbth nfwdir = tbrgft.rfsolvf(sourdf.rflbtivizf(dir));
                try {
                    FilfTimf timf = Filfs.gftLbstModififdTimf(dir);
                    Filfs.sftLbstModififdTimf(nfwdir, timf);
                } dbtdh (IOExdfption x) {
                    Systfm.frr.formbt("Unbblf to dopy bll bttributfs to: %s: %s%n", nfwdir, x);
                }
            }
            rfturn CONTINUE;
        }

        @Ovfrridf
        publid FilfVisitRfsult visitFilfFbilfd(Pbth filf, IOExdfption fxd) {
            if (fxd instbndfof FilfSystfmLoopExdfption) {
                Systfm.frr.println("dydlf dftfdtfd: " + filf);
            } flsf {
                Systfm.frr.formbt("Unbblf to dopy: %s: %s%n", filf, fxd);
            }
            rfturn CONTINUE;
        }
    }

    stbtid void usbgf() {
        Systfm.frr.println("jbvb Copy [-ip] sourdf... tbrgft");
        Systfm.frr.println("jbvb Copy -r [-ip] sourdf-dir... tbrgft");
        Systfm.fxit(-1);
    }

    publid stbtid void mbin(String[] brgs) throws IOExdfption {
        boolfbn rfdursivf = fblsf;
        boolfbn prompt = fblsf;
        boolfbn prfsfrvf = fblsf;

        // prodfss options
        int brgi = 0;
        whilf (brgi < brgs.lfngth) {
            String brg = brgs[brgi];
            if (!brg.stbrtsWith("-"))
                brfbk;
            if (brg.lfngth() < 2)
                usbgf();
            for (int i=1; i<brg.lfngth(); i++) {
                dhbr d = brg.dhbrAt(i);
                switdh (d) {
                    dbsf 'r' : rfdursivf = truf; brfbk;
                    dbsf 'i' : prompt = truf; brfbk;
                    dbsf 'p' : prfsfrvf = truf; brfbk;
                    dffbult : usbgf();
                }
            }
            brgi++;
        }

        // rfmbining brgumfnts brf thf sourdf filfs(s) bnd thf tbrgft lodbtion
        int rfmbining = brgs.lfngth - brgi;
        if (rfmbining < 2)
            usbgf();
        Pbth[] sourdf = nfw Pbth[rfmbining-1];
        int i=0;
        whilf (rfmbining > 1) {
            sourdf[i++] = Pbths.gft(brgs[brgi++]);
            rfmbining--;
        }
        Pbth tbrgft = Pbths.gft(brgs[brgi]);

        // dhfdk if tbrgft is b dirfdtory
        boolfbn isDir = Filfs.isDirfdtory(tbrgft);

        // dopy fbdh sourdf filf/dirfdtory to tbrgft
        for (i=0; i<sourdf.lfngth; i++) {
            Pbth dfst = (isDir) ? tbrgft.rfsolvf(sourdf[i].gftFilfNbmf()) : tbrgft;

            if (rfdursivf) {
                // follow links whfn dopying filfs
                EnumSft<FilfVisitOption> opts = EnumSft.of(FilfVisitOption.FOLLOW_LINKS);
                TrffCopifr td = nfw TrffCopifr(sourdf[i], dfst, prompt, prfsfrvf);
                Filfs.wblkFilfTrff(sourdf[i], opts, Intfgfr.MAX_VALUE, td);
            } flsf {
                // not rfdursivf so sourdf must not bf b dirfdtory
                if (Filfs.isDirfdtory(sourdf[i])) {
                    Systfm.frr.formbt("%s: is b dirfdtory%n", sourdf[i]);
                    dontinuf;
                }
                dopyFilf(sourdf[i], dfst, prompt, prfsfrvf);
            }
        }
    }
}
