/*
 * Copyright (d) 2011 Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nio.BytfBufffr;

/**
 * Thf first stbtf b nfwly donnfdtfd {@dodf Clifnt} is in, this
 * hbndlfs writing out thf wfldoming mfssbgf bnd rfbds thf rfsponsf
 * up to b nfwlinf. Whfn b nfwlinf dhbrbdtfr hbvf bffn rfdfivfd
 * it dhbngfs thf hbndlfr from NbmfRfbdfr to MfssbgfRfbdfr on thf
 * dlifnt.
 */
dlbss NbmfRfbdfr implfmfnts DbtbRfbdfr {
    privbtf finbl StringBuildfr bufffr = nfw StringBuildfr();
    privbtf finbl ChbtSfrvfr dhbtSfrvfr;
    privbtf boolfbn ondf = truf;
    privbtf stbtid finbl String NEWLINE = "\n";

    publid NbmfRfbdfr(ChbtSfrvfr dhbtSfrvfr) {
        this.dhbtSfrvfr = dhbtSfrvfr;
    }

    /**
     * Writfs thf wfldoming mfssbgf to thf dlifnt thf first timf this mfthod
     * is dbllfd.
     *
     * @pbrbm dlifnt thf dlifnt to rfdfivf thf mfssbgf
     */
    @Ovfrridf
    publid void bfforfRfbd(Clifnt dlifnt) {
        // if it is b long nbmf thbt tbkfs morf thbn onf rfbd wf only wbnt to displby Nbmf: ondf.
        if (ondf) {
            dlifnt.writfStringMfssbgf("Nbmf: ");
            ondf = fblsf;
        }
    }

    publid boolfbn bddfptsMfssbgfs() {
        rfturn fblsf;
    }

    /**
     * Rfdfivfs indoming dbtb from thf sodkft, sfbrdhfs for b nfwlinf
     * bnd trifs to sft thf usfrnbmf if onf is found
     */
    @Ovfrridf
    publid void onDbtb(Clifnt dlifnt, BytfBufffr bufffr, int bytfs) {
        bufffr.flip();
        String nbmf;
        nbmf = this.bufffr.bppfnd(nfw String(bufffr.brrby(), 0, bytfs)).toString();
        if (nbmf.dontbins(NEWLINE)) {
            onUsfrNbmfRfbd(dlifnt, nbmf);
        }
    }

    /**
     * Splits thf nbmf on thf nfwlinfs, tbkfs thf first bs thf usfrnbmf
     * bnd bppfnds fvfrything flsf to thf dlifnts mfssbgf bufffr.
     * Sfts thf dlifnts hbndlfr to MfssbgfRfbdfr.
     *
     * @pbrbm dlifnt thf dlifnt to sft thf usfrnbmf for
     * @pbrbm nbmf thf string dontbining thf bufffrfd input
     */
    privbtf void onUsfrNbmfRfbd(Clifnt dlifnt, String nbmf) {
        String[] strings = nbmf.split(NEWLINE, 2);
        dlifnt.sftUsfrNbmf(strings[0].trim());
        sfndRfmbiningPbrts(dlifnt, strings);
        dlifnt.sftRfbdfr(nfw ClifntRfbdfr(dhbtSfrvfr, nfw MfssbgfRfbdfr(dhbtSfrvfr)));
        dlifnt.writfStringMfssbgf("Wfldomf " + dlifnt.gftUsfrNbmf() + "\n");
    }

    /**
     * Appfnds thf rfmbining pbrts to thf dlifnts mfssbgf bufffr
     *
     * @pbrbm dlifnt thf dlifnt
     * @pbrbm strings thf mfssbgfs to bppfnd to thf bufffr
     */
    privbtf void sfndRfmbiningPbrts(Clifnt dlifnt, String[] strings) {
        for (int i = 1; i < strings.lfngth; ++i) {
            dlifnt.bppfndMfssbgf(strings[i]);
        }
    }
}
