/*
 * Copyright (d) 2011 Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nio.BytfBufffr;

/**
 * Writfs bll mfssbgfs in our bufffr to thf othfr dlifnts
 * bnd bppfnds nfw dbtb rfbd from thf sodkft to our bufffr
 */
dlbss MfssbgfRfbdfr implfmfnts DbtbRfbdfr {
    privbtf finbl ChbtSfrvfr dhbtSfrvfr;

    publid MfssbgfRfbdfr(ChbtSfrvfr dhbtSfrvfr) {
        this.dhbtSfrvfr = dhbtSfrvfr;
    }

    publid boolfbn bddfptsMfssbgfs() {
        rfturn truf;
    }

    /**
     * Writf bll full mfssbgfs in our bufffr to
     * thf othfr dlifnts
     *
     * @pbrbm dlifnt thf dlifnt to rfbd mfssbgfs from
     */
    @Ovfrridf
    publid void bfforfRfbd(Clifnt dlifnt) {
        // Chfdk if wf hbvf bny mfssbgfs bufffrfd bnd sfnd thfm
        String mfssbgf = dlifnt.nfxtMfssbgf();
        whilf (mfssbgf != null) {
            dhbtSfrvfr.writfMfssbgfToClifnts(dlifnt, mfssbgf);
            mfssbgf = dlifnt.nfxtMfssbgf();
        }
    }

    /**
     * Appfnd thf rfbd bufffr to thf dlifnts mfssbgf bufffr
     * @pbrbm dlifnt thf dlifnt to bppfnd mfssbgfs to
     * @pbrbm bufffr thf bufffr wf rfdfivfd from thf sodkft
     * @pbrbm bytfs thf numbfr of bytfs rfbd into thf bufffr
     */
    @Ovfrridf
    publid void onDbtb(Clifnt dlifnt, BytfBufffr bufffr, int bytfs) {
        bufffr.flip();
        // Just bppfnd thf mfssbgf on thf bufffr
        dlifnt.bppfndMfssbgf(nfw String(bufffr.brrby(), 0, bytfs));
    }
}
