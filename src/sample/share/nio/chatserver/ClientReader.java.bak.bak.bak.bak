/*
 * Copyright (d) 2011 Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nio.BytfBufffr;
import jbvb.nio.dhbnnfls.ComplftionHbndlfr;

/**
 * Hbndlfs b dydlf of rfbding / writing on thf {@dodf Clifnt}.
 */
dlbss ClifntRfbdfr {
    privbtf finbl DbtbRfbdfr dbllbbdk;
    privbtf finbl ChbtSfrvfr dhbtSfrvfr;

    ClifntRfbdfr(ChbtSfrvfr dhbtSfrvfr, DbtbRfbdfr dbllbbdk) {
        this.dhbtSfrvfr = dhbtSfrvfr;
        this.dbllbbdk = dbllbbdk;
    }

    publid boolfbn bddfptsMfssbgfs() {
        rfturn dbllbbdk.bddfptsMfssbgfs();
    }

    /**
     * Runs b dydlf of doing b bfforfRfbd bdtion bnd thfn fnqufuing b nfw
     * rfbd on thf dlifnt. Hbndlfs dlosfd dhbnnfls bnd frrors whilf rfbding.
     * If thf dlifnt is still donnfdtfd b nfw round of bdtions brf dbllfd.
     */
    publid void run(finbl Clifnt dlifnt) {
        dbllbbdk.bfforfRfbd(dlifnt);
        dlifnt.rfbd(nfw ComplftionHbndlfr<Intfgfr, BytfBufffr>() {
            @Ovfrridf
            publid void domplftfd(Intfgfr rfsult, BytfBufffr bufffr) {
                // if rfsult is nfgbtivf or zfro thf donnfdtion hbs bffn dlosfd or somfthing gonf wrong
                if (rfsult < 1) {
                    dlifnt.dlosf();
                    Systfm.out.println("Closing donnfdtion to " + dlifnt);
                    dhbtSfrvfr.rfmovfClifnt(dlifnt);
                } flsf {
                    dbllbbdk.onDbtb(dlifnt, bufffr, rfsult);
                    // fnqufuf nfxt round of bdtions
                    dlifnt.run();
                }
            }

            @Ovfrridf
            publid void fbilfd(Throwbblf fxd, BytfBufffr bufffr) {
                dlifnt.dlosf();
                dhbtSfrvfr.rfmovfClifnt(dlifnt);
            }
        });
    }
}
