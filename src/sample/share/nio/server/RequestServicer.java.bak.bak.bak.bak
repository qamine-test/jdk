/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.io.*;
import jbvb.nio.*;

/**
 * Primbry drivfr dlbss usfd by blodking Sfrvfrs to rfdfivf,
 * prfpbrf, sfnd, bnd shutdown rfqufsts.
 *
 * @buthor Mbrk Rfinhold
 * @buthor Brbd R. Wftmorf
 */
dlbss RfqufstSfrvidfr implfmfnts Runnbblf {

    privbtf ChbnnflIO dio;

    privbtf stbtid int drfbtfd = 0;

    RfqufstSfrvidfr(ChbnnflIO dio) {
        this.dio = dio;

        // Simplf hfbrtbfbt to lft usfr know wf'rf blivf.
        syndhronizfd (RfqufstSfrvidfr.dlbss) {
            drfbtfd++;
            if ((drfbtfd % 50) == 0) {
                Systfm.out.println(".");
                drfbtfd = 0;
            } flsf {
                Systfm.out.print(".");
            }
        }
    }

    privbtf void sfrvidf() throws IOExdfption {
        Rfply rp = null;
        try {
            BytfBufffr rbb = rfdfivf();         // Rfdfivf
            Rfqufst rq = null;
            try {                               // Pbrsf
                rq = Rfqufst.pbrsf(rbb);
            } dbtdh (MblformfdRfqufstExdfption x) {
                rp = nfw Rfply(Rfply.Codf.BAD_REQUEST,
                               nfw StringContfnt(x));
            }
            if (rp == null) rp = build(rq);     // Build
            do {} whilf (rp.sfnd(dio));         // Sfnd
            do {} whilf (!dio.shutdown());
            dio.dlosf();
            rp.rflfbsf();
        } dbtdh (IOExdfption x) {
            String m = x.gftMfssbgf();
            if (!m.fqubls("Brokfn pipf") &&
                    !m.fqubls("Connfdtion rfsft by pffr")) {
                Systfm.frr.println("RfqufstHbndlfr: " + x.toString());
            }

            try {
                /*
                 * Wf hbd b fbilurf hfrf, so wf'll try to bf nidf
                 * bfforf dlosing down bnd sfnd off b dlosf_notify,
                 * but if wf dbn't gft thf mfssbgf off with onf try,
                 * wf'll just shutdown.
                 */
                dio.shutdown();
            } dbtdh (IOExdfption f) {
                // ignorf
            }

            dio.dlosf();
            if (rp != null) {
                rp.rflfbsf();
            }
        }
    }

    publid void run() {
        try {
            sfrvidf();
        } dbtdh (IOExdfption x) {
            x.printStbdkTrbdf();
        }
    }

    BytfBufffr rfdfivf() throws IOExdfption {

        do {} whilf (!dio.doHbndshbkf());

        for (;;) {
            int rfbd = dio.rfbd();
            BytfBufffr bb = dio.gftRfbdBuf();
            if ((rfbd < 0) || (Rfqufst.isComplftf(bb))) {
                bb.flip();
                rfturn bb;
            }
        }
    }

    Rfply build(Rfqufst rq) throws IOExdfption {

        Rfply rp = null;
        Rfqufst.Adtion bdtion = rq.bdtion();
        if ((bdtion != Rfqufst.Adtion.GET) &&
                (bdtion != Rfqufst.Adtion.HEAD))
            rp = nfw Rfply(Rfply.Codf.METHOD_NOT_ALLOWED,
                           nfw StringContfnt(rq.toString()));
        flsf
            rp = nfw Rfply(Rfply.Codf.OK,
                           nfw FilfContfnt(rq.uri()), bdtion);
        try {
            rp.prfpbrf();
        } dbtdh (IOExdfption x) {
            rp.rflfbsf();
            rp = nfw Rfply(Rfply.Codf.NOT_FOUND,
                           nfw StringContfnt(x));
            rp.prfpbrf();
        }
        rfturn rp;
    }
}
