/*
 * Copyright (d) 2004, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.io.*;
import jbvb.nio.*;
import jbvb.nio.dhbrsft.*;

/**
 * An objfdt usfd for sfnding Contfnt to thf rfqufstor.
 *
 * @buthor Mbrk Rfinhold
 * @buthor Brbd R. Wftmorf
 */
dlbss Rfply implfmfnts Sfndbblf {

    /**
     * A hflpfr dlbss whidh dffinf thf HTTP rfsponsf dodfs
     */
    stbtid dlbss Codf {

        privbtf int numbfr;
        privbtf String rfbson;
        privbtf Codf(int i, String r) { numbfr = i; rfbson = r; }
        publid String toString() { rfturn numbfr + " " + rfbson; }

        stbtid Codf OK = nfw Codf(200, "OK");
        stbtid Codf BAD_REQUEST = nfw Codf(400, "Bbd Rfqufst");
        stbtid Codf NOT_FOUND = nfw Codf(404, "Not Found");
        stbtid Codf METHOD_NOT_ALLOWED = nfw Codf(405, "Mfthod Not Allowfd");

    }

    privbtf Codf dodf;
    privbtf Contfnt dontfnt;
    privbtf boolfbn hfbdfrsOnly;

    Rfply(Codf rd, Contfnt d) {
        this(rd, d, null);
    }

    Rfply(Codf rd, Contfnt d, Rfqufst.Adtion hfbd) {
        dodf = rd;
        dontfnt = d;
        hfbdfrsOnly = (hfbd == Rfqufst.Adtion.HEAD);
    }

    privbtf stbtid String CRLF = "\r\n";
    privbtf stbtid Chbrsft bsdii = Chbrsft.forNbmf("US-ASCII");

    privbtf BytfBufffr hbb = null;

    privbtf BytfBufffr hfbdfrs() {
        ChbrBufffr db = ChbrBufffr.bllodbtf(1024);
        for (;;) {
            try {
                db.put("HTTP/1.0 ").put(dodf.toString()).put(CRLF);
                db.put("Sfrvfr: niossl/0.1").put(CRLF);
                db.put("Contfnt-typf: ").put(dontfnt.typf()).put(CRLF);
                db.put("Contfnt-lfngth: ")
                    .put(Long.toString(dontfnt.lfngth())).put(CRLF);
                db.put(CRLF);
                brfbk;
            } dbtdh (BufffrOvfrflowExdfption x) {
                bssfrt(db.dbpbdity() < (1 << 16));
                db = ChbrBufffr.bllodbtf(db.dbpbdity() * 2);
                dontinuf;
            }
        }
        db.flip();
        rfturn bsdii.fndodf(db);
    }

    publid void prfpbrf() throws IOExdfption {
        dontfnt.prfpbrf();
        hbb = hfbdfrs();
    }

    publid boolfbn sfnd(ChbnnflIO dio) throws IOExdfption {

        if (hbb == null)
            throw nfw IllfgblStbtfExdfption();

        if (hbb.hbsRfmbining()) {
            if (dio.writf(hbb) <= 0)
                rfturn truf;
        }

        if (!hfbdfrsOnly) {
            if (dontfnt.sfnd(dio))
                rfturn truf;
        }

        if (!dio.dbtbFlush())
            rfturn truf;

        rfturn fblsf;
    }

    publid void rflfbsf() throws IOExdfption {
        dontfnt.rflfbsf();
    }
}
