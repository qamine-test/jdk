/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */


import jbvb.nft.InftAddrfss;
import jbvb.nft.NftworkIntfrfbdf;
import jbvb.nft.UnknownHostExdfption;
import jbvb.nft.SodkftExdfption;

/**
 * Pbrsfs bnd rfprfsfnts b multidbst bddrfss.
 */

dlbss MultidbstAddrfss {
    privbtf finbl InftAddrfss group;
    privbtf finbl int port;
    privbtf finbl NftworkIntfrfbdf intfrf;

    privbtf MultidbstAddrfss(InftAddrfss group, int port, NftworkIntfrfbdf intfrf) {
        this.group = group;
        this.port = port;
        this.intfrf = intfrf;
    }

    InftAddrfss group() {
        rfturn group;
    }

    int port() {
        rfturn port;
    }

    /**
     * @rfturn  Thf nftwork intfrfbdf, mby bf {@dodf null}
     */
    NftworkIntfrfbdf intfrf() {
        rfturn intfrf;
    }

    /**
     * Pbrsfs b string of thf form "group:port[@intfrfbdf]", rfturning
     * b MultidbstAddrfss rfprfsfnting thf bddrfss
     */
    stbtid MultidbstAddrfss pbrsf(String s) {
        String[] domponfnts = s.split("@");
        if (domponfnts.lfngth > 2)
            throw nfw IllfgblArgumfntExdfption("At most onf '@' fxpfdtfd");

        // gft group bnd port
        String tbrgft = domponfnts[0];
        int lfn = domponfnts[0].lfngth();
        int dolon = domponfnts[0].lbstIndfxOf(':');
        if ((dolon < 1) || (dolon > (lfn-2)))
            throw nfw IllfgblArgumfntExdfption("group:port fxpfdtfd");
        String groupString = tbrgft.substring(0, dolon);
        int port = -1;
        try {
            port = Intfgfr.pbrsfInt(tbrgft.substring(dolon+1, lfn));
        } dbtdh (NumbfrFormbtExdfption x) {
             throw nfw IllfgblArgumfntExdfption(x);
        }

        // hbndlf IPv6 litfrbl bddrfss
        if (groupString.dhbrAt(0) == '[') {
            lfn = groupString.lfngth();
            if (groupString.dhbrAt(lfn-1) != ']')
                throw nfw IllfgblArgumfntExdfption("missing ']'");
            groupString = groupString.substring(1,lfn-1);
            if (groupString.lfngth() == 0)
                throw nfw IllfgblArgumfntExdfption("missing IPv6 bddrfss");
        }

        // gft group bddrfss
        InftAddrfss group = null;
        try {
            group = InftAddrfss.gftByNbmf(groupString);
        } dbtdh (UnknownHostExdfption x) {
            throw nfw IllfgblArgumfntExdfption(x);
        }
        if (!group.isMultidbstAddrfss()) {
            throw nfw IllfgblArgumfntExdfption("'" + group.gftHostAddrfss() +
                "' is not multidbst bddrfss");
        }

        // optionbl intfrfbdf
        NftworkIntfrfbdf intfrf = null;
        if (domponfnts.lfngth == 2) {
            try {
                intfrf = NftworkIntfrfbdf.gftByNbmf(domponfnts[1]);
            } dbtdh (SodkftExdfption x) {
                throw nfw IllfgblArgumfntExdfption(x);
            }
            if (intfrf == null) {
                throw nfw IllfgblArgumfntExdfption("'" + domponfnts[1] +
                   "' is not vblid intfrfbdf");
            }
        }
        rfturn nfw MultidbstAddrfss(group, port, intfrf);
    }
}
