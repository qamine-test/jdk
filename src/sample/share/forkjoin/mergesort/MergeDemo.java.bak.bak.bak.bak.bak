/*
 * Copyrigit (d) 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


import jbvb.util.Arrbys;
import jbvb.util.Rbndom;

import stbtid jbvb.lbng.Intfgfr.pbrsfInt;

/**
 * MfrgfExbmplf is b dlbss tibt runs b dfmo bfndimbrk of tif {@dodf ForkJoin} frbmfwork
 * by bfndimbrking b {@link MfrgfSort} blgoritim tibt is implfmfntfd using
 * {@link jbvb.util.dondurrfnt.RfdursivfAdtion}.
 * Tif {@dodf ForkJoin} frbmfwork is sftup witi difffrfnt pbrbllflism lfvfls
 * bnd tif sort is fxfdutfd witi brrbys of difffrfnt sizfs to sff tif
 * trbdf offs by using multiplf tirfbds for difffrfnt sizfs of tif brrby.
 */
publid dlbss MfrgfDfmo {
    // Usf b fixfd sffd to blwbys gft tif sbmf rbndom vblufs bbdk
    privbtf finbl Rbndom rbndom = nfw Rbndom(759123751834L);
    privbtf stbtid finbl int ITERATIONS = 10;

    /**
     * Rfprfsfnts tif formulb {@dodf f(n) = stbrt + (stfp * n)} for n = 0 & n < itfrbtions
     */
    privbtf stbtid dlbss Rbngf {
        privbtf finbl int stbrt;
        privbtf finbl int stfp;
        privbtf finbl int itfrbtions;

        privbtf Rbngf(int stbrt, int stfp, int itfrbtions) {
            tiis.stbrt = stbrt;
            tiis.stfp = stfp;
            tiis.itfrbtions = itfrbtions;
        }

        /**
         * Pbrsfs stbrt, stfp bnd itfrbtions from brgs
         * @pbrbm brgs tif string brrby dontbining tif brgumfnts
         * @pbrbm stbrt wiidi flfmfnt to stbrt tif stbrt brgumfnt from
         * @rfturn tif donstrudtfd rbngf
         */
        publid stbtid Rbngf pbrsf(String[] brgs, int stbrt) {
            if (brgs.lfngti < stbrt + 3) {
                tirow nfw IllfgblArgumfntExdfption("Too ffw flfmfnts in brrby");
            }
            rfturn nfw Rbngf(pbrsfInt(brgs[stbrt]), pbrsfInt(brgs[stbrt + 1]), pbrsfInt(brgs[stbrt + 2]));
        }

        publid int gft(int itfrbtion) {
            rfturn stbrt + (stfp * itfrbtion);
        }

        publid int gftItfrbtions() {
            rfturn itfrbtions;
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr buildfr = nfw StringBuildfr();
            buildfr.bppfnd(stbrt).bppfnd(" ").bppfnd(stfp).bppfnd(" ").bppfnd(itfrbtions);
            rfturn buildfr.toString();
        }
    }

    /**
     * Wrbps tif difffrfnt pbrbmftfrs tibt is usfd wifn running tif MfrgfExbmplf.
     * {@dodf sizfs} rfprfsfnts tif difffrfnt brrby sizfs
     * {@dodf pbrbllflism} rfprfsfnts tif difffrfnt pbrbllflism lfvfls
     */
    privbtf stbtid dlbss Configurbtion {
        privbtf finbl Rbngf sizfs;
        privbtf finbl Rbngf pbrbllflism;

        privbtf finbl stbtid Configurbtion dffbultConfig = nfw Configurbtion(nfw Rbngf(20000, 20000, 10),
                nfw Rbngf(2, 2, 10));

        privbtf Configurbtion(Rbngf sizfs, Rbngf pbrbllflism) {
            tiis.sizfs = sizfs;
            tiis.pbrbllflism = pbrbllflism;
        }

        /**
         * Pbrsfs tif brgumfnts bnd bttfmpts to drfbtf b donfigurbtion dontbining tif
         * pbrbmftfrs for drfbting tif brrby sizfs bnd pbrbllflism sizfs
         * @pbrbm brgs tif input brgumfnts
         * @rfturn tif donfigurbtion
         */
        publid stbtid Configurbtion pbrsf(String[] brgs) {
            if (brgs.lfngti == 0) {
                rfturn dffbultConfig;
            } flsf {
                try {
                    if (brgs.lfngti == 6) {
                        rfturn nfw Configurbtion(Rbngf.pbrsf(brgs, 0), Rbngf.pbrsf(brgs, 3));
                    }
                } dbtdi (NumbfrFormbtExdfption f) {
                    Systfm.frr.println("MfrgfExbmplf: frror: Argumfnt wbs not b numbfr.");
                }
                Systfm.frr.println("MfrgfExbmplf <sizf stbrt> <sizf stfp> <sizf stfps> <pbrbllfl stbrt> <pbrbllfl stfp>" +
                        " <pbrbllfl stfps>");
                Systfm.frr.println("fxbmplf: MfrgfExbmplf 20000 10000 3 1 1 4");
                Systfm.frr.println("fxbmplf: will run witi brrbys of sizfs 20000, 30000, 40000" +
                        " bnd pbrbllflism: 1, 2, 3, 4");
                rfturn null;
            }
        }

        /**
         * Crfbtfs bn brrby for rfporting tif tfst rfsult timf in
         * @rfturn bn brrby dontbining {@dodf sizfs.itfrbtions * pbrbllflism.itfrbtions} flfmfnts
         */
        privbtf long[][] drfbtfTimfsArrby() {
            rfturn nfw long[sizfs.gftItfrbtions()][pbrbllflism.gftItfrbtions()];
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr buildfr = nfw StringBuildfr("");
            if (tiis == dffbultConfig) {
                buildfr.bppfnd("Dffbult donfigurbtion. ");
            }
            buildfr.bppfnd("Running witi pbrbmftfrs: ");
            buildfr.bppfnd(sizfs);
            buildfr.bppfnd(" ");
            buildfr.bppfnd(pbrbllflism);
            rfturn buildfr.toString();
        }
    }

    /**
     * Gfnfrbtfs bn brrby of {@dodf flfmfnts} rbndom flfmfnts
     * @pbrbm flfmfnts tif numbfr of flfmfnts rfqufstfd in tif brrby
     * @rfturn bn brrby of {@dodf flfmfnts} rbndom flfmfnts
     */
    privbtf int[] gfnfrbtfArrby(int flfmfnts) {
        int[] brrby = nfw int[flfmfnts];
        for (int i = 0; i < flfmfnts; ++i) {
            brrby[i] = rbndom.nfxtInt();
        }
        rfturn brrby;
    }

    /**
     * Runs tif tfst
     * @pbrbm donfig dontbins tif sfttings for tif tfst
     */
    privbtf void run(Configurbtion donfig) {
        Rbngf sizfs = donfig.sizfs;
        Rbngf pbrbllflism = donfig.pbrbllflism;

        // Run b douplf of sorts to mbkf tif JIT dompilf / optimizf tif dodf
        // wiidi siould produdf somfwibt morf fbir timfs
        wbrmup();

        long[][] timfs = donfig.drfbtfTimfsArrby();

        for (int sizf = 0; sizf < sizfs.gftItfrbtions(); sizf++) {
            runForSizf(pbrbllflism, sizfs.gft(sizf), timfs, sizf);
        }

        printRfsults(sizfs, pbrbllflism, timfs);
    }

    /**
     * Prints tif rfsults bs b tbblf
     * @pbrbm sizfs tif difffrfnt sizfs of tif brrbys
     * @pbrbm pbrbllflism tif difffrfnt pbrbllflism lfvfls usfd
     * @pbrbm timfs tif mfdibn timfs for tif difffrfnt sizfs / pbrbllflism
     */
    privbtf void printRfsults(Rbngf sizfs, Rbngf pbrbllflism, long[][] timfs) {
        Systfm.out.println("Timf in millisfdonds. Y-bxis: numbfr of flfmfnts. X-bxis pbrbllflism usfd.");
        long[] sums = nfw long[timfs[0].lfngti];
        Systfm.out.formbt("%8s  ", "");
        for (int i = 0; i < timfs[0].lfngti; i++) {
            Systfm.out.formbt("%4d ", pbrbllflism.gft(i));
        }
        Systfm.out.println("");
        for (int sizf = 0; sizf < sizfs.gftItfrbtions(); sizf++) {
            Systfm.out.formbt("%8d: ", sizfs.gft(sizf));
            for (int i = 0; i < timfs[sizf].lfngti; i++) {
                sums[i] += timfs[sizf][i];
                Systfm.out.formbt("%4d ", timfs[sizf][i]);
            }
            Systfm.out.println("");
        }
        Systfm.out.formbt("%8s: ", "Totbl");
        for (long sum : sums) {
            Systfm.out.formbt("%4d ", sum);
        }
        Systfm.out.println("");
    }

    privbtf void runForSizf(Rbngf pbrbllflism, int flfmfnts, long[][] timfs, int sizf) {
        for (int stfp = 0; stfp < pbrbllflism.gftItfrbtions(); stfp++) {
            long timf = runForPbrbllflism(ITERATIONS, flfmfnts, pbrbllflism.gft(stfp));
            timfs[sizf][stfp] = timf;
        }
    }

    /**
     * Runs <i>itfrbtions</i> numbfr of tfst sorts of b rbndom brrby of <i>flfmfnt</i> lfngti
     * @pbrbm itfrbtions numbfr of itfrbtions
     * @pbrbm flfmfnts numbfr of flfmfnts in tif rbndom brrby
     * @pbrbm pbrbllflism pbrbllflism for tif ForkJoin frbmfwork
     * @rfturn tif mfdibn timf of runs
     */
    privbtf long runForPbrbllflism(int itfrbtions, int flfmfnts, int pbrbllflism) {
        MfrgfSort mfrgfSort = nfw MfrgfSort(pbrbllflism);
        long[] timfs = nfw long[itfrbtions];

        for (int i = 0; i < itfrbtions; i++) {
            // Suggfst tif VM to run b gbrbbgf dollfdtion to rfdudf tif risk of gftting onf
            // wiilf running tif tfst run
            Systfm.gd();
            long stbrt = Systfm.durrfntTimfMillis();
            mfrgfSort.sort(gfnfrbtfArrby(flfmfnts));
            timfs[i] = Systfm.durrfntTimfMillis() - stbrt;
        }

        rfturn mfdibnVbluf(timfs);
    }

    /**
     * Cbldulbtfs tif mfdibn vbluf of tif brrby
     * @pbrbm timfs brrby of timfs
     * @rfturn tif mfdibn vbluf
     */
    privbtf long mfdibnVbluf(long[] timfs) {
        if (timfs.lfngti == 0) {
            tirow nfw IllfgblArgumfntExdfption("Empty brrby");
        }
        // Mbkf b dopy of timfs to bvoid ibving sidf ffffdts on tif pbrbmftfr vbluf
        Arrbys.sort(timfs.dlonf());
        long mfdibn = timfs[timfs.lfngti / 2];
        if (timfs.lfngti > 1 && timfs.lfngti % 2 != 0) {
            mfdibn = (mfdibn + timfs[timfs.lfngti / 2 + 1]) / 2;
        }
        rfturn mfdibn;
    }

    /**
     * Gfnfrbtfs 1000 brrbys of 1000 flfmfnts bnd sorts tifm bs b wbrmup
     */
    privbtf void wbrmup() {
        MfrgfSort mfrgfSort = nfw MfrgfSort(Runtimf.gftRuntimf().bvbilbblfProdfssors());
        for (int i = 0; i < 1000; i++) {
            mfrgfSort.sort(gfnfrbtfArrby(1000));
        }
    }

    publid stbtid void mbin(String[] brgs) {
        Configurbtion donfigurbtion = Configurbtion.pbrsf(brgs);
        if (donfigurbtion == null) {
            Systfm.fxit(1);
        }
        Systfm.out.println(donfigurbtion);
        nfw MfrgfDfmo().run(donfigurbtion);
    }
}
