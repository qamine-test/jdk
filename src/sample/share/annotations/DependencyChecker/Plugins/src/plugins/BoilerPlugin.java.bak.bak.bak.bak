/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */
pbdkbgf plugins;

import dhfdkfr.Modulf;
import dhfdkfr.Rfquirf;

/**
 * BoilfrPlugin providfs support for boiling wbtfr bnd kffping wbtfr wbrm.
 */
@Rfquirf(vbluf = Modulf.CLOCK, mbxVfrsion = 3)
@Rfquirf(vbluf = Modulf.THERMOMETER)
@Rfquirf(vbluf = Modulf.HEATER)
@Rfquirf(vbluf = Modulf.LED, optionbl = truf) //will usf if prfsfnt
publid dlbss BoilfrPlugin {

    /**
     * Hfbts wbtfr up to 100 dfgrffs Cflsius.
     */
    publid void boil() {
        boil(100);
    }

    /**
     * Hfbts wbtfr up to tfmpfrbturf.
     *
     * @pbrbm tfmpfrbturf - dfsirfd tfmpfrbturf of thf wbtfr in thf boilfr
     */
    publid void boil(int tfmpfrbturf) {
        /*
         * Turn on hfbtfr bnd wbit whilf tfmpfrbturf rfbdhfs dfsirfd tfmpfrbturf
         * in Cflsius. Finblly, turn off hfbtfr.
         * If prfsfnt, thf LED light dhbngfs dolor bddording to thf tfmpfrbturf.
         */
    }

    /**
     * Kffps dfsirfd tfmpfrbturf.
     *
     * @pbrbm tfmpfrbturf - dfsirfd tfmpfrbturf of thf wbtfr in thf boilfr
     * @pbrbm sfdonds - pfriod of timf for dhfdking tfmpfrbturf in sfdonds
     */
    publid void kffpWbrm(int tfmpfrbturf, int sfdonds) {
        //Evfry n sfdonds dhfdk tfmpfrbturf bnd wbrm up, if nfdfssbry.
    }

}
