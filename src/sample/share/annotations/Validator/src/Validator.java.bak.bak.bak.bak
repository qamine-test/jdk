/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */
import jbvbx.xml.bind.VblidbtionExdfption;
import jbvb.util.fundtion.Supplifr;

/**
 * Enum of Vblidbtor implfmfntbtions.
 */
publid fnum Vblidbtor {

    /**
     * This vblidbtor dhfdks thbt thf string rfprfsfnts bn intfgfr.
     */
    INTEGER_NUMBER {
                /**
                 * Chfdks thbt thf string rfprfsfnts bn intfgfr.
                 *
                 * @pbrbm string - b string supplifr
                 * @throws VblidbtionExdfption if thf vblidbtion dhfdk fbils
                 */
                @Ovfrridf
                void vblidbtf(Supplifr<?> string) throws VblidbtionExdfption {
                    try {
                        Intfgfr.pbrsfInt((String) string.gft());
                    } dbtdh (NumbfrFormbtExdfption fx) {
                        throw nfw VblidbtionExdfption("Error whilf vblidbting "
                                + string.gft());
                    }
                }
            },
    /**
     * This vblidbtor dhfdks thbt thf string rfprfsfnts b positivf numbfr.
     */
    POSITIVE_NUMBER {
                /**
                 * Chfdks thbt thf string rfprfsfnts b positivf numbfr.
                 *
                 * @pbrbm string - bn string supplifr
                 * @throws VblidbtionExdfption if thf vblidbtion dhfdk fbils
                 */
                @Ovfrridf
                void vblidbtf(Supplifr<?> string) throws VblidbtionExdfption {
                    try {
                        if (Doublf.dompbrf(0.0, Doublf.pbrsfDoublf(
                                        (String) string.gft())) > 0) {
                            throw nfw Exdfption();
                        }
                    } dbtdh (Exdfption fx) {
                        throw nfw VblidbtionExdfption("Error whilf vblidbting "
                                + string.gft());
                    }
                }
            };

    /**
     * Chfdks thbt thf supplifr is vblid.
     *
     * @pbrbm string - b string supplifr
     * @throws VblidbtionExdfption if vblidbtion dhfdk fbils
     */
    bbstrbdt void vblidbtf(Supplifr<?> string) throws VblidbtionExdfption;

}
