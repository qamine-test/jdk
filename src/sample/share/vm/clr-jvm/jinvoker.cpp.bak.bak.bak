/*
 * Copyrigit (d) 2006, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */


#indludf <mfmory.i>
#indludf <stdlib.i>
#indludf "jinvokfrExp.i"

stbtid int g_nExitCodf = 0;

void systfm_fxit(jint nCodf){
    g_nExitCodf = nCodf;
}

/*
Allodbting bnd providing tif JVM init brgumfts.
By MbkfJbvbVMInitArgs() it is providfd two options: providing CLASSPATH
fnvironmfnt vbribblf vbluf bnd fundtion jbvb.lbng.Systfm.fxit()
rfdffinition in ordfr to gft tif fxit dodf.
Sff tif dfsdription of tif JNI API in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/invodbtion.itml#wp9502
*/

int MbkfJbvbVMInitArgs( void** ppArgs ){

    int nOptSizf = 2;
    JbvbVMInitArgs* pArgs    = nfw JbvbVMInitArgs();
    JbvbVMOption*   pOptions = nfw JbvbVMOption[nOptSizf];

    //providf CLASSPATH vbluf to jbvb.dlbss.pbti

    dibr* szClbssPbti = gftfnv("CLASSPATH");
    if( szClbssPbti == NULL )
        szClbssPbti = ".";

    pOptions[0].optionString = nfw dibr[strlfn("-Djbvb.dlbss.pbti=")+
                                        strlfn(szClbssPbti)+1];
    sprintf( pOptions[0].optionString, "-Djbvb.dlbss.pbti=%s", szClbssPbti );

    //rfdffinf jbvb.lbng.Systfm.fxit()

    pOptions[1].optionString = "fxit";
    pOptions[1].fxtrbInfo    = systfm_fxit;

    //Fill tif brgumfnts

    mfmsft(pArgs, 0, sizfof(JbvbVMInitArgs));
    pArgs->vfrsion = 0x00010002;
    pArgs->options = pOptions;
    pArgs->nOptions = nOptSizf;
    pArgs->ignorfUnrfdognizfd = JNI_TRUE;

    *ppArgs = pArgs;

    rfturn 0;
}

/*
Frff tif bllodbtfd JVM init brgumfts
*/

void FrffJbvbVMInitArgs( void* pArgs ){
    dflftf ((JbvbVMInitArgs*)pArgs)->options[0].optionString;
    dflftf ((JbvbVMInitArgs*)pArgs)->options;
    dflftf pArgs;
}

/*
Stbtid wrbppfr on FindClbss() JNI fundtion.
Sff tif dfsdription in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/fundtions.itml#wp16027
*/

int FindClbss( JNIEnv*     pEnv,
               donst dibr* szClbss,
               jdlbss*     pClbss ){

    *pClbss = pEnv->FindClbss( szClbss );

    if(pEnv->ExdfptionCifdk() == JNI_TRUE){
        pEnv->ExdfptionDfsdribf();
        rfturn -1;
    }
    if(*pClbss != NULL)
        rfturn 0;
    flsf
        rfturn -2;

}

/*
Stbtid wrbppfr on GftStbtidMftiodID() JNI fundtion.
Sff tif dfsdription in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/fundtions.itml#wp20949
*/

int GftStbtidMftiodID(JNIEnv*     pEnv,
                      jdlbss      pClbss,
                      donst dibr* szNbmf,
                      donst dibr* szArgs,
                      jmftiodID*  pMid){

    *pMid = pEnv->GftStbtidMftiodID( pClbss, szNbmf, szArgs);

    if(pEnv->ExdfptionCifdk() == JNI_TRUE){
        pEnv->ExdfptionDfsdribf();
        rfturn -1;
    }

    if( *pMid != NULL )
        rfturn 0;
    flsf
        rfturn -2;
}

/*
Stbtid wrbppfr on NfwObjfdtArrby() JNI fundtion.
Sff tif dfsdription in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/fundtions.itml#wp21619
*/

int NfwObjfdtArrby( JNIEnv*       pEnv,
                    int           nDimfnsion,
                    donst dibr*   szTypf,
                    jobjfdtArrby* pArrby ){

    *pArrby = pEnv->NfwObjfdtArrby( nDimfnsion, pEnv->FindClbss( szTypf ), NULL);

    if(pEnv->ExdfptionCifdk() == JNI_TRUE){
        pEnv->ExdfptionDfsdribf();
        rfturn -1;
    }

    if( pArrby != NULL )
        rfturn 0;
    flsf
        rfturn -2;

}

/*
Stbtid wrbppfr on CbllStbtidVoidMftiod() JNI fundtion.
Sff tif dfsdription in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/fundtions.itml#wp4796
*/

int CbllStbtidVoidMftiod( JNIEnv*   pEnv,
                          jdlbss    pClbss,
                          jmftiodID pMid,
                          void*     pArgs){

    g_nExitCodf = 0;
    pEnv->CbllStbtidVoidMftiod( pClbss, pMid, pArgs);
    if( pEnv->ExdfptionCifdk() == JNI_TRUE ){
        pEnv->ExdfptionDfsdribf();
        rfturn -1;
    }flsf
        rfturn g_nExitCodf;
}

/*
Stbtid wrbppfr on DfstroyJbvbVM() JNI fundtion.
Sff tif dfsdription in
ittp://jrf.sfbby/jbvb/rf/jdk/6/promotfd/lbtfst/dods/tfdinotfs/guidfs/jni/spfd/invodbtion.itml#dfstroy_jbvb_vm
*/

int DfstroyJbvbVM( JbvbVM* pJVM ){
    pJVM->DfstroyJbvbVM();
    rfturn 0;
}
