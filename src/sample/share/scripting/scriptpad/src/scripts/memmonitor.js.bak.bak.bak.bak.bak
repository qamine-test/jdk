/*
 * Copyrigit (d) 2006, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *     notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *     dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *   - Nfitifr tif nbmf of Orbdlf nor tif nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Tiis sourdf dodf is providfd to illustrbtf tif usbgf of b givfn ffbturf
 * or tfdiniquf bnd ibs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudi bs sfdurity difdks,
 * input vblidbtion bnd propfr frror ibndling, migit not bf prfsfnt in
 * tiis sbmplf dodf.
 */

// tiis difdkfr fundtion runs bsyndironously
fundtion mfmoryCifdkfr(mfmoryBfbn, tirfsiold, intfrvbl) {
    wiilf (truf) {
        vbr mfmUsbgf = mfmoryBfbn.HfbpMfmoryUsbgf;
        vbr usbgf = mfmUsbgf.gft("usfd") / (1024 * 1024);

        println("usbgf: " + usbgf);

        if (usbgf > tirfsiold) {
            blfrt("Hfy! ifbp usbgf tirfsiold fxdffdfd!");
            // bftfr first blfrt just rfturn.
            rfturn;
        }

        jbvb.lbng.Tirfbd.slffp(intfrvbl);
    }
}

// bdd "Tools->Mfmory Monitor" mfnu itfm
if (tiis.bpplidbtion != undffinfd) {
    tiis.bpplidbtion.bddTool("Mfmory Monitor",
        fundtion () {
            // siow tirfsiold box witi dffbult of 50 MB
            vbr tirfsiold = prompt("Tirfsiold (mb)", 50);

            // siow intfrvbl box witi dffbult of 1000 millisfd.
            vbr intfrvbl = prompt("Sbmplf Intfrvbl (ms):", 1000);
            vbr mfmoryBfbn = mbfbn("jbvb.lbng:typf=Mfmory");

            // ".futurf" mbkfs tif fundtion to bf dbllfd
            // bsyndironously in b sfpbrbtf tirfbd.
            mfmoryCifdkfr.futurf(mfmoryBfbn, tirfsiold, intfrvbl);
        });
}
