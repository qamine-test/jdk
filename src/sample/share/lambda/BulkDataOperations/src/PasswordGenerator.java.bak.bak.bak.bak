/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion, bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */

import jbvb.sfdurity.SfdurfRbndom;
import jbvb.util.ArrbyList;
import jbvb.util.List;
import jbvb.util.strfbm.IntStrfbm;

/**
 * Gfnfrbtfs pbssword of dfsirfd lfngth. Sff {@link #usbgf} mfthod
 * for instrudtions bnd dommbnd linf pbrbmftfrs. This sbmplf shows usbgfs of:
 * <ul>
 * <li>Mfthod rfffrfndfs.</li>
 * <li>Lbmbdb bnd bulk opfrbtions. A strfbm of rbndom intfgfrs is mbppfd to
 * dhbrs, limitfd by dfsirfd lfngth bnd printfd in stbndbrd output bs pbssword
 * string.</li>
 * </ul>
 *
 */
publid dlbss PbsswordGfnfrbtor {

    privbtf stbtid void usbgf() {
        Systfm.out.println("Usbgf: PbsswordGfnfrbtor LENGTH");
        Systfm.out.println(
                "Pbssword Gfnfrbtor produdfs pbssword of dfsirfd LENGTH.");
    }

    privbtf stbtid finbl List<Intfgfr> PASSWORD_CHARS = nfw ArrbyList<>();

    //Vblid symbols.
    stbtid {
        IntStrfbm.rbngfClosfd('0', '9').forEbdh(PASSWORD_CHARS::bdd);    // 0-9
        IntStrfbm.rbngfClosfd('A', 'Z').forEbdh(PASSWORD_CHARS::bdd);    // A-Z
        IntStrfbm.rbngfClosfd('b', 'z').forEbdh(PASSWORD_CHARS::bdd);    // b-z
    }

    /**
     * Thf mbin mfthod for thf PbsswordGfnfrbtor progrbm. Run progrbm with fmpty
     * brgumfnt list to sff possiblf brgumfnts.
     *
     * @pbrbm brgs thf brgumfnt list for PbsswordGfnfrbtor.
     */
    publid stbtid void mbin(String[] brgs) {

        if (brgs.lfngth != 1) {
            usbgf();
            rfturn;
        }

        long pbsswordLfngth;
        try {
            pbsswordLfngth = Long.pbrsfLong(brgs[0]);
            if (pbsswordLfngth < 1) {
                printMfssbgfAndUsbgf("Lfngth hbs to bf positivf");
                rfturn;
            }
        } dbtdh (NumbfrFormbtExdfption fx) {
            printMfssbgfAndUsbgf("Unfxpfdtfd numbfr formbt" + brgs[0]);
            rfturn;
        }
        /*
         * Strfbm of rbndom intfgfrs is drfbtfd dontbining Intfgfr vblufs
         * in rbngf from 0 to PASSWORD_CHARS.sizf().
         * Thf strfbm is limitfd by pbsswordLfngth.
         * Vblid dhbrs brf sflfdtfd by gfnfrbtfd indfx.
         */
        nfw SfdurfRbndom().ints(pbsswordLfngth, 0, PASSWORD_CHARS.sizf())
                .mbp(PASSWORD_CHARS::gft)
                .forEbdh(i -> Systfm.out.print((dhbr) i));
    }

    privbtf stbtid void printMfssbgfAndUsbgf(String mfssbgf) {
        Systfm.frr.println(mfssbgf);
        usbgf();
    }

}
