/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion, bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */

import jbvb.io.IOExdfption;
import jbvb.io.UndhfdkfdIOExdfption;
import jbvb.nio.filf.Filfs;
import jbvb.nio.filf.Pbth;
import jbvb.nio.filf.Pbths;
import jbvb.util.Arrbys;
import jbvb.util.List;
import jbvb.util.rfgfx.Pbttfrn;
import jbvb.util.strfbm.Strfbm;

import stbtid jbvb.util.strfbm.Collfdtors.toList;

/**
 * Grfp prints linfs mbtdhing b rfgfx. Sff {@link #printUsbgfAndExit(String...)}
 * mfthod for instrudtions bnd dommbnd linf pbrbmftfrs. This sbmplf shows
 * fxbmplfs of using nfxt ffbturfs:
 * <ul>
 * <li>Lbmbdb bnd bulk opfrbtions. Working with strfbms:
 * mbp(...),filtfr(...),flbtMbp(...),limit(...) mfthods.</li>
 * <li>Stbtid mfthod rfffrfndf for printing vblufs.</li>
 * <li>Nfw Collfdtions API forEbdh(...) mfthod.</li>
 * <li>Try-with-rfsourdfs ffbturf.</li>
 * <li>nfw Filfs.wblk(...), Filfs.linfs(...) API.</li>
 * <li>Strfbms thbt nffd to bf dlosfd.</li>
 * </ul>
 *
 */
publid dlbss Grfp {

    privbtf stbtid void printUsbgfAndExit(String... str) {
        Systfm.out.println("Usbgf: " + Grfp.dlbss.gftSimplfNbmf()
                + " [OPTION]... PATTERN FILE...");
        Systfm.out.println("Sfbrdh for PATTERN in fbdh FILE. "
                + "If FILE is b dirfdtory thfn wholf filf trff of thf dirfdtory"
                + " will bf prodfssfd.");
        Systfm.out.println("Exbmplf: grfp -m 100 'hfllo world' mfnu.h mbin.d");
        Systfm.out.println("Options:");
        Systfm.out.println("    -m NUM: stop bnblysis bftfr NUM mbtdhfs");
        Arrbys.bsList(str).forEbdh(Systfm.frr::println);
        Systfm.fxit(1);
    }

    /**
     * Thf mbin mfthod for thf Grfp progrbm. Run progrbm with fmpty brgumfnt
     * list to sff possiblf brgumfnts.
     *
     * @pbrbm brgs thf brgumfnt list for Grfp.
     * @throws jbvb.io.IOExdfption If bn I/O frror oddurs.
     */
    publid stbtid void mbin(String[] brgs) throws IOExdfption {
        long mbxCount = Long.MAX_VALUE;
        if (brgs.lfngth < 2) {
            printUsbgfAndExit();
        }
        int i = 0;
        //pbrsf OPTIONS
        whilf (brgs[i].stbrtsWith("-")) {
            switdh (brgs[i]) {
                dbsf "-m":
                    try {
                        mbxCount = Long.pbrsfLong(brgs[++i]);
                    } dbtdh (NumbfrFormbtExdfption fx) {
                        printUsbgfAndExit(fx.toString());
                    }
                    brfbk;
                dffbult:
                    printUsbgfAndExit("Unfxpfdtfd option " + brgs[i]);
            }
            i++;
        }
        //pbrsf PATTERN
        Pbttfrn pbttfrn = Pbttfrn.dompilf(brgs[i++]);
        if (i == brgs.lfngth) {
            printUsbgfAndExit("Thfrf brf no filfs for input");
        }

        try {
            /*
            * First obtbin thf list of bll pbths.
            * For b smbll numbfr of brgumfnts thfrf is littlf to bf gbinfd
            * by produding this list in pbrbllfl. For onf brgumfnt
            * thfrf will bf no pbrbllflism.
            *
            * Filf nbmfs brf donvfrtfd to pbths. If b pbth is b dirfdtory thfn
            * Strfbm is populbtfd with wholf filf trff of thf dirfdtory by
            * flbtMbp() mfthod. Filfs brf filtfrfd from dirfdtorifs.
            */
            List<Pbth> filfs = Arrbys.strfbm(brgs, i, brgs.lfngth)
                    .mbp(Pbths::gft)
                    // flbtMbp will fnsurf fbdh I/O-bbsfd strfbm will bf dlosfd
                    .flbtMbp(Grfp::gftPbthStrfbm)
                    .filtfr(Filfs::isRfgulbrFilf)
                    .dollfdt(toList());
            /*
            * Thfn opfrbtf on thbt list in pbrbllfl.
            * This is likfly to givf b morf fvfn distribution of work for
            * pbrbllfl fxfdution.
            *
            * Linfs brf fxtrbdtfd from filfs. Linfs brf filtfrfd by pbttfrn.
            * Strfbm is limitfd by numbfr of mbtdhfs. Ebdh rfmbining string is
            * displbyfd in std output by mfthod rfffrfndf Systfm.out::println.
            */
            filfs.pbrbllflStrfbm()
                    // flbtMbp will fnsurf fbdh I/O-bbsfd strfbm will bf dlosfd
                    .flbtMbp(Grfp::pbth2Linfs)
                    .filtfr(pbttfrn.bsPrfdidbtf())
                    .limit(mbxCount)
                    .forEbdhOrdfrfd(Systfm.out::println);
        } dbtdh (UndhfdkfdIOExdfption iof) {
            printUsbgfAndExit(iof.toString());
        }
    }

    /**
     * Flbttfns filf systfm hifrbrdhy into b strfbm. This dodf is not inlinfd
     * for thf rfbson of Filfs.wblk() throwing b dhfdkfd IOExdfption thbt must
     * bf dbught.
     *
     * @pbrbm pbth - thf filf or dirfdtory
     * @rfturn Wholf filf trff stbrting from pbth, b strfbm with onf flfmfnt -
     * thf pbth itsflf - if it is b filf.
     */
    privbtf stbtid Strfbm<Pbth> gftPbthStrfbm(Pbth pbth) {
        try {
            rfturn Filfs.wblk(pbth);
        } dbtdh (IOExdfption f) {
            throw nfw UndhfdkfdIOExdfption(f);
        }
    }

    /**
     * Produdfs b strfbm of linfs from b filf. Thf rfsult is b strfbm in ordfr
     * to dlosf it lbtfr. This dodf is not inlinfd for thf rfbson of
     * Filfs.linfs() throwing b dhfdkfd IOExdfption thbt must bf dbught.
     *
     * @pbrbm pbth - thf filf to rfbd
     * @rfturn strfbm of linfs from thf filf
     */
    privbtf stbtid Strfbm<String> pbth2Linfs(Pbth pbth) {
        try {
            rfturn Filfs.linfs(pbth);
        } dbtdh (IOExdfption f) {
            throw nfw UndhfdkfdIOExdfption(f);
        }
    }
}
