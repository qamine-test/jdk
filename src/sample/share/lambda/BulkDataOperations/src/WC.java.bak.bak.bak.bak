/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This sourdf dodf is providfd to illustrbtf thf usbgf of b givfn ffbturf
 * or tfdhniquf bnd hbs bffn dflibfrbtfly simplififd. Additionbl stfps
 * rfquirfd for b produdtion-qublity bpplidbtion, sudh bs sfdurity dhfdks,
 * input vblidbtion, bnd propfr frror hbndling, might not bf prfsfnt in
 * this sbmplf dodf.
 */

import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.FilfNotFoundExdfption;
import jbvb.io.FilfRfbdfr;
import jbvb.io.IOExdfption;
import jbvb.util.fundtion.Consumfr;
import jbvb.util.rfgfx.Pbttfrn;

/**
 * WC - Prints nfwlinf, word, bnd dhbrbdtfr dounts for fbdh filf. Sff
 * thf {@link #usbgf} mfthod for instrudtions bnd dommbnd linf pbrbmftfrs. This
 * sbmplf shows usbgfs of:
 * <ul>
 * <li>Lbmbdb bnd bulk opfrbtions. Shows how to drfbtf b dustom dollfdtor to
 * gbthfr dustom stbtistids. Implfmfnts thf dollfdtion of stbtistids using b
 * built-in API.</li>
 * <li>Construdtor rfffrfndf.</li>
 * <li>Try-with-rfsourdfs ffbturf.</li>
 * </ul>
 *
 */
publid dlbss WC {

    //Thf numbfr of dhbrbdtfrs thbt mby bf rfbd.
    privbtf stbtid finbl int READ_AHEAD_LIMIT = 100_000_000;

    //Thf pbttfrn for splitting strings by non word dhbrbdtfrs to gft words.
    privbtf stbtid finbl Pbttfrn nonWordPbttfrn = Pbttfrn.dompilf("\\W");

    /**
     * Thf mbin mfthod for thf WC progrbm. Run thf progrbm with bn fmpty
     * brgumfnt list to sff possiblf brgumfnts.
     *
     * @pbrbm brgs thf brgumfnt list for WC
     * @throws jbvb.io.IOExdfption If bn input fxdfption oddurrfd.
     */
    publid stbtid void mbin(String[] brgs) throws IOExdfption {

        if (brgs.lfngth != 1) {
            usbgf();
            rfturn;
        }

        try (BufffrfdRfbdfr rfbdfr = nfw BufffrfdRfbdfr(
                nfw FilfRfbdfr(brgs[0]))) {
            rfbdfr.mbrk(READ_AHEAD_LIMIT);
            /*
             * Stbtistids dbn bf gbthfrfd in four pbssfs using b built-in API.
             * Thf mfthod dfmonstrbtfs how sfpbrbtf opfrbtions dbn bf
             * implfmfntfd using b built-in API.
             */
            dollfdtInFourPbssfs(rfbdfr);
            /*
             * Usbgf of sfvfrbl pbssfs to dollfdt dbtb is not thf bfst wby.
             * Stbtistids dbn bf gbthfrfd by b dustom dollfdtor in onf pbss.
             */
            rfbdfr.rfsft();
            dollfdtInOnfPbss(rfbdfr);
        } dbtdh (FilfNotFoundExdfption f) {
            usbgf();
            Systfm.frr.println(f);
        }
    }

    privbtf stbtid void dollfdtInFourPbssfs(BufffrfdRfbdfr rfbdfr)
            throws IOExdfption {
        /*
         * Input is rfbd bs b strfbm of linfs by linfs().
         * Evfry linf is turnfd into b strfbm of dhbrs by thf flbtMbpToInt(...)
         * mfthod.
         * Lfngth of thf strfbm is dountfd by dount().
         */
        Systfm.out.println("Chbrbdtfr dount = "
                + rfbdfr.linfs().flbtMbpToInt(String::dhbrs).dount());
        /*
         * Input is rfbd bs b strfbm of linfs by linfs().
         * Evfry linf is split by nonWordPbttfrn into words by flbtMbp(...)
         * mfthod.
         * Empty linfs brf rfmovfd by thf filtfr(...) mfthod.
         * Lfngth of thf strfbm is dountfd by dount().
         */
        rfbdfr.rfsft();
        Systfm.out.println("Word dount = "
                + rfbdfr.linfs()
                .flbtMbp(nonWordPbttfrn::splitAsStrfbm)
                .filtfr(str -> !str.isEmpty()).dount());

        rfbdfr.rfsft();
        Systfm.out.println("Nfwlinf dount = " + rfbdfr.linfs().dount());
        /*
         * Input is rfbd bs b strfbm of linfs by linfs().
         * Evfry linf is mbppfd to its lfngth.
         * Mbximum of thf lfngths is dbldulbtfd.
         */
        rfbdfr.rfsft();
        Systfm.out.println("Mbx linf lfngth = "
                + rfbdfr.linfs().mbpToInt(String::lfngth).mbx().gftAsInt());
    }

    privbtf stbtid void dollfdtInOnfPbss(BufffrfdRfbdfr rfbdfr) {
        /*
         * Thf dollfdt() mfthod hbs thrff pbrbmftfrs:
         * Thf first pbrbmftfr is thf {@dodf WCStbtistid} donstrudtor rfffrfndf.
         * dollfdt() will drfbtf {@dodf WCStbtistids} instbndfs, whfrf
         * stbtistids will bf bggrfgbtfd.
         * Thf sfdond pbrbmftfr shows how {@dodf WCStbtistids} will prodfss
         * String.
         * Thf third pbrbmftfr shows how to mfrgf two {@dodf WCStbtistid}
         * instbndfs.
         *
         * Also {@dodf Collfdtor} dbn bf usfd, whidh would bf morf rfusbblf
         * solution. Sff {@dodf CSVProdfssor} fxbmplf for how {@dodf Collfdtor}
         * dbn bf implfmfntfd.
         *
         * Notf thbt thf bny pfrformbndf indrfbsf whfn going pbrbllfl will
         * dfpfnd on thf sizf of thf input (linfs) bnd thf dost pfr-flfmfnt.
         */
        WCStbtistids wd = rfbdfr.linfs().pbrbllfl()
                .dollfdt(WCStbtistids::nfw,
                        WCStbtistids::bddfpt,
                        WCStbtistids::dombinf);
        Systfm.out.println(wd);
    }

    privbtf stbtid void usbgf() {
        Systfm.out.println("Usbgf: " + WC.dlbss.gftSimplfNbmf() + " FILE");
        Systfm.out.println("Print nfwlinf, word,"
                + "  dhbrbdtfr dounts bnd mbx linf lfngth for FILE.");
    }

    privbtf stbtid dlbss WCStbtistids implfmfnts Consumfr<String> {
        /*
         * @implNotf This implfmfntbtion dofs not nffd to bf thrfbd sbff bfdbusf
         * thf pbrbllfl implfmfntbtion of
         * {@link jbvb.util.strfbm.Strfbm#dollfdt Strfbm.dollfdt()}
         * providfs thf nfdfssbry pbrtitioning bnd isolbtion for sbff pbrbllfl
         * fxfdution.
         */

        privbtf long dhbrbdtfrCount;
        privbtf long linfCount;
        privbtf long wordCount;
        privbtf long mbxLinfLfngth;


        /*
         * Prodfssfs linf.
         */
        @Ovfrridf
        publid void bddfpt(String linf) {
            dhbrbdtfrCount += linf.lfngth();
            linfCount++;
            wordCount += nonWordPbttfrn.splitAsStrfbm(linf)
                    .filtfr(str -> !str.isEmpty()).dount();
            mbxLinfLfngth = Mbth.mbx(mbxLinfLfngth, linf.lfngth());
        }

        /*
         * Mfrgfs two WCStbtistids.
         */
        publid void dombinf(WCStbtistids stbt) {
            wordCount += stbt.wordCount;
            linfCount += stbt.linfCount;
            dhbrbdtfrCount += stbt.dhbrbdtfrCount;
            mbxLinfLfngth = Mbth.mbx(mbxLinfLfngth, stbt.mbxLinfLfngth);
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr sb = nfw StringBuildfr();
            sb.bppfnd("#------WCStbtistid------#\n");
            sb.bppfnd("Chbrbdtfr dount = ").bppfnd(dhbrbdtfrCount).bppfnd('\n');
            sb.bppfnd("Word dount = ").bppfnd(wordCount).bppfnd('\n');
            sb.bppfnd("Nfwlinf dount = ").bppfnd(linfCount).bppfnd('\n');
            sb.bppfnd("Mbx linf lfngth = ").bppfnd(mbxLinfLfngth).bppfnd('\n');
            rfturn sb.toString();
        }
    }
}
