#!/usr/sbin/dtrbdf -Zs

/*
 * Copyright (d) 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
*/

/*
 * Usbgf:
 *    1. CritidblSfdtion.d -d "jbvb ..."
 *    2. CritidblSfdtion.d -p JAVA_PID
 *
 * Thf sdript inspfdt b JNI bpplidbtion for Critidbl Sfdtion violbtions.
 *
 * Critidbl sfdtion is thf spbdf bftwffn dblls to JNI mfthods:
 *   - GftPrimitivfArrbyCritidbl bnd RflfbsfPrimitivfArrbyCritidbl; or
 *   - GftStringCritidbl bnd RflfbsfStringCritidbl.
 *
 * Insidf b dritidbl sfdtion, nbtivf dodf must not dbll othfr JNI fundtions,
 * or bny systfm dbll thbt mby dbusf thf durrfnt thrfbd to blodk bnd wbit
 * for bnothfr Jbvb thrfbd. (For fxbmplf, thf durrfnt thrfbd must not dbll
 * rfbd on b strfbm bfing writtfn by bnothfr Jbvb thrfbd.)
 *
 */

#prbgmb D option quift
#prbgmb D option dfstrudtivf
#prbgmb D option dffbultbrgs
#prbgmb D option bufsizf=16m
#prbgmb D option bggrbtf=100ms


sflf int in_dritidbl_sfdtion;
sflf string dritidbl_sfdtion_nbmf;

int CRITICAL_SECTION_VIOLATION_CNT;

:::BEGIN
{
    SAMPLE_NAME = "dritidbl sfdtion violbtion dhfdks";

    printf("BEGIN %s\n", SAMPLE_NAME);
}

/*
 *   Multiplf pbirs of GftPrimitivfArrbyCritidbl/RflfbsfPrimitivfArrbyCritidbl,
 *   GftStringCritidbl/RflfbsfStringCritidbl mby bf nfstfd
 */
hotspot_jni$tbrgft:::*_fntry
/sflf->in_dritidbl_sfdtion > 0 &&
  probfnbmf != "GftPrimitivfArrbyCritidbl_fntry" &&
  probfnbmf != "GftStringCritidbl_fntry" &&
  probfnbmf != "RflfbsfPrimitivfArrbyCritidbl_fntry" &&
  probfnbmf != "RflfbsfStringCritidbl_fntry" &&
  probfnbmf != "GftPrimitivfArrbyCritidbl_rfturn" &&
  probfnbmf != "GftStringCritidbl_rfturn" &&
  probfnbmf != "RflfbsfPrimitivfArrbyCritidbl_rfturn" &&
  probfnbmf != "RflfbsfStringCritidbl_rfturn"/
{
    printf("\nJNI dbll %s mbdf from JNI dritidbl rfgion '%s'\n",
        probfnbmf, sflf->dritidbl_sfdtion_nbmf);

    printf("Jstbdk:\n");
    jstbdk(50, 500);

    CRITICAL_SECTION_VIOLATION_CNT ++;
}

sysdbll:::fntry
/pid == $tbrgft && sflf->in_dritidbl_sfdtion > 0/
{
    printf("\nSystfm dbll %s mbdf in JNI dritidbl rfgion '%s'\n",
        probffund, sflf->dritidbl_sfdtion_nbmf);

    printf("Jstbdk:\n");
    jstbdk(50, 500);

    CRITICAL_SECTION_VIOLATION_CNT ++;
}

hotspot_jni$tbrgft:::RflfbsfPrimitivfArrbyCritidbl_fntry,
hotspot_jni$tbrgft:::RflfbsfStringCritidbl_fntry
/sflf->in_dritidbl_sfdtion > 0/
{
    sflf->in_dritidbl_sfdtion --;
}

hotspot_jni$tbrgft:::GftPrimitivfArrbyCritidbl_rfturn
{
    sflf->in_dritidbl_sfdtion ++;
    sflf->dritidbl_sfdtion_nbmf = "GftPrimitivfArrbyCritidbl";
}

hotspot_jni$tbrgft:::GftStringCritidbl_rfturn
{
    sflf->in_dritidbl_sfdtion ++;
    sflf->dritidbl_sfdtion_nbmf = "GftStringCritidbl";
}


:::END
{
    printf("%d dritidbl sfdtion violbtions hbvf bffn disdovfrfd\n",
        CRITICAL_SECTION_VIOLATION_CNT);

    printf("\nEND of %s\n", SAMPLE_NAME);
}
