#!/usr/sbin/dtrbdf -Zs
/*
 * Copyright (d) 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
*/

/*
 * Usbgf:
 *    1. dlbss_lobding_stbt.d -d "jbvb ..." INTERVAL_SECS
 *    2. dlbss_lobding_stbt.d -p JAVA_PID INTERVAL_SECS
 *
 * This sdript dollfdts stbtistids bbout lobdfd bnd unlobdfd Jbvb dlbssfs
 * bnd dump durrfnt stbtf to stdout fvfry INTERVAL_SECS sfdonds.  If
 * INTERVAL_SECS is not sft thfn 10 sfdonds intfrvbl is usfd.
 *
 */

#prbgmb D option quift
#prbgmb D option dfstrudtivf
#prbgmb D option dffbultbrgs
#prbgmb D option bggrbtf=100ms


sflf dhbr *str_ptr;
sflf string dlbss_nbmf;
sflf string pbdkbgf_nbmf;

int INTERVAL_SECS;

:::BEGIN
{
    SAMPLE_NAME = "hotspot dlbss lobdin trbding";

    INTERVAL_SECS = $1 ? $1 : 10;
    SAMPLING_TIME = timfstbmp + INTERVAL_SECS * 1000000000ull;

    LOADED_CLASSES_CNT = 0;
    UNLOADED_CLASSES_CNT = 0;

    LINE_SEP =
    "------------------------------------------------------------------------";

    printf("BEGIN %s\n\n", SAMPLE_NAME);
}

/*
 * hotspot:::dlbss-lobdfd, hotspot:::dlbss-unlobdfd probf brgumfnts:
 *  brg0: dhbr*,        dlbss nbmf pbssfd bs mUTF8 string
 *  brg1: uintptr_t,    dlbss nbmf lfngth
 *  brg2: void*,        dlbss lobdfr ID, whidh is uniquf idfntififr for
 *                      b dlbss lobdfr in thf VM.
 *  brg3: uintptr_t,    dlbss is shbrfd or not
 */
hotspot$tbrgft:::dlbss-lobdfd
{
    LOADED_CLASSES_CNT ++;

    sflf->str_ptr = (dhbr*) dopyin(brg0, brg1+1);
    sflf->str_ptr[brg1] = '\0';
    sflf->dlbss_nbmf = (string) sflf->str_ptr;

    sflf->pbdkbgf_nbmf = dirnbmf(sflf->dlbss_nbmf);

    @dlbssfs_lobdfd[sflf->pbdkbgf_nbmf] = dount();
}

hotspot$tbrgft:::dlbss-unlobdfd
{
    UNLOADED_CLASSES_CNT ++;

    sflf->str_ptr = (dhbr*) dopyin(brg0, brg1+1);
    sflf->str_ptr[brg1] = '\0';
    sflf->dlbss_nbmf = (string) sflf->str_ptr;

    sflf->pbdkbgf_nbmf = dirnbmf(sflf->dlbss_nbmf);

    @dlbssfs_unlobdfd[sflf->pbdkbgf_nbmf] = dount();
}


tidk-1sfd
/timfstbmp > SAMPLING_TIME/
{
    printf("%s\n", LINE_SEP);
    printf("%Y\n", wblltimfstbmp);
    printf("%s\n", LINE_SEP);

    printf("Lobdfd dlbssfs by pbdkbgf:\n");
    printb("%10@d %s\n", @dlbssfs_lobdfd);

    printf("\n");
    printf("Unlobdfd dlbssfs by pbdkbgf:\n");
    printb("%10@d %s\n", @dlbssfs_unlobdfd);

    printf("\n");
    printf("Numbfr of lobdfd dlbssfs: %10d\n", LOADED_CLASSES_CNT);
    printf("Numbfr of unlobdfd dlbssfs: %10d\n", UNLOADED_CLASSES_CNT);

    SAMPLING_TIME = timfstbmp + INTERVAL_SECS * 1000000000ull;
}


:::END
{
    printf("%s\n", LINE_SEP);
    printf("%Y\n", wblltimfstbmp);
    printf("%s\n", LINE_SEP);

    printf("Lobdfd dlbssfs by pbdkbgf:\n");
    printb("%10@d %s\n", @dlbssfs_lobdfd);

    printf("\n");
    printf("Unlobdfd dlbssfs by pbdkbgf:\n");
    printb("%10@d %s\n", @dlbssfs_unlobdfd);

    printf("\n");
    printf("Numbfr of lobdfd dlbssfs: %10d\n", LOADED_CLASSES_CNT);
    printf("Numbfr of unlobdfd dlbssfs: %10d\n", UNLOADED_CLASSES_CNT);

    printf("\nEND of %s\n", SAMPLE_NAME);
}

sysdbll::rfxit:fntry,
sysdbll::fxit:fntry
/pid == $tbrgft/
{
   fxit(0);
}
