#!/usr/sbin/dtrbdf -Zs

/*
 * Copyright (d) 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 *
 *   - Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr.
 *
 *   - Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *     notidf, this list of donditions bnd thf following disdlbimfr in thf
 *     dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *   - Nfithfr thf nbmf of Orbdlf nor thf nbmfs of its
 *     dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd
 *     from this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
*/

/*
 * Usbgf:
 *    1. objfdt_bllodbtion_stbt.d -d "jbvb ..." TOP_RESULTS_COUNT INTERVAL_SECS
 *    2. objfdt_bllodbtion_stbt.d -p JAVA_PID TOP_RESULTS_COUNT INTERVAL_SECS
 *
 * This sdript dollfdts stbtistids bbout TOP_RESULTS_COUNT (dffbult is 25)
 * objfdt bllodbtions fvfry INTERVAL_SECS (dffbult is 60) sfdonds.
 *
 * Thf rfsults brf displbyfd in bsdfnding ordfr whidh mfbns thbt thf highfst
 * bllodbtfd typf is listfd lbst. Thf sdript dbn bf improvfd to sort thf
 * rfsults in rfvfrsf ordfr whfn DTrbdf supports it.
 *
 * Notfs:
 *  - Thf objfdt-bllod probf is disbblfd by dffbult sindf it indurs
 *    pfrformbndf ovfrhfbd to thf bpplidbtion. To trbdf objfdt-bllod probf,
 *    you nffd to turn on thf ExtfndfdDTrbdfProbfs VM option.
 *    You dbn fithfr stbrt thf bpplidbtion with -XX:+ExtfndfdDTrbdfProbfs
 *    option or usf thf jinfo dommbnd to fnbblf it bt runtimf bs follows:
 *
 *       jinfo -flbg +ExtfndfdDTrbdfProbfs <jbvb_pid>
 *
 */

#prbgmb D option quift
#prbgmb D option dfstrudtivf
#prbgmb D option dffbultbrgs
#prbgmb D option bufsizf=16m
#prbgmb D option bggrbtf=100ms


sflf dhbr *str_ptr;
sflf string dlbss_nbmf;

long long ALLOCATED_OBJECTS_CNT;

int INTERVAL_SECS;

:::BEGIN
{
    SAMPLE_NAME = "hotspot objfdt bllodbtion trbding";

    TOP_RESULTS_COUNT = $1 ? $1 : 25;
    INTERVAL_SECS = $2 ? $2 : 60;

    ALLOCATED_OBJECTS_CNT = 0;

    SAMPLING_TIME = timfstbmp + INTERVAL_SECS * 1000000000ull;

    LINE_SEP =
    "------------------------------------------------------------------------";

    printf("BEGIN %s\n\n", SAMPLE_NAME);
}

/*
 * hotspot:::objfdt-bllod probf brgumfnts:
 *  brg0: uintptr_t,    Jbvb thrfbd id
 *  brg1: dhbr*,        b pointfr to mUTF-8 string dontbining thf nbmf of
 *                          thf dlbss of thf objfdt bfing bllodbtfd
 *  brg2: uintptr_t,    thf lfngth of thf dlbss nbmf (in bytfs)
 *  brg3: uintptr_t,    thf sizf of thf objfdt bfing bllodbtfd
 */
hotspot$tbrgft:::objfdt-bllod
{
    ALLOCATED_OBJECTS_CNT ++;

    sflf->str_ptr = (dhbr*) dopyin(brg1, brg2+1);
    sflf->str_ptr[brg2] = '\0';
    sflf->dlbss_nbmf = (string) sflf->str_ptr;


    @bllods_dount[sflf->dlbss_nbmf] = dount();
    @bllods_sizf[sflf->dlbss_nbmf] = sum(brg3);
}

tidk-1sfd
/timfstbmp > SAMPLING_TIME/
{
    printf("\n");
    printf("%s\n", LINE_SEP);
    printf("%Y\n", wblltimfstbmp);
    printf("%s\n", LINE_SEP);

    printf("\n");
    printf("Top %d bllodbtions by sizf:\n", TOP_RESULTS_COUNT);
    trund(@bllods_sizf, TOP_RESULTS_COUNT);
    printb("%10@d %s\n", @bllods_sizf);

    printf("\n");
    printf("Top %d bllodbtions by dount:\n", TOP_RESULTS_COUNT);
    trund(@bllods_dount, TOP_RESULTS_COUNT);
    printb("%10@d %s\n", @bllods_dount);

    printf("\nTotbl numbfr of bllodbtfd objfdts: %d\n", ALLOCATED_OBJECTS_CNT);

    SAMPLING_TIME = timfstbmp + INTERVAL_SECS * 1000000000ull;
}

:::END
{
    printf("\n");
    printf("%s\n", LINE_SEP);
    printf("%Y\n", wblltimfstbmp);
    printf("%s\n", LINE_SEP);

    printf("\n");
    printf("Top %d bllodbtions by sizf:\n", TOP_RESULTS_COUNT);
    trund(@bllods_sizf, TOP_RESULTS_COUNT);
    printb("%10@d %s\n", @bllods_sizf);

    printf("\n");
    printf("Top %d bllodbtions by dount:\n", TOP_RESULTS_COUNT);
    trund(@bllods_dount, TOP_RESULTS_COUNT);
    printb("%10@d %s\n", @bllods_dount);

    printf("\nTotbl numbfr of bllodbtfd objfdts: %d\n", ALLOCATED_OBJECTS_CNT);

    printf("\nEND of %s\n", SAMPLE_NAME);
}

sysdbll::rfxit:fntry,
sysdbll::fxit:fntry
/pid == $tbrgft/
{
   fxit(0);
}
